VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.box = "ubuntu/focal64"
  config.vm.hostname = "focal-trimmer"
  config.vm.network "private_network", ip: "192.168.2.2" , netmask: "255.255.255.0"
  config.ssh.forward_agent = true
  config.ssh.forward_x11 = true

  config.vm.provider :virtualbox do |v|
    v.customize ["modifyvm", :id, "--memory", 32768]
    v.customize ["modifyvm", :id, "--cpus", 16]
    v.customize ["modifyvm", :id, "--ioapic", "on"]
    v.customize ["modifyvm", :id, "--uartmode1", "file", File::NULL]
  end

  config.vm.provision "shell", privileged:false, inline: <<-'SHELL'

    # Setup for SSH agent
    mkdir -p ~/.ssh
    chmod 700 ~/.ssh
    ssh-keyscan -H github.com >> ~/.ssh/known_hosts
    ssh -T git@github.com

    # Install Trimmer dependencies
    sudo apt-get update
    sudo apt-get install -y build-essential cmake git python3-pip wget

    # Download LLVM7 and Clang sources
    export LLVM_HOME=$HOME/LLVM
    mkdir $LLVM_HOME
    cd $LLVM_HOME
    wget https://releases.llvm.org/7.0.0/llvm-7.0.0.src.tar.xz 
    wget https://releases.llvm.org/7.0.0/cfe-7.0.0.src.tar.xz 
    tar xvf llvm-7.0.0.src.tar.xz
    tar xvf cfe-7.0.0.src.tar.xz
    mv cfe-7.0.0.src/ llvm-7.0.0.src/tools/clang

    # Build and install LLVM7 / Clang
    mkdir llvm-7.0.0.obj
    cd llvm-7.0.0.obj
    cmake -DCMAKE_BUILD_TYPE=MinSizeRel ../llvm-7.0.0.src
    make -j 16
    sudo make install

    # Setup environment
    export LLVM_SRC=$LLVM_HOME/llvm-7.0.0.src
    export LLVM_OBJ=$LLVM_HOME/llvm-7.0.0.obj
    export LLVM_DIR=$LLVM_HOME/llvm-7.0.0.obj
    export PATH=$LLVM_DIR/bin:$PATH

    # Download SVF
    cd $HOME
    git clone https://github.com/SVF-tools/SVF
    cd SVF
    #  Trimmer developed with below version
    git checkout 0b75f3e0c10db04d65b6eafd91da5da9be71ecaa

    # Add -fPIC to CMakeLists.txt in SVF
    sed -i '/set(CMAKE_CXX_FLAGS "-std=gnu++11 -O3 -fno-rtti")/c\\t\tset(CMAKE_CXX_FLAGS "-std=gnu++11 -O3 -fno-rtti -fPIC")' CMakeLists.txt 
    sed -i '/set(CMAKE_CXX_FLAGS "-std=gnu++11 -O0 -fno-rtti")/c\\t\tset(CMAKE_CXX_FLAGS "-std=gnu++11 -O0 -fno-rtti -fPIC")' CMakeLists.txt 
    sed -i '/set_target_properties(Cudd PROPERTIES COMPILE_FLAGS "-Wno-format -Wno-int-to-pointer-cast -Wno-pointer-to-int-cast -O3 -w -DHAVE_IEEE_754 -DSIZEOF_VOID_P=8 -DSIZEOF_LONG=8")/c\set_target_properties(Cudd PROPERTIES COMPILE_FLAGS "-Wno-format -Wno-int-to-pointer-cast -Wno-pointer-to-int-cast -O3 -w -DHAVE_IEEE_754 -DSIZEOF_VOID_P=8 -DSIZEOF_LONG=8 -fPIC")' lib/CUDD/CMakeLists.txt 
    sed -i '/set_target_properties(LLVMCudd PROPERTIES COMPILE_FLAGS "-Wno-format -Wno-int-to-pointer-cast -Wno-pointer-to-int-cast -O3 -w -DHAVE_IEEE_754 -DSIZEOF_VOID_P=8 -DSIZEOF_LONG=8")/c\set_target_properties(LLVMCudd PROPERTIES COMPILE_FLAGS "-Wno-format -Wno-int-to-pointer-cast -Wno-pointer-to-int-cast -O3 -w -DHAVE_IEEE_754 -DSIZEOF_VOID_P=8 -DSIZEOF_LONG=8 -fPIC")' lib/CUDD/CMakeLists.txt 

    # Build and install SVF
    mkdir Release-build
    cd Release-build
    cmake ..
    make -j 16
    sudo make install
    cd ../include/
    sudo cp -r * /usr/local/include/

    # Download Trimmer
    cd $HOME
    git clone git@github.com:ashish-gehani/Trimmer
    export TRIMMER_HOME=$HOME/Trimmer

    # Build Trimmer
    export LLVM_COMPILER=clang
    cd $TRIMMER_HOME
    mkdir build
    cd build
    cmake ..
    make

    # Install WLLVM
    pip3 install wllvm

  SHELL
end
