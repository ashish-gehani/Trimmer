; ModuleID = './aircrack/aircrack-ng_annotated.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.options = type { i32, i32, i32, [33 x i8], [6 x i8], i32, i32, [64 x i8], [64 x i32], [6 x i8], i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, [128 x i8*], %struct._IO_FILE*, i32, i32, [128 x i32], i32, i32, i32, i32, [17 x i32], [64 x i32], i32, i32, i8*, i8*, %struct.mergeBSSID*, %struct.AP_info*, i32, i32, i32, i32, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.mergeBSSID = type { [6 x i8], [2 x i8], i32, %struct.mergeBSSID* }
%struct.AP_info = type { %struct.AP_info*, [6 x i8], [33 x i8], [4 x i8], i8*, i8**, i64, i64, i64, i64, i32, i32, i32, %struct.ST_info*, %struct.WPA_hdsk, %struct.PTW_attackstate*, %struct.PTW_attackstate* }
%struct.ST_info = type { %struct.AP_info*, %struct.ST_info*, %struct.WPA_hdsk, [6 x i8] }
%struct.WPA_hdsk = type { [6 x i8], [32 x i8], [32 x i8], [16 x i8], [256 x i8], i32, i32, i32 }
%struct.PTW_attackstate = type { i32, [2097152 x i8], i32, [10000 x %struct.PTW_session], [29 x [256 x %struct.PTW_tableentry]], %struct.PTW_session*, i32 }
%struct.PTW_session = type { [3 x i8], [32 x i8], i32 }
%struct.PTW_tableentry = type { i32, i8 }
%struct.WEP_data = type { [64 x i8], i8*, i32, i64, i64, [64 x i32], [64 x i32], [64 x [256 x %struct.vote]] }
%struct.vote = type { i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%struct.timeval = type { i64, i64 }
%struct.WPA_data = type { %struct.AP_info*, i32, i32, i8*, i32, i32, [128 x i8], %union.pthread_cond_t, %union.pthread_mutex_t }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.env_md_st = type { i32, i32, i32, i64, i32 (%struct.env_md_ctx_st*)*, i32 (%struct.env_md_ctx_st*, i8*, i64)*, i32 (%struct.env_md_ctx_st*, i8*)*, i32 (%struct.env_md_ctx_st*, %struct.env_md_ctx_st*)*, i32 (%struct.env_md_ctx_st*)*, i32 (i32, i8*, i32, i8*, i32*, i8*)*, i32 (i32, i8*, i32, i8*, i32, i8*)*, [5 x i32], i32, i32, i32 (%struct.env_md_ctx_st*, i32, i32, i8*)* }
%struct.env_md_ctx_st = type { %struct.env_md_st*, %struct.engine_st*, i64, i8*, %struct.evp_pkey_ctx_st*, i32 (%struct.env_md_ctx_st*, i8*, i64)* }
%struct.engine_st = type opaque
%struct.evp_pkey_ctx_st = type opaque
%struct.read_buf = type { i32, i32, i8*, i8* }
%struct.ivs2_pkthdr = type { i16, i16 }
%struct.ivs2_filehdr = type { i16 }
%struct.pcap_pkthdr = type { i32, i32, i32, i32 }
%struct.pcap_file_header = type { i32, i16, i16, i32, i32, i32, i32 }
%struct.winsize = type { i16, i16, i16, i16 }
%union.pthread_mutexattr_t = type { i32 }
%union.pthread_attr_t = type { i64, [48 x i8] }
%struct.rc4_key_st = type { i32, i32, [256 x i32] }
%struct.SHAstate_st = type { i32, i32, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st, i32, [128 x i8] }
%struct.WPA_ST_info = type { %struct.WPA_ST_info*, [6 x i8], [6 x i8], [32 x i8], [32 x i8], [20 x i8], [256 x i8], [80 x i8], i32, i64, i64, i32, i32 }
%struct.Michael = type { i64, i64, i64, i64, i64, i64, [8 x i8] }
%struct.aes_key_st = type { [60 x i32], i32 }
%struct.doublesorthelper = type { i32, double }
%struct.sorthelper = type { i32, i8, i32 }
%struct.rc4state = type { i8, i8, [256 x i8] }

@nb_eof = dso_local global i32 0, align 4
@nb_pkt = dso_local global i64 0, align 8
@wepkey_crack_success = dso_local global i32 0, align 4
@close_aircrack = dso_local global i32 0, align 4
@id = dso_local global i32 0, align 4
@wpa_wordlists_done = dso_local global i32 0, align 4
@K_COEFF = dso_local global [17 x i32] [i32 15, i32 13, i32 12, i32 12, i32 12, i32 5, i32 5, i32 5, i32 3, i32 4, i32 3, i32 4, i32 3, i32 13, i32 4, i32 4, i32 -20], align 16, !track !0
@PTW_DEFAULTWEIGHT = dso_local global [1 x i32] [i32 256], align 4
@PTW_DEFAULTBF = dso_local global [29 x i32] zeroinitializer, align 16
@R = dso_local constant [256 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\1A\1B\1C\1D\1E\1F !\22#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\5C]^_`abcdefghijklmnopqrstuvwxyz{|}~\7F\80\81\82\83\84\85\86\87\88\89\8A\8B\8C\8D\8E\8F\90\91\92\93\94\95\96\97\98\99\9A\9B\9C\9D\9E\9F\A0\A1\A2\A3\A4\A5\A6\A7\A8\A9\AA\AB\AC\AD\AE\AF\B0\B1\B2\B3\B4\B5\B6\B7\B8\B9\BA\BB\BC\BD\BE\BF\C0\C1\C2\C3\C4\C5\C6\C7\C8\C9\CA\CB\CC\CD\CE\CF\D0\D1\D2\D3\D4\D5\D6\D7\D8\D9\DA\DB\DC\DD\DE\DF\E0\E1\E2\E3\E4\E5\E6\E7\E8\E9\EA\EB\EC\ED\EE\EF\F0\F1\F2\F3\F4\F5\F6\F7\F8\F9\FA\FB\FC\FD\FE\FF", align 16
@usage = dso_local global [1799 x i8] c"\0A  %s - (C) 2006, 2007, 2008, 2009 Thomas d'Otreppe\0A  Original work: Christophe Devine\0A  http://www.aircrack-ng.org\0A\0A  usage: aircrack-ng [options] <.cap / .ivs file(s)>\0A\0A  Common options:\0A\0A      -a <amode> : force attack mode (1/WEP, 2/WPA-PSK)\0A      -e <essid> : target selection: network identifier\0A      -b <bssid> : target selection: access point's MAC\0A      -p <nbcpu> : # of CPU to use  (default: all CPUs)\0A      -q         : enable quiet mode (no status output)\0A      -C <macs>  : merge the given APs to a virtual one\0A      -l <file>  : write key to file\0A\0A  Static WEP cracking options:\0A\0A      -c         : search alpha-numeric characters only\0A      -t         : search binary coded decimal chr only\0A      -h         : search the numeric key for Fritz!BOX\0A      -d <mask>  : use masking of the key (A1:XX:CF:YY)\0A      -m <maddr> : MAC address to filter usable packets\0A      -n <nbits> : WEP key length :  64/128/152/256/512\0A      -i <index> : WEP key index (1 to 4), default: any\0A      -f <fudge> : bruteforce fudge factor,  default: 2\0A      -k <korek> : disable one attack method  (1 to 17)\0A      -x or -x0  : disable bruteforce for last keybytes\0A      -x1        : last keybyte bruteforcing  (default)\0A      -x2        : enable last  2 keybytes bruteforcing%s      -y         : experimental  single bruteforce mode\0A      -K         : use only old KoreK attacks (pre-PTW)\0A      -s         : show the key in ASCII while cracking\0A      -M <num>   : specify maximum number of IVs to use\0A      -D         : WEP decloak, skips broken keystreams\0A      -P <num>   : PTW debug:  1: disable Klein, 2: PTW\0A      -1         : run only 1 try to crack key with PTW\0A\0A  WEP and WPA-PSK cracking options:\0A\0A      -w <words> : path to wordlist(s) filename(s)\0A\0A      --help     : Displays this usage screen\0A\0A\00", align 16, !track !1
@intr_read = dso_local global i32 0, align 4
@opt = common dso_local global %struct.options zeroinitializer, align 8, !track !2
@mc_pipe = common dso_local global [256 x [2 x i32]] zeroinitializer, align 16
@bf_pipe = common dso_local global [256 x [2 x i32]] zeroinitializer, align 16
@tid = common dso_local global [128 x i64] zeroinitializer, align 16, !track !3
@wep = common dso_local global %struct.WEP_data zeroinitializer, align 8, !track !4
@ap_1st = common dso_local global %struct.AP_info* null, align 8, !track !5
@mx_eof = common dso_local global %union.pthread_mutex_t zeroinitializer, align 8
@cv_eof = common dso_local global %union.pthread_cond_t zeroinitializer, align 8
@mx_apl = common dso_local global %union.pthread_mutex_t zeroinitializer, align 8
@mx_ivb = common dso_local global %union.pthread_mutex_t zeroinitializer, align 8
@cm_pipe = common dso_local global [256 x [2 x i32]] zeroinitializer, align 16
@t_stats = common dso_local global %struct.timeval zeroinitializer, align 8
@t_begin = common dso_local global %struct.timeval zeroinitializer, align 8
@progname = common dso_local global i8* null, align 8, !track !6
@nb_tried = common dso_local global i64 0, align 8
@bf_nkeys = common dso_local global [256 x i32] zeroinitializer, align 16, !track !7
@bf_wepkey = common dso_local global [64 x i8] zeroinitializer, align 16, !track !8
@t_kprev = common dso_local global %struct.timeval zeroinitializer, align 8
@nb_kprev = common dso_local global i64 0, align 8
@wpa_data = common dso_local global [128 x %struct.WPA_data] zeroinitializer, align 16, !track !9
@.str = private unnamed_addr constant [7 x i8] c"%-14s \00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%.2X\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"\0AQuitting aircrack-ng...\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.4 = private unnamed_addr constant [6 x i8] c"EXIT\0D\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"\1B[2J\0A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"malloc failed\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"%02X:%02X:%02X:%02X:%02X:%02X\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"Opening %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"open failed\00", align 1
@.str.12 = private unnamed_addr constant [25 x i8] c"read(file header) failed\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"\BF\CA\84\D4\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"\AEx\D1\FF\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.15 = private unnamed_addr constant [51 x i8] c"Unsupported file format (not a pcap or IVs file).\0A\00", align 1
@.str.16 = private unnamed_addr constant [55 x i8] c"This file is not a regular 802.11 (wireless) capture.\0A\00", align 1
@.str.17 = private unnamed_addr constant [37 x i8] c"Can't use decloak wep mode with ivs\0A\00", align 1
@.str.18 = private unnamed_addr constant [58 x i8] c"Error, wrong %s version: %d. Supported up to version %d.\0A\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"ivs\00", align 1
@.str.20 = private unnamed_addr constant [84 x i8] c"Can't do PTW with old IVS files, recapture without --ivs or use airodump-ng >= 1.0\0A\00", align 1
@.str.21 = private unnamed_addr constant [25 x i8] c"fcntl(O_NONBLOCK) failed\00", align 1
@.str.22 = private unnamed_addr constant [53 x i8] c"\0AInvalid packet capture length %d - corrupted file?\0A\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"\FF\FF\FF\FF\FF\FF\00", align 1
@ZERO = internal global [32 x i8] zeroinitializer, align 16, !track !10
@.str.24 = private unnamed_addr constant [21 x i8] c"PTW_newattackstate()\00", align 1
@.str.25 = private unnamed_addr constant [15 x i8] c"realloc failed\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"\01\80\C2\00\00\00\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"read failed\00", align 1
@.str.28 = private unnamed_addr constant [13 x i8] c"write failed\00", align 1
@show_wep_stats.is_cleared = internal global i32 0, align 4
@.str.29 = private unnamed_addr constant [6 x i8] c"\1B[40m\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"\1B[2J\00", align 1
@.str.31 = private unnamed_addr constant [8 x i8] c"\1B[34;1m\00", align 1
@.str.32 = private unnamed_addr constant [12 x i8] c"\1B[2;%dH%s\0A\0A\00", align 1
@.str.33 = private unnamed_addr constant [8 x i8] c"\1B[33;1m\00", align 1
@.str.34 = private unnamed_addr constant [56 x i8] c"\1B[5;%dH[%02d:%02d:%02d] Tested %d keys (got %ld IVs)\1B[K\00", align 1
@.str.35 = private unnamed_addr constant [58 x i8] c"\1B[5;%dH[%02d:%02d:%02d] Tested %lld keys (got %ld IVs)\1B[K\00", align 1
@.str.36 = private unnamed_addr constant [9 x i8] c"\1B[32;22m\00", align 1
@.str.37 = private unnamed_addr constant [32 x i8] c"\1B[7;4HKB    depth   byte(vote)\0A\00", align 1
@.str.38 = private unnamed_addr constant [28 x i8] c"   %2d  \1B[1m%3d\1B[22m/%3d   \00", align 1
@.str.39 = private unnamed_addr constant [19 x i8] c"   %2d  %3d/%3d   \00", align 1
@.str.40 = private unnamed_addr constant [20 x i8] c"\1B[1m%02X\1B[22m(%4d) \00", align 1
@.str.41 = private unnamed_addr constant [11 x i8] c"%02X(%4d) \00", align 1
@.str.42 = private unnamed_addr constant [21 x i8] c"\1B[1m%02X\1B[22m(+inf) \00", align 1
@.str.43 = private unnamed_addr constant [12 x i8] c"%02X(+inf) \00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"  %c\00", align 1
@.str.45 = private unnamed_addr constant [4 x i8] c"\1B[J\00", align 1
@.str.150 = private unnamed_addr constant [14 x i8] c"KEY FOUND! [ \00", align 1
@.str.62 = private unnamed_addr constant [8 x i8] c"\1B[31;1m\00", align 1
@.str.151 = private unnamed_addr constant [22 x i8] c"\1B[K\1B[%dCKEY FOUND! [ \00", align 1
@.str.152 = private unnamed_addr constant [6 x i8] c"%02X:\00", align 1
@.str.153 = private unnamed_addr constant [8 x i8] c"%02X ] \00", align 1
@.str.154 = private unnamed_addr constant [9 x i8] c"(ASCII: \00", align 1
@.str.155 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.156 = private unnamed_addr constant [3 x i8] c" )\00", align 1
@.str.157 = private unnamed_addr constant [29 x i8] c"\0A\09Decrypted correctly: %d%%\0A\00", align 1
@.str.64 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.158 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1
@.str.46 = private unnamed_addr constant [125 x i8] c"Not enough IVs available. You need about 250.000 IVs to crack\0A40-bit WEP, and more than 800.000 IVs to crack a 104-bit key.\0A\00", align 1
@.str.47 = private unnamed_addr constant [34 x i8] c"Read %ld packets, got %ld IVs...\0D\00", align 1
@.str.48 = private unnamed_addr constant [69 x i8] c"On which keybyte do you want to remove votes (Hit Enter when done)? \00", align 1
@.str.49 = private unnamed_addr constant [81 x i8] c"From which keybyte value do you want to remove the votes (Hit Enter to cancel)? \00", align 1
@do_wep_crack1.k = internal global i32 0, align 4
@.str.50 = private unnamed_addr constant [17 x i8] c"write pmk failed\00", align 1
@.str.51 = private unnamed_addr constant [123 x i8] c"Not enough IVs available. This option is only meant to be used\0Aif the standard attack method fails with more than %d IVs.\0A\00", align 1
@mx_wpastats = internal global %union.pthread_mutex_t zeroinitializer, align 8
@.str.52 = private unnamed_addr constant [53 x i8] c"\1B[5;20H[%02d:%02d:%02d] %lld keys tested (%2.2f k/s)\00", align 1
@.str.53 = private unnamed_addr constant [8 x i8] c"\1B[37;1m\00", align 1
@.str.54 = private unnamed_addr constant [31 x i8] c"\1B[8;24HCurrent passphrase: %s\0A\00", align 1
@.str.55 = private unnamed_addr constant [25 x i8] c"\1B[11;7HMaster Key     : \00", align 1
@.str.56 = private unnamed_addr constant [8 x i8] c"\1B[32;1m\00", align 1
@.str.57 = private unnamed_addr constant [7 x i8] c"\0A\1B[23C\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"%02X \00", align 1
@.str.59 = private unnamed_addr constant [25 x i8] c"\1B[14;7HTransient Key  : \00", align 1
@.str.60 = private unnamed_addr constant [25 x i8] c"\1B[19;7HEAPOL HMAC     : \00", align 1
@.str.61 = private unnamed_addr constant [23 x i8] c"Pairwise key expansion\00", align 1
@mx_nb = internal global %union.pthread_mutex_t zeroinitializer, align 8
@.str.63 = private unnamed_addr constant [35 x i8] c"\1B[8;%dH\1B[2KKEY FOUND! [ %s ]\1B[11B\0A\00", align 1
@.str.65 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@stdin = external dso_local global %struct._IO_FILE*, align 8
@.str.66 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.67 = private unnamed_addr constant [25 x i8] c"fopen(dictionary) failed\00", align 1
@.str.68 = private unnamed_addr constant [18 x i8] c"Empty dictionary\0A\00", align 1
@.str.69 = private unnamed_addr constant [9 x i8] c"\1B[37;40m\00", align 1
@.str.70 = private unnamed_addr constant [10 x i8] c"\1B[2;34H%s\00", align 1
@.str.71 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.72 = private unnamed_addr constant [3 x i8] c"%x\00", align 1
@.str.73 = private unnamed_addr constant [19 x i8] c"allocation failed!\00", align 1
@.str.74 = private unnamed_addr constant [3 x i8] c"h:\00", align 1
@.str.75 = private unnamed_addr constant [79 x i8] c"\0A%ld IVs is below the minimum required for a dictionary attack (%d IVs min.)!\0A\00", align 1
@.str.76 = private unnamed_addr constant [12 x i8] c"Aircrack-ng\00", align 1
@.str.86 = private unnamed_addr constant [50 x i8] c"r:a:e:b:p:qcthd:l:m:n:i:f:k:x::Xysw:0HKC:M:DP:zV1\00", align 1
@main.long_options = internal global [10 x %struct.option] [%struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.77, i32 0, i32 0), i32 1, i32* null, i32 98 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.78, i32 0, i32 0), i32 1, i32* null, i32 100 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.79, i32 0, i32 0), i32 0, i32* null, i32 67 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.80, i32 0, i32 0), i32 0, i32* null, i32 72 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i32 0, i32 0), i32 0, i32* null, i32 68 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82, i32 0, i32 0), i32 0, i32* null, i32 80 }, %struct.option { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.83, i32 0, i32 0), i32 0, i32* null, i32 86 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.84, i32 0, i32 0), i32 0, i32* null, i32 49 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.85, i32 0, i32 0), i32 0, i32* null, i32 117 }, %struct.option zeroinitializer], align 16
@.str.87 = private unnamed_addr constant [23 x i8] c"\22%s --help\22 for help.\0A\00", align 1
@.str.88 = private unnamed_addr constant [21 x i8] c"Nb CPU detected: %d \00", align 1
@.str.89 = private unnamed_addr constant [17 x i8] c" (MMX available)\00", align 1
@.str.90 = private unnamed_addr constant [18 x i8] c" (SSE2 available)\00", align 1
@.str.91 = private unnamed_addr constant [47 x i8] c"Visual inspection can only be used with KoreK\0A\00", align 1
@.str.92 = private unnamed_addr constant [27 x i8] c"Use \22%s --help\22 for help.\0A\00", align 1
@optarg = external dso_local global i8*, align 8
@.str.93 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.94 = private unnamed_addr constant [4 x i8] c"wep\00", align 1
@.str.95 = private unnamed_addr constant [4 x i8] c"wpa\00", align 1
@.str.96 = private unnamed_addr constant [41 x i8] c"Invalid attack mode. [1,2] or [wep,wpa]\0A\00", align 1
@.str.97 = private unnamed_addr constant [28 x i8] c"Invalid BSSID (not a MAC).\0A\00", align 1
@.str.98 = private unnamed_addr constant [47 x i8] c"Invalid number of processes (recommended: %d)\0A\00", align 1
@.str.99 = private unnamed_addr constant [20 x i8] c"Invalid debug key.\0A\00", align 1
@.str.100 = private unnamed_addr constant [29 x i8] c"Invalid MAC address filter.\0A\00", align 1
@.str.101 = private unnamed_addr constant [46 x i8] c"Invalid WEP key length. [64,128,152,256,512]\0A\00", align 1
@.str.102 = private unnamed_addr constant [30 x i8] c"Invalid WEP key index. [1-4]\0A\00", align 1
@.str.103 = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@.str.104 = private unnamed_addr constant [29 x i8] c"Invalid fudge factor. [>=1]\0A\00", align 1
@.str.105 = private unnamed_addr constant [39 x i8] c"Invalid KoreK attack strategy. [1-%d]\0A\00", align 1
@.str.106 = private unnamed_addr constant [25 x i8] c"Error allocating memory\0A\00", align 1
@.str.107 = private unnamed_addr constant [33 x i8] c"Invalid number of max. ivs [>1]\0A\00", align 1
@.str.108 = private unnamed_addr constant [36 x i8] c"Invalid number for ptw debug [0-2]\0A\00", align 1
@.str.109 = private unnamed_addr constant [28 x i8] c"Invalid option -x%s. [0-4]\0A\00", align 1
@.str.110 = private unnamed_addr constant [56 x i8] c"Error: Aircrack-ng wasn't compiled with sqlite support\0A\00", align 1
@.str.111 = private unnamed_addr constant [44 x i8] c"Invalid bssids (-C).\0A\22%s --help\22 for help.\0A\00", align 1
@.str.112 = private unnamed_addr constant [50 x i8] c"Merging BSSID disabled, only one BSSID specified\0A\00", align 1
@optind = external dso_local global i32, align 4
@.str.113 = private unnamed_addr constant [58 x i8] c"\0A      -X         : disable  bruteforce   multithreading\0A\00", align 1
@.str.114 = private unnamed_addr constant [29 x i8] c"No file to crack specified.\0A\00", align 1
@.str.115 = private unnamed_addr constant [42 x i8] c"Please specify a dictionary (option -w).\0A\00", align 1
@.str.116 = private unnamed_addr constant [35 x i8] c"Please specify an ESSID or BSSID.\0A\00", align 1
@.str.117 = private unnamed_addr constant [22 x i8] c"pthread_create failed\00", align 1
@.str.118 = private unnamed_addr constant [51 x i8] c"Only using the first %d files, ignoring the rest.\0A\00", align 1
@.str.119 = private unnamed_addr constant [33 x i8] c"Reading packets, please wait...\0D\00", align 1
@.str.120 = private unnamed_addr constant [23 x i8] c"\1B[KRead %ld packets.\0A\0A\00", align 1
@.str.121 = private unnamed_addr constant [29 x i8] c"No networks found, exiting.\0A\00", align 1
@.str.122 = private unnamed_addr constant [37 x i8] c"   #  BSSID%14sESSID%21sEncryption\0A\0A\00", align 1
@.str.123 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.124 = private unnamed_addr constant [44 x i8] c"%4d  %02X:%02X:%02X:%02X:%02X:%02X  %-24s  \00", align 1
@.str.125 = private unnamed_addr constant [7 x i8] c"EAPOL+\00", align 1
@.str.126 = private unnamed_addr constant [20 x i8] c"None (%d.%d.%d.%d)\0A\00", align 1
@.str.127 = private unnamed_addr constant [22 x i8] c"No data - WEP or WPA\0A\00", align 1
@.str.128 = private unnamed_addr constant [15 x i8] c"WEP (%ld IVs)\0A\00", align 1
@.str.129 = private unnamed_addr constant [20 x i8] c"WPA (%d handshake)\0A\00", align 1
@.str.130 = private unnamed_addr constant [9 x i8] c"Unknown\0A\00", align 1
@.str.131 = private unnamed_addr constant [34 x i8] c"Index number of target network ? \00", align 1
@.str.132 = private unnamed_addr constant [6 x i8] c"%127s\00", align 1
@.str.133 = private unnamed_addr constant [35 x i8] c"Choosing first network as target.\0A\00", align 1
@.str.135 = private unnamed_addr constant [6 x i8] c"essid\00", align 1
@.str.77 = private unnamed_addr constant [6 x i8] c"bssid\00", align 1
@.str.134 = private unnamed_addr constant [44 x i8] c"No matching network found - check your %s.\0A\00", align 1
@.str.136 = private unnamed_addr constant [40 x i8] c"Target network doesn't seem encrypted.\0A\00", align 1
@.str.137 = private unnamed_addr constant [42 x i8] c"Got no data packets from target network!\0A\00", align 1
@.str.138 = private unnamed_addr constant [61 x i8] c"Bruteforcing more then 4 bytes will take too long, aborting!\00", align 1
@.str.139 = private unnamed_addr constant [49 x i8] c"Attack will be restarted every %d captured ivs.\0A\00", align 1
@.str.140 = private unnamed_addr constant [35 x i8] c"Starting PTW attack with %ld ivs.\0A\00", align 1
@.str.141 = private unnamed_addr constant [211 x i8] c"   Attack failed. Possible reasons:\0A\0A     * Out of luck: you must capture more IVs. Usually, 104-bit WEP\0A       can be cracked with about 80.000 IVs, sometimes more.\0A\0A     * Try to raise the fudge factor (-f).\0A\00", align 1
@.str.142 = private unnamed_addr constant [31 x i8] c"Failed. Next try with %d IVs.\0A\00", align 1
@.str.143 = private unnamed_addr constant [461 x i8] c"   Attack failed. Possible reasons:\0A\0A     * Out of luck: you must capture more IVs. Usually, 104-bit WEP\0A       can be cracked with about one million IVs, sometimes more.\0A\0A     * If all votes seem equal, or if there are many negative votes,\0A       then the capture file is corrupted, or the key is not static.\0A\0A     * A false positive prevented the key from being found.  Try to\0A       disable each korek attack (-k 1 .. 17), raise the fudge factor\0A       (-f)\00", align 1
@.str.144 = private unnamed_addr constant [50 x i8] c"and try the experimental bruteforce attacks (-y).\00", align 1
@.str.145 = private unnamed_addr constant [56 x i8] c"or try the standard attack mode instead (no -y option).\00", align 1
@.str.146 = private unnamed_addr constant [32 x i8] c"No valid WPA handshakes found.\0A\00", align 1
@.str.147 = private unnamed_addr constant [38 x i8] c"An ESSID is required. Try option -e.\0A\00", align 1
@.str.148 = private unnamed_addr constant [19 x i8] c"KEY FOUND! [ %s ]\0A\00", align 1
@.str.149 = private unnamed_addr constant [32 x i8] c"\0APassphrase not in dictionary \0A\00", align 1
@.str.78 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.79 = private unnamed_addr constant [8 x i8] c"combine\00", align 1
@.str.80 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.81 = private unnamed_addr constant [12 x i8] c"wep-decloak\00", align 1
@.str.82 = private unnamed_addr constant [10 x i8] c"ptw-debug\00", align 1
@.str.83 = private unnamed_addr constant [18 x i8] c"visual-inspection\00", align 1
@.str.84 = private unnamed_addr constant [8 x i8] c"oneshot\00", align 1
@.str.85 = private unnamed_addr constant [11 x i8] c"cpu-detect\00", align 1
@crc_tbl = dso_local constant [256 x i64] [i64 0, i64 1996959894, i64 3993919788, i64 2567524794, i64 124634137, i64 1886057615, i64 3915621685, i64 2657392035, i64 249268274, i64 2044508324, i64 3772115230, i64 2547177864, i64 162941995, i64 2125561021, i64 3887607047, i64 2428444049, i64 498536548, i64 1789927666, i64 4089016648, i64 2227061214, i64 450548861, i64 1843258603, i64 4107580753, i64 2211677639, i64 325883990, i64 1684777152, i64 4251122042, i64 2321926636, i64 335633487, i64 1661365465, i64 4195302755, i64 2366115317, i64 997073096, i64 1281953886, i64 3579855332, i64 2724688242, i64 1006888145, i64 1258607687, i64 3524101629, i64 2768942443, i64 901097722, i64 1119000684, i64 3686517206, i64 2898065728, i64 853044451, i64 1172266101, i64 3705015759, i64 2882616665, i64 651767980, i64 1373503546, i64 3369554304, i64 3218104598, i64 565507253, i64 1454621731, i64 3485111705, i64 3099436303, i64 671266974, i64 1594198024, i64 3322730930, i64 2970347812, i64 795835527, i64 1483230225, i64 3244367275, i64 3060149565, i64 1994146192, i64 31158534, i64 2563907772, i64 4023717930, i64 1907459465, i64 112637215, i64 2680153253, i64 3904427059, i64 2013776290, i64 251722036, i64 2517215374, i64 3775830040, i64 2137656763, i64 141376813, i64 2439277719, i64 3865271297, i64 1802195444, i64 476864866, i64 2238001368, i64 4066508878, i64 1812370925, i64 453092731, i64 2181625025, i64 4111451223, i64 1706088902, i64 314042704, i64 2344532202, i64 4240017532, i64 1658658271, i64 366619977, i64 2362670323, i64 4224994405, i64 1303535960, i64 984961486, i64 2747007092, i64 3569037538, i64 1256170817, i64 1037604311, i64 2765210733, i64 3554079995, i64 1131014506, i64 879679996, i64 2909243462, i64 3663771856, i64 1141124467, i64 855842277, i64 2852801631, i64 3708648649, i64 1342533948, i64 654459306, i64 3188396048, i64 3373015174, i64 1466479909, i64 544179635, i64 3110523913, i64 3462522015, i64 1591671054, i64 702138776, i64 2966460450, i64 3352799412, i64 1504918807, i64 783551873, i64 3082640443, i64 3233442989, i64 3988292384, i64 2596254646, i64 62317068, i64 1957810842, i64 3939845945, i64 2647816111, i64 81470997, i64 1943803523, i64 3814918930, i64 2489596804, i64 225274430, i64 2053790376, i64 3826175755, i64 2466906013, i64 167816743, i64 2097651377, i64 4027552580, i64 2265490386, i64 503444072, i64 1762050814, i64 4150417245, i64 2154129355, i64 426522225, i64 1852507879, i64 4275313526, i64 2312317920, i64 282753626, i64 1742555852, i64 4189708143, i64 2394877945, i64 397917763, i64 1622183637, i64 3604390888, i64 2714866558, i64 953729732, i64 1340076626, i64 3518719985, i64 2797360999, i64 1068828381, i64 1219638859, i64 3624741850, i64 2936675148, i64 906185462, i64 1090812512, i64 3747672003, i64 2825379669, i64 829329135, i64 1181335161, i64 3412177804, i64 3160834842, i64 628085408, i64 1382605366, i64 3423369109, i64 3138078467, i64 570562233, i64 1426400815, i64 3317316542, i64 2998733608, i64 733239954, i64 1555261956, i64 3268935591, i64 3050360625, i64 752459403, i64 1541320221, i64 2607071920, i64 3965973030, i64 1969922972, i64 40735498, i64 2617837225, i64 3943577151, i64 1913087877, i64 83908371, i64 2512341634, i64 3803740692, i64 2075208622, i64 213261112, i64 2463272603, i64 3855990285, i64 2094854071, i64 198958881, i64 2262029012, i64 4057260610, i64 1759359992, i64 534414190, i64 2176718541, i64 4139329115, i64 1873836001, i64 414664567, i64 2282248934, i64 4279200368, i64 1711684554, i64 285281116, i64 2405801727, i64 4167216745, i64 1634467795, i64 376229701, i64 2685067896, i64 3608007406, i64 1308918612, i64 956543938, i64 2808555105, i64 3495958263, i64 1231636301, i64 1047427035, i64 2932959818, i64 3654703836, i64 1088359270, i64 936918000, i64 2847714899, i64 3736837829, i64 1202900863, i64 817233897, i64 3183342108, i64 3401237130, i64 1404277552, i64 615818150, i64 3134207493, i64 3453421203, i64 1423857449, i64 601450431, i64 3009837614, i64 3294710456, i64 1567103746, i64 711928724, i64 3020668471, i64 3272380065, i64 1510334235, i64 755167117], align 16
@crc_chop_tbl = dso_local constant [256 x [4 x i8]] [[4 x i8] c"&pj\0F", [4 x i8] c"gv\1B\D4", [4 x i8] c"\E5z\F9b", [4 x i8] c"\A4|\88\B9", [4 x i8] c"\A0eL\D4", [4 x i8] c"\E1c=\0F", [4 x i8] c"co\DF\B9", [4 x i8] c"\22i\AEb", [4 x i8] c"k]Wb", [4 x i8] c"*[&\B9", [4 x i8] c"\A8W\C4\0F", [4 x i8] c"\E9Q\B5\D4", [4 x i8] c"\EDHq\B9", [4 x i8] c"\ACN\00b", [4 x i8] c".B\E2\D4", [4 x i8] c"oD\93\0F", [4 x i8] c"\BC*\10\D5", [4 x i8] c"\FD,a\0E", [4 x i8] c"\7F \83\B8", [4 x i8] c">&\F2c", [4 x i8] c":?6\0E", [4 x i8] c"{9G\D5", [4 x i8] c"\F95\A5c", [4 x i8] c"\B83\D4\B8", [4 x i8] c"\F1\07-\B8", [4 x i8] c"\B0\01\5Cc", [4 x i8] c"2\0D\BE\D5", [4 x i8] c"s\0B\CF\0E", [4 x i8] c"w\12\0Bc", [4 x i8] c"6\14z\B8", [4 x i8] c"\B4\18\98\0E", [4 x i8] c"\F5\1E\E9\D5", [4 x i8] c"S\C3\EF`", [4 x i8] c"\12\C5\9E\BB", [4 x i8] c"\90\C9|\0D", [4 x i8] c"\D1\CF\0D\D6", [4 x i8] c"\D5\D6\C9\BB", [4 x i8] c"\94\D0\B8`", [4 x i8] c"\16\DCZ\D6", [4 x i8] c"W\DA+\0D", [4 x i8] c"\1E\EE\D2\0D", [4 x i8] c"_\E8\A3\D6", [4 x i8] c"\DD\E4A`", [4 x i8] c"\9C\E20\BB", [4 x i8] c"\98\FB\F4\D6", [4 x i8] c"\D9\FD\85\0D", [4 x i8] c"[\F1g\BB", [4 x i8] c"\1A\F7\16`", [4 x i8] c"\C9\99\95\BA", [4 x i8] c"\88\9F\E4a", [4 x i8] c"\0A\93\06\D7", [4 x i8] c"K\95w\0C", [4 x i8] c"O\8C\B3a", [4 x i8] c"\0E\8A\C2\BA", [4 x i8] c"\8C\86 \0C", [4 x i8] c"\CD\80Q\D7", [4 x i8] c"\84\B4\A8\D7", [4 x i8] c"\C5\B2\D9\0C", [4 x i8] c"G\BE;\BA", [4 x i8] c"\06\B8Ja", [4 x i8] c"\02\A1\8E\0C", [4 x i8] c"C\A7\FF\D7", [4 x i8] c"\C1\AB\1Da", [4 x i8] c"\80\ADl\BA", [4 x i8] c"\CC\16a\D0", [4 x i8] c"\8D\10\10\0B", [4 x i8] c"\0F\1C\F2\BD", [4 x i8] c"N\1A\83f", [4 x i8] c"J\03G\0B", [4 x i8] c"\0B\056\D0", [4 x i8] c"\89\09\D4f", [4 x i8] c"\C8\0F\A5\BD", [4 x i8] c"\81;\5C\BD", [4 x i8] c"\C0=-f", [4 x i8] c"B1\CF\D0", [4 x i8] c"\037\BE\0B", [4 x i8] c"\07.zf", [4 x i8] c"F(\0B\BD", [4 x i8] c"\C4$\E9\0B", [4 x i8] c"\85\22\98\D0", [4 x i8] c"VL\1B\0A", [4 x i8] c"\17Jj\D1", [4 x i8] c"\95F\88g", [4 x i8] c"\D4@\F9\BC", [4 x i8] c"\D0Y=\D1", [4 x i8] c"\91_L\0A", [4 x i8] c"\13S\AE\BC", [4 x i8] c"RU\DFg", [4 x i8] c"\1Ba&g", [4 x i8] c"ZgW\BC", [4 x i8] c"\D8k\B5\0A", [4 x i8] c"\99m\C4\D1", [4 x i8] c"\9Dt\00\BC", [4 x i8] c"\DCrqg", [4 x i8] c"^~\93\D1", [4 x i8] c"\1Fx\E2\0A", [4 x i8] c"\B9\A5\E4\BF", [4 x i8] c"\F8\A3\95d", [4 x i8] c"z\AFw\D2", [4 x i8] c";\A9\06\09", [4 x i8] c"?\B0\C2d", [4 x i8] c"~\B6\B3\BF", [4 x i8] c"\FC\BAQ\09", [4 x i8] c"\BD\BC \D2", [4 x i8] c"\F4\88\D9\D2", [4 x i8] c"\B5\8E\A8\09", [4 x i8] c"7\82J\BF", [4 x i8] c"v\84;d", [4 x i8] c"r\9D\FF\09", [4 x i8] c"3\9B\8E\D2", [4 x i8] c"\B1\97ld", [4 x i8] c"\F0\91\1D\BF", [4 x i8] c"#\FF\9Ee", [4 x i8] c"b\F9\EF\BE", [4 x i8] c"\E0\F5\0D\08", [4 x i8] c"\A1\F3|\D3", [4 x i8] c"\A5\EA\B8\BE", [4 x i8] c"\E4\EC\C9e", [4 x i8] c"f\E0+\D3", [4 x i8] c"'\E6Z\08", [4 x i8] c"n\D2\A3\08", [4 x i8] c"/\D4\D2\D3", [4 x i8] c"\AD\D80e", [4 x i8] c"\EC\DEA\BE", [4 x i8] c"\E8\C7\85\D3", [4 x i8] c"\A9\C1\F4\08", [4 x i8] c"+\CD\16\BE", [4 x i8] c"j\CBge", [4 x i8] c"\B3\BB\0Dj", [4 x i8] c"\F2\BD|\B1", [4 x i8] c"p\B1\9E\07", [4 x i8] c"1\B7\EF\DC", [4 x i8] c"5\AE+\B1", [4 x i8] c"t\A8Zj", [4 x i8] c"\F6\A4\B8\DC", [4 x i8] c"\B7\A2\C9\07", [4 x i8] c"\FE\960\07", [4 x i8] c"\BF\90A\DC", [4 x i8] c"=\9C\A3j", [4 x i8] c"|\9A\D2\B1", [4 x i8] c"x\83\16\DC", [4 x i8] c"9\85g\07", [4 x i8] c"\BB\89\85\B1", [4 x i8] c"\FA\8F\F4j", [4 x i8] c")\E1w\B0", [4 x i8] c"h\E7\06k", [4 x i8] c"\EA\EB\E4\DD", [4 x i8] c"\AB\ED\95\06", [4 x i8] c"\AF\F4Qk", [4 x i8] c"\EE\F2 \B0", [4 x i8] c"l\FE\C2\06", [4 x i8] c"-\F8\B3\DD", [4 x i8] c"d\CCJ\DD", [4 x i8] c"%\CA;\06", [4 x i8] c"\A7\C6\D9\B0", [4 x i8] c"\E6\C0\A8k", [4 x i8] c"\E2\D9l\06", [4 x i8] c"\A3\DF\1D\DD", [4 x i8] c"!\D3\FFk", [4 x i8] c"`\D5\8E\B0", [4 x i8] c"\C6\08\88\05", [4 x i8] c"\87\0E\F9\DE", [4 x i8] c"\05\02\1Bh", [4 x i8] c"D\04j\B3", [4 x i8] c"@\1D\AE\DE", [4 x i8] c"\01\1B\DF\05", [4 x i8] c"\83\17=\B3", [4 x i8] c"\C2\11Lh", [4 x i8] c"\8B%\B5h", [4 x i8] c"\CA#\C4\B3", [4 x i8] c"H/&\05", [4 x i8] c"\09)W\DE", [4 x i8] c"\0D0\93\B3", [4 x i8] c"L6\E2h", [4 x i8] c"\CE:\00\DE", [4 x i8] c"\8F<q\05", [4 x i8] c"\5CR\F2\DF", [4 x i8] c"\1DT\83\04", [4 x i8] c"\9FXa\B2", [4 x i8] c"\DE^\10i", [4 x i8] c"\DAG\D4\04", [4 x i8] c"\9BA\A5\DF", [4 x i8] c"\19MGi", [4 x i8] c"XK6\B2", [4 x i8] c"\11\7F\CF\B2", [4 x i8] c"Py\BEi", [4 x i8] c"\D2u\5C\DF", [4 x i8] c"\93s-\04", [4 x i8] c"\97j\E9i", [4 x i8] c"\D6l\98\B2", [4 x i8] c"T`z\04", [4 x i8] c"\15f\0B\DF", [4 x i8] c"Y\DD\06\B5", [4 x i8] c"\18\DBwn", [4 x i8] c"\9A\D7\95\D8", [4 x i8] c"\DB\D1\E4\03", [4 x i8] c"\DF\C8 n", [4 x i8] c"\9E\CEQ\B5", [4 x i8] c"\1C\C2\B3\03", [4 x i8] c"]\C4\C2\D8", [4 x i8] c"\14\F0;\D8", [4 x i8] c"U\F6J\03", [4 x i8] c"\D7\FA\A8\B5", [4 x i8] c"\96\FC\D9n", [4 x i8] c"\92\E5\1D\03", [4 x i8] c"\D3\E3l\D8", [4 x i8] c"Q\EF\8En", [4 x i8] c"\10\E9\FF\B5", [4 x i8] c"\C3\87|o", [4 x i8] c"\82\81\0D\B4", [4 x i8] c"\00\8D\EF\02", [4 x i8] c"A\8B\9E\D9", [4 x i8] c"E\92Z\B4", [4 x i8] c"\04\94+o", [4 x i8] c"\86\98\C9\D9", [4 x i8] c"\C7\9E\B8\02", [4 x i8] c"\8E\AAA\02", [4 x i8] c"\CF\AC0\D9", [4 x i8] c"M\A0\D2o", [4 x i8] c"\0C\A6\A3\B4", [4 x i8] c"\08\BFg\D9", [4 x i8] c"I\B9\16\02", [4 x i8] c"\CB\B5\F4\B4", [4 x i8] c"\8A\B3\85o", [4 x i8] c",n\83\DA", [4 x i8] c"mh\F2\01", [4 x i8] c"\EFd\10\B7", [4 x i8] c"\AEbal", [4 x i8] c"\AA{\A5\01", [4 x i8] c"\EB}\D4\DA", [4 x i8] c"iq6l", [4 x i8] c"(wG\B7", [4 x i8] c"aC\BE\B7", [4 x i8] c" E\CFl", [4 x i8] c"\A2I-\DA", [4 x i8] c"\E3O\5C\01", [4 x i8] c"\E7V\98l", [4 x i8] c"\A6P\E9\B7", [4 x i8] c"$\5C\0B\01", [4 x i8] c"eZz\DA", [4 x i8] c"\B64\F9\00", [4 x i8] c"\F72\88\DB", [4 x i8] c"u>jm", [4 x i8] c"48\1B\B6", [4 x i8] c"0!\DF\DB", [4 x i8] c"q'\AE\00", [4 x i8] c"\F3+L\B6", [4 x i8] c"\B2-=m", [4 x i8] c"\FB\19\C4m", [4 x i8] c"\BA\1F\B5\B6", [4 x i8] c"8\13W\00", [4 x i8] c"y\15&\DB", [4 x i8] c"}\0C\E2\B6", [4 x i8] c"<\0A\93m", [4 x i8] c"\BE\06q\DB", [4 x i8] c"\FF\00\00\00"], align 16
@TkipSbox = dso_local constant [2 x [256 x i16]] [[256 x i16] [i16 -14683, i16 -1916, i16 -4455, i16 -2419, i16 -243, i16 -10563, i16 -8527, i16 -28332, i16 24656, i16 515, i16 -12631, i16 22141, i16 -6375, i16 -19102, i16 19942, i16 -4966, i16 -28859, i16 8093, i16 -30400, i16 -1401, i16 -4331, i16 -19733, i16 -28983, i16 -1269, i16 16876, i16 -19609, i16 24573, i16 17898, i16 9151, i16 21495, i16 -7018, i16 -25765, i16 30146, i16 -7908, i16 15790, i16 19562, i16 27738, i16 32321, i16 -2814, i16 -31921, i16 26716, i16 20980, i16 -11980, i16 -1784, i16 -7533, i16 -21645, i16 25171, i16 10815, i16 2060, i16 -27310, i16 18021, i16 -25250, i16 12328, i16 14241, i16 2575, i16 12213, i16 3593, i16 9270, i16 7067, i16 -8387, i16 -13018, i16 20073, i16 32717, i16 -5473, i16 4635, i16 7582, i16 22644, i16 13358, i16 13869, i16 -9038, i16 -19218, i16 23547, i16 -23306, i16 30285, i16 -18591, i16 32206, i16 21115, i16 -8898, i16 24177, i16 5015, i16 -22795, i16 -18072, i16 0, i16 -16084, i16 16480, i16 -7393, i16 31176, i16 -18707, i16 -11074, i16 -29370, i16 26585, i16 29259, i16 -27426, i16 -26412, i16 -20248, i16 -31414, i16 -17557, i16 -15062, i16 20453, i16 -4842, i16 -31035, i16 -25897, i16 26197, i16 4500, i16 -30001, i16 -5872, i16 1030, i16 -383, i16 -24336, i16 30788, i16 9658, i16 19427, i16 -23821, i16 24062, i16 -32576, i16 1418, i16 16301, i16 8636, i16 28744, i16 -3836, i16 25567, i16 30657, i16 -20619, i16 16995, i16 8240, i16 -6886, i16 -754, i16 -16531, i16 -32436, i16 6164, i16 9781, i16 -15569, i16 -16671, i16 13730, i16 -30516, i16 11833, i16 -27817, i16 22002, i16 -894, i16 31303, i16 -14164, i16 -17689, i16 12843, i16 -6507, i16 -16224, i16 6552, i16 -24879, i16 -23681, i16 17510, i16 21630, i16 15275, i16 2947, i16 -29494, i16 -14551, i16 27603, i16 10300, i16 -22663, i16 -17182, i16 5661, i16 -21130, i16 -9413, i16 25686, i16 29774, i16 5150, i16 -27941, i16 3082, i16 18540, i16 -18204, i16 -24739, i16 -17042, i16 17391, i16 -15194, i16 14760, i16 12708, i16 -11465, i16 -3445, i16 -10958, i16 -29885, i16 28249, i16 -9545, i16 396, i16 -20124, i16 -25390, i16 18912, i16 -10060, i16 -21254, i16 -3321, i16 -12507, i16 -13649, i16 -2930, i16 18409, i16 4120, i16 28629, i16 -3960, i16 19055, i16 23666, i16 14372, i16 22513, i16 29639, i16 -26799, i16 -13533, i16 -24196, i16 -5988, i16 15905, i16 -26915, i16 25052, i16 3462, i16 3973, i16 -8048, i16 31810, i16 29124, i16 -13142, i16 -28456, i16 1541, i16 -2303, i16 7186, i16 -15709, i16 27231, i16 -20743, i16 27088, i16 6033, i16 -26280, i16 14887, i16 10169, i16 -9928, i16 -5357, i16 11187, i16 8755, i16 -11589, i16 -22160, i16 1929, i16 13223, i16 11702, i16 15394, i16 5522, i16 -14048, i16 -30903, i16 -21761, i16 20600, i16 -23174, i16 911, i16 23032, i16 2432, i16 6679, i16 26074, i16 -10447, i16 -31546, i16 -12104, i16 -32061, i16 10672, i16 23159, i16 7697, i16 31691, i16 -22276, i16 28118, i16 11322], [256 x i16] [i16 -23098, i16 -31496, i16 -26130, i16 -29194, i16 3583, i16 -16938, i16 -20002, i16 21649, i16 20576, i16 770, i16 -22066, i16 32086, i16 6631, i16 25269, i16 -6579, i16 -25876, i16 17807, i16 -25313, i16 16521, i16 -30726, i16 5615, i16 -5198, i16 -13938, i16 3067, i16 -5055, i16 26547, i16 -673, i16 -5563, i16 -16605, i16 -2221, i16 -26908, i16 23451, i16 -15755, i16 7393, i16 -20931, i16 27212, i16 23148, i16 16766, i16 757, i16 20355, i16 23656, i16 -2991, i16 13521, i16 2297, i16 -27678, i16 29611, i16 21346, i16 16170, i16 3080, i16 21141, i16 25926, i16 24221, i16 10288, i16 -24265, i16 3850, i16 -19153, i16 2318, i16 13860, i16 -25829, i16 15839, i16 9933, i16 26958, i16 -12929, i16 -24598, i16 6930, i16 -25059, i16 29784, i16 11828, i16 11574, i16 -19748, i16 -4428, i16 -1189, i16 -2396, i16 19830, i16 25015, i16 -12675, i16 31570, i16 16093, i16 29022, i16 -26861, i16 -2650, i16 26809, i16 0, i16 11457, i16 24640, i16 8163, i16 -14215, i16 -4682, i16 -16684, i16 18061, i16 -9881, i16 19314, i16 -8556, i16 -11112, i16 -5968, i16 19077, i16 27579, i16 10949, i16 -6833, i16 5869, i16 -14970, i16 -10342, i16 21862, i16 -27631, i16 -12406, i16 4329, i16 1540, i16 -32258, i16 -3936, i16 17528, i16 -17883, i16 -7349, i16 -3166, i16 -419, i16 -16256, i16 -30203, i16 -21185, i16 -17375, i16 18544, i16 1265, i16 -8349, i16 -16009, i16 30127, i16 25410, i16 12320, i16 6885, i16 3837, i16 28095, i16 19585, i16 5144, i16 13606, i16 12227, i16 -7746, i16 -24011, i16 -13176, i16 14638, i16 22419, i16 -3499, i16 -32004, i16 18298, i16 -21304, i16 -6214, i16 11058, i16 -27162, i16 -24384, i16 -26599, i16 -11874, i16 32675, i16 26180, i16 32340, i16 -21701, i16 -31989, i16 -13684, i16 10695, i16 -11413, i16 15400, i16 31143, i16 -7492, i16 7446, i16 30381, i16 15323, i16 22116, i16 20084, i16 7700, i16 -9326, i16 2572, i16 27720, i16 -6984, i16 23967, i16 28349, i16 -4285, i16 -22844, i16 -22471, i16 -23503, i16 14291, i16 -29710, i16 13013, i16 17291, i16 22894, i16 -18470, i16 -29695, i16 25777, i16 -11620, i16 -8119, i16 -19240, i16 -1364, i16 2035, i16 9679, i16 -20534, i16 -28940, i16 -5817, i16 6160, i16 -10897, i16 -30480, i16 28490, i16 29276, i16 9272, i16 -3753, i16 -14477, i16 20887, i16 9163, i16 31905, i16 -25368, i16 8510, i16 -8810, i16 -9119, i16 -31219, i16 -31473, i16 -28448, i16 17020, i16 -15247, i16 -21812, i16 -10096, i16 1286, i16 503, i16 4636, i16 -23614, i16 24426, i16 -1618, i16 -12183, i16 -28393, i16 22681, i16 10042, i16 -18137, i16 14553, i16 5099, i16 -19669, i16 13090, i16 -17454, i16 28841, i16 -30457, i16 -22733, i16 -18899, i16 8764, i16 -28139, i16 8393, i16 18823, i16 -86, i16 30800, i16 31397, i16 -28925, i16 -1959, i16 -32759, i16 5914, i16 -9627, i16 12759, i16 -14716, i16 -18224, i16 -15486, i16 -20439, i16 30554, i16 4382, i16 -13445, i16 -856, i16 -10643, i16 14892]], align 16
@.str.159 = private unnamed_addr constant [23 x i8] c"Pairwise key expansion\00", align 1
@.str.1.160 = private unnamed_addr constant [3 x i8] c"33\00", align 1
@.str.2.161 = private unnamed_addr constant [7 x i8] c"\FF\FF\FF\FF\FF\FF\00", align 1
@.str.3.162 = private unnamed_addr constant [7 x i8] c"\01\80\C2\00\00\00\00", align 1
@.str.4.163 = private unnamed_addr constant [7 x i8] c"\01\00\0C\CC\CC\CC\00", align 1
@.str.5.166 = private unnamed_addr constant [9 x i8] c"\AA\AA\03\00\00\00\08\06\00", align 1
@.str.6.167 = private unnamed_addr constant [7 x i8] c"\00\01\08\00\06\04\00", align 1
@.str.7.168 = private unnamed_addr constant [3 x i8] c"\00\01\00", align 1
@.str.8.169 = private unnamed_addr constant [3 x i8] c"\00\02\00", align 1
@.str.9.170 = private unnamed_addr constant [9 x i8] c"BB\03\00\00\00\00\00\00", align 1
@.str.10.171 = private unnamed_addr constant [8 x i8] c"\AA\AA\03\00\00\0C \00", align 1
@.str.11.172 = private unnamed_addr constant [9 x i8] c"\AA\AA\03\00\00\00\08\00\00", align 1
@.str.12.173 = private unnamed_addr constant [3 x i8] c"E\00\00", align 1
@.str.13.174 = private unnamed_addr constant [3 x i8] zeroinitializer, align 1
@.str.14.175 = private unnamed_addr constant [3 x i8] c"@\00\00", align 1
@.str.15.176 = private unnamed_addr constant [7 x i8] c"weight\00", align 1
@.str.16.177 = private unnamed_addr constant [9 x i8] c"crypto.c\00", align 1
@__PRETTY_FUNCTION__.known_clear = private unnamed_addr constant [60 x i8] c"int known_clear(void *, int *, int *, unsigned char *, int)\00", align 1
@.str.17.178 = private unnamed_addr constant [9 x i8] zeroinitializer, align 1
@.str.18.179 = private unnamed_addr constant [8 x i8] c"Blub 2:\00", align 1
@.str.19.180 = private unnamed_addr constant [6 x i8] c"%02X \00", align 1
@.str.20.181 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.21.182 = private unnamed_addr constant [8 x i8] c"Blub 1:\00", align 1
@.str.22.183 = private unnamed_addr constant [8 x i8] c"Blub 3:\00", align 1
@.str.23.184 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@ZERO.185 = internal global [32 x i8] zeroinitializer, align 16
@.str.186 = private unnamed_addr constant [14 x i8] c"/proc/meminfo\00", align 1
@.str.1.187 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2.188 = private unnamed_addr constant [12 x i8] c"fopen fails\00", align 1
@.str.3.189 = private unnamed_addr constant [6 x i8] c"%s %d\00", align 1
@.str.4.190 = private unnamed_addr constant [9 x i8] c"MemTotal\00", align 1
@.str.5.193 = private unnamed_addr constant [9 x i8] c"%s %d.%d\00", align 1
@.str.6.194 = private unnamed_addr constant [4 x i8] c".%d\00", align 1
@.str.7.195 = private unnamed_addr constant [6 x i8] c" rc%d\00", align 1
@.str.8.196 = private unnamed_addr constant [8 x i8] c" beta%d\00", align 1
@.str.9.197 = private unnamed_addr constant [5 x i8] c" r%d\00", align 1
@.str.10.200 = private unnamed_addr constant [14 x i8] c"/proc/cpuinfo\00", align 1
@.str.11.201 = private unnamed_addr constant [10 x i8] c"processor\00", align 1
@.str.12.202 = private unnamed_addr constant [30 x i8] c"%02X:%02X:%02X:%02X:%02X:%02X\00", align 1
@hexCharToInt.table_created = internal global i32 0, align 4
@hexCharToInt.table = internal global [256 x i32] zeroinitializer, align 16
@.str.13.207 = private unnamed_addr constant [3 x i8] c"%x\00", align 1
@tried = common dso_local global i32 0, align 4
@max_tries = common dso_local global i32 0, align 4
@depth = common dso_local global [29 x i32] zeroinitializer, align 16
@keytable = common dso_local global [29 x [256 x %struct.PTW_tableentry]] zeroinitializer, align 16, !track !11
@.str.222 = private unnamed_addr constant [27 x i8] c"could not allocate memory\0A\00", align 1
@eval = internal constant [13 x double] [double 0x3F75E381C9B66998, double 0x3F75C8326DCE6C47, double 0x3F75C39070455B06, double 0x3F75A8FF7DF66AE8, double 0x3F758B7C75B3FAC1, double 0x3F75685AB224FECA, double 0x3F75437FCDD71938, double 0x3F7515C4F01E415C, double 0x3F74E856F2B97ECC, double 0x3F74B4640EBF1C9C, double 0x3F748026EDE8B20E, double 0x3F7447705D26E843, double 0x3F7410493F7B69E4], align 16
@.str.1.223 = private unnamed_addr constant [36 x i8] c"hit with strongbyte for keybyte %d\0A\00", align 1
@rc4initial = internal constant [256 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\1A\1B\1C\1D\1E\1F !\22#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\5C]^_`abcdefghijklmnopqrstuvwxyz{|}~\7F\80\81\82\83\84\85\86\87\88\89\8A\8B\8C\8D\8E\8F\90\91\92\93\94\95\96\97\98\99\9A\9B\9C\9D\9E\9F\A0\A1\A2\A3\A4\A5\A6\A7\A8\A9\AA\AB\AC\AD\AE\AF\B0\B1\B2\B3\B4\B5\B6\B7\B8\B9\BA\BB\BC\BD\BE\BF\C0\C1\C2\C3\C4\C5\C6\C7\C8\C9\CA\CB\CC\CD\CE\CF\D0\D1\D2\D3\D4\D5\D6\D7\D8\D9\DA\DB\DC\DD\DE\DF\E0\E1\E2\E3\E4\E5\E6\E7\E8\E9\EA\EB\EC\ED\EE\EF\F0\F1\F2\F3\F4\F5\F6\F7\F8\F9\FA\FB\FC\FD\FE\FF", align 16

; Function Attrs: noinline nounwind uwtable
define dso_local void @show_result(i8*, i8*) #0 {
  %3 = getelementptr [7 x i8], [7 x i8]* @.str, i32 0, i32 0
  %4 = call i32 (i8*, ...) @printf(i8* %3, i8* %0)
  br label %5

; <label>:5:                                      ; preds = %2, %11
  %indvars.iv = phi i64 [ 0, %2 ], [ %indvars.iv.next, %11 ]
  %6 = getelementptr inbounds i8, i8* %1, i64 %indvars.iv
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = getelementptr [5 x i8], [5 x i8]* @.str.1, i32 0, i32 0
  %10 = call i32 (i8*, ...) @printf(i8* %9, i32 %8)
  br label %11

; <label>:11:                                     ; preds = %5
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 32
  br i1 %exitcond, label %5, label %12

; <label>:12:                                     ; preds = %11
  %13 = getelementptr [2 x i8], [2 x i8]* @.str.2, i32 0, i32 0
  %14 = call i32 (i8*, ...) @printf(i8* %13)
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @calc_4pmk(i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*) #0 {
  %10 = alloca [36 x i8], align 16, !track !14
  %11 = alloca [128 x i8], align 16, !track !15
  %12 = alloca [128 x i8], align 16, !track !16
  %13 = alloca [128 x i8], align 16, !track !17
  %14 = alloca [128 x i8], align 16, !track !18
  %15 = alloca [512 x i8], align 16, !track !19
  %16 = alloca [256 x i8], align 16, !track !20
  %17 = alloca [80 x i8], align 16, !track !21
  %18 = alloca [256 x i8], align 16, !track !22
  %19 = alloca [80 x i8], align 16, !track !23
  %20 = alloca [256 x i8], align 16, !track !24
  %21 = alloca [80 x i8], align 16, !track !25
  %22 = alloca [1280 x i8], align 16, !track !26
  %23 = getelementptr inbounds [512 x i8], [512 x i8]* %15, i32 0, i32 0
  %24 = getelementptr inbounds [36 x i8], [36 x i8]* %10, i32 0, i32 0
  %25 = call i8* @strncpy(i8* %24, i8* %4, i64 35) #9, !track !27
  %26 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i32 0, i32 0
  %27 = call i8* @strncpy(i8* %26, i8* %0, i64 127) #9, !track !28
  %28 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i32 0, i32 0
  %29 = call i8* @strncpy(i8* %28, i8* %1, i64 127) #9, !track !29
  %30 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i32 0, i32 0
  %31 = call i8* @strncpy(i8* %30, i8* %2, i64 127) #9, !track !30
  %32 = getelementptr inbounds [128 x i8], [128 x i8]* %14, i32 0, i32 0
  %33 = call i8* @strncpy(i8* %32, i8* %3, i64 127) #9, !track !31
  %34 = getelementptr inbounds [36 x i8], [36 x i8]* %10, i32 0, i32 0
  %35 = call i64 @strlen(i8* %34) #10
  %36 = getelementptr inbounds [256 x i8], [256 x i8]* %16, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %36, i8 0, i64 256, i1 false)
  %37 = getelementptr inbounds [256 x i8], [256 x i8]* %18, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %37, i8 0, i64 256, i1 false)
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* %16, i32 0, i32 0
  %39 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i32 0, i32 0
  %40 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i32 0, i32 0
  %41 = call i64 @strlen(i8* %40) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %38, i8* align 16 %39, i64 %41, i1 false), !track !32
  %42 = getelementptr inbounds [256 x i8], [256 x i8]* %18, i32 0, i32 0
  %43 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i32 0, i32 0
  %44 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i32 0, i32 0
  %45 = call i64 @strlen(i8* %44) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %42, i8* align 16 %43, i64 %45, i1 false), !track !33
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* %16, i32 0, i32 0
  %47 = getelementptr inbounds i8, i8* %46, i64 64
  %48 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i32 0, i32 0
  %49 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i32 0, i32 0
  %50 = call i64 @strlen(i8* %49) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 16 %48, i64 %50, i1 false), !track !34
  %51 = getelementptr inbounds [256 x i8], [256 x i8]* %18, i32 0, i32 0
  %52 = getelementptr inbounds i8, i8* %51, i64 64
  %53 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i32 0, i32 0
  %54 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i32 0, i32 0
  %55 = call i64 @strlen(i8* %54) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 16 %53, i64 %55, i1 false), !track !35
  %56 = getelementptr inbounds [256 x i8], [256 x i8]* %16, i32 0, i32 0
  %57 = getelementptr inbounds i8, i8* %56, i64 128
  %58 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i32 0, i32 0
  %59 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i32 0, i32 0
  %60 = call i64 @strlen(i8* %59) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 16 %58, i64 %60, i1 false), !track !36
  %61 = getelementptr inbounds [256 x i8], [256 x i8]* %18, i32 0, i32 0
  %62 = getelementptr inbounds i8, i8* %61, i64 128
  %63 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i32 0, i32 0
  %64 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i32 0, i32 0
  %65 = call i64 @strlen(i8* %64) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 16 %63, i64 %65, i1 false), !track !37
  %66 = getelementptr inbounds [256 x i8], [256 x i8]* %16, i32 0, i32 0
  %67 = getelementptr inbounds i8, i8* %66, i64 192
  %68 = getelementptr inbounds [128 x i8], [128 x i8]* %14, i32 0, i32 0
  %69 = getelementptr inbounds [128 x i8], [128 x i8]* %14, i32 0, i32 0
  %70 = call i64 @strlen(i8* %69) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 16 %68, i64 %70, i1 false), !track !38
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* %18, i32 0, i32 0
  %72 = getelementptr inbounds i8, i8* %71, i64 192
  %73 = getelementptr inbounds [128 x i8], [128 x i8]* %14, i32 0, i32 0
  %74 = getelementptr inbounds [128 x i8], [128 x i8]* %14, i32 0, i32 0
  %75 = call i64 @strlen(i8* %74) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 16 %73, i64 %75, i1 false), !track !39
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* %16, i32 0, i32 0
  %77 = bitcast i8* %76 to i32*
  %78 = getelementptr inbounds [256 x i8], [256 x i8]* %16, i32 0, i32 0
  %79 = getelementptr inbounds i8, i8* %78, i64 64
  %80 = bitcast i8* %79 to i32*
  %81 = getelementptr inbounds [256 x i8], [256 x i8]* %16, i32 0, i32 0
  %82 = getelementptr inbounds i8, i8* %81, i64 128
  %83 = bitcast i8* %82 to i32*
  %84 = getelementptr inbounds [256 x i8], [256 x i8]* %16, i32 0, i32 0
  %85 = getelementptr inbounds i8, i8* %84, i64 192
  %86 = bitcast i8* %85 to i32*
  %87 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %88 = bitcast i8* %87 to i32*
  br label %89

; <label>:89:                                     ; preds = %9, %106
  %.026 = phi i32* [ %86, %9 ], [ %102, %106 ]
  %.0125 = phi i32* [ %83, %9 ], [ %98, %106 ]
  %.0324 = phi i32* [ %88, %9 ], [ %105, %106 ]
  %.0523 = phi i32* [ %80, %9 ], [ %94, %106 ]
  %.0722 = phi i32* [ %77, %9 ], [ %90, %106 ]
  %.0921 = phi i32 [ 0, %9 ], [ %107, %106 ]
  call void @unroll_loop(i32 4)
  %90 = getelementptr inbounds i32, i32* %.0722, i32 1
  %91 = load i32, i32* %.0722, align 4
  %92 = xor i32 %91, 909522486
  %93 = getelementptr inbounds i32, i32* %.0324, i32 1
  store i32 %92, i32* %.0324, align 4
  %94 = getelementptr inbounds i32, i32* %.0523, i32 1
  %95 = load i32, i32* %.0523, align 4
  %96 = xor i32 %95, 909522486
  %97 = getelementptr inbounds i32, i32* %93, i32 1
  store i32 %96, i32* %93, align 4
  %98 = getelementptr inbounds i32, i32* %.0125, i32 1
  %99 = load i32, i32* %.0125, align 4
  %100 = xor i32 %99, 909522486
  %101 = getelementptr inbounds i32, i32* %97, i32 1
  store i32 %100, i32* %97, align 4
  %102 = getelementptr inbounds i32, i32* %.026, i32 1
  %103 = load i32, i32* %.026, align 4
  %104 = xor i32 %103, 909522486
  %105 = getelementptr inbounds i32, i32* %101, i32 1
  store i32 %104, i32* %101, align 4
  br label %106

; <label>:106:                                    ; preds = %89
  %107 = add nuw nsw i32 %.0921, 1
  %exitcond27 = icmp ne i32 %107, 16
  br i1 %exitcond27, label %89, label %108

; <label>:108:                                    ; preds = %106
  %109 = getelementptr inbounds [512 x i8], [512 x i8]* %15, i32 0, i32 0
  %110 = getelementptr inbounds [512 x i8], [512 x i8]* %15, i32 0, i32 0
  %111 = add i64 %35, 4
  %112 = getelementptr inbounds i8, i8* %109, i64 128
  %113 = getelementptr inbounds i8, i8* %110, i64 384
  %114 = getelementptr inbounds [80 x i8], [80 x i8]* %17, i32 0, i32 0
  %115 = call i32 @shasse2_init(i8* %114)
  %116 = getelementptr inbounds [80 x i8], [80 x i8]* %17, i32 0, i32 0
  %117 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %118 = getelementptr inbounds [1280 x i8], [1280 x i8]* %22, i32 0, i32 0
  %119 = call i32 @shasse2_data(i8* %116, i8* %117, i8* %118)
  %120 = getelementptr inbounds [256 x i8], [256 x i8]* %18, i32 0, i32 0
  %121 = bitcast i8* %120 to i32*
  %122 = getelementptr inbounds [256 x i8], [256 x i8]* %18, i32 0, i32 0
  %123 = getelementptr inbounds i8, i8* %122, i64 64
  %124 = bitcast i8* %123 to i32*
  %125 = getelementptr inbounds [256 x i8], [256 x i8]* %18, i32 0, i32 0
  %126 = getelementptr inbounds i8, i8* %125, i64 128
  %127 = bitcast i8* %126 to i32*
  %128 = getelementptr inbounds [256 x i8], [256 x i8]* %18, i32 0, i32 0
  %129 = getelementptr inbounds i8, i8* %128, i64 192
  %130 = bitcast i8* %129 to i32*
  %131 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %132 = bitcast i8* %131 to i32*
  br label %133

; <label>:133:                                    ; preds = %108, %150
  %.119 = phi i32* [ %130, %108 ], [ %146, %150 ]
  %.1218 = phi i32* [ %127, %108 ], [ %142, %150 ]
  %.1417 = phi i32* [ %132, %108 ], [ %149, %150 ]
  %.1616 = phi i32* [ %124, %108 ], [ %138, %150 ]
  %.1815 = phi i32* [ %121, %108 ], [ %134, %150 ]
  %.11014 = phi i32 [ 0, %108 ], [ %151, %150 ]
  call void @unroll_loop(i32 5)
  %134 = getelementptr inbounds i32, i32* %.1815, i32 1
  %135 = load i32, i32* %.1815, align 4
  %136 = xor i32 %135, 1549556828
  %137 = getelementptr inbounds i32, i32* %.1417, i32 1
  store i32 %136, i32* %.1417, align 4
  %138 = getelementptr inbounds i32, i32* %.1616, i32 1
  %139 = load i32, i32* %.1616, align 4
  %140 = xor i32 %139, 1549556828
  %141 = getelementptr inbounds i32, i32* %137, i32 1
  store i32 %140, i32* %137, align 4
  %142 = getelementptr inbounds i32, i32* %.1218, i32 1
  %143 = load i32, i32* %.1218, align 4
  %144 = xor i32 %143, 1549556828
  %145 = getelementptr inbounds i32, i32* %141, i32 1
  store i32 %144, i32* %141, align 4
  %146 = getelementptr inbounds i32, i32* %.119, i32 1
  %147 = load i32, i32* %.119, align 4
  %148 = xor i32 %147, 1549556828
  %149 = getelementptr inbounds i32, i32* %145, i32 1
  store i32 %148, i32* %145, align 4
  br label %150

; <label>:150:                                    ; preds = %133
  %151 = add nuw nsw i32 %.11014, 1
  %exitcond20 = icmp ne i32 %151, 16
  br i1 %exitcond20, label %133, label %152

; <label>:152:                                    ; preds = %150
  %153 = getelementptr inbounds [512 x i8], [512 x i8]* %15, i32 0, i32 0
  %154 = getelementptr inbounds i8, i8* %23, i64 256
  %155 = trunc i64 %111 to i32
  %156 = getelementptr inbounds [80 x i8], [80 x i8]* %19, i32 0, i32 0
  %157 = call i32 @shasse2_init(i8* %156)
  %158 = getelementptr inbounds [80 x i8], [80 x i8]* %19, i32 0, i32 0
  %159 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %160 = getelementptr inbounds [1280 x i8], [1280 x i8]* %22, i32 0, i32 0
  %161 = call i32 @shasse2_data(i8* %158, i8* %159, i8* %160)
  %162 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %162, i8 0, i64 256, i1 false)
  %163 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i64 0, i64 92
  store i8 -128, i8* %163, align 4
  %164 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i64 0, i64 88
  store i8 -128, i8* %164, align 8
  %165 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i64 0, i64 84
  store i8 -128, i8* %165, align 4
  %166 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i64 0, i64 80
  store i8 -128, i8* %166, align 16
  %167 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i64 0, i64 254
  store i8 2, i8* %167, align 2
  %168 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i64 0, i64 250
  store i8 2, i8* %168, align 2
  %169 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i64 0, i64 246
  store i8 2, i8* %169, align 2
  %170 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i64 0, i64 242
  store i8 2, i8* %170, align 2
  %171 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i64 0, i64 255
  store i8 -96, i8* %171, align 1
  %172 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i64 0, i64 251
  store i8 -96, i8* %172, align 1
  %173 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i64 0, i64 247
  store i8 -96, i8* %173, align 1
  %174 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i64 0, i64 243
  store i8 -96, i8* %174, align 1
  %175 = sub nsw i32 %155, 1
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds [36 x i8], [36 x i8]* %10, i64 0, i64 %176
  store i8 1, i8* %177, align 1
  %178 = call %struct.env_md_st* @EVP_sha1()
  %179 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i32 0, i32 0
  %180 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i32 0, i32 0
  %181 = call i64 @strlen(i8* %180) #10
  %182 = trunc i64 %181 to i32
  %183 = getelementptr inbounds [36 x i8], [36 x i8]* %10, i32 0, i32 0
  %184 = sext i32 %155 to i64
  %185 = call i8* @HMAC(%struct.env_md_st* %178, i8* %179, i32 %182, i8* %183, i64 %184, i8* %153, i32* null)
  %186 = call %struct.env_md_st* @EVP_sha1()
  %187 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i32 0, i32 0
  %188 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i32 0, i32 0
  %189 = call i64 @strlen(i8* %188) #10
  %190 = trunc i64 %189 to i32
  %191 = getelementptr inbounds [36 x i8], [36 x i8]* %10, i32 0, i32 0
  %192 = sext i32 %155 to i64
  %193 = call i8* @HMAC(%struct.env_md_st* %186, i8* %187, i32 %190, i8* %191, i64 %192, i8* %112, i32* null)
  %194 = call %struct.env_md_st* @EVP_sha1()
  %195 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i32 0, i32 0
  %196 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i32 0, i32 0
  %197 = call i64 @strlen(i8* %196) #10
  %198 = trunc i64 %197 to i32
  %199 = getelementptr inbounds [36 x i8], [36 x i8]* %10, i32 0, i32 0
  %200 = sext i32 %155 to i64
  %201 = call i8* @HMAC(%struct.env_md_st* %194, i8* %195, i32 %198, i8* %199, i64 %200, i8* %154, i32* null)
  %202 = call %struct.env_md_st* @EVP_sha1()
  %203 = getelementptr inbounds [128 x i8], [128 x i8]* %14, i32 0, i32 0
  %204 = getelementptr inbounds [128 x i8], [128 x i8]* %14, i32 0, i32 0
  %205 = call i64 @strlen(i8* %204) #10
  %206 = trunc i64 %205 to i32
  %207 = getelementptr inbounds [36 x i8], [36 x i8]* %10, i32 0, i32 0
  %208 = sext i32 %155 to i64
  %209 = call i8* @HMAC(%struct.env_md_st* %202, i8* %203, i32 %206, i8* %207, i64 %208, i8* %113, i32* null)
  %210 = bitcast i8* %153 to i32*
  %211 = bitcast i8* %112 to i32*
  %212 = bitcast i8* %154 to i32*
  %213 = bitcast i8* %113 to i32*
  %214 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %215 = bitcast i8* %214 to i32*
  %216 = getelementptr inbounds i32, i32* %210, i32 1
  %217 = load i32, i32* %210, align 4
  %218 = getelementptr inbounds i32, i32* %215, i32 1
  store i32 %217, i32* %215, align 4
  %219 = getelementptr inbounds i32, i32* %211, i32 1
  %220 = load i32, i32* %211, align 4
  %221 = getelementptr inbounds i32, i32* %218, i32 1
  store i32 %220, i32* %218, align 4
  %222 = getelementptr inbounds i32, i32* %212, i32 1
  %223 = load i32, i32* %212, align 4
  %224 = getelementptr inbounds i32, i32* %221, i32 1
  store i32 %223, i32* %221, align 4
  %225 = getelementptr inbounds i32, i32* %213, i32 1
  %226 = load i32, i32* %213, align 4
  %227 = getelementptr inbounds i32, i32* %224, i32 1
  store i32 %226, i32* %224, align 4
  %228 = getelementptr inbounds i32, i32* %216, i32 1
  %229 = load i32, i32* %216, align 4
  %230 = getelementptr inbounds i32, i32* %227, i32 1
  store i32 %229, i32* %227, align 4
  %231 = getelementptr inbounds i32, i32* %219, i32 1
  %232 = load i32, i32* %219, align 4
  %233 = getelementptr inbounds i32, i32* %230, i32 1
  store i32 %232, i32* %230, align 4
  %234 = getelementptr inbounds i32, i32* %222, i32 1
  %235 = load i32, i32* %222, align 4
  %236 = getelementptr inbounds i32, i32* %233, i32 1
  store i32 %235, i32* %233, align 4
  %237 = getelementptr inbounds i32, i32* %225, i32 1
  %238 = load i32, i32* %225, align 4
  %239 = getelementptr inbounds i32, i32* %236, i32 1
  store i32 %238, i32* %236, align 4
  %240 = getelementptr inbounds i32, i32* %228, i32 1
  %241 = load i32, i32* %228, align 4
  %242 = getelementptr inbounds i32, i32* %239, i32 1
  store i32 %241, i32* %239, align 4
  %243 = getelementptr inbounds i32, i32* %231, i32 1
  %244 = load i32, i32* %231, align 4
  %245 = getelementptr inbounds i32, i32* %242, i32 1
  store i32 %244, i32* %242, align 4
  %246 = getelementptr inbounds i32, i32* %234, i32 1
  %247 = load i32, i32* %234, align 4
  %248 = getelementptr inbounds i32, i32* %245, i32 1
  store i32 %247, i32* %245, align 4
  %249 = getelementptr inbounds i32, i32* %237, i32 1
  %250 = load i32, i32* %237, align 4
  %251 = getelementptr inbounds i32, i32* %248, i32 1
  store i32 %250, i32* %248, align 4
  %252 = getelementptr inbounds i32, i32* %240, i32 1
  %253 = load i32, i32* %240, align 4
  %254 = getelementptr inbounds i32, i32* %251, i32 1
  store i32 %253, i32* %251, align 4
  %255 = getelementptr inbounds i32, i32* %243, i32 1
  %256 = load i32, i32* %243, align 4
  %257 = getelementptr inbounds i32, i32* %254, i32 1
  store i32 %256, i32* %254, align 4
  %258 = getelementptr inbounds i32, i32* %246, i32 1
  %259 = load i32, i32* %246, align 4
  %260 = getelementptr inbounds i32, i32* %257, i32 1
  store i32 %259, i32* %257, align 4
  %261 = getelementptr inbounds i32, i32* %249, i32 1
  %262 = load i32, i32* %249, align 4
  %263 = getelementptr inbounds i32, i32* %260, i32 1
  store i32 %262, i32* %260, align 4
  %264 = load i32, i32* %252, align 4
  %265 = getelementptr inbounds i32, i32* %263, i32 1
  store i32 %264, i32* %263, align 4
  %266 = load i32, i32* %255, align 4
  %267 = getelementptr inbounds i32, i32* %265, i32 1
  store i32 %266, i32* %265, align 4
  %268 = load i32, i32* %258, align 4
  %269 = getelementptr inbounds i32, i32* %267, i32 1
  store i32 %268, i32* %267, align 4
  %270 = load i32, i32* %261, align 4
  store i32 %270, i32* %269, align 4
  br label %271

; <label>:271:                                    ; preds = %152, %396
  %.212 = phi i32 [ 1, %152 ], [ %397, %396 ]
  call void @unroll_loop(i32 6)
  %272 = getelementptr inbounds [80 x i8], [80 x i8]* %21, i32 0, i32 0
  %273 = getelementptr inbounds [80 x i8], [80 x i8]* %17, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %272, i8* align 16 %273, i64 80, i1 false), !track !40
  %274 = getelementptr inbounds [80 x i8], [80 x i8]* %21, i32 0, i32 0
  %275 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %276 = getelementptr inbounds [1280 x i8], [1280 x i8]* %22, i32 0, i32 0
  %277 = call i32 @shasse2_data(i8* %274, i8* %275, i8* %276)
  %278 = getelementptr inbounds [80 x i8], [80 x i8]* %21, i32 0, i32 0
  %279 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %280 = call i32 @shasse2_ends(i8* %278, i8* %279)
  %281 = getelementptr inbounds [80 x i8], [80 x i8]* %21, i32 0, i32 0
  %282 = getelementptr inbounds [80 x i8], [80 x i8]* %19, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %281, i8* align 16 %282, i64 80, i1 false), !track !41
  %283 = getelementptr inbounds [80 x i8], [80 x i8]* %21, i32 0, i32 0
  %284 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %285 = getelementptr inbounds [1280 x i8], [1280 x i8]* %22, i32 0, i32 0
  %286 = call i32 @shasse2_data(i8* %283, i8* %284, i8* %285)
  %287 = getelementptr inbounds [80 x i8], [80 x i8]* %21, i32 0, i32 0
  %288 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %289 = call i32 @shasse2_ends(i8* %287, i8* %288)
  %290 = bitcast i8* %153 to i32*
  %291 = bitcast i8* %112 to i32*
  %292 = bitcast i8* %154 to i32*
  %293 = bitcast i8* %113 to i32*
  %294 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %295 = bitcast i8* %294 to i32*
  %296 = getelementptr inbounds i32, i32* %295, i32 1
  %297 = load i32, i32* %295, align 4
  %298 = getelementptr inbounds i32, i32* %290, i32 1
  %299 = load i32, i32* %290, align 4
  %300 = xor i32 %299, %297
  store i32 %300, i32* %290, align 4
  %301 = getelementptr inbounds i32, i32* %296, i32 1
  %302 = load i32, i32* %296, align 4
  %303 = getelementptr inbounds i32, i32* %291, i32 1
  %304 = load i32, i32* %291, align 4
  %305 = xor i32 %304, %302
  store i32 %305, i32* %291, align 4
  %306 = getelementptr inbounds i32, i32* %301, i32 1
  %307 = load i32, i32* %301, align 4
  %308 = getelementptr inbounds i32, i32* %292, i32 1
  %309 = load i32, i32* %292, align 4
  %310 = xor i32 %309, %307
  store i32 %310, i32* %292, align 4
  %311 = getelementptr inbounds i32, i32* %306, i32 1
  %312 = load i32, i32* %306, align 4
  %313 = getelementptr inbounds i32, i32* %293, i32 1
  %314 = load i32, i32* %293, align 4
  %315 = xor i32 %314, %312
  store i32 %315, i32* %293, align 4
  %316 = getelementptr inbounds i32, i32* %311, i32 1
  %317 = load i32, i32* %311, align 4
  %318 = getelementptr inbounds i32, i32* %298, i32 1
  %319 = load i32, i32* %298, align 4
  %320 = xor i32 %319, %317
  store i32 %320, i32* %298, align 4
  %321 = getelementptr inbounds i32, i32* %316, i32 1
  %322 = load i32, i32* %316, align 4
  %323 = getelementptr inbounds i32, i32* %303, i32 1
  %324 = load i32, i32* %303, align 4
  %325 = xor i32 %324, %322
  store i32 %325, i32* %303, align 4
  %326 = getelementptr inbounds i32, i32* %321, i32 1
  %327 = load i32, i32* %321, align 4
  %328 = getelementptr inbounds i32, i32* %308, i32 1
  %329 = load i32, i32* %308, align 4
  %330 = xor i32 %329, %327
  store i32 %330, i32* %308, align 4
  %331 = getelementptr inbounds i32, i32* %326, i32 1
  %332 = load i32, i32* %326, align 4
  %333 = getelementptr inbounds i32, i32* %313, i32 1
  %334 = load i32, i32* %313, align 4
  %335 = xor i32 %334, %332
  store i32 %335, i32* %313, align 4
  %336 = getelementptr inbounds i32, i32* %331, i32 1
  %337 = load i32, i32* %331, align 4
  %338 = getelementptr inbounds i32, i32* %318, i32 1
  %339 = load i32, i32* %318, align 4
  %340 = xor i32 %339, %337
  store i32 %340, i32* %318, align 4
  %341 = getelementptr inbounds i32, i32* %336, i32 1
  %342 = load i32, i32* %336, align 4
  %343 = getelementptr inbounds i32, i32* %323, i32 1
  %344 = load i32, i32* %323, align 4
  %345 = xor i32 %344, %342
  store i32 %345, i32* %323, align 4
  %346 = getelementptr inbounds i32, i32* %341, i32 1
  %347 = load i32, i32* %341, align 4
  %348 = getelementptr inbounds i32, i32* %328, i32 1
  %349 = load i32, i32* %328, align 4
  %350 = xor i32 %349, %347
  store i32 %350, i32* %328, align 4
  %351 = getelementptr inbounds i32, i32* %346, i32 1
  %352 = load i32, i32* %346, align 4
  %353 = getelementptr inbounds i32, i32* %333, i32 1
  %354 = load i32, i32* %333, align 4
  %355 = xor i32 %354, %352
  store i32 %355, i32* %333, align 4
  %356 = getelementptr inbounds i32, i32* %351, i32 1
  %357 = load i32, i32* %351, align 4
  %358 = getelementptr inbounds i32, i32* %338, i32 1
  %359 = load i32, i32* %338, align 4
  %360 = xor i32 %359, %357
  store i32 %360, i32* %338, align 4
  %361 = getelementptr inbounds i32, i32* %356, i32 1
  %362 = load i32, i32* %356, align 4
  %363 = getelementptr inbounds i32, i32* %343, i32 1
  %364 = load i32, i32* %343, align 4
  %365 = xor i32 %364, %362
  store i32 %365, i32* %343, align 4
  %366 = getelementptr inbounds i32, i32* %361, i32 1
  %367 = load i32, i32* %361, align 4
  %368 = getelementptr inbounds i32, i32* %348, i32 1
  %369 = load i32, i32* %348, align 4
  %370 = xor i32 %369, %367
  store i32 %370, i32* %348, align 4
  %371 = getelementptr inbounds i32, i32* %366, i32 1
  %372 = load i32, i32* %366, align 4
  %373 = getelementptr inbounds i32, i32* %353, i32 1
  %374 = load i32, i32* %353, align 4
  %375 = xor i32 %374, %372
  store i32 %375, i32* %353, align 4
  %376 = getelementptr inbounds i32, i32* %371, i32 1
  %377 = load i32, i32* %371, align 4
  %378 = getelementptr inbounds i32, i32* %358, i32 1
  %379 = load i32, i32* %358, align 4
  %380 = xor i32 %379, %377
  store i32 %380, i32* %358, align 4
  %381 = getelementptr inbounds i32, i32* %376, i32 1
  %382 = load i32, i32* %376, align 4
  %383 = getelementptr inbounds i32, i32* %363, i32 1
  %384 = load i32, i32* %363, align 4
  %385 = xor i32 %384, %382
  store i32 %385, i32* %363, align 4
  %386 = getelementptr inbounds i32, i32* %381, i32 1
  %387 = load i32, i32* %381, align 4
  %388 = getelementptr inbounds i32, i32* %368, i32 1
  %389 = load i32, i32* %368, align 4
  %390 = xor i32 %389, %387
  store i32 %390, i32* %368, align 4
  %391 = getelementptr inbounds i32, i32* %386, i32 1
  %392 = load i32, i32* %386, align 4
  %393 = getelementptr inbounds i32, i32* %373, i32 1
  %394 = load i32, i32* %373, align 4
  %395 = xor i32 %394, %392
  store i32 %395, i32* %373, align 4
  br label %396

; <label>:396:                                    ; preds = %271
  %397 = add nuw nsw i32 %.212, 1
  %exitcond13 = icmp ne i32 %397, 4096
  br i1 %exitcond13, label %271, label %398

; <label>:398:                                    ; preds = %396
  %399 = getelementptr inbounds i32, i32* %255, i32 1
  %400 = getelementptr inbounds i32, i32* %261, i32 1
  %401 = sub nsw i32 %155, 1
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds [36 x i8], [36 x i8]* %10, i64 0, i64 %402
  store i8 2, i8* %403, align 1
  %404 = call %struct.env_md_st* @EVP_sha1()
  %405 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i32 0, i32 0
  %406 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i32 0, i32 0
  %407 = call i64 @strlen(i8* %406) #10
  %408 = trunc i64 %407 to i32
  %409 = getelementptr inbounds [36 x i8], [36 x i8]* %10, i32 0, i32 0
  %410 = sext i32 %155 to i64
  %411 = getelementptr inbounds i8, i8* %153, i64 20
  %412 = call i8* @HMAC(%struct.env_md_st* %404, i8* %405, i32 %408, i8* %409, i64 %410, i8* %411, i32* null)
  %413 = call %struct.env_md_st* @EVP_sha1()
  %414 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i32 0, i32 0
  %415 = getelementptr inbounds [128 x i8], [128 x i8]* %12, i32 0, i32 0
  %416 = call i64 @strlen(i8* %415) #10
  %417 = trunc i64 %416 to i32
  %418 = getelementptr inbounds [36 x i8], [36 x i8]* %10, i32 0, i32 0
  %419 = sext i32 %155 to i64
  %420 = getelementptr inbounds i8, i8* %112, i64 20
  %421 = call i8* @HMAC(%struct.env_md_st* %413, i8* %414, i32 %417, i8* %418, i64 %419, i8* %420, i32* null)
  %422 = call %struct.env_md_st* @EVP_sha1()
  %423 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i32 0, i32 0
  %424 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i32 0, i32 0
  %425 = call i64 @strlen(i8* %424) #10
  %426 = trunc i64 %425 to i32
  %427 = getelementptr inbounds [36 x i8], [36 x i8]* %10, i32 0, i32 0
  %428 = sext i32 %155 to i64
  %429 = getelementptr inbounds i8, i8* %154, i64 20
  %430 = call i8* @HMAC(%struct.env_md_st* %422, i8* %423, i32 %426, i8* %427, i64 %428, i8* %429, i32* null)
  %431 = call %struct.env_md_st* @EVP_sha1()
  %432 = getelementptr inbounds [128 x i8], [128 x i8]* %14, i32 0, i32 0
  %433 = getelementptr inbounds [128 x i8], [128 x i8]* %14, i32 0, i32 0
  %434 = call i64 @strlen(i8* %433) #10
  %435 = trunc i64 %434 to i32
  %436 = getelementptr inbounds [36 x i8], [36 x i8]* %10, i32 0, i32 0
  %437 = sext i32 %155 to i64
  %438 = getelementptr inbounds i8, i8* %113, i64 20
  %439 = call i8* @HMAC(%struct.env_md_st* %431, i8* %432, i32 %435, i8* %436, i64 %437, i8* %438, i32* null)
  %440 = getelementptr inbounds i8, i8* %153, i64 20
  %441 = bitcast i8* %440 to i32*
  %442 = getelementptr inbounds i8, i8* %112, i64 20
  %443 = bitcast i8* %442 to i32*
  %444 = getelementptr inbounds i8, i8* %154, i64 20
  %445 = bitcast i8* %444 to i32*
  %446 = getelementptr inbounds i8, i8* %113, i64 20
  %447 = bitcast i8* %446 to i32*
  %448 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %449 = bitcast i8* %448 to i32*
  %450 = getelementptr inbounds i32, i32* %441, i32 1
  %451 = load i32, i32* %441, align 4
  %452 = getelementptr inbounds i32, i32* %449, i32 1
  store i32 %451, i32* %449, align 4
  %453 = getelementptr inbounds i32, i32* %443, i32 1
  %454 = load i32, i32* %443, align 4
  %455 = getelementptr inbounds i32, i32* %452, i32 1
  store i32 %454, i32* %452, align 4
  %456 = getelementptr inbounds i32, i32* %445, i32 1
  %457 = load i32, i32* %445, align 4
  %458 = getelementptr inbounds i32, i32* %455, i32 1
  store i32 %457, i32* %455, align 4
  %459 = getelementptr inbounds i32, i32* %447, i32 1
  %460 = load i32, i32* %447, align 4
  %461 = getelementptr inbounds i32, i32* %458, i32 1
  store i32 %460, i32* %458, align 4
  %462 = getelementptr inbounds i32, i32* %450, i32 1
  %463 = load i32, i32* %450, align 4
  %464 = getelementptr inbounds i32, i32* %461, i32 1
  store i32 %463, i32* %461, align 4
  %465 = getelementptr inbounds i32, i32* %453, i32 1
  %466 = load i32, i32* %453, align 4
  %467 = getelementptr inbounds i32, i32* %464, i32 1
  store i32 %466, i32* %464, align 4
  %468 = getelementptr inbounds i32, i32* %456, i32 1
  %469 = load i32, i32* %456, align 4
  %470 = getelementptr inbounds i32, i32* %467, i32 1
  store i32 %469, i32* %467, align 4
  %471 = getelementptr inbounds i32, i32* %459, i32 1
  %472 = load i32, i32* %459, align 4
  %473 = getelementptr inbounds i32, i32* %470, i32 1
  store i32 %472, i32* %470, align 4
  %474 = getelementptr inbounds i32, i32* %462, i32 1
  %475 = load i32, i32* %462, align 4
  %476 = getelementptr inbounds i32, i32* %473, i32 1
  store i32 %475, i32* %473, align 4
  %477 = getelementptr inbounds i32, i32* %465, i32 1
  %478 = load i32, i32* %465, align 4
  %479 = getelementptr inbounds i32, i32* %476, i32 1
  store i32 %478, i32* %476, align 4
  %480 = getelementptr inbounds i32, i32* %468, i32 1
  %481 = load i32, i32* %468, align 4
  %482 = getelementptr inbounds i32, i32* %479, i32 1
  store i32 %481, i32* %479, align 4
  %483 = getelementptr inbounds i32, i32* %471, i32 1
  %484 = load i32, i32* %471, align 4
  %485 = getelementptr inbounds i32, i32* %482, i32 1
  store i32 %484, i32* %482, align 4
  %486 = getelementptr inbounds i32, i32* %474, i32 1
  %487 = load i32, i32* %474, align 4
  %488 = getelementptr inbounds i32, i32* %485, i32 1
  store i32 %487, i32* %485, align 4
  %489 = getelementptr inbounds i32, i32* %477, i32 1
  %490 = load i32, i32* %477, align 4
  %491 = getelementptr inbounds i32, i32* %488, i32 1
  store i32 %490, i32* %488, align 4
  %492 = getelementptr inbounds i32, i32* %480, i32 1
  %493 = load i32, i32* %480, align 4
  %494 = getelementptr inbounds i32, i32* %491, i32 1
  store i32 %493, i32* %491, align 4
  %495 = getelementptr inbounds i32, i32* %483, i32 1
  %496 = load i32, i32* %483, align 4
  %497 = getelementptr inbounds i32, i32* %494, i32 1
  store i32 %496, i32* %494, align 4
  %498 = load i32, i32* %486, align 4
  %499 = getelementptr inbounds i32, i32* %497, i32 1
  store i32 %498, i32* %497, align 4
  %500 = load i32, i32* %489, align 4
  %501 = getelementptr inbounds i32, i32* %499, i32 1
  store i32 %500, i32* %499, align 4
  %502 = load i32, i32* %492, align 4
  %503 = getelementptr inbounds i32, i32* %501, i32 1
  store i32 %502, i32* %501, align 4
  %504 = load i32, i32* %495, align 4
  store i32 %504, i32* %503, align 4
  br label %505

; <label>:505:                                    ; preds = %398, %594
  %.311 = phi i32 [ 1, %398 ], [ %595, %594 ]
  call void @unroll_loop(i32 7)
  %506 = getelementptr inbounds [80 x i8], [80 x i8]* %21, i32 0, i32 0
  %507 = getelementptr inbounds [80 x i8], [80 x i8]* %17, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %506, i8* align 16 %507, i64 80, i1 false), !track !42
  %508 = getelementptr inbounds [80 x i8], [80 x i8]* %21, i32 0, i32 0
  %509 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %510 = getelementptr inbounds [1280 x i8], [1280 x i8]* %22, i32 0, i32 0
  %511 = call i32 @shasse2_data(i8* %508, i8* %509, i8* %510)
  %512 = getelementptr inbounds [80 x i8], [80 x i8]* %21, i32 0, i32 0
  %513 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %514 = call i32 @shasse2_ends(i8* %512, i8* %513)
  %515 = getelementptr inbounds [80 x i8], [80 x i8]* %21, i32 0, i32 0
  %516 = getelementptr inbounds [80 x i8], [80 x i8]* %19, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %515, i8* align 16 %516, i64 80, i1 false), !track !43
  %517 = getelementptr inbounds [80 x i8], [80 x i8]* %21, i32 0, i32 0
  %518 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %519 = getelementptr inbounds [1280 x i8], [1280 x i8]* %22, i32 0, i32 0
  %520 = call i32 @shasse2_data(i8* %517, i8* %518, i8* %519)
  %521 = getelementptr inbounds [80 x i8], [80 x i8]* %21, i32 0, i32 0
  %522 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %523 = call i32 @shasse2_ends(i8* %521, i8* %522)
  %524 = getelementptr inbounds i8, i8* %153, i64 20
  %525 = bitcast i8* %524 to i32*
  %526 = getelementptr inbounds i8, i8* %112, i64 20
  %527 = bitcast i8* %526 to i32*
  %528 = getelementptr inbounds i8, i8* %154, i64 20
  %529 = bitcast i8* %528 to i32*
  %530 = getelementptr inbounds i8, i8* %113, i64 20
  %531 = bitcast i8* %530 to i32*
  %532 = getelementptr inbounds [256 x i8], [256 x i8]* %20, i32 0, i32 0
  %533 = bitcast i8* %532 to i32*
  %534 = getelementptr inbounds i32, i32* %533, i32 1
  %535 = load i32, i32* %533, align 4
  %536 = getelementptr inbounds i32, i32* %525, i32 1
  %537 = load i32, i32* %525, align 4
  %538 = xor i32 %537, %535
  store i32 %538, i32* %525, align 4
  %539 = getelementptr inbounds i32, i32* %534, i32 1
  %540 = load i32, i32* %534, align 4
  %541 = getelementptr inbounds i32, i32* %527, i32 1
  %542 = load i32, i32* %527, align 4
  %543 = xor i32 %542, %540
  store i32 %543, i32* %527, align 4
  %544 = getelementptr inbounds i32, i32* %539, i32 1
  %545 = load i32, i32* %539, align 4
  %546 = getelementptr inbounds i32, i32* %529, i32 1
  %547 = load i32, i32* %529, align 4
  %548 = xor i32 %547, %545
  store i32 %548, i32* %529, align 4
  %549 = getelementptr inbounds i32, i32* %544, i32 1
  %550 = load i32, i32* %544, align 4
  %551 = getelementptr inbounds i32, i32* %531, i32 1
  %552 = load i32, i32* %531, align 4
  %553 = xor i32 %552, %550
  store i32 %553, i32* %531, align 4
  %554 = getelementptr inbounds i32, i32* %549, i32 1
  %555 = load i32, i32* %549, align 4
  %556 = getelementptr inbounds i32, i32* %536, i32 1
  %557 = load i32, i32* %536, align 4
  %558 = xor i32 %557, %555
  store i32 %558, i32* %536, align 4
  %559 = getelementptr inbounds i32, i32* %554, i32 1
  %560 = load i32, i32* %554, align 4
  %561 = getelementptr inbounds i32, i32* %541, i32 1
  %562 = load i32, i32* %541, align 4
  %563 = xor i32 %562, %560
  store i32 %563, i32* %541, align 4
  %564 = getelementptr inbounds i32, i32* %559, i32 1
  %565 = load i32, i32* %559, align 4
  %566 = getelementptr inbounds i32, i32* %546, i32 1
  %567 = load i32, i32* %546, align 4
  %568 = xor i32 %567, %565
  store i32 %568, i32* %546, align 4
  %569 = getelementptr inbounds i32, i32* %564, i32 1
  %570 = load i32, i32* %564, align 4
  %571 = getelementptr inbounds i32, i32* %551, i32 1
  %572 = load i32, i32* %551, align 4
  %573 = xor i32 %572, %570
  store i32 %573, i32* %551, align 4
  %574 = getelementptr inbounds i32, i32* %569, i32 1
  %575 = load i32, i32* %569, align 4
  %576 = getelementptr inbounds i32, i32* %556, i32 1
  %577 = load i32, i32* %556, align 4
  %578 = xor i32 %577, %575
  store i32 %578, i32* %556, align 4
  %579 = getelementptr inbounds i32, i32* %574, i32 1
  %580 = load i32, i32* %574, align 4
  %581 = getelementptr inbounds i32, i32* %561, i32 1
  %582 = load i32, i32* %561, align 4
  %583 = xor i32 %582, %580
  store i32 %583, i32* %561, align 4
  %584 = getelementptr inbounds i32, i32* %579, i32 1
  %585 = load i32, i32* %579, align 4
  %586 = getelementptr inbounds i32, i32* %566, i32 1
  %587 = load i32, i32* %566, align 4
  %588 = xor i32 %587, %585
  store i32 %588, i32* %566, align 4
  %589 = getelementptr inbounds i32, i32* %584, i32 1
  %590 = load i32, i32* %584, align 4
  %591 = getelementptr inbounds i32, i32* %571, i32 1
  %592 = load i32, i32* %571, align 4
  %593 = xor i32 %592, %590
  store i32 %593, i32* %571, align 4
  br label %594

; <label>:594:                                    ; preds = %505
  %595 = add nuw nsw i32 %.311, 1
  %exitcond = icmp ne i32 %595, 4096
  br i1 %exitcond, label %505, label %596

; <label>:596:                                    ; preds = %594
  %597 = getelementptr inbounds i32, i32* %252, i32 1
  %598 = getelementptr inbounds i32, i32* %258, i32 1
  %599 = getelementptr inbounds i32, i32* %269, i32 1
  %600 = getelementptr inbounds i32, i32* %486, i32 1
  %601 = getelementptr inbounds i32, i32* %489, i32 1
  %602 = getelementptr inbounds i32, i32* %492, i32 1
  %603 = getelementptr inbounds i32, i32* %495, i32 1
  %604 = getelementptr inbounds i32, i32* %503, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %154, i64 32, i1 false), !track !44
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %113, i64 32, i1 false), !track !45
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %153, i64 32, i1 false), !track !46
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %112, i64 32, i1 false), !track !47
  ret void
}

; Function Attrs: nounwind
declare dso_local i8* @strncpy(i8*, i8*, i64) #2

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #4

declare dso_local i32 @shasse2_init(i8*) #1

declare dso_local i32 @shasse2_data(i8*, i8*, i8*) #1

declare dso_local %struct.env_md_st* @EVP_sha1() #1

declare dso_local i8* @HMAC(%struct.env_md_st*, i8*, i32, i8*, i64, i8*, i32*) #1

declare dso_local i32 @shasse2_ends(i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @clean_exit(i32) #0 {
  %2 = alloca [128 x i8], align 16
  %3 = getelementptr inbounds [128 x i8], [128 x i8]* %2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %3, i8 0, i64 128, i1 false)
  %4 = icmp ne i32 %0, 0
  br i1 %4, label %5, label %14

; <label>:5:                                      ; preds = %1
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %7 = load i32, i32* %6, align 8
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %14, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr [26 x i8], [26 x i8]* @.str.3, i32 0, i32 0
  %11 = call i32 (i8*, ...) @printf(i8* %10)
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %13 = call i32 @fflush(%struct._IO_FILE* %12)
  br label %14

; <label>:14:                                     ; preds = %9, %5, %1
  store i32 1, i32* @close_aircrack, align 4
  %15 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 0, %16
  br i1 %17, label %.lr.ph14, label %34

.lr.ph14:                                         ; preds = %14
  br label %18

; <label>:18:                                     ; preds = %.lr.ph14, %29
  %indvars.iv16 = phi i64 [ 0, %.lr.ph14 ], [ %indvars.iv.next17, %29 ]
  call void @unroll_loop(i32 8)
  %19 = getelementptr inbounds [256 x [2 x i32]], [256 x [2 x i32]]* @mc_pipe, i64 0, i64 %indvars.iv16
  %20 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr [6 x i8], [6 x i8]* @.str.4, i32 0, i32 0
  %23 = call i32 @safe_write(i32 %21, i8* %22, i64 5)
  %24 = getelementptr inbounds [256 x [2 x i32]], [256 x [2 x i32]]* @bf_pipe, i64 0, i64 %indvars.iv16
  %25 = getelementptr inbounds [2 x i32], [2 x i32]* %24, i64 0, i64 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds [128 x i8], [128 x i8]* %2, i32 0, i32 0
  %28 = call i32 @safe_write(i32 %26, i8* %27, i64 64)
  br label %29

; <label>:29:                                     ; preds = %18
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 1
  %30 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = icmp slt i64 %indvars.iv.next17, %32
  br i1 %33, label %18, label %._crit_edge15

._crit_edge15:                                    ; preds = %29
  br label %34

; <label>:34:                                     ; preds = %._crit_edge15, %14
  %35 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = icmp ne i32 %36, 2
  br i1 %37, label %38, label %53

; <label>:38:                                     ; preds = %34
  %39 = load i32, i32* @id, align 4
  %40 = icmp slt i32 0, %39
  br i1 %40, label %.lr.ph10, label %52

.lr.ph10:                                         ; preds = %38
  br label %41

; <label>:41:                                     ; preds = %.lr.ph10, %48
  %indvars.iv = phi i64 [ 0, %.lr.ph10 ], [ %indvars.iv.next, %48 ]
  call void @unroll_loop(i32 9)
  %42 = getelementptr inbounds [128 x i64], [128 x i64]* @tid, i64 0, i64 %indvars.iv
  %43 = load i64, i64* %42, align 8
  %44 = call i32 @pthread_join(i64 %43, i8** null)
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %47

; <label>:46:                                     ; preds = %41
  br label %47

; <label>:47:                                     ; preds = %46, %41
  br label %48

; <label>:48:                                     ; preds = %47
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %49 = load i32, i32* @id, align 4
  %50 = sext i32 %49 to i64
  %51 = icmp slt i64 %indvars.iv.next, %50
  br i1 %51, label %41, label %._crit_edge11

._crit_edge11:                                    ; preds = %48
  br label %52

; <label>:52:                                     ; preds = %._crit_edge11, %38
  br label %53

; <label>:53:                                     ; preds = %52, %34
  %54 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  %55 = load i8*, i8** %54, align 8
  %56 = icmp ne i8* %55, null
  br i1 %56, label %57, label %61

; <label>:57:                                     ; preds = %53
  %58 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  %59 = load i8*, i8** %58, align 8
  call void @free(i8* %59) #9
  %60 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  store i8* null, i8** %60, align 8
  br label %61

; <label>:61:                                     ; preds = %57, %53
  %62 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  %63 = icmp ne %struct.AP_info* %62, null
  br i1 %63, label %.lr.ph6, label %126

.lr.ph6:                                          ; preds = %61
  br label %64

; <label>:64:                                     ; preds = %.lr.ph6, %122
  %.014 = phi %struct.AP_info* [ %62, %.lr.ph6 ], [ %124, %122 ]
  call void @unroll_loop(i32 10)
  %65 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 4
  %66 = load i8*, i8** %65, align 8
  %67 = icmp ne i8* %66, null
  br i1 %67, label %68, label %72

; <label>:68:                                     ; preds = %64
  %69 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 4
  %70 = load i8*, i8** %69, align 8
  call void @free(i8* %70) #9
  %71 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 4
  store i8* null, i8** %71, align 8
  br label %72

; <label>:72:                                     ; preds = %68, %64
  %73 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 5
  %74 = load i8**, i8*** %73, align 8
  call void @uniqueiv_wipe(i8** %74)
  %75 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 15
  %76 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %75, align 8
  %77 = icmp ne %struct.PTW_attackstate* %76, null
  br i1 %77, label %78, label %98

; <label>:78:                                     ; preds = %72
  %79 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 15
  %80 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %79, align 8
  %81 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %80, i32 0, i32 5
  %82 = load %struct.PTW_session*, %struct.PTW_session** %81, align 8
  %83 = icmp ne %struct.PTW_session* %82, null
  br i1 %83, label %84, label %93

; <label>:84:                                     ; preds = %78
  %85 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 15
  %86 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %85, align 8
  %87 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %86, i32 0, i32 5
  %88 = load %struct.PTW_session*, %struct.PTW_session** %87, align 8
  %89 = bitcast %struct.PTW_session* %88 to i8*
  call void @free(i8* %89) #9
  %90 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 15
  %91 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %90, align 8
  %92 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %91, i32 0, i32 5
  store %struct.PTW_session* null, %struct.PTW_session** %92, align 8
  br label %93

; <label>:93:                                     ; preds = %84, %78
  %94 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 15
  %95 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %94, align 8
  %96 = bitcast %struct.PTW_attackstate* %95 to i8*
  call void @free(i8* %96) #9
  %97 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 15
  store %struct.PTW_attackstate* null, %struct.PTW_attackstate** %97, align 8
  br label %98

; <label>:98:                                     ; preds = %93, %72
  %99 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 16
  %100 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %99, align 8
  %101 = icmp ne %struct.PTW_attackstate* %100, null
  br i1 %101, label %102, label %122

; <label>:102:                                    ; preds = %98
  %103 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 16
  %104 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %103, align 8
  %105 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %104, i32 0, i32 5
  %106 = load %struct.PTW_session*, %struct.PTW_session** %105, align 8
  %107 = icmp ne %struct.PTW_session* %106, null
  br i1 %107, label %108, label %117

; <label>:108:                                    ; preds = %102
  %109 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 16
  %110 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %109, align 8
  %111 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %110, i32 0, i32 5
  %112 = load %struct.PTW_session*, %struct.PTW_session** %111, align 8
  %113 = bitcast %struct.PTW_session* %112 to i8*
  call void @free(i8* %113) #9
  %114 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 16
  %115 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %114, align 8
  %116 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %115, i32 0, i32 5
  store %struct.PTW_session* null, %struct.PTW_session** %116, align 8
  br label %117

; <label>:117:                                    ; preds = %108, %102
  %118 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 16
  %119 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %118, align 8
  %120 = bitcast %struct.PTW_attackstate* %119 to i8*
  call void @free(i8* %120) #9
  %121 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 16
  store %struct.PTW_attackstate* null, %struct.PTW_attackstate** %121, align 8
  br label %122

; <label>:122:                                    ; preds = %117, %98
  %123 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.014, i32 0, i32 0
  %124 = load %struct.AP_info*, %struct.AP_info** %123, align 8
  %125 = icmp ne %struct.AP_info* %124, null
  br i1 %125, label %64, label %._crit_edge7

._crit_edge7:                                     ; preds = %122
  br label %126

; <label>:126:                                    ; preds = %._crit_edge7, %61
  %127 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  %128 = icmp ne %struct.AP_info* %127, null
  br i1 %128, label %.lr.ph, label %137

.lr.ph:                                           ; preds = %126
  br label %129

; <label>:129:                                    ; preds = %.lr.ph, %135
  %.123 = phi %struct.AP_info* [ %127, %.lr.ph ], [ %131, %135 ]
  call void @unroll_loop(i32 11)
  %130 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.123, i32 0, i32 0
  %131 = load %struct.AP_info*, %struct.AP_info** %130, align 8
  %132 = icmp ne %struct.AP_info* %.123, null
  br i1 %132, label %133, label %135

; <label>:133:                                    ; preds = %129
  %134 = bitcast %struct.AP_info* %.123 to i8*
  call void @free(i8* %134) #9
  br label %135

; <label>:135:                                    ; preds = %133, %129
  %136 = icmp ne %struct.AP_info* %131, null
  br i1 %136, label %129, label %._crit_edge

._crit_edge:                                      ; preds = %135
  br label %137

; <label>:137:                                    ; preds = %._crit_edge, %126
  %138 = call i32 @fork() #9
  %139 = icmp eq i32 %138, -1
  br i1 %139, label %140, label %141

; <label>:140:                                    ; preds = %137
  br label %141

; <label>:141:                                    ; preds = %140, %137
  %142 = icmp ne i32 %138, 0
  br i1 %142, label %143, label %144

; <label>:143:                                    ; preds = %141
  call void @exit(i32 0) #11
  br label %UnifiedUnreachableBlock

; <label>:144:                                    ; preds = %141
  call void @_exit(i32 %0) #12
  br label %UnifiedUnreachableBlock
                                                  ; No predecessors!
  ret void

UnifiedUnreachableBlock:                          ; preds = %144, %143
  unreachable
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @safe_write(i32, i8*, i64) #0 {
  %4 = icmp ult i64 0, %2
  br i1 %4, label %.lr.ph.lr.ph, label %.outer._crit_edge

.lr.ph.lr.ph:                                     ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.lr.ph, %.outer
  %5 = phi i1 [ %4, %.lr.ph.lr.ph ], [ %21, %.outer ]
  %.01.ph13 = phi i8* [ %1, %.lr.ph.lr.ph ], [ %20, %.outer ]
  %.02.ph12 = phi i64 [ 0, %.lr.ph.lr.ph ], [ %18, %.outer ]
  call void @unroll_loop(i32 23)
  br label %7

; <label>:6:                                      ; preds = %12
  br i1 %5, label %7, label %._crit_edge

; <label>:7:                                      ; preds = %.lr.ph, %6
  call void @unroll_loop(i32 24)
  %8 = sub i64 %2, %.02.ph12
  %9 = call i64 @write(i32 %0, i8* %.01.ph13, i64 %8)
  %10 = trunc i64 %9 to i32
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %.outer

; <label>:12:                                     ; preds = %7
  %13 = call i32* @__errno_location() #13
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 4
  br i1 %15, label %6, label %16

; <label>:16:                                     ; preds = %12
  %.lcssa = phi i32 [ %10, %12 ]
  br label %24

.outer:                                           ; preds = %7
  %.lcssa9 = phi i32 [ %10, %7 ]
  %17 = sext i32 %.lcssa9 to i64
  %18 = add i64 %.02.ph12, %17
  %19 = sext i32 %.lcssa9 to i64
  %20 = getelementptr inbounds i8, i8* %.01.ph13, i64 %19
  %21 = icmp ult i64 %18, %2
  br i1 %21, label %.lr.ph, label %.outer..outer._crit_edge_crit_edge

.outer..outer._crit_edge_crit_edge:               ; preds = %.outer
  %split14 = phi i64 [ %18, %.outer ]
  br label %.outer._crit_edge

.outer._crit_edge:                                ; preds = %.outer..outer._crit_edge_crit_edge, %3
  %split = phi i64 [ %split14, %.outer..outer._crit_edge_crit_edge ], [ 0, %3 ]
  br label %22

._crit_edge:                                      ; preds = %6
  %split11 = phi i64 [ %.02.ph12, %6 ]
  br label %22

; <label>:22:                                     ; preds = %._crit_edge, %.outer._crit_edge
  %.02.lcssa = phi i64 [ %split11, %._crit_edge ], [ %split, %.outer._crit_edge ]
  %23 = trunc i64 %.02.lcssa to i32
  br label %24

; <label>:24:                                     ; preds = %22, %16
  %.0 = phi i32 [ %.lcssa, %16 ], [ %23, %22 ]
  ret i32 %.0
}

declare dso_local i32 @pthread_join(i64, i8**) #1

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @fork() #2

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #6

declare dso_local i64 @write(i32, i8*, i64) #1

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #7

; Function Attrs: noinline nounwind uwtable
define dso_local void @sighandler(i32) #0 {
  %2 = call void (i32)* @signal(i32 %0, void (i32)* @sighandler) #9
  %3 = icmp eq i32 %0, 3
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %1
  call void @clean_exit(i32 0)
  br label %5

; <label>:5:                                      ; preds = %4, %1
  %6 = icmp eq i32 %0, 15
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %5
  call void @clean_exit(i32 1)
  br label %8

; <label>:8:                                      ; preds = %7, %5
  %9 = icmp eq i32 %0, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %8
  call void @clean_exit(i32 1)
  br label %11

; <label>:11:                                     ; preds = %10, %8
  %12 = icmp eq i32 %0, 28
  br i1 %12, label %13, label %16

; <label>:13:                                     ; preds = %11
  %14 = getelementptr [6 x i8], [6 x i8]* @.str.5, i32 0, i32 0
  %15 = call i32 (i8*, ...) @printf(i8* %14)
  br label %16

; <label>:16:                                     ; preds = %13, %11
  ret void
}

; Function Attrs: nounwind
declare dso_local void (i32)* @signal(i32, void (i32)*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @eof_wait(i32*) #0 {
  %2 = load i32, i32* %0, align 4
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %10

; <label>:4:                                      ; preds = %1
  store i32 1, i32* %0, align 4
  %5 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* @mx_eof) #9
  %6 = load i32, i32* @nb_eof, align 4
  %7 = add nsw i32 %6, 1
  store i32 %7, i32* @nb_eof, align 4
  %8 = call i32 @pthread_cond_broadcast(%union.pthread_cond_t* @cv_eof) #9
  %9 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @mx_eof) #9
  br label %10

; <label>:10:                                     ; preds = %4, %1
  %11 = call i32 @usleep(i32 100000)
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_mutex_lock(%union.pthread_mutex_t*) #2

; Function Attrs: nounwind
declare dso_local i32 @pthread_cond_broadcast(%union.pthread_cond_t*) #2

; Function Attrs: nounwind
declare dso_local i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) #2

declare dso_local i32 @usleep(i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @wpa_send_passphrase(i8*, %struct.WPA_data*, i32) #0 {
  %4 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 8
  %5 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %4) #9
  %6 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 5
  %7 = load i32, i32* %6, align 4
  %8 = add nsw i32 %7, 1
  %9 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = srem i32 %8, %10
  %12 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %25

; <label>:15:                                     ; preds = %3
  %16 = icmp ne i32 %2, 0
  br i1 %16, label %17, label %21

; <label>:17:                                     ; preds = %15
  %18 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 7
  %19 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 8
  %20 = call i32 @pthread_cond_wait(%union.pthread_cond_t* %18, %union.pthread_mutex_t* %19)
  br label %24

; <label>:21:                                     ; preds = %15
  %22 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 8
  %23 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %22) #9
  br label %42

; <label>:24:                                     ; preds = %17
  br label %25

; <label>:25:                                     ; preds = %24, %3
  %26 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 3
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 5
  %29 = load i32, i32* %28, align 4
  %30 = mul nsw i32 %29, 128
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %27, i64 %31
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %0, i64 128, i1 false), !track !48
  %33 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 5
  %34 = load i32, i32* %33, align 4
  %35 = add nsw i32 %34, 1
  %36 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 2
  %37 = load i32, i32* %36, align 4
  %38 = srem i32 %35, %37
  %39 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 5
  store i32 %38, i32* %39, align 4
  %40 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 8
  %41 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %40) #9
  br label %42

; <label>:42:                                     ; preds = %25, %21
  %.0 = phi i32 [ 1, %25 ], [ 0, %21 ]
  ret i32 %.0
}

declare dso_local i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @wpa_receive_passphrase(i8*, %struct.WPA_data*) #0 {
  %3 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 8
  %4 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %3) #9
  %5 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %6, %8
  br i1 %9, label %10, label %13

; <label>:10:                                     ; preds = %2
  %11 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 8
  %12 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %11) #9
  br label %32

; <label>:13:                                     ; preds = %2
  %14 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 3
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = mul nsw i32 %17, 128
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %15, i64 %19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %20, i64 128, i1 false), !track !49
  %21 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 4
  %22 = load i32, i32* %21, align 8
  %23 = add nsw i32 %22, 1
  %24 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = srem i32 %23, %25
  %27 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 4
  store i32 %26, i32* %27, align 8
  %28 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 7
  %29 = call i32 @pthread_cond_signal(%union.pthread_cond_t* %28) #9
  %30 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1, i32 0, i32 8
  %31 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %30) #9
  br label %32

; <label>:32:                                     ; preds = %13, %10
  %.0 = phi i32 [ 0, %10 ], [ 1, %13 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_cond_signal(%union.pthread_cond_t*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @checkbssids(i8*) #0 {
  %2 = alloca i8*, align 8, !track !50
  %3 = icmp eq i8* %0, null
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %1
  br label %317

; <label>:5:                                      ; preds = %1
  %6 = call noalias i8* @strdup(i8* %0) #9, !track !51
  store i8* %6, i8** %2, align 8
  br label %7

; <label>:7:                                      ; preds = %313, %5
  %.02 = phi i32 [ 1, %5 ], [ %.13, %313 ]
  %.01 = phi i32 [ 0, %5 ], [ %13, %313 ]
  call void @unroll_loop(i32 25)
  %8 = getelementptr [2 x i8], [2 x i8]* @.str.6, i32 0, i32 0
  %9 = call i8* @strsep(i8** %2, i8* %8) #9
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %7
  %.01.lcssa = phi i32 [ %.01, %7 ]
  br label %316

; <label>:12:                                     ; preds = %7
  %13 = add nuw nsw i32 %.01, 1
  %14 = call i64 @strlen(i8* %9) #10
  %15 = icmp ne i64 %14, 17
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %12
  br label %317

; <label>:17:                                     ; preds = %12
  %18 = getelementptr inbounds i8, i8* %9, i64 0
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp eq i32 %20, 88
  br i1 %21, label %33, label %22

; <label>:22:                                     ; preds = %17
  %23 = getelementptr inbounds i8, i8* %9, i64 0
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = icmp eq i32 %25, 120
  br i1 %26, label %33, label %27

; <label>:27:                                     ; preds = %22
  %28 = getelementptr inbounds i8, i8* %9, i64 0
  %29 = load i8, i8* %28, align 1
  %30 = call i32 @hexCharToInt(i8 zeroext %29)
  %31 = icmp sgt i32 %30, -1
  br i1 %31, label %33, label %32

; <label>:32:                                     ; preds = %27
  br label %317

; <label>:33:                                     ; preds = %27, %22, %17
  %34 = getelementptr inbounds i8, i8* %9, i64 1
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp eq i32 %36, 88
  br i1 %37, label %49, label %38

; <label>:38:                                     ; preds = %33
  %39 = getelementptr inbounds i8, i8* %9, i64 1
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp eq i32 %41, 120
  br i1 %42, label %49, label %43

; <label>:43:                                     ; preds = %38
  %44 = getelementptr inbounds i8, i8* %9, i64 1
  %45 = load i8, i8* %44, align 1
  %46 = call i32 @hexCharToInt(i8 zeroext %45)
  %47 = icmp sgt i32 %46, -1
  br i1 %47, label %49, label %48

; <label>:48:                                     ; preds = %43
  br label %317

; <label>:49:                                     ; preds = %43, %38, %33
  %50 = getelementptr inbounds i8, i8* %9, i64 2
  %51 = load i8, i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = icmp eq i32 %52, 95
  br i1 %53, label %65, label %54

; <label>:54:                                     ; preds = %49
  %55 = getelementptr inbounds i8, i8* %9, i64 2
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %57, 45
  br i1 %58, label %65, label %59

; <label>:59:                                     ; preds = %54
  %60 = getelementptr inbounds i8, i8* %9, i64 2
  %61 = load i8, i8* %60, align 1
  %62 = sext i8 %61 to i32
  %63 = icmp eq i32 %62, 58
  br i1 %63, label %65, label %64

; <label>:64:                                     ; preds = %59
  br label %317

; <label>:65:                                     ; preds = %59, %54, %49
  %66 = getelementptr inbounds i8, i8* %9, i64 3
  %67 = load i8, i8* %66, align 1
  %68 = sext i8 %67 to i32
  %69 = icmp eq i32 %68, 88
  br i1 %69, label %81, label %70

; <label>:70:                                     ; preds = %65
  %71 = getelementptr inbounds i8, i8* %9, i64 3
  %72 = load i8, i8* %71, align 1
  %73 = sext i8 %72 to i32
  %74 = icmp eq i32 %73, 120
  br i1 %74, label %81, label %75

; <label>:75:                                     ; preds = %70
  %76 = getelementptr inbounds i8, i8* %9, i64 3
  %77 = load i8, i8* %76, align 1
  %78 = call i32 @hexCharToInt(i8 zeroext %77)
  %79 = icmp sgt i32 %78, -1
  br i1 %79, label %81, label %80

; <label>:80:                                     ; preds = %75
  br label %317

; <label>:81:                                     ; preds = %75, %70, %65
  %82 = getelementptr inbounds i8, i8* %9, i64 4
  %83 = load i8, i8* %82, align 1
  %84 = sext i8 %83 to i32
  %85 = icmp eq i32 %84, 88
  br i1 %85, label %97, label %86

; <label>:86:                                     ; preds = %81
  %87 = getelementptr inbounds i8, i8* %9, i64 4
  %88 = load i8, i8* %87, align 1
  %89 = sext i8 %88 to i32
  %90 = icmp eq i32 %89, 120
  br i1 %90, label %97, label %91

; <label>:91:                                     ; preds = %86
  %92 = getelementptr inbounds i8, i8* %9, i64 4
  %93 = load i8, i8* %92, align 1
  %94 = call i32 @hexCharToInt(i8 zeroext %93)
  %95 = icmp sgt i32 %94, -1
  br i1 %95, label %97, label %96

; <label>:96:                                     ; preds = %91
  br label %317

; <label>:97:                                     ; preds = %91, %86, %81
  %98 = getelementptr inbounds i8, i8* %9, i64 5
  %99 = load i8, i8* %98, align 1
  %100 = sext i8 %99 to i32
  %101 = icmp eq i32 %100, 95
  br i1 %101, label %113, label %102

; <label>:102:                                    ; preds = %97
  %103 = getelementptr inbounds i8, i8* %9, i64 5
  %104 = load i8, i8* %103, align 1
  %105 = sext i8 %104 to i32
  %106 = icmp eq i32 %105, 45
  br i1 %106, label %113, label %107

; <label>:107:                                    ; preds = %102
  %108 = getelementptr inbounds i8, i8* %9, i64 5
  %109 = load i8, i8* %108, align 1
  %110 = sext i8 %109 to i32
  %111 = icmp eq i32 %110, 58
  br i1 %111, label %113, label %112

; <label>:112:                                    ; preds = %107
  br label %317

; <label>:113:                                    ; preds = %107, %102, %97
  %114 = getelementptr inbounds i8, i8* %9, i64 6
  %115 = load i8, i8* %114, align 1
  %116 = sext i8 %115 to i32
  %117 = icmp eq i32 %116, 88
  br i1 %117, label %129, label %118

; <label>:118:                                    ; preds = %113
  %119 = getelementptr inbounds i8, i8* %9, i64 6
  %120 = load i8, i8* %119, align 1
  %121 = sext i8 %120 to i32
  %122 = icmp eq i32 %121, 120
  br i1 %122, label %129, label %123

; <label>:123:                                    ; preds = %118
  %124 = getelementptr inbounds i8, i8* %9, i64 6
  %125 = load i8, i8* %124, align 1
  %126 = call i32 @hexCharToInt(i8 zeroext %125)
  %127 = icmp sgt i32 %126, -1
  br i1 %127, label %129, label %128

; <label>:128:                                    ; preds = %123
  br label %317

; <label>:129:                                    ; preds = %123, %118, %113
  %130 = getelementptr inbounds i8, i8* %9, i64 7
  %131 = load i8, i8* %130, align 1
  %132 = sext i8 %131 to i32
  %133 = icmp eq i32 %132, 88
  br i1 %133, label %145, label %134

; <label>:134:                                    ; preds = %129
  %135 = getelementptr inbounds i8, i8* %9, i64 7
  %136 = load i8, i8* %135, align 1
  %137 = sext i8 %136 to i32
  %138 = icmp eq i32 %137, 120
  br i1 %138, label %145, label %139

; <label>:139:                                    ; preds = %134
  %140 = getelementptr inbounds i8, i8* %9, i64 7
  %141 = load i8, i8* %140, align 1
  %142 = call i32 @hexCharToInt(i8 zeroext %141)
  %143 = icmp sgt i32 %142, -1
  br i1 %143, label %145, label %144

; <label>:144:                                    ; preds = %139
  br label %317

; <label>:145:                                    ; preds = %139, %134, %129
  %146 = getelementptr inbounds i8, i8* %9, i64 8
  %147 = load i8, i8* %146, align 1
  %148 = sext i8 %147 to i32
  %149 = icmp eq i32 %148, 95
  br i1 %149, label %161, label %150

; <label>:150:                                    ; preds = %145
  %151 = getelementptr inbounds i8, i8* %9, i64 8
  %152 = load i8, i8* %151, align 1
  %153 = sext i8 %152 to i32
  %154 = icmp eq i32 %153, 45
  br i1 %154, label %161, label %155

; <label>:155:                                    ; preds = %150
  %156 = getelementptr inbounds i8, i8* %9, i64 8
  %157 = load i8, i8* %156, align 1
  %158 = sext i8 %157 to i32
  %159 = icmp eq i32 %158, 58
  br i1 %159, label %161, label %160

; <label>:160:                                    ; preds = %155
  br label %317

; <label>:161:                                    ; preds = %155, %150, %145
  %162 = getelementptr inbounds i8, i8* %9, i64 9
  %163 = load i8, i8* %162, align 1
  %164 = sext i8 %163 to i32
  %165 = icmp eq i32 %164, 88
  br i1 %165, label %177, label %166

; <label>:166:                                    ; preds = %161
  %167 = getelementptr inbounds i8, i8* %9, i64 9
  %168 = load i8, i8* %167, align 1
  %169 = sext i8 %168 to i32
  %170 = icmp eq i32 %169, 120
  br i1 %170, label %177, label %171

; <label>:171:                                    ; preds = %166
  %172 = getelementptr inbounds i8, i8* %9, i64 9
  %173 = load i8, i8* %172, align 1
  %174 = call i32 @hexCharToInt(i8 zeroext %173)
  %175 = icmp sgt i32 %174, -1
  br i1 %175, label %177, label %176

; <label>:176:                                    ; preds = %171
  br label %317

; <label>:177:                                    ; preds = %171, %166, %161
  %178 = getelementptr inbounds i8, i8* %9, i64 10
  %179 = load i8, i8* %178, align 1
  %180 = sext i8 %179 to i32
  %181 = icmp eq i32 %180, 88
  br i1 %181, label %193, label %182

; <label>:182:                                    ; preds = %177
  %183 = getelementptr inbounds i8, i8* %9, i64 10
  %184 = load i8, i8* %183, align 1
  %185 = sext i8 %184 to i32
  %186 = icmp eq i32 %185, 120
  br i1 %186, label %193, label %187

; <label>:187:                                    ; preds = %182
  %188 = getelementptr inbounds i8, i8* %9, i64 10
  %189 = load i8, i8* %188, align 1
  %190 = call i32 @hexCharToInt(i8 zeroext %189)
  %191 = icmp sgt i32 %190, -1
  br i1 %191, label %193, label %192

; <label>:192:                                    ; preds = %187
  br label %317

; <label>:193:                                    ; preds = %187, %182, %177
  %194 = getelementptr inbounds i8, i8* %9, i64 11
  %195 = load i8, i8* %194, align 1
  %196 = sext i8 %195 to i32
  %197 = icmp eq i32 %196, 95
  br i1 %197, label %209, label %198

; <label>:198:                                    ; preds = %193
  %199 = getelementptr inbounds i8, i8* %9, i64 11
  %200 = load i8, i8* %199, align 1
  %201 = sext i8 %200 to i32
  %202 = icmp eq i32 %201, 45
  br i1 %202, label %209, label %203

; <label>:203:                                    ; preds = %198
  %204 = getelementptr inbounds i8, i8* %9, i64 11
  %205 = load i8, i8* %204, align 1
  %206 = sext i8 %205 to i32
  %207 = icmp eq i32 %206, 58
  br i1 %207, label %209, label %208

; <label>:208:                                    ; preds = %203
  br label %317

; <label>:209:                                    ; preds = %203, %198, %193
  %210 = getelementptr inbounds i8, i8* %9, i64 12
  %211 = load i8, i8* %210, align 1
  %212 = sext i8 %211 to i32
  %213 = icmp eq i32 %212, 88
  br i1 %213, label %225, label %214

; <label>:214:                                    ; preds = %209
  %215 = getelementptr inbounds i8, i8* %9, i64 12
  %216 = load i8, i8* %215, align 1
  %217 = sext i8 %216 to i32
  %218 = icmp eq i32 %217, 120
  br i1 %218, label %225, label %219

; <label>:219:                                    ; preds = %214
  %220 = getelementptr inbounds i8, i8* %9, i64 12
  %221 = load i8, i8* %220, align 1
  %222 = call i32 @hexCharToInt(i8 zeroext %221)
  %223 = icmp sgt i32 %222, -1
  br i1 %223, label %225, label %224

; <label>:224:                                    ; preds = %219
  br label %317

; <label>:225:                                    ; preds = %219, %214, %209
  %226 = getelementptr inbounds i8, i8* %9, i64 13
  %227 = load i8, i8* %226, align 1
  %228 = sext i8 %227 to i32
  %229 = icmp eq i32 %228, 88
  br i1 %229, label %241, label %230

; <label>:230:                                    ; preds = %225
  %231 = getelementptr inbounds i8, i8* %9, i64 13
  %232 = load i8, i8* %231, align 1
  %233 = sext i8 %232 to i32
  %234 = icmp eq i32 %233, 120
  br i1 %234, label %241, label %235

; <label>:235:                                    ; preds = %230
  %236 = getelementptr inbounds i8, i8* %9, i64 13
  %237 = load i8, i8* %236, align 1
  %238 = call i32 @hexCharToInt(i8 zeroext %237)
  %239 = icmp sgt i32 %238, -1
  br i1 %239, label %241, label %240

; <label>:240:                                    ; preds = %235
  br label %317

; <label>:241:                                    ; preds = %235, %230, %225
  %242 = getelementptr inbounds i8, i8* %9, i64 14
  %243 = load i8, i8* %242, align 1
  %244 = sext i8 %243 to i32
  %245 = icmp eq i32 %244, 95
  br i1 %245, label %257, label %246

; <label>:246:                                    ; preds = %241
  %247 = getelementptr inbounds i8, i8* %9, i64 14
  %248 = load i8, i8* %247, align 1
  %249 = sext i8 %248 to i32
  %250 = icmp eq i32 %249, 45
  br i1 %250, label %257, label %251

; <label>:251:                                    ; preds = %246
  %252 = getelementptr inbounds i8, i8* %9, i64 14
  %253 = load i8, i8* %252, align 1
  %254 = sext i8 %253 to i32
  %255 = icmp eq i32 %254, 58
  br i1 %255, label %257, label %256

; <label>:256:                                    ; preds = %251
  br label %317

; <label>:257:                                    ; preds = %251, %246, %241
  %258 = getelementptr inbounds i8, i8* %9, i64 15
  %259 = load i8, i8* %258, align 1
  %260 = sext i8 %259 to i32
  %261 = icmp eq i32 %260, 88
  br i1 %261, label %273, label %262

; <label>:262:                                    ; preds = %257
  %263 = getelementptr inbounds i8, i8* %9, i64 15
  %264 = load i8, i8* %263, align 1
  %265 = sext i8 %264 to i32
  %266 = icmp eq i32 %265, 120
  br i1 %266, label %273, label %267

; <label>:267:                                    ; preds = %262
  %268 = getelementptr inbounds i8, i8* %9, i64 15
  %269 = load i8, i8* %268, align 1
  %270 = call i32 @hexCharToInt(i8 zeroext %269)
  %271 = icmp sgt i32 %270, -1
  br i1 %271, label %273, label %272

; <label>:272:                                    ; preds = %267
  br label %317

; <label>:273:                                    ; preds = %267, %262, %257
  %274 = getelementptr inbounds i8, i8* %9, i64 16
  %275 = load i8, i8* %274, align 1
  %276 = sext i8 %275 to i32
  %277 = icmp eq i32 %276, 88
  br i1 %277, label %289, label %278

; <label>:278:                                    ; preds = %273
  %279 = getelementptr inbounds i8, i8* %9, i64 16
  %280 = load i8, i8* %279, align 1
  %281 = sext i8 %280 to i32
  %282 = icmp eq i32 %281, 120
  br i1 %282, label %289, label %283

; <label>:283:                                    ; preds = %278
  %284 = getelementptr inbounds i8, i8* %9, i64 16
  %285 = load i8, i8* %284, align 1
  %286 = call i32 @hexCharToInt(i8 zeroext %285)
  %287 = icmp sgt i32 %286, -1
  br i1 %287, label %289, label %288

; <label>:288:                                    ; preds = %283
  br label %317

; <label>:289:                                    ; preds = %283, %278, %273
  %290 = icmp ne i32 %.02, 0
  br i1 %290, label %291, label %312

; <label>:291:                                    ; preds = %289
  br label %292

; <label>:292:                                    ; preds = %291, %304
  %indvars.iv = phi i64 [ 0, %291 ], [ %indvars.iv.next, %304 ]
  call void @unroll_loop(i32 26)
  %293 = getelementptr inbounds i8, i8* %9, i64 %indvars.iv
  %294 = load i8, i8* %293, align 1
  %295 = sext i8 %294 to i32
  %296 = icmp eq i32 %295, 88
  br i1 %296, label %302, label %297

; <label>:297:                                    ; preds = %292
  %298 = getelementptr inbounds i8, i8* %9, i64 %indvars.iv
  %299 = load i8, i8* %298, align 1
  %300 = sext i8 %299 to i32
  %301 = icmp eq i32 %300, 120
  br i1 %301, label %302, label %303

; <label>:302:                                    ; preds = %297, %292
  br label %317

; <label>:303:                                    ; preds = %297
  br label %304

; <label>:304:                                    ; preds = %303
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %305 = icmp ult i64 %indvars.iv.next, 17
  br i1 %305, label %292, label %306

; <label>:306:                                    ; preds = %304
  %307 = call noalias i8* @malloc(i64 1) #9, !track !52
  %308 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 35
  store i8* %307, i8** %308, align 8
  %309 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 35
  %310 = load i8*, i8** %309, align 8
  %311 = call i32 @getmac(i8* %9, i32 1, i8* %310)
  br label %312

; <label>:312:                                    ; preds = %306, %289
  %.13 = phi i32 [ 0, %306 ], [ %.02, %289 ]
  br label %313

; <label>:313:                                    ; preds = %312
  %314 = load i8*, i8** %2, align 8
  %315 = icmp ne i8* %314, null
  br i1 %315, label %7, label %.loopexit

.loopexit:                                        ; preds = %313
  %.1.ph = phi i32 [ %13, %313 ]
  br label %316

; <label>:316:                                    ; preds = %.loopexit, %11
  %.1 = phi i32 [ %.01.lcssa, %11 ], [ %.1.ph, %.loopexit ]
  br label %317

; <label>:317:                                    ; preds = %316, %302, %288, %272, %256, %240, %224, %208, %192, %176, %160, %144, %128, %112, %96, %80, %64, %48, %32, %16, %4
  %.0 = phi i32 [ -1, %4 ], [ %.1, %316 ], [ -1, %16 ], [ -1, %302 ], [ -1, %288 ], [ -1, %272 ], [ -1, %256 ], [ -1, %240 ], [ -1, %224 ], [ -1, %208 ], [ -1, %192 ], [ -1, %176 ], [ -1, %160 ], [ -1, %144 ], [ -1, %128 ], [ -1, %112 ], [ -1, %96 ], [ -1, %80 ], [ -1, %64 ], [ -1, %48 ], [ -1, %32 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare dso_local noalias i8* @strdup(i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @strsep(i8**, i8*) #2

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mergebssids(i8*, i8*) #0 {
  %3 = alloca i8*, align 8, !track !53
  store i8* null, i8** %3, align 8
  %4 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 35
  %5 = load i8*, i8** %4, align 8
  %6 = call i32 @memcmp(i8* %5, i8* %1, i64 6) #10
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %2
  br label %148

; <label>:9:                                      ; preds = %2
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 36
  %11 = load %struct.mergeBSSID*, %struct.mergeBSSID** %10, align 8
  %12 = icmp ne %struct.mergeBSSID* %11, null
  br i1 %12, label %.lr.ph, label %32

.lr.ph:                                           ; preds = %9
  br label %13

; <label>:13:                                     ; preds = %.lr.ph, %28
  %.0410 = phi %struct.mergeBSSID* [ %11, %.lr.ph ], [ %30, %28 ]
  call void @unroll_loop(i32 27)
  %14 = getelementptr inbounds %struct.mergeBSSID, %struct.mergeBSSID* %.0410, i32 0, i32 0
  %15 = getelementptr inbounds [6 x i8], [6 x i8]* %14, i32 0, i32 0
  %16 = call i32 @memcmp(i8* %15, i8* %1, i64 6) #10
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %28

; <label>:18:                                     ; preds = %13
  %.04.lcssa7 = phi %struct.mergeBSSID* [ %.0410, %13 ]
  %19 = getelementptr inbounds %struct.mergeBSSID, %struct.mergeBSSID* %.04.lcssa7, i32 0, i32 2
  %20 = load i32, i32* %19, align 8
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %25

; <label>:22:                                     ; preds = %18
  %23 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 35
  %24 = load i8*, i8** %23, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %24, i64 6, i1 false), !track !54
  br label %25

; <label>:25:                                     ; preds = %22, %18
  %26 = getelementptr inbounds %struct.mergeBSSID, %struct.mergeBSSID* %.04.lcssa7, i32 0, i32 2
  %27 = load i32, i32* %26, align 8
  br label %148

; <label>:28:                                     ; preds = %13
  %29 = getelementptr inbounds %struct.mergeBSSID, %struct.mergeBSSID* %.0410, i32 0, i32 3
  %30 = load %struct.mergeBSSID*, %struct.mergeBSSID** %29, align 8
  %31 = icmp ne %struct.mergeBSSID* %30, null
  br i1 %31, label %13, label %._crit_edge

._crit_edge:                                      ; preds = %28
  %split = phi %struct.mergeBSSID* [ %.0410, %28 ]
  br label %32

; <label>:32:                                     ; preds = %._crit_edge, %9
  %.03.lcssa = phi %struct.mergeBSSID* [ %split, %._crit_edge ], [ null, %9 ]
  %33 = call noalias i8* @malloc(i64 18) #9
  %34 = icmp ne i8* %33, null
  br i1 %34, label %37, label %35

; <label>:35:                                     ; preds = %32
  %36 = getelementptr [14 x i8], [14 x i8]* @.str.7, i32 0, i32 0
  call void @perror(i8* %36)
  br label %148

; <label>:37:                                     ; preds = %32
  %38 = getelementptr inbounds i8, i8* %1, i64 0
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds i8, i8* %1, i64 1
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds i8, i8* %1, i64 2
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = getelementptr inbounds i8, i8* %1, i64 3
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = getelementptr inbounds i8, i8* %1, i64 4
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = getelementptr inbounds i8, i8* %1, i64 5
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = getelementptr [30 x i8], [30 x i8]* @.str.8, i32 0, i32 0
  %57 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %33, i64 18, i8* %56, i32 %40, i32 %43, i32 %46, i32 %49, i32 %52, i32 %55) #9
  %58 = getelementptr inbounds i8, i8* %33, i64 17
  store i8 0, i8* %58, align 1
  %59 = call noalias i8* @strdup(i8* %0) #9, !track !55
  store i8* %59, i8** %3, align 8
  %60 = getelementptr [2 x i8], [2 x i8]* @.str.6, i32 0, i32 0
  %61 = call i8* @strsep(i8** %3, i8* %60) #9
  br label %62

; <label>:62:                                     ; preds = %111, %37
  call void @unroll_loop(i32 28)
  %63 = getelementptr [2 x i8], [2 x i8]* @.str.6, i32 0, i32 0
  %64 = call i8* @strsep(i8** %3, i8* %63) #9
  %65 = icmp eq i8* %64, null
  br i1 %65, label %66, label %67

; <label>:66:                                     ; preds = %62
  br label %114

; <label>:67:                                     ; preds = %62
  br label %68

; <label>:68:                                     ; preds = %67, %105
  %indvars.iv = phi i64 [ 0, %67 ], [ %indvars.iv.next, %105 ]
  call void @unroll_loop(i32 29)
  %69 = getelementptr inbounds i8, i8* %64, i64 %indvars.iv
  %70 = load i8, i8* %69, align 1
  %71 = sext i8 %70 to i32
  %72 = icmp eq i32 %71, 88
  br i1 %72, label %93, label %73

; <label>:73:                                     ; preds = %68
  %74 = getelementptr inbounds i8, i8* %64, i64 %indvars.iv
  %75 = load i8, i8* %74, align 1
  %76 = sext i8 %75 to i32
  %77 = icmp eq i32 %76, 120
  br i1 %77, label %93, label %78

; <label>:78:                                     ; preds = %73
  %79 = getelementptr inbounds i8, i8* %64, i64 %indvars.iv
  %80 = load i8, i8* %79, align 1
  %81 = sext i8 %80 to i32
  %82 = icmp eq i32 %81, 95
  br i1 %82, label %93, label %83

; <label>:83:                                     ; preds = %78
  %84 = getelementptr inbounds i8, i8* %64, i64 %indvars.iv
  %85 = load i8, i8* %84, align 1
  %86 = sext i8 %85 to i32
  %87 = icmp eq i32 %86, 45
  br i1 %87, label %93, label %88

; <label>:88:                                     ; preds = %83
  %89 = getelementptr inbounds i8, i8* %64, i64 %indvars.iv
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp eq i32 %91, 58
  br i1 %92, label %93, label %94

; <label>:93:                                     ; preds = %88, %83, %78, %73, %68
  br label %105

; <label>:94:                                     ; preds = %88
  %95 = getelementptr inbounds i8, i8* %64, i64 %indvars.iv
  %96 = load i8, i8* %95, align 1
  %97 = sext i8 %96 to i32
  %98 = call i32 @toupper(i32 %97) #10
  %99 = getelementptr inbounds i8, i8* %33, i64 %indvars.iv
  %100 = load i8, i8* %99, align 1
  %101 = sext i8 %100 to i32
  %102 = icmp ne i32 %98, %101
  br i1 %102, label %103, label %104

; <label>:103:                                    ; preds = %94
  br label %107

; <label>:104:                                    ; preds = %94
  br label %105

; <label>:105:                                    ; preds = %104, %93
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %106 = icmp ult i64 %indvars.iv.next, 17
  br i1 %106, label %68, label %.loopexit

.loopexit:                                        ; preds = %105
  %.05.ph = phi i32 [ 0, %105 ]
  br label %107

; <label>:107:                                    ; preds = %.loopexit, %103
  %.05 = phi i32 [ 1, %103 ], [ %.05.ph, %.loopexit ]
  %108 = icmp eq i32 %.05, 0
  br i1 %108, label %109, label %110

; <label>:109:                                    ; preds = %107
  br label %114

; <label>:110:                                    ; preds = %107
  br label %111

; <label>:111:                                    ; preds = %110
  %112 = load i8*, i8** %3, align 8
  %113 = icmp ne i8* %112, null
  br i1 %113, label %62, label %.loopexit8

.loopexit8:                                       ; preds = %111
  %.01.ph = phi i32 [ 0, %111 ]
  br label %114

; <label>:114:                                    ; preds = %.loopexit8, %109, %66
  %.01 = phi i32 [ 0, %66 ], [ 1, %109 ], [ %.01.ph, %.loopexit8 ]
  %115 = icmp ne i8* %33, null
  br i1 %115, label %116, label %117

; <label>:116:                                    ; preds = %114
  call void @free(i8* %33) #9
  br label %117

; <label>:117:                                    ; preds = %116, %114
  %118 = icmp ne i8* %59, null
  br i1 %118, label %119, label %120

; <label>:119:                                    ; preds = %117
  call void @free(i8* %59) #9
  br label %120

; <label>:120:                                    ; preds = %119, %117
  %121 = call noalias i8* @malloc(i64 24) #9, !track !56
  %122 = bitcast i8* %121 to %struct.mergeBSSID*
  %123 = icmp ne %struct.mergeBSSID* %122, null
  br i1 %123, label %126, label %124

; <label>:124:                                    ; preds = %120
  %125 = getelementptr [14 x i8], [14 x i8]* @.str.7, i32 0, i32 0
  call void @perror(i8* %125)
  br label %148

; <label>:126:                                    ; preds = %120
  %127 = getelementptr inbounds %struct.mergeBSSID, %struct.mergeBSSID* %122, i32 0, i32 2
  store i32 %.01, i32* %127, align 8
  %128 = getelementptr inbounds %struct.mergeBSSID, %struct.mergeBSSID* %122, i32 0, i32 3
  store %struct.mergeBSSID* null, %struct.mergeBSSID** %128, align 8
  %129 = getelementptr inbounds %struct.mergeBSSID, %struct.mergeBSSID* %122, i32 0, i32 0
  %130 = getelementptr inbounds [6 x i8], [6 x i8]* %129, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %130, i8* align 1 %1, i64 6, i1 false), !track !57
  %131 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 36
  %132 = load %struct.mergeBSSID*, %struct.mergeBSSID** %131, align 8
  %133 = icmp eq %struct.mergeBSSID* %132, null
  br i1 %133, label %134, label %136

; <label>:134:                                    ; preds = %126
  %135 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 36
  store %struct.mergeBSSID* %122, %struct.mergeBSSID** %135, align 8
  br label %138

; <label>:136:                                    ; preds = %126
  %137 = getelementptr inbounds %struct.mergeBSSID, %struct.mergeBSSID* %.03.lcssa, i32 0, i32 3
  store %struct.mergeBSSID* %122, %struct.mergeBSSID** %137, align 8
  br label %138

; <label>:138:                                    ; preds = %136, %134
  %139 = getelementptr inbounds %struct.mergeBSSID, %struct.mergeBSSID* %122, i32 0, i32 2
  %140 = load i32, i32* %139, align 8
  %141 = icmp ne i32 %140, 0
  br i1 %141, label %142, label %145

; <label>:142:                                    ; preds = %138
  %143 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 35
  %144 = load i8*, i8** %143, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %144, i64 6, i1 false), !track !58
  br label %145

; <label>:145:                                    ; preds = %142, %138
  %146 = getelementptr inbounds %struct.mergeBSSID, %struct.mergeBSSID* %122, i32 0, i32 2
  %147 = load i32, i32* %146, align 8
  br label %148

; <label>:148:                                    ; preds = %145, %124, %35, %25, %8
  %.0 = phi i32 [ 1, %8 ], [ %27, %25 ], [ %147, %145 ], [ -1, %124 ], [ -1, %35 ]
  ret i32 %.0
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #3

declare dso_local void @perror(i8*) #1

; Function Attrs: nounwind
declare dso_local i32 @snprintf(i8*, i64, i8*, ...) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @toupper(i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @atomic_read(%struct.read_buf*, i32, i32, i8*) #0 {
  %5 = load i32, i32* @close_aircrack, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %4
  br label %114

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 2
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %12, label %28

; <label>:12:                                     ; preds = %8
  %13 = call noalias i8* @malloc(i64 65536) #9, !track !59
  %14 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 2
  store i8* %13, i8** %14, align 8
  %15 = call noalias i8* @malloc(i64 65536) #9, !track !60
  %16 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 3
  store i8* %15, i8** %16, align 8
  %17 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %24, label %20

; <label>:20:                                     ; preds = %12
  %21 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 3
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %24, label %25

; <label>:24:                                     ; preds = %20, %12
  br label %114

; <label>:25:                                     ; preds = %20
  %26 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 0
  store i32 0, i32* %26, align 8
  %27 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 1
  store i32 0, i32* %27, align 4
  br label %28

; <label>:28:                                     ; preds = %25, %8
  %29 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = sub nsw i32 65536, %30
  %32 = icmp sgt i32 %2, %31
  br i1 %32, label %33, label %58

; <label>:33:                                     ; preds = %28
  %34 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = sub nsw i32 %37, %35
  store i32 %38, i32* %36, align 4
  %39 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 3
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 2
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr i8, i8* %42, i64 %45
  %47 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = sext i32 %48 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %46, i64 %49, i1 false), !track !61
  %50 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 2
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 3
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = sext i32 %55 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %53, i64 %56, i1 false), !track !62
  %57 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 0
  store i32 0, i32* %57, align 8
  br label %58

; <label>:58:                                     ; preds = %33, %28
  %59 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = sub nsw i32 %60, %62
  %64 = icmp sge i32 %63, %2
  br i1 %64, label %65, label %76

; <label>:65:                                     ; preds = %58
  %66 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 2
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 0
  %69 = load i32, i32* %68, align 8
  %70 = sext i32 %69 to i64
  %71 = getelementptr i8, i8* %67, i64 %70
  %72 = sext i32 %2 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 %71, i64 %72, i1 false), !track !63
  %73 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 0
  %74 = load i32, i32* %73, align 8
  %75 = add nsw i32 %74, %2
  store i32 %75, i32* %73, align 8
  br label %114

; <label>:76:                                     ; preds = %58
  %77 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 2
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr i8, i8* %78, i64 %81
  %83 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = sub nsw i32 65536, %84
  %86 = sext i32 %85 to i64
  %87 = call i64 @read(i32 %1, i8* %82, i64 %86)
  %88 = trunc i64 %87 to i32
  %89 = icmp sle i32 %88, 0
  br i1 %89, label %90, label %91

; <label>:90:                                     ; preds = %76
  br label %114

; <label>:91:                                     ; preds = %76
  %92 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 1
  %93 = load i32, i32* %92, align 4
  %94 = add nsw i32 %93, %88
  store i32 %94, i32* %92, align 4
  %95 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 1
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 0
  %98 = load i32, i32* %97, align 8
  %99 = sub nsw i32 %96, %98
  %100 = icmp sge i32 %99, %2
  br i1 %100, label %101, label %112

; <label>:101:                                    ; preds = %91
  %102 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 2
  %103 = load i8*, i8** %102, align 8
  %104 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = sext i32 %105 to i64
  %107 = getelementptr i8, i8* %103, i64 %106
  %108 = sext i32 %2 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 %107, i64 %108, i1 false), !track !64
  %109 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %0, i32 0, i32 0
  %110 = load i32, i32* %109, align 8
  %111 = add nsw i32 %110, %2
  store i32 %111, i32* %109, align 8
  br label %114

; <label>:112:                                    ; preds = %91
  br label %113

; <label>:113:                                    ; preds = %112
  br label %114

; <label>:114:                                    ; preds = %113, %101, %90, %65, %24, %7
  %.0 = phi i32 [ 100000, %7 ], [ 0, %24 ], [ 1, %65 ], [ 0, %90 ], [ 1, %101 ], [ 0, %113 ]
  ret i32 %.0
}

declare dso_local i64 @read(i32, i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @read_thread(i8*) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.read_buf, align 8, !track !65
  %4 = alloca [6 x i8], align 1, !track !66
  %5 = alloca [6 x i8], align 1, !track !67
  %6 = alloca [6 x i8], align 1, !track !68
  %7 = alloca [16 x i32], align 16, !track !69
  %8 = alloca %struct.ivs2_pkthdr, align 2, !track !70
  %9 = alloca %struct.ivs2_filehdr, align 2, !track !71
  %10 = alloca %struct.pcap_pkthdr, align 4, !track !72
  %11 = alloca %struct.pcap_file_header, align 4, !track !73
  %12 = alloca [2048 x i8], align 16, !track !74
  %13 = alloca i32, align 4
  %14 = alloca [16 x i32], align 16
  store i32 0, i32* %2, align 4
  %15 = call void (i32)* @signal(i32 2, void (i32)* @sighandler) #9
  %16 = bitcast %struct.read_buf* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false)
  %17 = bitcast %struct.pcap_file_header* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 24, i1 false)
  %18 = call noalias i8* @malloc(i64 65536) #9, !track !75
  %19 = icmp eq i8* %18, null
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %1
  %21 = getelementptr [14 x i8], [14 x i8]* @.str.7, i32 0, i32 0
  call void @perror(i8* %21)
  br label %1770

; <label>:22:                                     ; preds = %1
  %23 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %24 = load i32, i32* %23, align 8
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %29, label %26

; <label>:26:                                     ; preds = %22
  %27 = getelementptr [12 x i8], [12 x i8]* @.str.9, i32 0, i32 0
  %28 = call i32 (i8*, ...) @printf(i8* %27, i8* %0)
  br label %29

; <label>:29:                                     ; preds = %26, %22
  %30 = getelementptr [2 x i8], [2 x i8]* @.str.10, i32 0, i32 0
  %31 = call i32 @strcmp(i8* %0, i8* %30) #10
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

; <label>:33:                                     ; preds = %29
  br label %40

; <label>:34:                                     ; preds = %29
  %35 = call i32 (i8*, i32, ...) @open64(i8* %0, i32 0)
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %37, label %39

; <label>:37:                                     ; preds = %34
  %38 = getelementptr [12 x i8], [12 x i8]* @.str.11, i32 0, i32 0
  call void @perror(i8* %38)
  br label %1770

; <label>:39:                                     ; preds = %34
  br label %40

; <label>:40:                                     ; preds = %39, %33
  %.01 = phi i32 [ 0, %33 ], [ %35, %39 ]
  %41 = bitcast %struct.pcap_file_header* %11 to i8*
  %42 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 4, i8* %41)
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %46, label %44

; <label>:44:                                     ; preds = %40
  %45 = getelementptr [25 x i8], [25 x i8]* @.str.12, i32 0, i32 0
  call void @perror(i8* %45)
  br label %1770

; <label>:46:                                     ; preds = %40
  %47 = bitcast %struct.pcap_file_header* %11 to i8*
  %48 = getelementptr [5 x i8], [5 x i8]* @.str.13, i32 0, i32 0
  %49 = call i32 @memcmp(i8* %47, i8* %48, i64 4) #10
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %51, label %121

; <label>:51:                                     ; preds = %46
  %52 = bitcast %struct.pcap_file_header* %11 to i8*
  %53 = getelementptr [5 x i8], [5 x i8]* @.str.14, i32 0, i32 0
  %54 = call i32 @memcmp(i8* %52, i8* %53, i64 4) #10
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %121

; <label>:56:                                     ; preds = %51
  %57 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = icmp ne i32 %58, -1582119980
  br i1 %59, label %60, label %68

; <label>:60:                                     ; preds = %56
  %61 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = icmp ne i32 %62, -725372255
  br i1 %63, label %64, label %68

; <label>:64:                                     ; preds = %60
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %66 = getelementptr [51 x i8], [51 x i8]* @.str.15, i32 0, i32 0
  %67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %65, i8* %66)
  br label %1770

; <label>:68:                                     ; preds = %60, %56
  %69 = bitcast %struct.pcap_file_header* %11 to i8*
  %70 = getelementptr inbounds i8, i8* %69, i64 4
  %71 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 20, i8* %70)
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %68
  %74 = getelementptr [25 x i8], [25 x i8]* @.str.12, i32 0, i32 0
  call void @perror(i8* %74)
  br label %1770

; <label>:75:                                     ; preds = %68
  %76 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 0
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, -725372255
  br i1 %78, label %79, label %100

; <label>:79:                                     ; preds = %75
  %80 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 6
  %81 = load i32, i32* %80, align 4
  %82 = lshr i32 %81, 24
  %83 = and i32 %82, 255
  %84 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 6
  %85 = load i32, i32* %84, align 4
  %86 = lshr i32 %85, 8
  %87 = and i32 %86, 65280
  %88 = or i32 %83, %87
  %89 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 6
  %90 = load i32, i32* %89, align 4
  %91 = shl i32 %90, 8
  %92 = and i32 %91, 16711680
  %93 = or i32 %88, %92
  %94 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 6
  %95 = load i32, i32* %94, align 4
  %96 = shl i32 %95, 24
  %97 = and i32 %96, -16777216
  %98 = or i32 %93, %97
  %99 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 6
  store i32 %98, i32* %99, align 4
  br label %100

; <label>:100:                                    ; preds = %79, %75
  %101 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 6
  %102 = load i32, i32* %101, align 4
  %103 = icmp ne i32 %102, 105
  br i1 %103, label %104, label %120

; <label>:104:                                    ; preds = %100
  %105 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 6
  %106 = load i32, i32* %105, align 4
  %107 = icmp ne i32 %106, 119
  br i1 %107, label %108, label %120

; <label>:108:                                    ; preds = %104
  %109 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 6
  %110 = load i32, i32* %109, align 4
  %111 = icmp ne i32 %110, 127
  br i1 %111, label %112, label %120

; <label>:112:                                    ; preds = %108
  %113 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 6
  %114 = load i32, i32* %113, align 4
  %115 = icmp ne i32 %114, 192
  br i1 %115, label %116, label %120

; <label>:116:                                    ; preds = %112
  %117 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %118 = getelementptr [55 x i8], [55 x i8]* @.str.16, i32 0, i32 0
  %119 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %117, i8* %118)
  br label %1770

; <label>:120:                                    ; preds = %112, %108, %104, %100
  br label %159

; <label>:121:                                    ; preds = %51, %46
  %122 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 38
  %123 = load i32, i32* %122, align 8
  %124 = icmp ne i32 %123, 0
  br i1 %124, label %125, label %127

; <label>:125:                                    ; preds = %121
  %126 = getelementptr [37 x i8], [37 x i8]* @.str.17, i32 0, i32 0
  call void (i32, i8*, ...) @errx(i32 1, i8* %126) #12
  br label %UnifiedUnreachableBlock

; <label>:127:                                    ; preds = %121
  %128 = bitcast %struct.pcap_file_header* %11 to i8*
  %129 = getelementptr [5 x i8], [5 x i8]* @.str.14, i32 0, i32 0
  %130 = call i32 @memcmp(i8* %128, i8* %129, i64 4) #10
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %151

; <label>:132:                                    ; preds = %127
  %133 = bitcast %struct.ivs2_filehdr* %9 to i8*
  %134 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 2, i8* %133)
  %135 = icmp ne i32 %134, 0
  br i1 %135, label %138, label %136

; <label>:136:                                    ; preds = %132
  %137 = getelementptr [25 x i8], [25 x i8]* @.str.12, i32 0, i32 0
  call void @perror(i8* %137)
  br label %1770

; <label>:138:                                    ; preds = %132
  %139 = getelementptr inbounds %struct.ivs2_filehdr, %struct.ivs2_filehdr* %9, i32 0, i32 0
  %140 = load i16, i16* %139, align 2
  %141 = zext i16 %140 to i32
  %142 = icmp sgt i32 %141, 1
  br i1 %142, label %143, label %150

; <label>:143:                                    ; preds = %138
  %144 = getelementptr inbounds %struct.ivs2_filehdr, %struct.ivs2_filehdr* %9, i32 0, i32 0
  %145 = load i16, i16* %144, align 2
  %146 = zext i16 %145 to i32
  %147 = getelementptr [58 x i8], [58 x i8]* @.str.18, i32 0, i32 0
  %148 = getelementptr [4 x i8], [4 x i8]* @.str.19, i32 0, i32 0
  %149 = call i32 (i8*, ...) @printf(i8* %147, i8* %148, i32 %146, i32 1)
  br label %1770

; <label>:150:                                    ; preds = %138
  br label %158

; <label>:151:                                    ; preds = %127
  %152 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %153 = load i32, i32* %152, align 4
  %154 = icmp ne i32 %153, 0
  br i1 %154, label %155, label %157

; <label>:155:                                    ; preds = %151
  %156 = getelementptr [84 x i8], [84 x i8]* @.str.20, i32 0, i32 0
  call void (i32, i8*, ...) @errx(i32 1, i8* %156) #12
  br label %UnifiedUnreachableBlock

; <label>:157:                                    ; preds = %151
  br label %158

; <label>:158:                                    ; preds = %157, %150
  %.04 = phi i32 [ 3, %150 ], [ 2, %157 ]
  br label %159

; <label>:159:                                    ; preds = %158, %120
  %.15 = phi i32 [ 1, %120 ], [ %.04, %158 ]
  %160 = call i32 (i32, i32, ...) @fcntl(i32 %.01, i32 4, i32 2048)
  %161 = icmp slt i32 %160, 0
  br i1 %161, label %162, label %164

; <label>:162:                                    ; preds = %159
  %163 = getelementptr [25 x i8], [25 x i8]* @.str.21, i32 0, i32 0
  call void @perror(i8* %163)
  br label %1770

; <label>:164:                                    ; preds = %159
  %165 = load i32, i32* @close_aircrack, align 4
  %166 = icmp ne i32 %165, 0
  br i1 %166, label %167, label %.lr.ph86

.lr.ph86:                                         ; preds = %164
  br label %168

._crit_edge87:                                    ; preds = %.backedge
  br label %167

; <label>:167:                                    ; preds = %._crit_edge87, %164
  br label %1769

; <label>:168:                                    ; preds = %.lr.ph86, %.backedge
  %.0684 = phi i8* [ %18, %.lr.ph86 ], [ %.06.be, %.backedge ]
  %.01280 = phi %struct.AP_info* [ null, %.lr.ph86 ], [ %.012.be, %.backedge ]
  call void @unroll_loop(i32 30)
  %169 = icmp eq i32 %.15, 2
  br i1 %169, label %170, label %218

; <label>:170:                                    ; preds = %168
  %171 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 1, i8* %18)
  %172 = icmp ne i32 %171, 0
  %173 = xor i1 %172, true
  br i1 %173, label %.lr.ph45, label %178

.lr.ph45:                                         ; preds = %170
  br label %174

; <label>:174:                                    ; preds = %.lr.ph45, %174
  call void @unroll_loop(i32 31)
  call void @eof_wait(i32* %2)
  %175 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 1, i8* %18)
  %176 = icmp ne i32 %175, 0
  %177 = xor i1 %176, true
  br i1 %177, label %174, label %._crit_edge46

._crit_edge46:                                    ; preds = %174
  br label %178

; <label>:178:                                    ; preds = %._crit_edge46, %170
  %179 = load i32, i32* @close_aircrack, align 4
  %180 = icmp ne i32 %179, 0
  br i1 %180, label %181, label %182

; <label>:181:                                    ; preds = %178
  br label %1769

; <label>:182:                                    ; preds = %178
  %183 = getelementptr inbounds i8, i8* %18, i64 0
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = icmp ne i32 %185, 255
  br i1 %186, label %187, label %205

; <label>:187:                                    ; preds = %182
  %188 = getelementptr inbounds i8, i8* %18, i64 0
  %189 = load i8, i8* %188, align 1
  %190 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 0
  store i8 %189, i8* %190, align 1
  %191 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %192 = getelementptr inbounds i8, i8* %191, i64 1
  %193 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 5, i8* %192)
  %194 = icmp ne i32 %193, 0
  %195 = xor i1 %194, true
  br i1 %195, label %.lr.ph48, label %200

.lr.ph48:                                         ; preds = %187
  br label %196

; <label>:196:                                    ; preds = %.lr.ph48, %196
  call void @unroll_loop(i32 32)
  call void @eof_wait(i32* %2)
  %197 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 5, i8* %192)
  %198 = icmp ne i32 %197, 0
  %199 = xor i1 %198, true
  br i1 %199, label %196, label %._crit_edge49

._crit_edge49:                                    ; preds = %196
  br label %200

; <label>:200:                                    ; preds = %._crit_edge49, %187
  %201 = load i32, i32* @close_aircrack, align 4
  %202 = icmp ne i32 %201, 0
  br i1 %202, label %203, label %204

; <label>:203:                                    ; preds = %200
  br label %1769

; <label>:204:                                    ; preds = %200
  br label %205

; <label>:205:                                    ; preds = %204, %182
  %206 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 5, i8* %18)
  %207 = icmp ne i32 %206, 0
  %208 = xor i1 %207, true
  br i1 %208, label %.lr.ph51, label %213

.lr.ph51:                                         ; preds = %205
  br label %209

; <label>:209:                                    ; preds = %.lr.ph51, %209
  call void @unroll_loop(i32 33)
  call void @eof_wait(i32* %2)
  %210 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 5, i8* %18)
  %211 = icmp ne i32 %210, 0
  %212 = xor i1 %211, true
  br i1 %212, label %209, label %._crit_edge52

._crit_edge52:                                    ; preds = %209
  br label %213

; <label>:213:                                    ; preds = %._crit_edge52, %205
  %214 = load i32, i32* @close_aircrack, align 4
  %215 = icmp ne i32 %214, 0
  br i1 %215, label %216, label %217

; <label>:216:                                    ; preds = %213
  br label %1769

; <label>:217:                                    ; preds = %213
  br label %446

; <label>:218:                                    ; preds = %168
  %219 = icmp eq i32 %.15, 3
  br i1 %219, label %220, label %276

; <label>:220:                                    ; preds = %218
  %221 = bitcast %struct.ivs2_pkthdr* %8 to i8*
  %222 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 4, i8* %221)
  %223 = icmp ne i32 %222, 0
  %224 = xor i1 %223, true
  br i1 %224, label %.lr.ph36, label %229

.lr.ph36:                                         ; preds = %220
  br label %225

; <label>:225:                                    ; preds = %.lr.ph36, %225
  call void @unroll_loop(i32 34)
  call void @eof_wait(i32* %2)
  %226 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 4, i8* %221)
  %227 = icmp ne i32 %226, 0
  %228 = xor i1 %227, true
  br i1 %228, label %225, label %._crit_edge37

._crit_edge37:                                    ; preds = %225
  br label %229

; <label>:229:                                    ; preds = %._crit_edge37, %220
  %230 = load i32, i32* @close_aircrack, align 4
  %231 = icmp ne i32 %230, 0
  br i1 %231, label %232, label %233

; <label>:232:                                    ; preds = %229
  br label %1769

; <label>:233:                                    ; preds = %229
  %234 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %8, i32 0, i32 0
  %235 = load i16, i16* %234, align 2
  %236 = zext i16 %235 to i32
  %237 = and i32 %236, 1
  %238 = icmp ne i32 %237, 0
  br i1 %238, label %239, label %258

; <label>:239:                                    ; preds = %233
  %240 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %241 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 6, i8* %240)
  %242 = icmp ne i32 %241, 0
  %243 = xor i1 %242, true
  br i1 %243, label %.lr.ph39, label %248

.lr.ph39:                                         ; preds = %239
  br label %244

; <label>:244:                                    ; preds = %.lr.ph39, %244
  call void @unroll_loop(i32 35)
  call void @eof_wait(i32* %2)
  %245 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 6, i8* %240)
  %246 = icmp ne i32 %245, 0
  %247 = xor i1 %246, true
  br i1 %247, label %244, label %._crit_edge40

._crit_edge40:                                    ; preds = %244
  br label %248

; <label>:248:                                    ; preds = %._crit_edge40, %239
  %249 = load i32, i32* @close_aircrack, align 4
  %250 = icmp ne i32 %249, 0
  br i1 %250, label %251, label %252

; <label>:251:                                    ; preds = %248
  br label %1769

; <label>:252:                                    ; preds = %248
  %253 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %8, i32 0, i32 1
  %254 = load i16, i16* %253, align 2
  %255 = zext i16 %254 to i32
  %256 = sub nsw i32 %255, 6
  %257 = trunc i32 %256 to i16
  store i16 %257, i16* %253, align 2
  br label %258

; <label>:258:                                    ; preds = %252, %233
  %259 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %8, i32 0, i32 1
  %260 = load i16, i16* %259, align 2
  %261 = zext i16 %260 to i32
  %262 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 %261, i8* %18)
  %263 = icmp ne i32 %262, 0
  %264 = xor i1 %263, true
  br i1 %264, label %.lr.ph42, label %271

.lr.ph42:                                         ; preds = %258
  br label %265

; <label>:265:                                    ; preds = %.lr.ph42, %265
  call void @unroll_loop(i32 36)
  call void @eof_wait(i32* %2)
  %266 = load i16, i16* %259, align 2
  %267 = zext i16 %266 to i32
  %268 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 %267, i8* %18)
  %269 = icmp ne i32 %268, 0
  %270 = xor i1 %269, true
  br i1 %270, label %265, label %._crit_edge43

._crit_edge43:                                    ; preds = %265
  br label %271

; <label>:271:                                    ; preds = %._crit_edge43, %258
  %272 = load i32, i32* @close_aircrack, align 4
  %273 = icmp ne i32 %272, 0
  br i1 %273, label %274, label %275

; <label>:274:                                    ; preds = %271
  br label %1769

; <label>:275:                                    ; preds = %271
  br label %445

; <label>:276:                                    ; preds = %218
  %277 = bitcast %struct.pcap_pkthdr* %10 to i8*
  %278 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 16, i8* %277)
  %279 = icmp ne i32 %278, 0
  %280 = xor i1 %279, true
  br i1 %280, label %.lr.ph, label %285

.lr.ph:                                           ; preds = %276
  br label %281

; <label>:281:                                    ; preds = %.lr.ph, %281
  call void @unroll_loop(i32 37)
  call void @eof_wait(i32* %2)
  %282 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 16, i8* %277)
  %283 = icmp ne i32 %282, 0
  %284 = xor i1 %283, true
  br i1 %284, label %281, label %._crit_edge

._crit_edge:                                      ; preds = %281
  br label %285

; <label>:285:                                    ; preds = %._crit_edge, %276
  %286 = load i32, i32* @close_aircrack, align 4
  %287 = icmp ne i32 %286, 0
  br i1 %287, label %288, label %289

; <label>:288:                                    ; preds = %285
  br label %1769

; <label>:289:                                    ; preds = %285
  %290 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 0
  %291 = load i32, i32* %290, align 4
  %292 = icmp eq i32 %291, -725372255
  br i1 %292, label %293, label %314

; <label>:293:                                    ; preds = %289
  %294 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %295 = load i32, i32* %294, align 4
  %296 = lshr i32 %295, 24
  %297 = and i32 %296, 255
  %298 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %299 = load i32, i32* %298, align 4
  %300 = lshr i32 %299, 8
  %301 = and i32 %300, 65280
  %302 = or i32 %297, %301
  %303 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %304 = load i32, i32* %303, align 4
  %305 = shl i32 %304, 8
  %306 = and i32 %305, 16711680
  %307 = or i32 %302, %306
  %308 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %309 = load i32, i32* %308, align 4
  %310 = shl i32 %309, 24
  %311 = and i32 %310, -16777216
  %312 = or i32 %307, %311
  %313 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  store i32 %312, i32* %313, align 4
  br label %314

; <label>:314:                                    ; preds = %293, %289
  %315 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %316 = load i32, i32* %315, align 4
  %317 = icmp ule i32 %316, 0
  br i1 %317, label %322, label %318

; <label>:318:                                    ; preds = %314
  %319 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %320 = load i32, i32* %319, align 4
  %321 = icmp ugt i32 %320, 65535
  br i1 %321, label %322, label %328

; <label>:322:                                    ; preds = %318, %314
  %323 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %324 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %325 = load i32, i32* %324, align 4
  %326 = getelementptr [53 x i8], [53 x i8]* @.str.22, i32 0, i32 0
  %327 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %323, i8* %326, i32 %325)
  call void @eof_wait(i32* %2)
  call void @_exit(i32 1) #12
  br label %UnifiedUnreachableBlock

; <label>:328:                                    ; preds = %318
  %329 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %330 = load i32, i32* %329, align 4
  %331 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 %330, i8* %18)
  %332 = icmp ne i32 %331, 0
  %333 = xor i1 %332, true
  br i1 %333, label %.lr.ph33, label %339

.lr.ph33:                                         ; preds = %328
  br label %334

; <label>:334:                                    ; preds = %.lr.ph33, %334
  call void @unroll_loop(i32 38)
  call void @eof_wait(i32* %2)
  %335 = load i32, i32* %329, align 4
  %336 = call i32 @atomic_read(%struct.read_buf* %3, i32 %.01, i32 %335, i8* %18)
  %337 = icmp ne i32 %336, 0
  %338 = xor i1 %337, true
  br i1 %338, label %334, label %._crit_edge34

._crit_edge34:                                    ; preds = %334
  br label %339

; <label>:339:                                    ; preds = %._crit_edge34, %328
  %340 = load i32, i32* @close_aircrack, align 4
  %341 = icmp ne i32 %340, 0
  br i1 %341, label %342, label %343

; <label>:342:                                    ; preds = %339
  br label %1769

; <label>:343:                                    ; preds = %339
  %344 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 6
  %345 = load i32, i32* %344, align 4
  %346 = icmp eq i32 %345, 119
  br i1 %346, label %347, label %386

; <label>:347:                                    ; preds = %343
  %348 = getelementptr inbounds i8, i8* %18, i64 7
  %349 = load i8, i8* %348, align 1
  %350 = zext i8 %349 to i32
  %351 = icmp eq i32 %350, 64
  br i1 %351, label %352, label %353

; <label>:352:                                    ; preds = %347
  br label %373

; <label>:353:                                    ; preds = %347
  %354 = getelementptr inbounds i8, i8* %18, i64 4
  %355 = bitcast i8* %354 to i32*
  %356 = load i32, i32* %355, align 4
  %357 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 0
  %358 = load i32, i32* %357, align 4
  %359 = icmp eq i32 %358, -725372255
  br i1 %359, label %360, label %372

; <label>:360:                                    ; preds = %353
  %361 = ashr i32 %356, 24
  %362 = and i32 %361, 255
  %363 = ashr i32 %356, 8
  %364 = and i32 %363, 65280
  %365 = or i32 %362, %364
  %366 = shl i32 %356, 8
  %367 = and i32 %366, 16711680
  %368 = or i32 %365, %367
  %369 = shl i32 %356, 24
  %370 = and i32 %369, -16777216
  %371 = or i32 %368, %370
  br label %372

; <label>:372:                                    ; preds = %360, %353
  %.02 = phi i32 [ %371, %360 ], [ %356, %353 ]
  br label %373

; <label>:373:                                    ; preds = %372, %352
  %.1 = phi i32 [ 64, %352 ], [ %.02, %372 ]
  %374 = icmp slt i32 %.1, 8
  br i1 %374, label %379, label %375

; <label>:375:                                    ; preds = %373
  %376 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %377 = load i32, i32* %376, align 4
  %378 = icmp sge i32 %.1, %377
  br i1 %378, label %379, label %380

; <label>:379:                                    ; preds = %375, %373
  br label %.backedge

; <label>:380:                                    ; preds = %375
  %381 = sext i32 %.1 to i64
  %382 = getelementptr inbounds i8, i8* %18, i64 %381
  %383 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %384 = load i32, i32* %383, align 4
  %385 = sub i32 %384, %.1
  store i32 %385, i32* %383, align 4
  br label %386

; <label>:386:                                    ; preds = %380, %343
  %.17 = phi i8* [ %382, %380 ], [ %18, %343 ]
  %387 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 6
  %388 = load i32, i32* %387, align 4
  %389 = icmp eq i32 %388, 127
  br i1 %389, label %390, label %407

; <label>:390:                                    ; preds = %386
  %391 = getelementptr inbounds i8, i8* %.17, i64 2
  %392 = bitcast i8* %391 to i16*
  %393 = load i16, i16* %392, align 2
  %394 = zext i16 %393 to i32
  %395 = icmp sle i32 %394, 0
  br i1 %395, label %400, label %396

; <label>:396:                                    ; preds = %390
  %397 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %398 = load i32, i32* %397, align 4
  %399 = icmp sge i32 %394, %398
  br i1 %399, label %400, label %401

; <label>:400:                                    ; preds = %396, %390
  br label %.backedge

; <label>:401:                                    ; preds = %396
  %402 = sext i32 %394 to i64
  %403 = getelementptr inbounds i8, i8* %.17, i64 %402
  %404 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %405 = load i32, i32* %404, align 4
  %406 = sub i32 %405, %394
  store i32 %406, i32* %404, align 4
  br label %407

; <label>:407:                                    ; preds = %401, %386
  %.28 = phi i8* [ %403, %401 ], [ %.17, %386 ]
  %408 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %11, i32 0, i32 6
  %409 = load i32, i32* %408, align 4
  %410 = icmp eq i32 %409, 192
  br i1 %410, label %411, label %444

; <label>:411:                                    ; preds = %407
  %412 = getelementptr inbounds i8, i8* %.28, i64 2
  %413 = bitcast i8* %412 to i16*
  %414 = load i16, i16* %413, align 2
  %415 = zext i16 %414 to i32
  %416 = icmp sle i32 %415, 0
  br i1 %416, label %421, label %417

; <label>:417:                                    ; preds = %411
  %418 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %419 = load i32, i32* %418, align 4
  %420 = icmp sge i32 %415, %419
  br i1 %420, label %421, label %422

; <label>:421:                                    ; preds = %417, %411
  br label %.backedge

; <label>:422:                                    ; preds = %417
  %423 = icmp eq i32 %415, 24
  br i1 %423, label %424, label %431

; <label>:424:                                    ; preds = %422
  %425 = getelementptr inbounds i8, i8* %.28, i64 8
  %426 = bitcast i8* %425 to i16*
  %427 = load i16, i16* %426, align 2
  %428 = zext i16 %427 to i32
  %429 = icmp eq i32 %428, 2
  br i1 %429, label %430, label %431

; <label>:430:                                    ; preds = %424
  br label %431

; <label>:431:                                    ; preds = %430, %424, %422
  %.2 = phi i32 [ 32, %430 ], [ %415, %424 ], [ %415, %422 ]
  %432 = icmp sle i32 %.2, 0
  br i1 %432, label %437, label %433

; <label>:433:                                    ; preds = %431
  %434 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %435 = load i32, i32* %434, align 4
  %436 = icmp sge i32 %.2, %435
  br i1 %436, label %437, label %438

; <label>:437:                                    ; preds = %433, %431
  br label %.backedge

; <label>:438:                                    ; preds = %433
  %439 = sext i32 %.2 to i64
  %440 = getelementptr inbounds i8, i8* %.28, i64 %439
  %441 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %442 = load i32, i32* %441, align 4
  %443 = sub i32 %442, %.2
  store i32 %443, i32* %441, align 4
  br label %444

; <label>:444:                                    ; preds = %438, %407
  %.01283 = phi %struct.AP_info* [ %.01280, %438 ], [ %.01280, %407 ]
  %.3 = phi i8* [ %440, %438 ], [ %.28, %407 ]
  br label %445

; <label>:445:                                    ; preds = %444, %275
  %.01282 = phi %struct.AP_info* [ %.01280, %275 ], [ %.01283, %444 ]
  %.4 = phi i8* [ %.0684, %275 ], [ %.3, %444 ]
  br label %446

; <label>:446:                                    ; preds = %445, %217
  %.01281 = phi %struct.AP_info* [ %.01280, %217 ], [ %.01282, %445 ]
  %.5 = phi i8* [ %.0684, %217 ], [ %.4, %445 ]
  %447 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* @mx_apl) #9
  %448 = load i64, i64* @nb_pkt, align 8
  %449 = add nsw i64 %448, 1
  store i64 %449, i64* @nb_pkt, align 8
  %450 = icmp eq i32 %.15, 1
  br i1 %450, label %451, label %509

; <label>:451:                                    ; preds = %446
  %452 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %453 = load i32, i32* %452, align 4
  %454 = icmp ult i32 %453, 24
  br i1 %454, label %455, label %456

; <label>:455:                                    ; preds = %451
  br label %1740

; <label>:456:                                    ; preds = %451
  %457 = getelementptr inbounds i8, i8* %.5, i64 0
  %458 = load i8, i8* %457, align 1
  %459 = zext i8 %458 to i32
  %460 = and i32 %459, 12
  %461 = icmp eq i32 %460, 4
  br i1 %461, label %462, label %463

; <label>:462:                                    ; preds = %456
  br label %1740

; <label>:463:                                    ; preds = %456
  %464 = getelementptr inbounds i8, i8* %.5, i64 1
  %465 = load i8, i8* %464, align 1
  %466 = zext i8 %465 to i32
  %467 = and i32 %466, 3
  switch i32 %467, label %480 [
    i32 0, label %468
    i32 1, label %471
    i32 2, label %474
    i32 3, label %477
  ]

; <label>:468:                                    ; preds = %463
  %469 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %470 = getelementptr inbounds i8, i8* %.5, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %469, i8* align 1 %470, i64 6, i1 false), !track !76
  br label %480

; <label>:471:                                    ; preds = %463
  %472 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %473 = getelementptr inbounds i8, i8* %.5, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %472, i8* align 1 %473, i64 6, i1 false), !track !77
  br label %480

; <label>:474:                                    ; preds = %463
  %475 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %476 = getelementptr inbounds i8, i8* %.5, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %475, i8* align 1 %476, i64 6, i1 false), !track !78
  br label %480

; <label>:477:                                    ; preds = %463
  %478 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %479 = getelementptr inbounds i8, i8* %.5, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %478, i8* align 1 %479, i64 6, i1 false), !track !79
  br label %480

; <label>:480:                                    ; preds = %463, %477, %474, %471, %468
  %481 = getelementptr inbounds i8, i8* %.5, i64 1
  %482 = load i8, i8* %481, align 1
  %483 = zext i8 %482 to i32
  %484 = and i32 %483, 3
  switch i32 %484, label %497 [
    i32 0, label %485
    i32 1, label %488
    i32 2, label %491
    i32 3, label %494
  ]

; <label>:485:                                    ; preds = %480
  %486 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %487 = getelementptr inbounds i8, i8* %.5, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %486, i8* align 1 %487, i64 6, i1 false), !track !80
  br label %497

; <label>:488:                                    ; preds = %480
  %489 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %490 = getelementptr inbounds i8, i8* %.5, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %489, i8* align 1 %490, i64 6, i1 false), !track !81
  br label %497

; <label>:491:                                    ; preds = %480
  %492 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %493 = getelementptr inbounds i8, i8* %.5, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %492, i8* align 1 %493, i64 6, i1 false), !track !82
  br label %497

; <label>:494:                                    ; preds = %480
  %495 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %496 = getelementptr inbounds i8, i8* %.5, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %495, i8* align 1 %496, i64 6, i1 false), !track !83
  br label %497

; <label>:497:                                    ; preds = %480, %494, %491, %488, %485
  %498 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 38
  %499 = load i32, i32* %498, align 8
  %500 = icmp ne i32 %499, 0
  br i1 %500, label %501, label %508

; <label>:501:                                    ; preds = %497
  %502 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i64 0, i64 0
  %503 = load i8, i8* %502, align 1
  %504 = zext i8 %503 to i32
  %505 = icmp eq i32 %504, 1
  br i1 %505, label %506, label %507

; <label>:506:                                    ; preds = %501
  br label %1740

; <label>:507:                                    ; preds = %501
  br label %508

; <label>:508:                                    ; preds = %507, %497
  br label %509

; <label>:509:                                    ; preds = %508, %446
  %510 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 34
  %511 = load i8*, i8** %510, align 8
  %512 = icmp ne i8* %511, null
  br i1 %512, label %513, label %518

; <label>:513:                                    ; preds = %509
  %514 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 34
  %515 = load i8*, i8** %514, align 8
  %516 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %517 = call i32 @mergebssids(i8* %515, i8* %516)
  br label %518

; <label>:518:                                    ; preds = %513, %509
  %519 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %520 = getelementptr [7 x i8], [7 x i8]* @.str.23, i32 0, i32 0
  %521 = call i32 @memcmp(i8* %519, i8* %520, i64 6) #10
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %523, label %524

; <label>:523:                                    ; preds = %518
  br label %1740

; <label>:524:                                    ; preds = %518
  %525 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %526 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 4, i32 0
  %527 = call i32 @memcmp(i8* %525, i8* %526, i64 6) #10
  %528 = icmp ne i32 %527, 0
  br i1 %528, label %529, label %530

; <label>:529:                                    ; preds = %524
  br label %1740

; <label>:530:                                    ; preds = %524
  %531 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 9, i32 0
  %532 = getelementptr [32 x i8], [32 x i8]* @ZERO, i32 0, i32 0
  %533 = call i32 @memcmp(i8* %531, i8* %532, i64 6) #10
  %534 = icmp ne i32 %533, 0
  br i1 %534, label %535, label %557

; <label>:535:                                    ; preds = %530
  %536 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 9, i32 0
  %537 = getelementptr [7 x i8], [7 x i8]* @.str.23, i32 0, i32 0
  %538 = call i32 @memcmp(i8* %536, i8* %537, i64 6) #10
  %539 = icmp ne i32 %538, 0
  br i1 %539, label %540, label %557

; <label>:540:                                    ; preds = %535
  %541 = getelementptr inbounds i8, i8* %.5, i64 4
  %542 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 9, i32 0
  %543 = call i32 @memcmp(i8* %542, i8* %541, i64 6) #10
  %544 = icmp ne i32 %543, 0
  br i1 %544, label %545, label %556

; <label>:545:                                    ; preds = %540
  %546 = getelementptr inbounds i8, i8* %.5, i64 10
  %547 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 9, i32 0
  %548 = call i32 @memcmp(i8* %547, i8* %546, i64 6) #10
  %549 = icmp ne i32 %548, 0
  br i1 %549, label %550, label %556

; <label>:550:                                    ; preds = %545
  %551 = getelementptr inbounds i8, i8* %.5, i64 16
  %552 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 9, i32 0
  %553 = call i32 @memcmp(i8* %552, i8* %551, i64 6) #10
  %554 = icmp ne i32 %553, 0
  br i1 %554, label %555, label %556

; <label>:555:                                    ; preds = %550
  br label %1740

; <label>:556:                                    ; preds = %550, %545, %540
  br label %557

; <label>:557:                                    ; preds = %556, %535, %530
  %558 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  %559 = icmp ne %struct.AP_info* %558, null
  br i1 %559, label %.lr.ph56, label %.loopexit31

.lr.ph56:                                         ; preds = %557
  %560 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %558, i32 0, i32 1
  %561 = getelementptr inbounds [6 x i8], [6 x i8]* %560, i32 0, i32 0
  %562 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %563 = call i32 @memcmp(i8* %561, i8* %562, i64 6) #10
  %564 = icmp ne i32 %563, 0
  br i1 %564, label %.lr.ph2, label %570

.lr.ph2:                                          ; preds = %.lr.ph56
  br label %571

; <label>:565:                                    ; preds = %571
  %.11353 = phi %struct.AP_info* [ %573, %571 ]
  %566 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.11353, i32 0, i32 1
  %567 = getelementptr inbounds [6 x i8], [6 x i8]* %566, i32 0, i32 0
  %568 = call i32 @memcmp(i8* %567, i8* %562, i64 6) #10
  %569 = icmp ne i32 %568, 0
  br i1 %569, label %571, label %._crit_edge3

._crit_edge3:                                     ; preds = %565
  %split4 = phi %struct.AP_info* [ %.11353, %565 ]
  %split5 = phi %struct.AP_info* [ %.113531, %565 ]
  br label %570

; <label>:570:                                    ; preds = %._crit_edge3, %.lr.ph56
  %.113.lcssa24 = phi %struct.AP_info* [ %split4, %._crit_edge3 ], [ %558, %.lr.ph56 ]
  %.011.lcssa23 = phi %struct.AP_info* [ %split5, %._crit_edge3 ], [ null, %.lr.ph56 ]
  br label %575

; <label>:571:                                    ; preds = %.lr.ph2, %565
  %.113531 = phi %struct.AP_info* [ %558, %.lr.ph2 ], [ %.11353, %565 ]
  call void @unroll_loop(i32 39)
  %572 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.113531, i32 0, i32 0
  %573 = load %struct.AP_info*, %struct.AP_info** %572, align 8
  %574 = icmp ne %struct.AP_info* %573, null
  br i1 %574, label %565, label %..loopexit31_crit_edge

..loopexit31_crit_edge:                           ; preds = %571
  %split = phi %struct.AP_info* [ %573, %571 ]
  %split57 = phi %struct.AP_info* [ %.113531, %571 ]
  br label %.loopexit31

.loopexit31:                                      ; preds = %..loopexit31_crit_edge, %557
  %.113.lcssa.ph = phi %struct.AP_info* [ %split, %..loopexit31_crit_edge ], [ %558, %557 ]
  %.011.lcssa.ph = phi %struct.AP_info* [ %split57, %..loopexit31_crit_edge ], [ null, %557 ]
  br label %575

; <label>:575:                                    ; preds = %.loopexit31, %570
  %.113.lcssa = phi %struct.AP_info* [ %.113.lcssa24, %570 ], [ %.113.lcssa.ph, %.loopexit31 ]
  %.011.lcssa = phi %struct.AP_info* [ %.011.lcssa23, %570 ], [ %.011.lcssa.ph, %.loopexit31 ]
  %576 = icmp eq %struct.AP_info* %.113.lcssa, null
  br i1 %576, label %577, label %618

; <label>:577:                                    ; preds = %575
  %578 = call noalias i8* @malloc(i64 504) #9, !track !84
  %579 = bitcast i8* %578 to %struct.AP_info*
  %580 = icmp ne %struct.AP_info* %579, null
  br i1 %580, label %583, label %581

; <label>:581:                                    ; preds = %577
  %582 = getelementptr [14 x i8], [14 x i8]* @.str.7, i32 0, i32 0
  call void @perror(i8* %582)
  br label %1769

; <label>:583:                                    ; preds = %577
  %584 = bitcast %struct.AP_info* %579 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %584, i8 0, i64 504, i1 false)
  %585 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  %586 = icmp eq %struct.AP_info* %585, null
  br i1 %586, label %587, label %588

; <label>:587:                                    ; preds = %583
  store %struct.AP_info* %579, %struct.AP_info** @ap_1st, align 8
  br label %590

; <label>:588:                                    ; preds = %583
  %589 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.011.lcssa, i32 0, i32 0
  store %struct.AP_info* %579, %struct.AP_info** %589, align 8
  br label %590

; <label>:590:                                    ; preds = %588, %587
  %591 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %579, i32 0, i32 1
  %592 = getelementptr inbounds [6 x i8], [6 x i8]* %591, i32 0, i32 0
  %593 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %592, i8* align 1 %593, i64 6, i1 false), !track !85
  %594 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %579, i32 0, i32 10
  store i32 -1, i32* %594, align 8
  %595 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %596 = load i32, i32* %595, align 4
  %597 = icmp eq i32 %596, 1
  br i1 %597, label %598, label %617

; <label>:598:                                    ; preds = %590
  %599 = call %struct.PTW_attackstate* (...) bitcast (%struct.PTW_attackstate* ()* @PTW_newattackstate to %struct.PTW_attackstate* (...)*)()
  %600 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %579, i32 0, i32 15
  store %struct.PTW_attackstate* %599, %struct.PTW_attackstate** %600, align 8
  %601 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %579, i32 0, i32 15
  %602 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %601, align 8
  %603 = icmp ne %struct.PTW_attackstate* %602, null
  br i1 %603, label %607, label %604

; <label>:604:                                    ; preds = %598
  %.lcssa27 = phi %struct.AP_info* [ %579, %598 ]
  %605 = getelementptr [21 x i8], [21 x i8]* @.str.24, i32 0, i32 0
  call void @perror(i8* %605)
  %606 = bitcast %struct.AP_info* %.lcssa27 to i8*
  call void @free(i8* %606) #9
  br label %1769

; <label>:607:                                    ; preds = %598
  %608 = call %struct.PTW_attackstate* (...) bitcast (%struct.PTW_attackstate* ()* @PTW_newattackstate to %struct.PTW_attackstate* (...)*)()
  %609 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %579, i32 0, i32 16
  store %struct.PTW_attackstate* %608, %struct.PTW_attackstate** %609, align 8
  %610 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %579, i32 0, i32 16
  %611 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %610, align 8
  %612 = icmp ne %struct.PTW_attackstate* %611, null
  br i1 %612, label %616, label %613

; <label>:613:                                    ; preds = %607
  %.lcssa28 = phi %struct.AP_info* [ %579, %607 ]
  %614 = getelementptr [21 x i8], [21 x i8]* @.str.24, i32 0, i32 0
  call void @perror(i8* %614)
  %615 = bitcast %struct.AP_info* %.lcssa28 to i8*
  call void @free(i8* %615) #9
  br label %1769

; <label>:616:                                    ; preds = %607
  br label %617

; <label>:617:                                    ; preds = %616, %590
  br label %618

; <label>:618:                                    ; preds = %617, %575
  %.214 = phi %struct.AP_info* [ %579, %617 ], [ %.113.lcssa, %575 ]
  %619 = icmp eq i32 %.15, 2
  br i1 %619, label %620, label %672

; <label>:620:                                    ; preds = %618
  %621 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 2, i32* %621, align 8
  br label %622

; <label>:622:                                    ; preds = %1346, %620
  %623 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %624 = load i64, i64* %623, align 8
  %625 = icmp eq i64 %624, 0
  br i1 %625, label %626, label %629

; <label>:626:                                    ; preds = %622
  %627 = call i8** @uniqueiv_init()
  %628 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  store i8** %627, i8*** %628, align 8
  br label %629

; <label>:629:                                    ; preds = %626, %622
  %630 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  %631 = load i8**, i8*** %630, align 8
  %632 = call i32 @uniqueiv_check(i8** %631, i8* %18)
  %633 = icmp eq i32 %632, 0
  br i1 %633, label %634, label %671

; <label>:634:                                    ; preds = %629
  %635 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %636 = load i64, i64* %635, align 8
  %637 = mul nsw i64 %636, 5
  %638 = trunc i64 %637 to i32
  %639 = add nsw i32 %638, 5
  %640 = sext i32 %639 to i64
  %641 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 6
  %642 = load i64, i64* %641, align 8
  %643 = icmp sgt i64 %640, %642
  br i1 %643, label %644, label %660

; <label>:644:                                    ; preds = %634
  %645 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 6
  %646 = load i64, i64* %645, align 8
  %647 = add nsw i64 %646, 131072
  store i64 %647, i64* %645, align 8
  %648 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 4
  %649 = load i8*, i8** %648, align 8
  %650 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 6
  %651 = load i64, i64* %650, align 8
  %652 = call i8* @realloc(i8* %649, i64 %651) #9, !track !86
  %653 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 4
  store i8* %652, i8** %653, align 8
  %654 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 4
  %655 = load i8*, i8** %654, align 8
  %656 = icmp eq i8* %655, null
  br i1 %656, label %657, label %659

; <label>:657:                                    ; preds = %644
  %658 = getelementptr [15 x i8], [15 x i8]* @.str.25, i32 0, i32 0
  call void @perror(i8* %658)
  br label %1769

; <label>:659:                                    ; preds = %644
  br label %660

; <label>:660:                                    ; preds = %659, %634
  %661 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 4
  %662 = load i8*, i8** %661, align 8
  %663 = sext i32 %638 to i64
  %664 = getelementptr inbounds i8, i8* %662, i64 %663
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %664, i8* align 1 %18, i64 5, i1 false), !track !87
  %665 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  %666 = load i8**, i8*** %665, align 8
  %667 = call i32 @uniqueiv_mark(i8** %666, i8* %18)
  %668 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %669 = load i64, i64* %668, align 8
  %670 = add nsw i64 %669, 1
  store i64 %670, i64* %668, align 8
  br label %671

; <label>:671:                                    ; preds = %660, %629
  br label %1740

; <label>:672:                                    ; preds = %618
  %673 = icmp eq i32 %.15, 3
  br i1 %673, label %674, label %926

; <label>:674:                                    ; preds = %672
  %675 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %8, i32 0, i32 0
  %676 = load i16, i16* %675, align 2
  %677 = zext i16 %676 to i32
  %678 = and i32 %677, 2
  %679 = icmp ne i32 %678, 0
  br i1 %679, label %680, label %686

; <label>:680:                                    ; preds = %674
  %681 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 2
  %682 = getelementptr inbounds [33 x i8], [33 x i8]* %681, i32 0, i32 0
  %683 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %8, i32 0, i32 1
  %684 = load i16, i16* %683, align 2
  %685 = zext i16 %684 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %682, i8* align 1 %18, i64 %685, i1 false), !track !88
  br label %925

; <label>:686:                                    ; preds = %674
  %687 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %8, i32 0, i32 0
  %688 = load i16, i16* %687, align 2
  %689 = zext i16 %688 to i32
  %690 = and i32 %689, 8
  %691 = icmp ne i32 %690, 0
  br i1 %691, label %692, label %795

; <label>:692:                                    ; preds = %686
  %693 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 2, i32* %693, align 8
  %694 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %695 = load i32, i32* %694, align 4
  %696 = icmp ne i32 %695, 0
  br i1 %696, label %697, label %729

; <label>:697:                                    ; preds = %692
  %698 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %8, i32 0, i32 1
  %699 = load i16, i16* %698, align 2
  %700 = zext i16 %699 to i32
  %701 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %702 = load i32, i32* %701, align 4
  %703 = add nsw i32 %702, 3
  %704 = icmp slt i32 %700, %703
  br i1 %704, label %705, label %706

; <label>:705:                                    ; preds = %697
  br label %1740

; <label>:706:                                    ; preds = %697
  %707 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 15
  %708 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %707, align 8
  %709 = getelementptr inbounds i8, i8* %18, i64 4
  %710 = getelementptr [1 x i32], [1 x i32]* @PTW_DEFAULTWEIGHT, i32 0, i32 0
  %711 = call i32 @PTW_addsession(%struct.PTW_attackstate* %708, i8* %18, i8* %709, i32* %710, i32 1)
  %712 = icmp ne i32 %711, 0
  br i1 %712, label %713, label %717

; <label>:713:                                    ; preds = %706
  %714 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 8
  %715 = load i64, i64* %714, align 8
  %716 = add nsw i64 %715, 1
  store i64 %716, i64* %714, align 8
  br label %717

; <label>:717:                                    ; preds = %713, %706
  %718 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 16
  %719 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %718, align 8
  %720 = getelementptr inbounds i8, i8* %18, i64 4
  %721 = getelementptr [1 x i32], [1 x i32]* @PTW_DEFAULTWEIGHT, i32 0, i32 0
  %722 = call i32 @PTW_addsession(%struct.PTW_attackstate* %719, i8* %18, i8* %720, i32* %721, i32 1)
  %723 = icmp ne i32 %722, 0
  br i1 %723, label %724, label %728

; <label>:724:                                    ; preds = %717
  %725 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 9
  %726 = load i64, i64* %725, align 8
  %727 = add nsw i64 %726, 1
  store i64 %727, i64* %725, align 8
  br label %728

; <label>:728:                                    ; preds = %724, %717
  br label %1740

; <label>:729:                                    ; preds = %692
  %730 = getelementptr inbounds i8, i8* %18, i64 4
  %731 = load i8, i8* %730, align 1
  %732 = getelementptr inbounds i8, i8* %18, i64 3
  store i8 %731, i8* %732, align 1
  %733 = getelementptr inbounds i8, i8* %18, i64 5
  %734 = load i8, i8* %733, align 1
  %735 = getelementptr inbounds i8, i8* %18, i64 4
  store i8 %734, i8* %735, align 1
  %736 = getelementptr inbounds i8, i8* %18, i64 3
  %737 = load i8, i8* %736, align 1
  %738 = zext i8 %737 to i32
  %739 = xor i32 %738, 170
  %740 = trunc i32 %739 to i8
  store i8 %740, i8* %736, align 1
  %741 = getelementptr inbounds i8, i8* %18, i64 4
  %742 = load i8, i8* %741, align 1
  %743 = zext i8 %742 to i32
  %744 = xor i32 %743, 170
  %745 = trunc i32 %744 to i8
  store i8 %745, i8* %741, align 1
  %746 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %747 = load i64, i64* %746, align 8
  %748 = icmp eq i64 %747, 0
  br i1 %748, label %749, label %752

; <label>:749:                                    ; preds = %729
  %750 = call i8** @uniqueiv_init()
  %751 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  store i8** %750, i8*** %751, align 8
  br label %752

; <label>:752:                                    ; preds = %749, %729
  %753 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  %754 = load i8**, i8*** %753, align 8
  %755 = call i32 @uniqueiv_check(i8** %754, i8* %18)
  %756 = icmp eq i32 %755, 0
  br i1 %756, label %757, label %794

; <label>:757:                                    ; preds = %752
  %758 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %759 = load i64, i64* %758, align 8
  %760 = mul nsw i64 %759, 5
  %761 = trunc i64 %760 to i32
  %762 = add nsw i32 %761, 5
  %763 = sext i32 %762 to i64
  %764 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 6
  %765 = load i64, i64* %764, align 8
  %766 = icmp sgt i64 %763, %765
  br i1 %766, label %767, label %783

; <label>:767:                                    ; preds = %757
  %768 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 6
  %769 = load i64, i64* %768, align 8
  %770 = add nsw i64 %769, 131072
  store i64 %770, i64* %768, align 8
  %771 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 4
  %772 = load i8*, i8** %771, align 8
  %773 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 6
  %774 = load i64, i64* %773, align 8
  %775 = call i8* @realloc(i8* %772, i64 %774) #9, !track !89
  %776 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 4
  store i8* %775, i8** %776, align 8
  %777 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 4
  %778 = load i8*, i8** %777, align 8
  %779 = icmp eq i8* %778, null
  br i1 %779, label %780, label %782

; <label>:780:                                    ; preds = %767
  %781 = getelementptr [15 x i8], [15 x i8]* @.str.25, i32 0, i32 0
  call void @perror(i8* %781)
  br label %1769

; <label>:782:                                    ; preds = %767
  br label %783

; <label>:783:                                    ; preds = %782, %757
  %784 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 4
  %785 = load i8*, i8** %784, align 8
  %786 = sext i32 %761 to i64
  %787 = getelementptr inbounds i8, i8* %785, i64 %786
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %787, i8* align 1 %18, i64 5, i1 false), !track !90
  %788 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  %789 = load i8**, i8*** %788, align 8
  %790 = call i32 @uniqueiv_mark(i8** %789, i8* %18)
  %791 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %792 = load i64, i64* %791, align 8
  %793 = add nsw i64 %792, 1
  store i64 %793, i64* %791, align 8
  br label %794

; <label>:794:                                    ; preds = %783, %752
  br label %924

; <label>:795:                                    ; preds = %686
  %796 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %8, i32 0, i32 0
  %797 = load i16, i16* %796, align 2
  %798 = zext i16 %797 to i32
  %799 = and i32 %798, 16
  %800 = icmp ne i32 %799, 0
  br i1 %800, label %801, label %912

; <label>:801:                                    ; preds = %795
  %802 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 2, i32* %802, align 8
  %803 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %804 = load i32, i32* %803, align 4
  %805 = icmp ne i32 %804, 0
  br i1 %805, label %806, label %846

; <label>:806:                                    ; preds = %801
  %807 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %8, i32 0, i32 1
  %808 = load i16, i16* %807, align 2
  %809 = zext i16 %808 to i32
  %810 = getelementptr inbounds i8, i8* %18, i64 5
  %811 = load i8, i8* %810, align 1
  %812 = zext i8 %811 to i32
  %813 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %814 = load i32, i32* %813, align 4
  %815 = icmp slt i32 %812, %814
  br i1 %815, label %816, label %817

; <label>:816:                                    ; preds = %806
  br label %1740

; <label>:817:                                    ; preds = %806
  %818 = getelementptr inbounds i8, i8* %18, i64 4
  %819 = load i8, i8* %818, align 1
  %820 = zext i8 %819 to i32
  %821 = mul nsw i32 %820, 32
  %822 = add nsw i32 6, %821
  %823 = add nsw i32 %822, 64
  %824 = icmp slt i32 %809, %823
  br i1 %824, label %825, label %826

; <label>:825:                                    ; preds = %817
  br label %1740

; <label>:826:                                    ; preds = %817
  %827 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i32 0, i32 0
  %828 = bitcast i32* %827 to i8*
  %829 = sext i32 %809 to i64
  %830 = getelementptr inbounds i8, i8* %18, i64 %829
  %831 = getelementptr inbounds i8, i8* %830, i64 -60
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %828, i8* align 1 %831, i64 64, i1 false), !track !91
  %832 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 16
  %833 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %832, align 8
  %834 = getelementptr inbounds i8, i8* %18, i64 6
  %835 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i32 0, i32 0
  %836 = getelementptr inbounds i8, i8* %18, i64 4
  %837 = load i8, i8* %836, align 1
  %838 = zext i8 %837 to i32
  %839 = call i32 @PTW_addsession(%struct.PTW_attackstate* %833, i8* %18, i8* %834, i32* %835, i32 %838)
  %840 = icmp ne i32 %839, 0
  br i1 %840, label %841, label %845

; <label>:841:                                    ; preds = %826
  %842 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 9
  %843 = load i64, i64* %842, align 8
  %844 = add nsw i64 %843, 1
  store i64 %844, i64* %842, align 8
  br label %845

; <label>:845:                                    ; preds = %841, %826
  br label %1740

; <label>:846:                                    ; preds = %801
  %847 = getelementptr inbounds i8, i8* %18, i64 6
  %848 = load i8, i8* %847, align 1
  %849 = getelementptr inbounds i8, i8* %18, i64 3
  store i8 %848, i8* %849, align 1
  %850 = getelementptr inbounds i8, i8* %18, i64 7
  %851 = load i8, i8* %850, align 1
  %852 = getelementptr inbounds i8, i8* %18, i64 4
  store i8 %851, i8* %852, align 1
  %853 = getelementptr inbounds i8, i8* %18, i64 3
  %854 = load i8, i8* %853, align 1
  %855 = zext i8 %854 to i32
  %856 = xor i32 %855, 170
  %857 = trunc i32 %856 to i8
  store i8 %857, i8* %853, align 1
  %858 = getelementptr inbounds i8, i8* %18, i64 4
  %859 = load i8, i8* %858, align 1
  %860 = zext i8 %859 to i32
  %861 = xor i32 %860, 170
  %862 = trunc i32 %861 to i8
  store i8 %862, i8* %858, align 1
  %863 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %864 = load i64, i64* %863, align 8
  %865 = icmp eq i64 %864, 0
  br i1 %865, label %866, label %869

; <label>:866:                                    ; preds = %846
  %867 = call i8** @uniqueiv_init()
  %868 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  store i8** %867, i8*** %868, align 8
  br label %869

; <label>:869:                                    ; preds = %866, %846
  %870 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  %871 = load i8**, i8*** %870, align 8
  %872 = call i32 @uniqueiv_check(i8** %871, i8* %18)
  %873 = icmp eq i32 %872, 0
  br i1 %873, label %874, label %911

; <label>:874:                                    ; preds = %869
  %875 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %876 = load i64, i64* %875, align 8
  %877 = mul nsw i64 %876, 5
  %878 = trunc i64 %877 to i32
  %879 = add nsw i32 %878, 5
  %880 = sext i32 %879 to i64
  %881 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 6
  %882 = load i64, i64* %881, align 8
  %883 = icmp sgt i64 %880, %882
  br i1 %883, label %884, label %900

; <label>:884:                                    ; preds = %874
  %885 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 6
  %886 = load i64, i64* %885, align 8
  %887 = add nsw i64 %886, 131072
  store i64 %887, i64* %885, align 8
  %888 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 4
  %889 = load i8*, i8** %888, align 8
  %890 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 6
  %891 = load i64, i64* %890, align 8
  %892 = call i8* @realloc(i8* %889, i64 %891) #9, !track !92
  %893 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 4
  store i8* %892, i8** %893, align 8
  %894 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 4
  %895 = load i8*, i8** %894, align 8
  %896 = icmp eq i8* %895, null
  br i1 %896, label %897, label %899

; <label>:897:                                    ; preds = %884
  %898 = getelementptr [15 x i8], [15 x i8]* @.str.25, i32 0, i32 0
  call void @perror(i8* %898)
  br label %1769

; <label>:899:                                    ; preds = %884
  br label %900

; <label>:900:                                    ; preds = %899, %874
  %901 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 4
  %902 = load i8*, i8** %901, align 8
  %903 = sext i32 %878 to i64
  %904 = getelementptr inbounds i8, i8* %902, i64 %903
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %904, i8* align 1 %18, i64 5, i1 false), !track !93
  %905 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  %906 = load i8**, i8*** %905, align 8
  %907 = call i32 @uniqueiv_mark(i8** %906, i8* %18)
  %908 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %909 = load i64, i64* %908, align 8
  %910 = add nsw i64 %909, 1
  store i64 %910, i64* %908, align 8
  br label %911

; <label>:911:                                    ; preds = %900, %869
  br label %923

; <label>:912:                                    ; preds = %795
  %913 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %8, i32 0, i32 0
  %914 = load i16, i16* %913, align 2
  %915 = zext i16 %914 to i32
  %916 = and i32 %915, 4
  %917 = icmp ne i32 %916, 0
  br i1 %917, label %918, label %922

; <label>:918:                                    ; preds = %912
  %919 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 3, i32* %919, align 8
  %920 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 14
  %921 = bitcast %struct.WPA_hdsk* %920 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %921, i8* align 1 %18, i64 356, i1 false), !track !94
  br label %922

; <label>:922:                                    ; preds = %918, %912
  br label %923

; <label>:923:                                    ; preds = %922, %911
  br label %924

; <label>:924:                                    ; preds = %923, %794
  br label %925

; <label>:925:                                    ; preds = %924, %680
  br label %1740

; <label>:926:                                    ; preds = %672
  %927 = getelementptr inbounds i8, i8* %.5, i64 1
  %928 = load i8, i8* %927, align 1
  %929 = zext i8 %928 to i32
  %930 = and i32 %929, 3
  switch i32 %930, label %947 [
    i32 0, label %931
    i32 1, label %934
    i32 2, label %937
  ]

; <label>:931:                                    ; preds = %926
  %932 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %933 = getelementptr inbounds i8, i8* %.5, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %932, i8* align 1 %933, i64 6, i1 false), !track !95
  br label %948

; <label>:934:                                    ; preds = %926
  %935 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %936 = getelementptr inbounds i8, i8* %.5, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %935, i8* align 1 %936, i64 6, i1 false), !track !96
  br label %948

; <label>:937:                                    ; preds = %926
  %938 = getelementptr inbounds i8, i8* %.5, i64 4
  %939 = load i8, i8* %938, align 1
  %940 = zext i8 %939 to i32
  %941 = srem i32 %940, 2
  %942 = icmp ne i32 %941, 0
  br i1 %942, label %943, label %944

; <label>:943:                                    ; preds = %937
  br label %989

; <label>:944:                                    ; preds = %937
  %945 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %946 = getelementptr inbounds i8, i8* %.5, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %945, i8* align 1 %946, i64 6, i1 false), !track !97
  br label %948

; <label>:947:                                    ; preds = %926
  br label %989

; <label>:948:                                    ; preds = %944, %934, %931
  %949 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 13
  %950 = load %struct.ST_info*, %struct.ST_info** %949, align 8
  %951 = icmp ne %struct.ST_info* %950, null
  br i1 %951, label %.lr.ph61, label %.loopexit30

.lr.ph61:                                         ; preds = %948
  %952 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %950, i32 0, i32 3
  %953 = getelementptr inbounds [6 x i8], [6 x i8]* %952, i32 0, i32 0
  %954 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %955 = call i32 @memcmp(i8* %953, i8* %954, i64 6) #10
  %956 = icmp ne i32 %955, 0
  br i1 %956, label %.lr.ph7, label %962

.lr.ph7:                                          ; preds = %.lr.ph61
  br label %963

; <label>:957:                                    ; preds = %963
  %.01758 = phi %struct.ST_info* [ %965, %963 ]
  %958 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.01758, i32 0, i32 3
  %959 = getelementptr inbounds [6 x i8], [6 x i8]* %958, i32 0, i32 0
  %960 = call i32 @memcmp(i8* %959, i8* %954, i64 6) #10
  %961 = icmp ne i32 %960, 0
  br i1 %961, label %963, label %._crit_edge8

._crit_edge8:                                     ; preds = %957
  %split9 = phi %struct.ST_info* [ %.01758, %957 ]
  %split10 = phi %struct.ST_info* [ %.017586, %957 ]
  br label %962

; <label>:962:                                    ; preds = %._crit_edge8, %.lr.ph61
  %.017.lcssa26 = phi %struct.ST_info* [ %split9, %._crit_edge8 ], [ %950, %.lr.ph61 ]
  %.016.lcssa25 = phi %struct.ST_info* [ %split10, %._crit_edge8 ], [ null, %.lr.ph61 ]
  br label %967

; <label>:963:                                    ; preds = %.lr.ph7, %957
  %.017586 = phi %struct.ST_info* [ %950, %.lr.ph7 ], [ %.01758, %957 ]
  call void @unroll_loop(i32 40)
  %964 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.017586, i32 0, i32 1
  %965 = load %struct.ST_info*, %struct.ST_info** %964, align 8
  %966 = icmp ne %struct.ST_info* %965, null
  br i1 %966, label %957, label %..loopexit30_crit_edge

..loopexit30_crit_edge:                           ; preds = %963
  %split62 = phi %struct.ST_info* [ %965, %963 ]
  %split63 = phi %struct.ST_info* [ %.017586, %963 ]
  br label %.loopexit30

.loopexit30:                                      ; preds = %..loopexit30_crit_edge, %948
  %.017.lcssa.ph = phi %struct.ST_info* [ %split62, %..loopexit30_crit_edge ], [ %950, %948 ]
  %.016.lcssa.ph = phi %struct.ST_info* [ %split63, %..loopexit30_crit_edge ], [ null, %948 ]
  br label %967

; <label>:967:                                    ; preds = %.loopexit30, %962
  %.017.lcssa = phi %struct.ST_info* [ %.017.lcssa26, %962 ], [ %.017.lcssa.ph, %.loopexit30 ]
  %.016.lcssa = phi %struct.ST_info* [ %.016.lcssa25, %962 ], [ %.016.lcssa.ph, %.loopexit30 ]
  %968 = icmp eq %struct.ST_info* %.017.lcssa, null
  br i1 %968, label %969, label %988

; <label>:969:                                    ; preds = %967
  %970 = call noalias i8* @malloc(i64 384) #9, !track !98
  %971 = bitcast i8* %970 to %struct.ST_info*
  %972 = icmp ne %struct.ST_info* %971, null
  br i1 %972, label %975, label %973

; <label>:973:                                    ; preds = %969
  %974 = getelementptr [14 x i8], [14 x i8]* @.str.7, i32 0, i32 0
  call void @perror(i8* %974)
  br label %1769

; <label>:975:                                    ; preds = %969
  %976 = bitcast %struct.ST_info* %971 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %976, i8 0, i64 384, i1 false)
  %977 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 13
  %978 = load %struct.ST_info*, %struct.ST_info** %977, align 8
  %979 = icmp eq %struct.ST_info* %978, null
  br i1 %979, label %980, label %982

; <label>:980:                                    ; preds = %975
  %981 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 13
  store %struct.ST_info* %971, %struct.ST_info** %981, align 8
  br label %984

; <label>:982:                                    ; preds = %975
  %983 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.016.lcssa, i32 0, i32 1
  store %struct.ST_info* %971, %struct.ST_info** %983, align 8
  br label %984

; <label>:984:                                    ; preds = %982, %980
  %985 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %971, i32 0, i32 3
  %986 = getelementptr inbounds [6 x i8], [6 x i8]* %985, i32 0, i32 0
  %987 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %986, i8* align 1 %987, i64 6, i1 false), !track !99
  br label %988

; <label>:988:                                    ; preds = %984, %967
  %.118 = phi %struct.ST_info* [ %971, %984 ], [ %.017.lcssa, %967 ]
  br label %989

; <label>:989:                                    ; preds = %988, %947, %943
  %.219 = phi %struct.ST_info* [ null, %947 ], [ null, %943 ], [ %.118, %988 ]
  %990 = getelementptr inbounds i8, i8* %.5, i64 0
  %991 = load i8, i8* %990, align 1
  %992 = zext i8 %991 to i32
  %993 = icmp eq i32 %992, 128
  br i1 %993, label %999, label %994

; <label>:994:                                    ; preds = %989
  %995 = getelementptr inbounds i8, i8* %.5, i64 0
  %996 = load i8, i8* %995, align 1
  %997 = zext i8 %996 to i32
  %998 = icmp eq i32 %997, 80
  br i1 %998, label %999, label %1074

; <label>:999:                                    ; preds = %994, %989
  %1000 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  %1001 = load i32, i32* %1000, align 8
  %1002 = icmp slt i32 %1001, 0
  br i1 %1002, label %1003, label %1010

; <label>:1003:                                   ; preds = %999
  %1004 = getelementptr inbounds i8, i8* %.5, i64 34
  %1005 = load i8, i8* %1004, align 1
  %1006 = zext i8 %1005 to i32
  %1007 = and i32 %1006, 16
  %1008 = ashr i32 %1007, 4
  %1009 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 %1008, i32* %1009, align 8
  br label %1010

; <label>:1010:                                   ; preds = %1003, %999
  %1011 = getelementptr inbounds i8, i8* %.5, i64 36
  %1012 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %1013 = load i32, i32* %1012, align 4
  %1014 = zext i32 %1013 to i64
  %1015 = getelementptr inbounds i8, i8* %.5, i64 %1014
  %1016 = icmp ult i8* %1011, %1015
  br i1 %1016, label %.lr.ph66, label %.loopexit29

.lr.ph66:                                         ; preds = %1010
  br label %1017

; <label>:1017:                                   ; preds = %.lr.ph66, %1062
  %.0964 = phi i8* [ %1011, %.lr.ph66 ], [ %1068, %1062 ]
  call void @unroll_loop(i32 41)
  %1018 = getelementptr inbounds i8, i8* %.0964, i64 2
  %1019 = getelementptr inbounds i8, i8* %.0964, i64 1
  %1020 = load i8, i8* %1019, align 1
  %1021 = zext i8 %1020 to i32
  %1022 = sext i32 %1021 to i64
  %1023 = getelementptr inbounds i8, i8* %1018, i64 %1022
  %1024 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %1025 = load i32, i32* %1024, align 4
  %1026 = zext i32 %1025 to i64
  %1027 = getelementptr inbounds i8, i8* %.5, i64 %1026
  %1028 = icmp ugt i8* %1023, %1027
  br i1 %1028, label %1029, label %1030

; <label>:1029:                                   ; preds = %1017
  br label %1073

; <label>:1030:                                   ; preds = %1017
  %1031 = load i8, i8* %.0964, align 1
  %1032 = zext i8 %1031 to i32
  %1033 = icmp eq i32 %1032, 0
  br i1 %1033, label %1034, label %1062

; <label>:1034:                                   ; preds = %1030
  %1035 = getelementptr inbounds i8, i8* %.0964, i64 1
  %1036 = load i8, i8* %1035, align 1
  %1037 = zext i8 %1036 to i32
  %1038 = icmp sgt i32 %1037, 0
  br i1 %1038, label %1039, label %1062

; <label>:1039:                                   ; preds = %1034
  %1040 = getelementptr inbounds i8, i8* %.0964, i64 2
  %1041 = load i8, i8* %1040, align 1
  %1042 = zext i8 %1041 to i32
  %1043 = icmp ne i32 %1042, 0
  br i1 %1043, label %1044, label %1062

; <label>:1044:                                   ; preds = %1039
  %1045 = getelementptr inbounds i8, i8* %.0964, i64 1
  %1046 = load i8, i8* %1045, align 1
  %1047 = zext i8 %1046 to i32
  %1048 = icmp sgt i32 %1047, 32
  br i1 %1048, label %1049, label %1050

; <label>:1049:                                   ; preds = %1044
  br label %1054

; <label>:1050:                                   ; preds = %1044
  %1051 = getelementptr inbounds i8, i8* %.0964, i64 1
  %1052 = load i8, i8* %1051, align 1
  %1053 = zext i8 %1052 to i32
  br label %1054

; <label>:1054:                                   ; preds = %1050, %1049
  %1055 = phi i32 [ 32, %1049 ], [ %1053, %1050 ]
  %1056 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 2
  %1057 = getelementptr inbounds [33 x i8], [33 x i8]* %1056, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 2 %1057, i8 0, i64 33, i1 false)
  %1058 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 2
  %1059 = getelementptr inbounds [33 x i8], [33 x i8]* %1058, i32 0, i32 0
  %1060 = getelementptr inbounds i8, i8* %.0964, i64 2
  %1061 = sext i32 %1055 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1059, i8* align 1 %1060, i64 %1061, i1 false), !track !100
  br label %1062

; <label>:1062:                                   ; preds = %1054, %1039, %1034, %1030
  %1063 = getelementptr inbounds i8, i8* %.0964, i64 1
  %1064 = load i8, i8* %1063, align 1
  %1065 = zext i8 %1064 to i32
  %1066 = add nsw i32 2, %1065
  %1067 = sext i32 %1066 to i64
  %1068 = getelementptr inbounds i8, i8* %.0964, i64 %1067
  %1069 = load i32, i32* %1012, align 4
  %1070 = zext i32 %1069 to i64
  %1071 = getelementptr inbounds i8, i8* %.5, i64 %1070
  %1072 = icmp ult i8* %1068, %1071
  br i1 %1072, label %1017, label %..loopexit29_crit_edge

..loopexit29_crit_edge:                           ; preds = %1062
  br label %.loopexit29

.loopexit29:                                      ; preds = %..loopexit29_crit_edge, %1010
  br label %1073

; <label>:1073:                                   ; preds = %.loopexit29, %1029
  br label %1074

; <label>:1074:                                   ; preds = %1073, %994
  %1075 = getelementptr inbounds i8, i8* %.5, i64 0
  %1076 = load i8, i8* %1075, align 1
  %1077 = zext i8 %1076 to i32
  %1078 = icmp eq i32 %1077, 0
  br i1 %1078, label %1079, label %1143

; <label>:1079:                                   ; preds = %1074
  %1080 = getelementptr inbounds i8, i8* %.5, i64 28
  %1081 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %1082 = load i32, i32* %1081, align 4
  %1083 = zext i32 %1082 to i64
  %1084 = getelementptr inbounds i8, i8* %.5, i64 %1083
  %1085 = icmp ult i8* %1080, %1084
  br i1 %1085, label %.lr.ph69, label %.loopexit

.lr.ph69:                                         ; preds = %1079
  br label %1086

; <label>:1086:                                   ; preds = %.lr.ph69, %1131
  %.11067 = phi i8* [ %1080, %.lr.ph69 ], [ %1137, %1131 ]
  call void @unroll_loop(i32 42)
  %1087 = getelementptr inbounds i8, i8* %.11067, i64 2
  %1088 = getelementptr inbounds i8, i8* %.11067, i64 1
  %1089 = load i8, i8* %1088, align 1
  %1090 = zext i8 %1089 to i32
  %1091 = sext i32 %1090 to i64
  %1092 = getelementptr inbounds i8, i8* %1087, i64 %1091
  %1093 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %1094 = load i32, i32* %1093, align 4
  %1095 = zext i32 %1094 to i64
  %1096 = getelementptr inbounds i8, i8* %.5, i64 %1095
  %1097 = icmp ugt i8* %1092, %1096
  br i1 %1097, label %1098, label %1099

; <label>:1098:                                   ; preds = %1086
  br label %1142

; <label>:1099:                                   ; preds = %1086
  %1100 = load i8, i8* %.11067, align 1
  %1101 = zext i8 %1100 to i32
  %1102 = icmp eq i32 %1101, 0
  br i1 %1102, label %1103, label %1131

; <label>:1103:                                   ; preds = %1099
  %1104 = getelementptr inbounds i8, i8* %.11067, i64 1
  %1105 = load i8, i8* %1104, align 1
  %1106 = zext i8 %1105 to i32
  %1107 = icmp sgt i32 %1106, 0
  br i1 %1107, label %1108, label %1131

; <label>:1108:                                   ; preds = %1103
  %1109 = getelementptr inbounds i8, i8* %.11067, i64 2
  %1110 = load i8, i8* %1109, align 1
  %1111 = zext i8 %1110 to i32
  %1112 = icmp ne i32 %1111, 0
  br i1 %1112, label %1113, label %1131

; <label>:1113:                                   ; preds = %1108
  %1114 = getelementptr inbounds i8, i8* %.11067, i64 1
  %1115 = load i8, i8* %1114, align 1
  %1116 = zext i8 %1115 to i32
  %1117 = icmp sgt i32 %1116, 32
  br i1 %1117, label %1118, label %1119

; <label>:1118:                                   ; preds = %1113
  br label %1123

; <label>:1119:                                   ; preds = %1113
  %1120 = getelementptr inbounds i8, i8* %.11067, i64 1
  %1121 = load i8, i8* %1120, align 1
  %1122 = zext i8 %1121 to i32
  br label %1123

; <label>:1123:                                   ; preds = %1119, %1118
  %1124 = phi i32 [ 32, %1118 ], [ %1122, %1119 ]
  %1125 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 2
  %1126 = getelementptr inbounds [33 x i8], [33 x i8]* %1125, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 2 %1126, i8 0, i64 33, i1 false)
  %1127 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 2
  %1128 = getelementptr inbounds [33 x i8], [33 x i8]* %1127, i32 0, i32 0
  %1129 = getelementptr inbounds i8, i8* %.11067, i64 2
  %1130 = sext i32 %1124 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1128, i8* align 1 %1129, i64 %1130, i1 false), !track !101
  br label %1131

; <label>:1131:                                   ; preds = %1123, %1108, %1103, %1099
  %1132 = getelementptr inbounds i8, i8* %.11067, i64 1
  %1133 = load i8, i8* %1132, align 1
  %1134 = zext i8 %1133 to i32
  %1135 = add nsw i32 2, %1134
  %1136 = sext i32 %1135 to i64
  %1137 = getelementptr inbounds i8, i8* %.11067, i64 %1136
  %1138 = load i32, i32* %1081, align 4
  %1139 = zext i32 %1138 to i64
  %1140 = getelementptr inbounds i8, i8* %.5, i64 %1139
  %1141 = icmp ult i8* %1137, %1140
  br i1 %1141, label %1086, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %1131
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %1079
  br label %1142

; <label>:1142:                                   ; preds = %.loopexit, %1098
  br label %1143

; <label>:1143:                                   ; preds = %1142, %1074
  %1144 = getelementptr inbounds i8, i8* %.5, i64 0
  %1145 = load i8, i8* %1144, align 1
  %1146 = zext i8 %1145 to i32
  %1147 = icmp eq i32 %1146, 16
  br i1 %1147, label %1148, label %1154

; <label>:1148:                                   ; preds = %1143
  %1149 = icmp ne %struct.ST_info* %.219, null
  br i1 %1149, label %1150, label %1153

; <label>:1150:                                   ; preds = %1148
  %1151 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1152 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1151, i32 0, i32 7
  store i32 0, i32* %1152, align 8
  br label %1153

; <label>:1153:                                   ; preds = %1150, %1148
  br label %1154

; <label>:1154:                                   ; preds = %1153, %1143
  %1155 = getelementptr inbounds i8, i8* %.5, i64 0
  %1156 = load i8, i8* %1155, align 1
  %1157 = zext i8 %1156 to i32
  %1158 = and i32 %1157, 12
  %1159 = icmp ne i32 %1158, 8
  br i1 %1159, label %1160, label %1161

; <label>:1160:                                   ; preds = %1154
  br label %1740

; <label>:1161:                                   ; preds = %1154
  %1162 = getelementptr inbounds i8, i8* %.5, i64 1
  %1163 = load i8, i8* %1162, align 1
  %1164 = zext i8 %1163 to i32
  %1165 = and i32 %1164, 3
  %1166 = icmp ne i32 %1165, 3
  %1167 = zext i1 %1166 to i64
  %1168 = select i1 %1166, i32 24, i32 30
  %1169 = getelementptr inbounds i8, i8* %.5, i64 0
  %1170 = load i8, i8* %1169, align 1
  %1171 = zext i8 %1170 to i32
  %1172 = and i32 %1171, 128
  %1173 = icmp eq i32 %1172, 128
  br i1 %1173, label %1174, label %1176

; <label>:1174:                                   ; preds = %1161
  %1175 = add nsw i32 %1168, 2
  br label %1176

; <label>:1176:                                   ; preds = %1174, %1161
  %.03 = phi i32 [ %1175, %1174 ], [ %1168, %1161 ]
  %1177 = add nsw i32 %.03, 16
  %1178 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %1179 = load i32, i32* %1178, align 4
  %1180 = icmp sgt i32 %1177, %1179
  br i1 %1180, label %1181, label %1182

; <label>:1181:                                   ; preds = %1176
  br label %1740

; <label>:1182:                                   ; preds = %1176
  %1183 = sext i32 %.03 to i64
  %1184 = getelementptr inbounds i8, i8* %.5, i64 %1183
  %1185 = load i8, i8* %1184, align 1
  %1186 = zext i8 %1185 to i32
  %1187 = add nsw i32 %.03, 1
  %1188 = sext i32 %1187 to i64
  %1189 = getelementptr inbounds i8, i8* %.5, i64 %1188
  %1190 = load i8, i8* %1189, align 1
  %1191 = zext i8 %1190 to i32
  %1192 = icmp ne i32 %1186, %1191
  br i1 %1192, label %1200, label %1193

; <label>:1193:                                   ; preds = %1182
  %1194 = add nsw i32 %.03, 2
  %1195 = sext i32 %1194 to i64
  %1196 = getelementptr inbounds i8, i8* %.5, i64 %1195
  %1197 = load i8, i8* %1196, align 1
  %1198 = zext i8 %1197 to i32
  %1199 = icmp ne i32 %1198, 3
  br i1 %1199, label %1200, label %1347

; <label>:1200:                                   ; preds = %1193, %1182
  %1201 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 2, i32* %1201, align 8
  %1202 = add nsw i32 %.03, 3
  %1203 = sext i32 %1202 to i64
  %1204 = getelementptr inbounds i8, i8* %.5, i64 %1203
  %1205 = load i8, i8* %1204, align 1
  %1206 = zext i8 %1205 to i32
  %1207 = and i32 %1206, 32
  %1208 = icmp ne i32 %1207, 0
  br i1 %1208, label %1209, label %1211

; <label>:1209:                                   ; preds = %1200
  %1210 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 3, i32* %1210, align 8
  br label %1211

; <label>:1211:                                   ; preds = %1209, %1200
  %1212 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %1213 = load i32, i32* %1212, align 8
  %1214 = icmp ne i32 %1213, 0
  br i1 %1214, label %1215, label %1227

; <label>:1215:                                   ; preds = %1211
  %1216 = add nsw i32 %.03, 3
  %1217 = sext i32 %1216 to i64
  %1218 = getelementptr inbounds i8, i8* %.5, i64 %1217
  %1219 = load i8, i8* %1218, align 1
  %1220 = zext i8 %1219 to i32
  %1221 = ashr i32 %1220, 6
  %1222 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %1223 = load i32, i32* %1222, align 8
  %1224 = sub nsw i32 %1223, 1
  %1225 = icmp ne i32 %1221, %1224
  br i1 %1225, label %1226, label %1227

; <label>:1226:                                   ; preds = %1215
  br label %1740

; <label>:1227:                                   ; preds = %1215, %1211
  %1228 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %1229 = load i32, i32* %1228, align 4
  %1230 = icmp ne i32 %1229, 0
  br i1 %1230, label %1231, label %1315

; <label>:1231:                                   ; preds = %1227
  %1232 = sext i32 %.03 to i64
  %1233 = getelementptr inbounds i8, i8* %.5, i64 %1232
  %1234 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %1235 = load i32, i32* %1234, align 4
  %1236 = zext i32 %1235 to i64
  %1237 = ptrtoint i8* %1233 to i64
  %1238 = ptrtoint i8* %.5 to i64
  %1239 = sub i64 %1237, %1238
  %1240 = sub nsw i64 %1236, %1239
  %1241 = sub nsw i64 %1240, 4
  %1242 = sub nsw i64 %1241, 4
  %1243 = trunc i64 %1242 to i32
  %1244 = getelementptr inbounds i8, i8* %.5, i64 1
  %1245 = load i8, i8* %1244, align 1
  %1246 = zext i8 %1245 to i32
  %1247 = and i32 %1246, 3
  %1248 = icmp eq i32 %1247, 3
  br i1 %1248, label %1249, label %1252

; <label>:1249:                                   ; preds = %1231
  %1250 = getelementptr inbounds i8, i8* %1233, i64 6
  %1251 = sub nsw i32 %1243, 6
  br label %1252

; <label>:1252:                                   ; preds = %1249, %1231
  %.022 = phi i8* [ %1250, %1249 ], [ %1233, %1231 ]
  %.021 = phi i32 [ %1251, %1249 ], [ %1243, %1231 ]
  %1253 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i32 0, i32 0
  %1254 = bitcast i32* %1253 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1254, i8 0, i64 64, i1 false)
  %1255 = getelementptr inbounds [2048 x i8], [2048 x i8]* %12, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %1255, i8 0, i64 2048, i1 false)
  %1256 = getelementptr inbounds [2048 x i8], [2048 x i8]* %12, i32 0, i32 0
  %1257 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i32 0, i32 0
  %1258 = call i32 @known_clear(i8* %1256, i32* %13, i32* %1257, i8* %.5, i32 %.021)
  %1259 = load i32, i32* %13, align 4
  %1260 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %1261 = load i32, i32* %1260, align 4
  %1262 = add nsw i32 %1261, 3
  %1263 = icmp slt i32 %1259, %1262
  br i1 %1263, label %1264, label %1265

; <label>:1264:                                   ; preds = %1252
  br label %1740

; <label>:1265:                                   ; preds = %1252
  %1266 = icmp slt i32 0, %1258
  br i1 %1266, label %.lr.ph76, label %1289

.lr.ph76:                                         ; preds = %1265
  %1267 = zext i32 %1258 to i64
  br label %1268

; <label>:1268:                                   ; preds = %.lr.ph76, %1288
  %indvars.iv78 = phi i64 [ 0, %.lr.ph76 ], [ %indvars.iv.next79, %1288 ]
  call void @unroll_loop(i32 43)
  %1269 = load i32, i32* %13, align 4
  %1270 = icmp slt i32 0, %1269
  br i1 %1270, label %.lr.ph72, label %1287

.lr.ph72:                                         ; preds = %1268
  br label %1271

; <label>:1271:                                   ; preds = %.lr.ph72, %1283
  %indvars.iv = phi i64 [ 0, %.lr.ph72 ], [ %indvars.iv.next, %1283 ]
  call void @unroll_loop(i32 44)
  %1272 = add nuw nsw i64 4, %indvars.iv
  %1273 = getelementptr inbounds i8, i8* %.022, i64 %1272
  %1274 = load i8, i8* %1273, align 1
  %1275 = zext i8 %1274 to i32
  %1276 = mul nuw nsw i64 32, %indvars.iv78
  %1277 = add nuw nsw i64 %indvars.iv, %1276
  %1278 = getelementptr inbounds [2048 x i8], [2048 x i8]* %12, i64 0, i64 %1277
  %1279 = load i8, i8* %1278, align 1
  %1280 = zext i8 %1279 to i32
  %1281 = xor i32 %1280, %1275
  %1282 = trunc i32 %1281 to i8
  store i8 %1282, i8* %1278, align 1
  br label %1283

; <label>:1283:                                   ; preds = %1271
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %1284 = load i32, i32* %13, align 4
  %1285 = sext i32 %1284 to i64
  %1286 = icmp slt i64 %indvars.iv.next, %1285
  br i1 %1286, label %1271, label %._crit_edge73

._crit_edge73:                                    ; preds = %1283
  br label %1287

; <label>:1287:                                   ; preds = %._crit_edge73, %1268
  br label %1288

; <label>:1288:                                   ; preds = %1287
  %indvars.iv.next79 = add nuw nsw i64 %indvars.iv78, 1
  %exitcond11 = icmp ne i64 %indvars.iv.next79, %1267
  br i1 %exitcond11, label %1268, label %._crit_edge77

._crit_edge77:                                    ; preds = %1288
  br label %1289

; <label>:1289:                                   ; preds = %._crit_edge77, %1265
  %1290 = icmp eq i32 %1258, 1
  br i1 %1290, label %1291, label %1303

; <label>:1291:                                   ; preds = %1289
  %1292 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 15
  %1293 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %1292, align 8
  %1294 = getelementptr inbounds [2048 x i8], [2048 x i8]* %12, i32 0, i32 0
  %1295 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i32 0, i32 0
  %1296 = call i32 @PTW_addsession(%struct.PTW_attackstate* %1293, i8* %.022, i8* %1294, i32* %1295, i32 %1258)
  %1297 = icmp ne i32 %1296, 0
  br i1 %1297, label %1298, label %1302

; <label>:1298:                                   ; preds = %1291
  %1299 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 8
  %1300 = load i64, i64* %1299, align 8
  %1301 = add nsw i64 %1300, 1
  store i64 %1301, i64* %1299, align 8
  br label %1302

; <label>:1302:                                   ; preds = %1298, %1291
  br label %1303

; <label>:1303:                                   ; preds = %1302, %1289
  %1304 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 16
  %1305 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %1304, align 8
  %1306 = getelementptr inbounds [2048 x i8], [2048 x i8]* %12, i32 0, i32 0
  %1307 = getelementptr inbounds [16 x i32], [16 x i32]* %14, i32 0, i32 0
  %1308 = call i32 @PTW_addsession(%struct.PTW_attackstate* %1305, i8* %.022, i8* %1306, i32* %1307, i32 %1258)
  %1309 = icmp ne i32 %1308, 0
  br i1 %1309, label %1310, label %1314

; <label>:1310:                                   ; preds = %1303
  %1311 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 9
  %1312 = load i64, i64* %1311, align 8
  %1313 = add nsw i64 %1312, 1
  store i64 %1313, i64* %1311, align 8
  br label %1314

; <label>:1314:                                   ; preds = %1310, %1303
  br label %1740

; <label>:1315:                                   ; preds = %1227
  %1316 = sext i32 %.03 to i64
  %1317 = getelementptr inbounds i8, i8* %.5, i64 %1316
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %1317, i64 3, i1 false), !track !102
  %1318 = getelementptr inbounds i8, i8* %18, i64 3
  %1319 = sext i32 %.03 to i64
  %1320 = getelementptr inbounds i8, i8* %.5, i64 %1319
  %1321 = getelementptr inbounds i8, i8* %1320, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1318, i8* align 1 %1321, i64 2, i1 false), !track !103
  %1322 = getelementptr inbounds i8, i8* %.5, i64 4
  %1323 = getelementptr [7 x i8], [7 x i8]* @.str.26, i32 0, i32 0
  %1324 = call i32 @memcmp(i8* %1322, i8* %1323, i64 6) #10
  %1325 = icmp eq i32 %1324, 0
  br i1 %1325, label %1331, label %1326

; <label>:1326:                                   ; preds = %1315
  %1327 = getelementptr inbounds i8, i8* %.5, i64 16
  %1328 = getelementptr [7 x i8], [7 x i8]* @.str.26, i32 0, i32 0
  %1329 = call i32 @memcmp(i8* %1327, i8* %1328, i64 6) #10
  %1330 = icmp eq i32 %1329, 0
  br i1 %1330, label %1331, label %1346

; <label>:1331:                                   ; preds = %1326, %1315
  %1332 = getelementptr inbounds i8, i8* %18, i64 3
  %1333 = load i8, i8* %1332, align 1
  %1334 = zext i8 %1333 to i32
  %1335 = xor i32 %1334, 66
  %1336 = xor i32 %1335, 170
  %1337 = trunc i32 %1336 to i8
  %1338 = getelementptr inbounds i8, i8* %18, i64 3
  store i8 %1337, i8* %1338, align 1
  %1339 = getelementptr inbounds i8, i8* %18, i64 4
  %1340 = load i8, i8* %1339, align 1
  %1341 = zext i8 %1340 to i32
  %1342 = xor i32 %1341, 66
  %1343 = xor i32 %1342, 170
  %1344 = trunc i32 %1343 to i8
  %1345 = getelementptr inbounds i8, i8* %18, i64 4
  store i8 %1344, i8* %1345, align 1
  br label %1346

; <label>:1346:                                   ; preds = %1331, %1326
  br label %622

; <label>:1347:                                   ; preds = %1193
  %1348 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  %1349 = load i32, i32* %1348, align 8
  %1350 = icmp slt i32 %1349, 0
  br i1 %1350, label %1351, label %1353

; <label>:1351:                                   ; preds = %1347
  %1352 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 0, i32* %1352, align 8
  br label %1353

; <label>:1353:                                   ; preds = %1351, %1347
  %1354 = add nsw i32 %.03, 6
  %1355 = add nsw i32 %1354, 20
  %1356 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 2
  %1357 = load i32, i32* %1356, align 4
  %1358 = icmp slt i32 %1355, %1357
  br i1 %1358, label %1359, label %1404

; <label>:1359:                                   ; preds = %1353
  %1360 = sext i32 %1354 to i64
  %1361 = getelementptr inbounds i8, i8* %.5, i64 %1360
  %1362 = load i8, i8* %1361, align 1
  %1363 = zext i8 %1362 to i32
  %1364 = icmp eq i32 %1363, 8
  br i1 %1364, label %1365, label %1384

; <label>:1365:                                   ; preds = %1359
  %1366 = add nsw i32 %1354, 1
  %1367 = sext i32 %1366 to i64
  %1368 = getelementptr inbounds i8, i8* %.5, i64 %1367
  %1369 = load i8, i8* %1368, align 1
  %1370 = zext i8 %1369 to i32
  %1371 = icmp eq i32 %1370, 0
  br i1 %1371, label %1372, label %1384

; <label>:1372:                                   ; preds = %1365
  %1373 = getelementptr inbounds i8, i8* %.5, i64 1
  %1374 = load i8, i8* %1373, align 1
  %1375 = zext i8 %1374 to i32
  %1376 = and i32 %1375, 3
  %1377 = icmp eq i32 %1376, 1
  br i1 %1377, label %1378, label %1384

; <label>:1378:                                   ; preds = %1372
  %1379 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 3
  %1380 = getelementptr inbounds [4 x i8], [4 x i8]* %1379, i32 0, i32 0
  %1381 = add nsw i32 %1354, 14
  %1382 = sext i32 %1381 to i64
  %1383 = getelementptr inbounds i8, i8* %.5, i64 %1382
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1380, i8* align 1 %1383, i64 4, i1 false), !track !104
  br label %1384

; <label>:1384:                                   ; preds = %1378, %1372, %1365, %1359
  %1385 = sext i32 %1354 to i64
  %1386 = getelementptr inbounds i8, i8* %.5, i64 %1385
  %1387 = load i8, i8* %1386, align 1
  %1388 = zext i8 %1387 to i32
  %1389 = icmp eq i32 %1388, 8
  br i1 %1389, label %1390, label %1403

; <label>:1390:                                   ; preds = %1384
  %1391 = add nsw i32 %1354, 1
  %1392 = sext i32 %1391 to i64
  %1393 = getelementptr inbounds i8, i8* %.5, i64 %1392
  %1394 = load i8, i8* %1393, align 1
  %1395 = zext i8 %1394 to i32
  %1396 = icmp eq i32 %1395, 6
  br i1 %1396, label %1397, label %1403

; <label>:1397:                                   ; preds = %1390
  %1398 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 3
  %1399 = getelementptr inbounds [4 x i8], [4 x i8]* %1398, i32 0, i32 0
  %1400 = add nsw i32 %1354, 16
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds i8, i8* %.5, i64 %1401
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1399, i8* align 1 %1402, i64 4, i1 false), !track !105
  br label %1403

; <label>:1403:                                   ; preds = %1397, %1390, %1384
  br label %1404

; <label>:1404:                                   ; preds = %1403, %1353
  %1405 = sext i32 %1354 to i64
  %1406 = getelementptr inbounds i8, i8* %.5, i64 %1405
  %1407 = load i8, i8* %1406, align 1
  %1408 = zext i8 %1407 to i32
  %1409 = icmp ne i32 %1408, 136
  br i1 %1409, label %1417, label %1410

; <label>:1410:                                   ; preds = %1404
  %1411 = add nsw i32 %1354, 1
  %1412 = sext i32 %1411 to i64
  %1413 = getelementptr inbounds i8, i8* %.5, i64 %1412
  %1414 = load i8, i8* %1413, align 1
  %1415 = zext i8 %1414 to i32
  %1416 = icmp ne i32 %1415, 142
  br i1 %1416, label %1417, label %1418

; <label>:1417:                                   ; preds = %1410, %1404
  br label %1740

; <label>:1418:                                   ; preds = %1410
  %1419 = add nsw i32 %1354, 2
  %1420 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 11
  store i32 1, i32* %1420, align 4
  %1421 = add nsw i32 %1419, 1
  %1422 = sext i32 %1421 to i64
  %1423 = getelementptr inbounds i8, i8* %.5, i64 %1422
  %1424 = load i8, i8* %1423, align 1
  %1425 = zext i8 %1424 to i32
  %1426 = icmp ne i32 %1425, 3
  br i1 %1426, label %1441, label %1427

; <label>:1427:                                   ; preds = %1418
  %1428 = add nsw i32 %1419, 4
  %1429 = sext i32 %1428 to i64
  %1430 = getelementptr inbounds i8, i8* %.5, i64 %1429
  %1431 = load i8, i8* %1430, align 1
  %1432 = zext i8 %1431 to i32
  %1433 = icmp ne i32 %1432, 254
  br i1 %1433, label %1434, label %1442

; <label>:1434:                                   ; preds = %1427
  %1435 = add nsw i32 %1419, 4
  %1436 = sext i32 %1435 to i64
  %1437 = getelementptr inbounds i8, i8* %.5, i64 %1436
  %1438 = load i8, i8* %1437, align 1
  %1439 = zext i8 %1438 to i32
  %1440 = icmp ne i32 %1439, 2
  br i1 %1440, label %1441, label %1442

; <label>:1441:                                   ; preds = %1434, %1418
  br label %1740

; <label>:1442:                                   ; preds = %1434, %1427
  %1443 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 11
  store i32 0, i32* %1443, align 4
  %1444 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 3, i32* %1444, align 8
  %1445 = icmp eq %struct.ST_info* %.219, null
  br i1 %1445, label %1446, label %1448

; <label>:1446:                                   ; preds = %1442
  %1447 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @mx_apl) #9
  br label %.backedge

; <label>:1448:                                   ; preds = %1442
  %1449 = add nsw i32 %1419, 6
  %1450 = sext i32 %1449 to i64
  %1451 = getelementptr inbounds i8, i8* %.5, i64 %1450
  %1452 = load i8, i8* %1451, align 1
  %1453 = zext i8 %1452 to i32
  %1454 = and i32 %1453, 8
  %1455 = icmp ne i32 %1454, 0
  br i1 %1455, label %1456, label %1489

; <label>:1456:                                   ; preds = %1448
  %1457 = add nsw i32 %1419, 6
  %1458 = sext i32 %1457 to i64
  %1459 = getelementptr inbounds i8, i8* %.5, i64 %1458
  %1460 = load i8, i8* %1459, align 1
  %1461 = zext i8 %1460 to i32
  %1462 = and i32 %1461, 64
  %1463 = icmp eq i32 %1462, 0
  br i1 %1463, label %1464, label %1489

; <label>:1464:                                   ; preds = %1456
  %1465 = add nsw i32 %1419, 6
  %1466 = sext i32 %1465 to i64
  %1467 = getelementptr inbounds i8, i8* %.5, i64 %1466
  %1468 = load i8, i8* %1467, align 1
  %1469 = zext i8 %1468 to i32
  %1470 = and i32 %1469, 128
  %1471 = icmp ne i32 %1470, 0
  br i1 %1471, label %1472, label %1489

; <label>:1472:                                   ; preds = %1464
  %1473 = add nsw i32 %1419, 5
  %1474 = sext i32 %1473 to i64
  %1475 = getelementptr inbounds i8, i8* %.5, i64 %1474
  %1476 = load i8, i8* %1475, align 1
  %1477 = zext i8 %1476 to i32
  %1478 = and i32 %1477, 1
  %1479 = icmp eq i32 %1478, 0
  br i1 %1479, label %1480, label %1489

; <label>:1480:                                   ; preds = %1472
  %1481 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1482 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1481, i32 0, i32 2
  %1483 = getelementptr inbounds [32 x i8], [32 x i8]* %1482, i32 0, i32 0
  %1484 = add nsw i32 %1419, 17
  %1485 = sext i32 %1484 to i64
  %1486 = getelementptr inbounds i8, i8* %.5, i64 %1485
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1483, i8* align 1 %1486, i64 32, i1 false), !track !106
  %1487 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1488 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1487, i32 0, i32 7
  store i32 1, i32* %1488, align 8
  br label %1489

; <label>:1489:                                   ; preds = %1480, %1472, %1464, %1456, %1448
  %1490 = add nsw i32 %1419, 6
  %1491 = sext i32 %1490 to i64
  %1492 = getelementptr inbounds i8, i8* %.5, i64 %1491
  %1493 = load i8, i8* %1492, align 1
  %1494 = zext i8 %1493 to i32
  %1495 = and i32 %1494, 8
  %1496 = icmp ne i32 %1495, 0
  br i1 %1496, label %1497, label %1607

; <label>:1497:                                   ; preds = %1489
  %1498 = add nsw i32 %1419, 6
  %1499 = sext i32 %1498 to i64
  %1500 = getelementptr inbounds i8, i8* %.5, i64 %1499
  %1501 = load i8, i8* %1500, align 1
  %1502 = zext i8 %1501 to i32
  %1503 = and i32 %1502, 64
  %1504 = icmp eq i32 %1503, 0
  br i1 %1504, label %1505, label %1607

; <label>:1505:                                   ; preds = %1497
  %1506 = add nsw i32 %1419, 6
  %1507 = sext i32 %1506 to i64
  %1508 = getelementptr inbounds i8, i8* %.5, i64 %1507
  %1509 = load i8, i8* %1508, align 1
  %1510 = zext i8 %1509 to i32
  %1511 = and i32 %1510, 128
  %1512 = icmp eq i32 %1511, 0
  br i1 %1512, label %1513, label %1607

; <label>:1513:                                   ; preds = %1505
  %1514 = add nsw i32 %1419, 5
  %1515 = sext i32 %1514 to i64
  %1516 = getelementptr inbounds i8, i8* %.5, i64 %1515
  %1517 = load i8, i8* %1516, align 1
  %1518 = zext i8 %1517 to i32
  %1519 = and i32 %1518, 1
  %1520 = icmp ne i32 %1519, 0
  br i1 %1520, label %1521, label %1607

; <label>:1521:                                   ; preds = %1513
  %1522 = add nsw i32 %1419, 17
  %1523 = sext i32 %1522 to i64
  %1524 = getelementptr inbounds i8, i8* %.5, i64 %1523
  %1525 = getelementptr [32 x i8], [32 x i8]* @ZERO, i32 0, i32 0
  %1526 = call i32 @memcmp(i8* %1524, i8* %1525, i64 32) #10
  %1527 = icmp ne i32 %1526, 0
  br i1 %1527, label %1528, label %1539

; <label>:1528:                                   ; preds = %1521
  %1529 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1530 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1529, i32 0, i32 1
  %1531 = getelementptr inbounds [32 x i8], [32 x i8]* %1530, i32 0, i32 0
  %1532 = add nsw i32 %1419, 17
  %1533 = sext i32 %1532 to i64
  %1534 = getelementptr inbounds i8, i8* %.5, i64 %1533
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1531, i8* align 1 %1534, i64 32, i1 false), !track !107
  %1535 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1536 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1535, i32 0, i32 7
  %1537 = load i32, i32* %1536, align 8
  %1538 = or i32 %1537, 2
  store i32 %1538, i32* %1536, align 8
  br label %1539

; <label>:1539:                                   ; preds = %1528, %1521
  %1540 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1541 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1540, i32 0, i32 7
  %1542 = load i32, i32* %1541, align 8
  %1543 = and i32 %1542, 4
  %1544 = icmp ne i32 %1543, 4
  br i1 %1544, label %1545, label %1606

; <label>:1545:                                   ; preds = %1539
  %1546 = add nsw i32 %1419, 2
  %1547 = sext i32 %1546 to i64
  %1548 = getelementptr inbounds i8, i8* %.5, i64 %1547
  %1549 = load i8, i8* %1548, align 1
  %1550 = zext i8 %1549 to i32
  %1551 = shl i32 %1550, 8
  %1552 = add nsw i32 %1419, 3
  %1553 = sext i32 %1552 to i64
  %1554 = getelementptr inbounds i8, i8* %.5, i64 %1553
  %1555 = load i8, i8* %1554, align 1
  %1556 = zext i8 %1555 to i32
  %1557 = add nsw i32 %1551, %1556
  %1558 = add nsw i32 %1557, 4
  %1559 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1560 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1559, i32 0, i32 5
  store i32 %1558, i32* %1560, align 8
  %1561 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 3
  %1562 = load i32, i32* %1561, align 4
  %1563 = sub nsw i32 %1562, %1419
  %1564 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1565 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1564, i32 0, i32 5
  %1566 = load i32, i32* %1565, align 8
  %1567 = icmp slt i32 %1563, %1566
  br i1 %1567, label %1573, label %1568

; <label>:1568:                                   ; preds = %1545
  %1569 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1570 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1569, i32 0, i32 5
  %1571 = load i32, i32* %1570, align 8
  %1572 = icmp eq i32 %1571, 0
  br i1 %1572, label %1573, label %1574

; <label>:1573:                                   ; preds = %1568, %1545
  br label %.backedge

; <label>:1574:                                   ; preds = %1568
  %1575 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1576 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1575, i32 0, i32 3
  %1577 = getelementptr inbounds [16 x i8], [16 x i8]* %1576, i32 0, i32 0
  %1578 = add nsw i32 %1419, 81
  %1579 = sext i32 %1578 to i64
  %1580 = getelementptr inbounds i8, i8* %.5, i64 %1579
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1577, i8* align 1 %1580, i64 16, i1 false), !track !108
  %1581 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1582 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1581, i32 0, i32 4
  %1583 = getelementptr inbounds [256 x i8], [256 x i8]* %1582, i32 0, i32 0
  %1584 = sext i32 %1419 to i64
  %1585 = getelementptr inbounds i8, i8* %.5, i64 %1584
  %1586 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1587 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1586, i32 0, i32 5
  %1588 = load i32, i32* %1587, align 8
  %1589 = sext i32 %1588 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1583, i8* align 1 %1585, i64 %1589, i1 false), !track !109
  %1590 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1591 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1590, i32 0, i32 4
  %1592 = getelementptr inbounds [256 x i8], [256 x i8]* %1591, i32 0, i32 0
  %1593 = getelementptr inbounds i8, i8* %1592, i64 81
  call void @llvm.memset.p0i8.i64(i8* align 1 %1593, i8 0, i64 16, i1 false)
  %1594 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1595 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1594, i32 0, i32 7
  %1596 = load i32, i32* %1595, align 8
  %1597 = or i32 %1596, 4
  store i32 %1597, i32* %1595, align 8
  %1598 = add nsw i32 %1419, 6
  %1599 = sext i32 %1598 to i64
  %1600 = getelementptr inbounds i8, i8* %.5, i64 %1599
  %1601 = load i8, i8* %1600, align 1
  %1602 = zext i8 %1601 to i32
  %1603 = and i32 %1602, 7
  %1604 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1605 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1604, i32 0, i32 6
  store i32 %1603, i32* %1605, align 4
  br label %1606

; <label>:1606:                                   ; preds = %1574, %1539
  br label %1607

; <label>:1607:                                   ; preds = %1606, %1513, %1505, %1497, %1489
  %1608 = add nsw i32 %1419, 6
  %1609 = sext i32 %1608 to i64
  %1610 = getelementptr inbounds i8, i8* %.5, i64 %1609
  %1611 = load i8, i8* %1610, align 1
  %1612 = zext i8 %1611 to i32
  %1613 = and i32 %1612, 8
  %1614 = icmp ne i32 %1613, 0
  br i1 %1614, label %1615, label %1725

; <label>:1615:                                   ; preds = %1607
  %1616 = add nsw i32 %1419, 6
  %1617 = sext i32 %1616 to i64
  %1618 = getelementptr inbounds i8, i8* %.5, i64 %1617
  %1619 = load i8, i8* %1618, align 1
  %1620 = zext i8 %1619 to i32
  %1621 = and i32 %1620, 64
  %1622 = icmp ne i32 %1621, 0
  br i1 %1622, label %1623, label %1725

; <label>:1623:                                   ; preds = %1615
  %1624 = add nsw i32 %1419, 6
  %1625 = sext i32 %1624 to i64
  %1626 = getelementptr inbounds i8, i8* %.5, i64 %1625
  %1627 = load i8, i8* %1626, align 1
  %1628 = zext i8 %1627 to i32
  %1629 = and i32 %1628, 128
  %1630 = icmp ne i32 %1629, 0
  br i1 %1630, label %1631, label %1725

; <label>:1631:                                   ; preds = %1623
  %1632 = add nsw i32 %1419, 5
  %1633 = sext i32 %1632 to i64
  %1634 = getelementptr inbounds i8, i8* %.5, i64 %1633
  %1635 = load i8, i8* %1634, align 1
  %1636 = zext i8 %1635 to i32
  %1637 = and i32 %1636, 1
  %1638 = icmp ne i32 %1637, 0
  br i1 %1638, label %1639, label %1725

; <label>:1639:                                   ; preds = %1631
  %1640 = add nsw i32 %1419, 17
  %1641 = sext i32 %1640 to i64
  %1642 = getelementptr inbounds i8, i8* %.5, i64 %1641
  %1643 = getelementptr [32 x i8], [32 x i8]* @ZERO, i32 0, i32 0
  %1644 = call i32 @memcmp(i8* %1642, i8* %1643, i64 32) #10
  %1645 = icmp ne i32 %1644, 0
  br i1 %1645, label %1646, label %1657

; <label>:1646:                                   ; preds = %1639
  %1647 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1648 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1647, i32 0, i32 2
  %1649 = getelementptr inbounds [32 x i8], [32 x i8]* %1648, i32 0, i32 0
  %1650 = add nsw i32 %1419, 17
  %1651 = sext i32 %1650 to i64
  %1652 = getelementptr inbounds i8, i8* %.5, i64 %1651
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1649, i8* align 1 %1652, i64 32, i1 false), !track !110
  %1653 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1654 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1653, i32 0, i32 7
  %1655 = load i32, i32* %1654, align 8
  %1656 = or i32 %1655, 1
  store i32 %1656, i32* %1654, align 8
  br label %1657

; <label>:1657:                                   ; preds = %1646, %1639
  %1658 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1659 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1658, i32 0, i32 7
  %1660 = load i32, i32* %1659, align 8
  %1661 = and i32 %1660, 4
  %1662 = icmp ne i32 %1661, 4
  br i1 %1662, label %1663, label %1724

; <label>:1663:                                   ; preds = %1657
  %1664 = add nsw i32 %1419, 2
  %1665 = sext i32 %1664 to i64
  %1666 = getelementptr inbounds i8, i8* %.5, i64 %1665
  %1667 = load i8, i8* %1666, align 1
  %1668 = zext i8 %1667 to i32
  %1669 = shl i32 %1668, 8
  %1670 = add nsw i32 %1419, 3
  %1671 = sext i32 %1670 to i64
  %1672 = getelementptr inbounds i8, i8* %.5, i64 %1671
  %1673 = load i8, i8* %1672, align 1
  %1674 = zext i8 %1673 to i32
  %1675 = add nsw i32 %1669, %1674
  %1676 = add nsw i32 %1675, 4
  %1677 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1678 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1677, i32 0, i32 5
  store i32 %1676, i32* %1678, align 8
  %1679 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %10, i32 0, i32 3
  %1680 = load i32, i32* %1679, align 4
  %1681 = sub nsw i32 %1680, %1419
  %1682 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1683 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1682, i32 0, i32 5
  %1684 = load i32, i32* %1683, align 8
  %1685 = icmp slt i32 %1681, %1684
  br i1 %1685, label %1691, label %1686

; <label>:1686:                                   ; preds = %1663
  %1687 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1688 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1687, i32 0, i32 5
  %1689 = load i32, i32* %1688, align 8
  %1690 = icmp eq i32 %1689, 0
  br i1 %1690, label %1691, label %1692

; <label>:1691:                                   ; preds = %1686, %1663
  br label %.backedge

; <label>:1692:                                   ; preds = %1686
  %1693 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1694 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1693, i32 0, i32 3
  %1695 = getelementptr inbounds [16 x i8], [16 x i8]* %1694, i32 0, i32 0
  %1696 = add nsw i32 %1419, 81
  %1697 = sext i32 %1696 to i64
  %1698 = getelementptr inbounds i8, i8* %.5, i64 %1697
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1695, i8* align 1 %1698, i64 16, i1 false), !track !111
  %1699 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1700 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1699, i32 0, i32 4
  %1701 = getelementptr inbounds [256 x i8], [256 x i8]* %1700, i32 0, i32 0
  %1702 = sext i32 %1419 to i64
  %1703 = getelementptr inbounds i8, i8* %.5, i64 %1702
  %1704 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1705 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1704, i32 0, i32 5
  %1706 = load i32, i32* %1705, align 8
  %1707 = sext i32 %1706 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1701, i8* align 1 %1703, i64 %1707, i1 false), !track !112
  %1708 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1709 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1708, i32 0, i32 4
  %1710 = getelementptr inbounds [256 x i8], [256 x i8]* %1709, i32 0, i32 0
  %1711 = getelementptr inbounds i8, i8* %1710, i64 81
  call void @llvm.memset.p0i8.i64(i8* align 1 %1711, i8 0, i64 16, i1 false)
  %1712 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1713 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1712, i32 0, i32 7
  %1714 = load i32, i32* %1713, align 8
  %1715 = or i32 %1714, 4
  store i32 %1715, i32* %1713, align 8
  %1716 = add nsw i32 %1419, 6
  %1717 = sext i32 %1716 to i64
  %1718 = getelementptr inbounds i8, i8* %.5, i64 %1717
  %1719 = load i8, i8* %1718, align 1
  %1720 = zext i8 %1719 to i32
  %1721 = and i32 %1720, 7
  %1722 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1723 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1722, i32 0, i32 6
  store i32 %1721, i32* %1723, align 4
  br label %1724

; <label>:1724:                                   ; preds = %1692, %1657
  br label %1725

; <label>:1725:                                   ; preds = %1724, %1631, %1623, %1615, %1607
  %1726 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1727 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1726, i32 0, i32 7
  %1728 = load i32, i32* %1727, align 8
  %1729 = icmp eq i32 %1728, 7
  br i1 %1729, label %1730, label %1739

; <label>:1730:                                   ; preds = %1725
  %1731 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1732 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1731, i32 0, i32 0
  %1733 = getelementptr inbounds [6 x i8], [6 x i8]* %1732, i32 0, i32 0
  %1734 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1733, i8* align 1 %1734, i64 6, i1 false), !track !113
  %1735 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 14
  %1736 = bitcast %struct.WPA_hdsk* %1735 to i8*
  %1737 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1738 = bitcast %struct.WPA_hdsk* %1737 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1736, i8* align 8 %1738, i64 356, i1 false), !track !114
  br label %1739

; <label>:1739:                                   ; preds = %1730, %1725
  br label %1740

; <label>:1740:                                   ; preds = %1739, %1441, %1417, %1314, %1264, %1226, %1181, %1160, %925, %845, %825, %816, %728, %705, %671, %555, %529, %523, %506, %462, %455
  %.315 = phi %struct.AP_info* [ %.01281, %455 ], [ %.01281, %462 ], [ %.01281, %506 ], [ %.01281, %523 ], [ %.01281, %529 ], [ %.01281, %555 ], [ %.214, %671 ], [ %.214, %925 ], [ %.214, %705 ], [ %.214, %728 ], [ %.214, %816 ], [ %.214, %825 ], [ %.214, %845 ], [ %.214, %1160 ], [ %.214, %1181 ], [ %.214, %1226 ], [ %.214, %1264 ], [ %.214, %1314 ], [ %.214, %1417 ], [ %.214, %1441 ], [ %.214, %1739 ]
  %1741 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @mx_apl) #9
  %1742 = icmp ne %struct.AP_info* %.315, null
  br i1 %1742, label %1743, label %1766

; <label>:1743:                                   ; preds = %1740
  %1744 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.315, i32 0, i32 7
  %1745 = load i64, i64* %1744, align 8
  %1746 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 33
  %1747 = load i32, i32* %1746, align 8
  %1748 = sext i32 %1747 to i64
  %1749 = icmp sge i64 %1745, %1748
  br i1 %1749, label %1764, label %1750

; <label>:1750:                                   ; preds = %1743
  %1751 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.315, i32 0, i32 8
  %1752 = load i64, i64* %1751, align 8
  %1753 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 33
  %1754 = load i32, i32* %1753, align 8
  %1755 = sext i32 %1754 to i64
  %1756 = icmp sge i64 %1752, %1755
  br i1 %1756, label %1764, label %1757

; <label>:1757:                                   ; preds = %1750
  %1758 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.315, i32 0, i32 9
  %1759 = load i64, i64* %1758, align 8
  %1760 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 33
  %1761 = load i32, i32* %1760, align 8
  %1762 = sext i32 %1761 to i64
  %1763 = icmp sge i64 %1759, %1762
  br i1 %1763, label %1764, label %1765

; <label>:1764:                                   ; preds = %1757, %1750, %1743
  call void @eof_wait(i32* %2)
  br label %1795

; <label>:1765:                                   ; preds = %1757
  br label %1766

; <label>:1766:                                   ; preds = %1765, %1740
  br label %.backedge

.backedge:                                        ; preds = %1766, %1691, %1573, %1446, %437, %421, %400, %379
  %.012.be = phi %struct.AP_info* [ %.315, %1766 ], [ %.214, %1446 ], [ %.214, %1573 ], [ %.214, %1691 ], [ %.01280, %379 ], [ %.01280, %400 ], [ %.01280, %421 ], [ %.01280, %437 ]
  %.06.be = phi i8* [ %.5, %1766 ], [ %.5, %1446 ], [ %.5, %1573 ], [ %.5, %1691 ], [ %18, %379 ], [ %.17, %400 ], [ %.28, %421 ], [ %.28, %437 ]
  %1767 = load i32, i32* @close_aircrack, align 4
  %1768 = icmp ne i32 %1767, 0
  br i1 %1768, label %._crit_edge87, label %168

; <label>:1769:                                   ; preds = %973, %897, %780, %657, %613, %604, %581, %342, %288, %274, %251, %232, %216, %203, %181, %167
  br label %1770

; <label>:1770:                                   ; preds = %1769, %162, %143, %136, %116, %73, %64, %44, %37, %20
  %1771 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %3, i32 0, i32 2
  %1772 = load i8*, i8** %1771, align 8
  %1773 = icmp ne i8* %1772, null
  br i1 %1773, label %1774, label %1778

; <label>:1774:                                   ; preds = %1770
  %1775 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %3, i32 0, i32 2
  %1776 = load i8*, i8** %1775, align 8
  call void @free(i8* %1776) #9
  %1777 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %3, i32 0, i32 2
  store i8* null, i8** %1777, align 8
  br label %1778

; <label>:1778:                                   ; preds = %1774, %1770
  %1779 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %3, i32 0, i32 3
  %1780 = load i8*, i8** %1779, align 8
  %1781 = icmp ne i8* %1780, null
  br i1 %1781, label %1782, label %1786

; <label>:1782:                                   ; preds = %1778
  %1783 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %3, i32 0, i32 3
  %1784 = load i8*, i8** %1783, align 8
  call void @free(i8* %1784) #9
  %1785 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %3, i32 0, i32 3
  store i8* null, i8** %1785, align 8
  br label %1786

; <label>:1786:                                   ; preds = %1782, %1778
  %1787 = icmp ne i8* %18, null
  br i1 %1787, label %1788, label %1789

; <label>:1788:                                   ; preds = %1786
  call void @free(i8* %18) #9
  br label %1789

; <label>:1789:                                   ; preds = %1788, %1786
  %1790 = load i32, i32* @close_aircrack, align 4
  %1791 = icmp ne i32 %1790, 0
  br i1 %1791, label %1792, label %1793

; <label>:1792:                                   ; preds = %1789
  br label %1795

; <label>:1793:                                   ; preds = %1789
  %1794 = call i32 @kill(i32 0, i32 15) #9
  call void @_exit(i32 1) #12
  br label %UnifiedUnreachableBlock

; <label>:1795:                                   ; preds = %1792, %1764
  ret void

UnifiedUnreachableBlock:                          ; preds = %1793, %322, %155, %125
  unreachable
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #3

declare dso_local i32 @open64(i8*, i32, ...) #1

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local void @errx(i32, i8*, ...) #6

declare dso_local i32 @fcntl(i32, i32, ...) #1

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: nounwind
declare dso_local i32 @kill(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @check_thread(i8*) #0 {
  %2 = alloca %struct.read_buf, align 8, !track !115
  %3 = alloca [6 x i8], align 1, !track !116
  %4 = alloca [6 x i8], align 1, !track !117
  %5 = alloca [6 x i8], align 1, !track !118
  %6 = alloca [16 x i32], align 16
  %7 = alloca %struct.ivs2_pkthdr, align 2, !track !119
  %8 = alloca %struct.ivs2_filehdr, align 2, !track !120
  %9 = alloca %struct.pcap_pkthdr, align 4, !track !121
  %10 = alloca %struct.pcap_file_header, align 4, !track !122
  %11 = alloca [2048 x i8], align 16, !track !123
  %12 = alloca i32, align 4
  %13 = bitcast %struct.read_buf* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false)
  %14 = call noalias i8* @malloc(i64 65536) #9, !track !124
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %1
  %17 = getelementptr [14 x i8], [14 x i8]* @.str.7, i32 0, i32 0
  call void @perror(i8* %17)
  br label %1465

; <label>:18:                                     ; preds = %1
  %19 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %20 = load i32, i32* %19, align 8
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %25, label %22

; <label>:22:                                     ; preds = %18
  %23 = getelementptr [12 x i8], [12 x i8]* @.str.9, i32 0, i32 0
  %24 = call i32 (i8*, ...) @printf(i8* %23, i8* %0)
  br label %25

; <label>:25:                                     ; preds = %22, %18
  %26 = getelementptr [2 x i8], [2 x i8]* @.str.10, i32 0, i32 0
  %27 = call i32 @strcmp(i8* %0, i8* %26) #10
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %25
  br label %36

; <label>:30:                                     ; preds = %25
  %31 = call i32 (i8*, i32, ...) @open64(i8* %0, i32 0)
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %35

; <label>:33:                                     ; preds = %30
  %34 = getelementptr [12 x i8], [12 x i8]* @.str.11, i32 0, i32 0
  call void @perror(i8* %34)
  br label %1465

; <label>:35:                                     ; preds = %30
  br label %36

; <label>:36:                                     ; preds = %35, %29
  %.01 = phi i32 [ 0, %29 ], [ %31, %35 ]
  %37 = bitcast %struct.pcap_file_header* %10 to i8*
  %38 = call i32 @atomic_read(%struct.read_buf* %2, i32 %.01, i32 4, i8* %37)
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %42, label %40

; <label>:40:                                     ; preds = %36
  %41 = getelementptr [25 x i8], [25 x i8]* @.str.12, i32 0, i32 0
  call void @perror(i8* %41)
  br label %1465

; <label>:42:                                     ; preds = %36
  %43 = bitcast %struct.pcap_file_header* %10 to i8*
  %44 = getelementptr [5 x i8], [5 x i8]* @.str.13, i32 0, i32 0
  %45 = call i32 @memcmp(i8* %43, i8* %44, i64 4) #10
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %117

; <label>:47:                                     ; preds = %42
  %48 = bitcast %struct.pcap_file_header* %10 to i8*
  %49 = getelementptr [5 x i8], [5 x i8]* @.str.14, i32 0, i32 0
  %50 = call i32 @memcmp(i8* %48, i8* %49, i64 4) #10
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %117

; <label>:52:                                     ; preds = %47
  %53 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = icmp ne i32 %54, -1582119980
  br i1 %55, label %56, label %64

; <label>:56:                                     ; preds = %52
  %57 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = icmp ne i32 %58, -725372255
  br i1 %59, label %60, label %64

; <label>:60:                                     ; preds = %56
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %62 = getelementptr [51 x i8], [51 x i8]* @.str.15, i32 0, i32 0
  %63 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %61, i8* %62)
  br label %1465

; <label>:64:                                     ; preds = %56, %52
  %65 = bitcast %struct.pcap_file_header* %10 to i8*
  %66 = getelementptr inbounds i8, i8* %65, i64 4
  %67 = call i32 @atomic_read(%struct.read_buf* %2, i32 %.01, i32 20, i8* %66)
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %64
  %70 = getelementptr [25 x i8], [25 x i8]* @.str.12, i32 0, i32 0
  call void @perror(i8* %70)
  br label %1465

; <label>:71:                                     ; preds = %64
  %72 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, -725372255
  br i1 %74, label %75, label %96

; <label>:75:                                     ; preds = %71
  %76 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 6
  %77 = load i32, i32* %76, align 4
  %78 = lshr i32 %77, 24
  %79 = and i32 %78, 255
  %80 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 6
  %81 = load i32, i32* %80, align 4
  %82 = lshr i32 %81, 8
  %83 = and i32 %82, 65280
  %84 = or i32 %79, %83
  %85 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 6
  %86 = load i32, i32* %85, align 4
  %87 = shl i32 %86, 8
  %88 = and i32 %87, 16711680
  %89 = or i32 %84, %88
  %90 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 6
  %91 = load i32, i32* %90, align 4
  %92 = shl i32 %91, 24
  %93 = and i32 %92, -16777216
  %94 = or i32 %89, %93
  %95 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 6
  store i32 %94, i32* %95, align 4
  br label %96

; <label>:96:                                     ; preds = %75, %71
  %97 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 6
  %98 = load i32, i32* %97, align 4
  %99 = icmp ne i32 %98, 105
  br i1 %99, label %100, label %116

; <label>:100:                                    ; preds = %96
  %101 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 6
  %102 = load i32, i32* %101, align 4
  %103 = icmp ne i32 %102, 119
  br i1 %103, label %104, label %116

; <label>:104:                                    ; preds = %100
  %105 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 6
  %106 = load i32, i32* %105, align 4
  %107 = icmp ne i32 %106, 127
  br i1 %107, label %108, label %116

; <label>:108:                                    ; preds = %104
  %109 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 6
  %110 = load i32, i32* %109, align 4
  %111 = icmp ne i32 %110, 192
  br i1 %111, label %112, label %116

; <label>:112:                                    ; preds = %108
  %113 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %114 = getelementptr [55 x i8], [55 x i8]* @.str.16, i32 0, i32 0
  %115 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %113, i8* %114)
  br label %1465

; <label>:116:                                    ; preds = %108, %104, %100, %96
  br label %155

; <label>:117:                                    ; preds = %47, %42
  %118 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 38
  %119 = load i32, i32* %118, align 8
  %120 = icmp ne i32 %119, 0
  br i1 %120, label %121, label %123

; <label>:121:                                    ; preds = %117
  %122 = getelementptr [37 x i8], [37 x i8]* @.str.17, i32 0, i32 0
  call void (i32, i8*, ...) @errx(i32 1, i8* %122) #12
  br label %UnifiedUnreachableBlock

; <label>:123:                                    ; preds = %117
  %124 = bitcast %struct.pcap_file_header* %10 to i8*
  %125 = getelementptr [5 x i8], [5 x i8]* @.str.14, i32 0, i32 0
  %126 = call i32 @memcmp(i8* %124, i8* %125, i64 4) #10
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %147

; <label>:128:                                    ; preds = %123
  %129 = bitcast %struct.ivs2_filehdr* %8 to i8*
  %130 = call i32 @atomic_read(%struct.read_buf* %2, i32 %.01, i32 2, i8* %129)
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %134, label %132

; <label>:132:                                    ; preds = %128
  %133 = getelementptr [25 x i8], [25 x i8]* @.str.12, i32 0, i32 0
  call void @perror(i8* %133)
  br label %1465

; <label>:134:                                    ; preds = %128
  %135 = getelementptr inbounds %struct.ivs2_filehdr, %struct.ivs2_filehdr* %8, i32 0, i32 0
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = icmp sgt i32 %137, 1
  br i1 %138, label %139, label %146

; <label>:139:                                    ; preds = %134
  %140 = getelementptr inbounds %struct.ivs2_filehdr, %struct.ivs2_filehdr* %8, i32 0, i32 0
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = getelementptr [58 x i8], [58 x i8]* @.str.18, i32 0, i32 0
  %144 = getelementptr [4 x i8], [4 x i8]* @.str.19, i32 0, i32 0
  %145 = call i32 (i8*, ...) @printf(i8* %143, i8* %144, i32 %142, i32 1)
  br label %1465

; <label>:146:                                    ; preds = %134
  br label %154

; <label>:147:                                    ; preds = %123
  %148 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %149 = load i32, i32* %148, align 4
  %150 = icmp ne i32 %149, 0
  br i1 %150, label %151, label %153

; <label>:151:                                    ; preds = %147
  %152 = getelementptr [84 x i8], [84 x i8]* @.str.20, i32 0, i32 0
  call void (i32, i8*, ...) @errx(i32 1, i8* %152) #12
  br label %UnifiedUnreachableBlock

; <label>:153:                                    ; preds = %147
  br label %154

; <label>:154:                                    ; preds = %153, %146
  %.04 = phi i32 [ 3, %146 ], [ 2, %153 ]
  br label %155

; <label>:155:                                    ; preds = %154, %116
  %.15 = phi i32 [ 1, %116 ], [ %.04, %154 ]
  %156 = call i32 (i32, i32, ...) @fcntl(i32 %.01, i32 4, i32 2048)
  %157 = icmp slt i32 %156, 0
  br i1 %157, label %158, label %160

; <label>:158:                                    ; preds = %155
  %159 = getelementptr [25 x i8], [25 x i8]* @.str.21, i32 0, i32 0
  call void @perror(i8* %159)
  br label %1465

; <label>:160:                                    ; preds = %155
  %161 = load i32, i32* @close_aircrack, align 4
  %162 = icmp ne i32 %161, 0
  br i1 %162, label %163, label %.lr.ph44

.lr.ph44:                                         ; preds = %160
  br label %164

._crit_edge:                                      ; preds = %.backedge
  br label %163

; <label>:163:                                    ; preds = %._crit_edge, %160
  br label %1464

; <label>:164:                                    ; preds = %.lr.ph44, %.backedge
  %.0643 = phi i8* [ %14, %.lr.ph44 ], [ %.06.be, %.backedge ]
  %.01239 = phi %struct.AP_info* [ null, %.lr.ph44 ], [ %.012.be, %.backedge ]
  call void @unroll_loop(i32 45)
  %165 = icmp eq i32 %.15, 2
  br i1 %165, label %166, label %196

; <label>:166:                                    ; preds = %164
  br label %167

; <label>:167:                                    ; preds = %166
  %168 = call i32 @atomic_read(%struct.read_buf* %2, i32 %.01, i32 1, i8* %14)
  %169 = icmp ne i32 %168, 0
  %170 = xor i1 %169, true
  br i1 %170, label %171, label %172

; <label>:171:                                    ; preds = %167
  br label %1465

; <label>:172:                                    ; preds = %167
  %173 = getelementptr inbounds i8, i8* %14, i64 0
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = icmp ne i32 %175, 255
  br i1 %176, label %177, label %189

; <label>:177:                                    ; preds = %172
  %178 = getelementptr inbounds i8, i8* %14, i64 0
  %179 = load i8, i8* %178, align 1
  %180 = getelementptr inbounds [6 x i8], [6 x i8]* %3, i64 0, i64 0
  store i8 %179, i8* %180, align 1
  br label %181

; <label>:181:                                    ; preds = %177
  %182 = getelementptr inbounds [6 x i8], [6 x i8]* %3, i32 0, i32 0
  %183 = getelementptr inbounds i8, i8* %182, i64 1
  %184 = call i32 @atomic_read(%struct.read_buf* %2, i32 %.01, i32 5, i8* %183)
  %185 = icmp ne i32 %184, 0
  %186 = xor i1 %185, true
  br i1 %186, label %187, label %188

; <label>:187:                                    ; preds = %181
  br label %1465

; <label>:188:                                    ; preds = %181
  br label %189

; <label>:189:                                    ; preds = %188, %172
  br label %190

; <label>:190:                                    ; preds = %189
  %191 = call i32 @atomic_read(%struct.read_buf* %2, i32 %.01, i32 5, i8* %14)
  %192 = icmp ne i32 %191, 0
  %193 = xor i1 %192, true
  br i1 %193, label %194, label %195

; <label>:194:                                    ; preds = %190
  br label %1465

; <label>:195:                                    ; preds = %190
  br label %391

; <label>:196:                                    ; preds = %164
  %197 = icmp eq i32 %.15, 3
  br i1 %197, label %198, label %234

; <label>:198:                                    ; preds = %196
  br label %199

; <label>:199:                                    ; preds = %198
  %200 = bitcast %struct.ivs2_pkthdr* %7 to i8*
  %201 = call i32 @atomic_read(%struct.read_buf* %2, i32 %.01, i32 4, i8* %200)
  %202 = icmp ne i32 %201, 0
  %203 = xor i1 %202, true
  br i1 %203, label %204, label %205

; <label>:204:                                    ; preds = %199
  br label %1465

; <label>:205:                                    ; preds = %199
  %206 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %7, i32 0, i32 0
  %207 = load i16, i16* %206, align 2
  %208 = zext i16 %207 to i32
  %209 = and i32 %208, 1
  %210 = icmp ne i32 %209, 0
  br i1 %210, label %211, label %224

; <label>:211:                                    ; preds = %205
  br label %212

; <label>:212:                                    ; preds = %211
  %213 = getelementptr inbounds [6 x i8], [6 x i8]* %3, i32 0, i32 0
  %214 = call i32 @atomic_read(%struct.read_buf* %2, i32 %.01, i32 6, i8* %213)
  %215 = icmp ne i32 %214, 0
  %216 = xor i1 %215, true
  br i1 %216, label %217, label %218

; <label>:217:                                    ; preds = %212
  br label %1465

; <label>:218:                                    ; preds = %212
  %219 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %7, i32 0, i32 1
  %220 = load i16, i16* %219, align 2
  %221 = zext i16 %220 to i32
  %222 = sub nsw i32 %221, 6
  %223 = trunc i32 %222 to i16
  store i16 %223, i16* %219, align 2
  br label %224

; <label>:224:                                    ; preds = %218, %205
  br label %225

; <label>:225:                                    ; preds = %224
  %226 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %7, i32 0, i32 1
  %227 = load i16, i16* %226, align 2
  %228 = zext i16 %227 to i32
  %229 = call i32 @atomic_read(%struct.read_buf* %2, i32 %.01, i32 %228, i8* %14)
  %230 = icmp ne i32 %229, 0
  %231 = xor i1 %230, true
  br i1 %231, label %232, label %233

; <label>:232:                                    ; preds = %225
  br label %1465

; <label>:233:                                    ; preds = %225
  br label %390

; <label>:234:                                    ; preds = %196
  br label %235

; <label>:235:                                    ; preds = %234
  %236 = bitcast %struct.pcap_pkthdr* %9 to i8*
  %237 = call i32 @atomic_read(%struct.read_buf* %2, i32 %.01, i32 16, i8* %236)
  %238 = icmp ne i32 %237, 0
  %239 = xor i1 %238, true
  br i1 %239, label %240, label %241

; <label>:240:                                    ; preds = %235
  br label %1465

; <label>:241:                                    ; preds = %235
  %242 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 0
  %243 = load i32, i32* %242, align 4
  %244 = icmp eq i32 %243, -725372255
  br i1 %244, label %245, label %266

; <label>:245:                                    ; preds = %241
  %246 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %247 = load i32, i32* %246, align 4
  %248 = lshr i32 %247, 24
  %249 = and i32 %248, 255
  %250 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %251 = load i32, i32* %250, align 4
  %252 = lshr i32 %251, 8
  %253 = and i32 %252, 65280
  %254 = or i32 %249, %253
  %255 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %256 = load i32, i32* %255, align 4
  %257 = shl i32 %256, 8
  %258 = and i32 %257, 16711680
  %259 = or i32 %254, %258
  %260 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %261 = load i32, i32* %260, align 4
  %262 = shl i32 %261, 24
  %263 = and i32 %262, -16777216
  %264 = or i32 %259, %263
  %265 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  store i32 %264, i32* %265, align 4
  br label %266

; <label>:266:                                    ; preds = %245, %241
  %267 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %268 = load i32, i32* %267, align 4
  %269 = icmp ule i32 %268, 0
  br i1 %269, label %274, label %270

; <label>:270:                                    ; preds = %266
  %271 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %272 = load i32, i32* %271, align 4
  %273 = icmp ugt i32 %272, 65535
  br i1 %273, label %274, label %280

; <label>:274:                                    ; preds = %270, %266
  %275 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %276 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %277 = load i32, i32* %276, align 4
  %278 = getelementptr [53 x i8], [53 x i8]* @.str.22, i32 0, i32 0
  %279 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %275, i8* %278, i32 %277)
  br label %1465

; <label>:280:                                    ; preds = %270
  br label %281

; <label>:281:                                    ; preds = %280
  %282 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %283 = load i32, i32* %282, align 4
  %284 = call i32 @atomic_read(%struct.read_buf* %2, i32 %.01, i32 %283, i8* %14)
  %285 = icmp ne i32 %284, 0
  %286 = xor i1 %285, true
  br i1 %286, label %287, label %288

; <label>:287:                                    ; preds = %281
  br label %1465

; <label>:288:                                    ; preds = %281
  %289 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 6
  %290 = load i32, i32* %289, align 4
  %291 = icmp eq i32 %290, 119
  br i1 %291, label %292, label %331

; <label>:292:                                    ; preds = %288
  %293 = getelementptr inbounds i8, i8* %14, i64 7
  %294 = load i8, i8* %293, align 1
  %295 = zext i8 %294 to i32
  %296 = icmp eq i32 %295, 64
  br i1 %296, label %297, label %298

; <label>:297:                                    ; preds = %292
  br label %318

; <label>:298:                                    ; preds = %292
  %299 = getelementptr inbounds i8, i8* %14, i64 4
  %300 = bitcast i8* %299 to i32*
  %301 = load i32, i32* %300, align 4
  %302 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 0
  %303 = load i32, i32* %302, align 4
  %304 = icmp eq i32 %303, -725372255
  br i1 %304, label %305, label %317

; <label>:305:                                    ; preds = %298
  %306 = ashr i32 %301, 24
  %307 = and i32 %306, 255
  %308 = ashr i32 %301, 8
  %309 = and i32 %308, 65280
  %310 = or i32 %307, %309
  %311 = shl i32 %301, 8
  %312 = and i32 %311, 16711680
  %313 = or i32 %310, %312
  %314 = shl i32 %301, 24
  %315 = and i32 %314, -16777216
  %316 = or i32 %313, %315
  br label %317

; <label>:317:                                    ; preds = %305, %298
  %.02 = phi i32 [ %316, %305 ], [ %301, %298 ]
  br label %318

; <label>:318:                                    ; preds = %317, %297
  %.1 = phi i32 [ 64, %297 ], [ %.02, %317 ]
  %319 = icmp slt i32 %.1, 8
  br i1 %319, label %324, label %320

; <label>:320:                                    ; preds = %318
  %321 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %322 = load i32, i32* %321, align 4
  %323 = icmp sge i32 %.1, %322
  br i1 %323, label %324, label %325

; <label>:324:                                    ; preds = %320, %318
  br label %.backedge

; <label>:325:                                    ; preds = %320
  %326 = sext i32 %.1 to i64
  %327 = getelementptr inbounds i8, i8* %14, i64 %326
  %328 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %329 = load i32, i32* %328, align 4
  %330 = sub i32 %329, %.1
  store i32 %330, i32* %328, align 4
  br label %331

; <label>:331:                                    ; preds = %325, %288
  %.17 = phi i8* [ %327, %325 ], [ %14, %288 ]
  %332 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 6
  %333 = load i32, i32* %332, align 4
  %334 = icmp eq i32 %333, 127
  br i1 %334, label %335, label %352

; <label>:335:                                    ; preds = %331
  %336 = getelementptr inbounds i8, i8* %.17, i64 2
  %337 = bitcast i8* %336 to i16*
  %338 = load i16, i16* %337, align 2
  %339 = zext i16 %338 to i32
  %340 = icmp sle i32 %339, 0
  br i1 %340, label %345, label %341

; <label>:341:                                    ; preds = %335
  %342 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %343 = load i32, i32* %342, align 4
  %344 = icmp sge i32 %339, %343
  br i1 %344, label %345, label %346

; <label>:345:                                    ; preds = %341, %335
  br label %.backedge

; <label>:346:                                    ; preds = %341
  %347 = sext i32 %339 to i64
  %348 = getelementptr inbounds i8, i8* %.17, i64 %347
  %349 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %350 = load i32, i32* %349, align 4
  %351 = sub i32 %350, %339
  store i32 %351, i32* %349, align 4
  br label %352

; <label>:352:                                    ; preds = %346, %331
  %.28 = phi i8* [ %348, %346 ], [ %.17, %331 ]
  %353 = getelementptr inbounds %struct.pcap_file_header, %struct.pcap_file_header* %10, i32 0, i32 6
  %354 = load i32, i32* %353, align 4
  %355 = icmp eq i32 %354, 192
  br i1 %355, label %356, label %389

; <label>:356:                                    ; preds = %352
  %357 = getelementptr inbounds i8, i8* %.28, i64 2
  %358 = bitcast i8* %357 to i16*
  %359 = load i16, i16* %358, align 2
  %360 = zext i16 %359 to i32
  %361 = icmp sle i32 %360, 0
  br i1 %361, label %366, label %362

; <label>:362:                                    ; preds = %356
  %363 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %364 = load i32, i32* %363, align 4
  %365 = icmp sge i32 %360, %364
  br i1 %365, label %366, label %367

; <label>:366:                                    ; preds = %362, %356
  br label %.backedge

; <label>:367:                                    ; preds = %362
  %368 = icmp eq i32 %360, 24
  br i1 %368, label %369, label %376

; <label>:369:                                    ; preds = %367
  %370 = getelementptr inbounds i8, i8* %.28, i64 8
  %371 = bitcast i8* %370 to i16*
  %372 = load i16, i16* %371, align 2
  %373 = zext i16 %372 to i32
  %374 = icmp eq i32 %373, 2
  br i1 %374, label %375, label %376

; <label>:375:                                    ; preds = %369
  br label %376

; <label>:376:                                    ; preds = %375, %369, %367
  %.2 = phi i32 [ 32, %375 ], [ %360, %369 ], [ %360, %367 ]
  %377 = icmp sle i32 %.2, 0
  br i1 %377, label %382, label %378

; <label>:378:                                    ; preds = %376
  %379 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %380 = load i32, i32* %379, align 4
  %381 = icmp sge i32 %.2, %380
  br i1 %381, label %382, label %383

; <label>:382:                                    ; preds = %378, %376
  br label %.backedge

; <label>:383:                                    ; preds = %378
  %384 = sext i32 %.2 to i64
  %385 = getelementptr inbounds i8, i8* %.28, i64 %384
  %386 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %387 = load i32, i32* %386, align 4
  %388 = sub i32 %387, %.2
  store i32 %388, i32* %386, align 4
  br label %389

; <label>:389:                                    ; preds = %383, %352
  %.01242 = phi %struct.AP_info* [ %.01239, %383 ], [ %.01239, %352 ]
  %.3 = phi i8* [ %385, %383 ], [ %.28, %352 ]
  br label %390

; <label>:390:                                    ; preds = %389, %233
  %.01241 = phi %struct.AP_info* [ %.01239, %233 ], [ %.01242, %389 ]
  %.4 = phi i8* [ %.0643, %233 ], [ %.3, %389 ]
  br label %391

; <label>:391:                                    ; preds = %390, %195
  %.01240 = phi %struct.AP_info* [ %.01239, %195 ], [ %.01241, %390 ]
  %.5 = phi i8* [ %.0643, %195 ], [ %.4, %390 ]
  %392 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* @mx_apl) #9
  %393 = load i64, i64* @nb_pkt, align 8
  %394 = add nsw i64 %393, 1
  store i64 %394, i64* @nb_pkt, align 8
  %395 = icmp eq i32 %.15, 1
  br i1 %395, label %396, label %454

; <label>:396:                                    ; preds = %391
  %397 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %398 = load i32, i32* %397, align 4
  %399 = icmp ult i32 %398, 24
  br i1 %399, label %400, label %401

; <label>:400:                                    ; preds = %396
  br label %1449

; <label>:401:                                    ; preds = %396
  %402 = getelementptr inbounds i8, i8* %.5, i64 0
  %403 = load i8, i8* %402, align 1
  %404 = zext i8 %403 to i32
  %405 = and i32 %404, 12
  %406 = icmp eq i32 %405, 4
  br i1 %406, label %407, label %408

; <label>:407:                                    ; preds = %401
  br label %1449

; <label>:408:                                    ; preds = %401
  %409 = getelementptr inbounds i8, i8* %.5, i64 1
  %410 = load i8, i8* %409, align 1
  %411 = zext i8 %410 to i32
  %412 = and i32 %411, 3
  switch i32 %412, label %425 [
    i32 0, label %413
    i32 1, label %416
    i32 2, label %419
    i32 3, label %422
  ]

; <label>:413:                                    ; preds = %408
  %414 = getelementptr inbounds [6 x i8], [6 x i8]* %3, i32 0, i32 0
  %415 = getelementptr inbounds i8, i8* %.5, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %414, i8* align 1 %415, i64 6, i1 false), !track !125
  br label %425

; <label>:416:                                    ; preds = %408
  %417 = getelementptr inbounds [6 x i8], [6 x i8]* %3, i32 0, i32 0
  %418 = getelementptr inbounds i8, i8* %.5, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %417, i8* align 1 %418, i64 6, i1 false), !track !126
  br label %425

; <label>:419:                                    ; preds = %408
  %420 = getelementptr inbounds [6 x i8], [6 x i8]* %3, i32 0, i32 0
  %421 = getelementptr inbounds i8, i8* %.5, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %420, i8* align 1 %421, i64 6, i1 false), !track !127
  br label %425

; <label>:422:                                    ; preds = %408
  %423 = getelementptr inbounds [6 x i8], [6 x i8]* %3, i32 0, i32 0
  %424 = getelementptr inbounds i8, i8* %.5, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %423, i8* align 1 %424, i64 6, i1 false), !track !128
  br label %425

; <label>:425:                                    ; preds = %408, %422, %419, %416, %413
  %426 = getelementptr inbounds i8, i8* %.5, i64 1
  %427 = load i8, i8* %426, align 1
  %428 = zext i8 %427 to i32
  %429 = and i32 %428, 3
  switch i32 %429, label %442 [
    i32 0, label %430
    i32 1, label %433
    i32 2, label %436
    i32 3, label %439
  ]

; <label>:430:                                    ; preds = %425
  %431 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %432 = getelementptr inbounds i8, i8* %.5, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %431, i8* align 1 %432, i64 6, i1 false), !track !129
  br label %442

; <label>:433:                                    ; preds = %425
  %434 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %435 = getelementptr inbounds i8, i8* %.5, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %434, i8* align 1 %435, i64 6, i1 false), !track !130
  br label %442

; <label>:436:                                    ; preds = %425
  %437 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %438 = getelementptr inbounds i8, i8* %.5, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %437, i8* align 1 %438, i64 6, i1 false), !track !131
  br label %442

; <label>:439:                                    ; preds = %425
  %440 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %441 = getelementptr inbounds i8, i8* %.5, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %440, i8* align 1 %441, i64 6, i1 false), !track !132
  br label %442

; <label>:442:                                    ; preds = %425, %439, %436, %433, %430
  %443 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 38
  %444 = load i32, i32* %443, align 8
  %445 = icmp ne i32 %444, 0
  br i1 %445, label %446, label %453

; <label>:446:                                    ; preds = %442
  %447 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 0
  %448 = load i8, i8* %447, align 1
  %449 = zext i8 %448 to i32
  %450 = icmp eq i32 %449, 1
  br i1 %450, label %451, label %452

; <label>:451:                                    ; preds = %446
  br label %1449

; <label>:452:                                    ; preds = %446
  br label %453

; <label>:453:                                    ; preds = %452, %442
  br label %454

; <label>:454:                                    ; preds = %453, %391
  %455 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 34
  %456 = load i8*, i8** %455, align 8
  %457 = icmp ne i8* %456, null
  br i1 %457, label %458, label %463

; <label>:458:                                    ; preds = %454
  %459 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 34
  %460 = load i8*, i8** %459, align 8
  %461 = getelementptr inbounds [6 x i8], [6 x i8]* %3, i32 0, i32 0
  %462 = call i32 @mergebssids(i8* %460, i8* %461)
  br label %463

; <label>:463:                                    ; preds = %458, %454
  %464 = getelementptr inbounds [6 x i8], [6 x i8]* %3, i32 0, i32 0
  %465 = getelementptr [7 x i8], [7 x i8]* @.str.23, i32 0, i32 0
  %466 = call i32 @memcmp(i8* %464, i8* %465, i64 6) #10
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %468, label %469

; <label>:468:                                    ; preds = %463
  br label %1449

; <label>:469:                                    ; preds = %463
  %470 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 9, i32 0
  %471 = getelementptr [32 x i8], [32 x i8]* @ZERO, i32 0, i32 0
  %472 = call i32 @memcmp(i8* %470, i8* %471, i64 6) #10
  %473 = icmp ne i32 %472, 0
  br i1 %473, label %474, label %496

; <label>:474:                                    ; preds = %469
  %475 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 9, i32 0
  %476 = getelementptr [7 x i8], [7 x i8]* @.str.23, i32 0, i32 0
  %477 = call i32 @memcmp(i8* %475, i8* %476, i64 6) #10
  %478 = icmp ne i32 %477, 0
  br i1 %478, label %479, label %496

; <label>:479:                                    ; preds = %474
  %480 = getelementptr inbounds i8, i8* %.5, i64 4
  %481 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 9, i32 0
  %482 = call i32 @memcmp(i8* %481, i8* %480, i64 6) #10
  %483 = icmp ne i32 %482, 0
  br i1 %483, label %484, label %495

; <label>:484:                                    ; preds = %479
  %485 = getelementptr inbounds i8, i8* %.5, i64 10
  %486 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 9, i32 0
  %487 = call i32 @memcmp(i8* %486, i8* %485, i64 6) #10
  %488 = icmp ne i32 %487, 0
  br i1 %488, label %489, label %495

; <label>:489:                                    ; preds = %484
  %490 = getelementptr inbounds i8, i8* %.5, i64 16
  %491 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 9, i32 0
  %492 = call i32 @memcmp(i8* %491, i8* %490, i64 6) #10
  %493 = icmp ne i32 %492, 0
  br i1 %493, label %494, label %495

; <label>:494:                                    ; preds = %489
  br label %1449

; <label>:495:                                    ; preds = %489, %484, %479
  br label %496

; <label>:496:                                    ; preds = %495, %474, %469
  %497 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  %498 = icmp ne %struct.AP_info* %497, null
  br i1 %498, label %.lr.ph, label %.loopexit26

.lr.ph:                                           ; preds = %496
  %499 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %497, i32 0, i32 1
  %500 = getelementptr inbounds [6 x i8], [6 x i8]* %499, i32 0, i32 0
  %501 = getelementptr inbounds [6 x i8], [6 x i8]* %3, i32 0, i32 0
  %502 = call i32 @memcmp(i8* %500, i8* %501, i64 6) #10
  %503 = icmp ne i32 %502, 0
  br i1 %503, label %.lr.ph2, label %509

.lr.ph2:                                          ; preds = %.lr.ph
  br label %510

; <label>:504:                                    ; preds = %510
  %.11327 = phi %struct.AP_info* [ %512, %510 ]
  %505 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.11327, i32 0, i32 1
  %506 = getelementptr inbounds [6 x i8], [6 x i8]* %505, i32 0, i32 0
  %507 = call i32 @memcmp(i8* %506, i8* %501, i64 6) #10
  %508 = icmp ne i32 %507, 0
  br i1 %508, label %510, label %._crit_edge3

._crit_edge3:                                     ; preds = %504
  %split4 = phi %struct.AP_info* [ %.11327, %504 ]
  %split5 = phi %struct.AP_info* [ %.113271, %504 ]
  br label %509

; <label>:509:                                    ; preds = %._crit_edge3, %.lr.ph
  %.113.lcssa21 = phi %struct.AP_info* [ %split4, %._crit_edge3 ], [ %497, %.lr.ph ]
  %.011.lcssa20 = phi %struct.AP_info* [ %split5, %._crit_edge3 ], [ null, %.lr.ph ]
  br label %514

; <label>:510:                                    ; preds = %.lr.ph2, %504
  %.113271 = phi %struct.AP_info* [ %497, %.lr.ph2 ], [ %.11327, %504 ]
  call void @unroll_loop(i32 46)
  %511 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.113271, i32 0, i32 0
  %512 = load %struct.AP_info*, %struct.AP_info** %511, align 8
  %513 = icmp ne %struct.AP_info* %512, null
  br i1 %513, label %504, label %..loopexit26_crit_edge

..loopexit26_crit_edge:                           ; preds = %510
  %split = phi %struct.AP_info* [ %512, %510 ]
  %split29 = phi %struct.AP_info* [ %.113271, %510 ]
  br label %.loopexit26

.loopexit26:                                      ; preds = %..loopexit26_crit_edge, %496
  %.113.lcssa.ph = phi %struct.AP_info* [ %split, %..loopexit26_crit_edge ], [ %497, %496 ]
  %.011.lcssa.ph = phi %struct.AP_info* [ %split29, %..loopexit26_crit_edge ], [ null, %496 ]
  br label %514

; <label>:514:                                    ; preds = %.loopexit26, %509
  %.113.lcssa = phi %struct.AP_info* [ %.113.lcssa21, %509 ], [ %.113.lcssa.ph, %.loopexit26 ]
  %.011.lcssa = phi %struct.AP_info* [ %.011.lcssa20, %509 ], [ %.011.lcssa.ph, %.loopexit26 ]
  %515 = icmp eq %struct.AP_info* %.113.lcssa, null
  br i1 %515, label %516, label %534

; <label>:516:                                    ; preds = %514
  %517 = call noalias i8* @malloc(i64 504) #9, !track !133
  %518 = bitcast i8* %517 to %struct.AP_info*
  %519 = icmp ne %struct.AP_info* %518, null
  br i1 %519, label %522, label %520

; <label>:520:                                    ; preds = %516
  %521 = getelementptr [14 x i8], [14 x i8]* @.str.7, i32 0, i32 0
  call void @perror(i8* %521)
  br label %1464

; <label>:522:                                    ; preds = %516
  %523 = bitcast %struct.AP_info* %518 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %523, i8 0, i64 504, i1 false)
  %524 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  %525 = icmp eq %struct.AP_info* %524, null
  br i1 %525, label %526, label %527

; <label>:526:                                    ; preds = %522
  store %struct.AP_info* %518, %struct.AP_info** @ap_1st, align 8
  br label %529

; <label>:527:                                    ; preds = %522
  %528 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.011.lcssa, i32 0, i32 0
  store %struct.AP_info* %518, %struct.AP_info** %528, align 8
  br label %529

; <label>:529:                                    ; preds = %527, %526
  %530 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %518, i32 0, i32 1
  %531 = getelementptr inbounds [6 x i8], [6 x i8]* %530, i32 0, i32 0
  %532 = getelementptr inbounds [6 x i8], [6 x i8]* %3, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %531, i8* align 1 %532, i64 6, i1 false), !track !134
  %533 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %518, i32 0, i32 10
  store i32 -1, i32* %533, align 8
  br label %534

; <label>:534:                                    ; preds = %529, %514
  %.214 = phi %struct.AP_info* [ %518, %529 ], [ %.113.lcssa, %514 ]
  %535 = icmp eq i32 %.15, 2
  br i1 %535, label %536, label %558

; <label>:536:                                    ; preds = %534
  %537 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 2, i32* %537, align 8
  br label %538

; <label>:538:                                    ; preds = %1063, %536
  %539 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %540 = load i64, i64* %539, align 8
  %541 = icmp eq i64 %540, 0
  br i1 %541, label %542, label %545

; <label>:542:                                    ; preds = %538
  %543 = call i8** @uniqueiv_init()
  %544 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  store i8** %543, i8*** %544, align 8
  br label %545

; <label>:545:                                    ; preds = %542, %538
  %546 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  %547 = load i8**, i8*** %546, align 8
  %548 = call i32 @uniqueiv_check(i8** %547, i8* %14)
  %549 = icmp eq i32 %548, 0
  br i1 %549, label %550, label %557

; <label>:550:                                    ; preds = %545
  %551 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  %552 = load i8**, i8*** %551, align 8
  %553 = call i32 @uniqueiv_mark(i8** %552, i8* %14)
  %554 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %555 = load i64, i64* %554, align 8
  %556 = add nsw i64 %555, 1
  store i64 %556, i64* %554, align 8
  br label %557

; <label>:557:                                    ; preds = %550, %545
  br label %1449

; <label>:558:                                    ; preds = %534
  %559 = icmp eq i32 %.15, 3
  br i1 %559, label %560, label %693

; <label>:560:                                    ; preds = %558
  %561 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %7, i32 0, i32 0
  %562 = load i16, i16* %561, align 2
  %563 = zext i16 %562 to i32
  %564 = and i32 %563, 2
  %565 = icmp ne i32 %564, 0
  br i1 %565, label %566, label %586

; <label>:566:                                    ; preds = %560
  %567 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 2
  %568 = getelementptr inbounds [33 x i8], [33 x i8]* %567, i32 0, i32 0
  %569 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %7, i32 0, i32 1
  %570 = load i16, i16* %569, align 2
  %571 = zext i16 %570 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %568, i8* align 1 %14, i64 %571, i1 false), !track !135
  %572 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %573 = load i32, i32* %572, align 4
  %574 = icmp ne i32 %573, 0
  br i1 %574, label %575, label %585

; <label>:575:                                    ; preds = %566
  %576 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 2
  %577 = getelementptr inbounds [33 x i8], [33 x i8]* %576, i32 0, i32 0
  %578 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 3, i32 0
  %579 = call i32 @strcmp(i8* %578, i8* %577) #10
  %580 = icmp ne i32 %579, 0
  br i1 %580, label %585, label %581

; <label>:581:                                    ; preds = %575
  %582 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 1
  %583 = getelementptr inbounds [6 x i8], [6 x i8]* %582, i32 0, i32 0
  %584 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 4, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %584, i8* align 8 %583, i64 6, i1 false), !track !136
  br label %585

; <label>:585:                                    ; preds = %581, %575, %566
  br label %692

; <label>:586:                                    ; preds = %560
  %587 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %7, i32 0, i32 0
  %588 = load i16, i16* %587, align 2
  %589 = zext i16 %588 to i32
  %590 = and i32 %589, 8
  %591 = icmp ne i32 %590, 0
  br i1 %591, label %592, label %627

; <label>:592:                                    ; preds = %586
  %593 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 2, i32* %593, align 8
  %594 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %595 = load i32, i32* %594, align 4
  %596 = icmp ne i32 %595, 0
  br i1 %596, label %597, label %607

; <label>:597:                                    ; preds = %592
  %598 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %7, i32 0, i32 1
  %599 = load i16, i16* %598, align 2
  %600 = zext i16 %599 to i32
  %601 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %602 = load i32, i32* %601, align 4
  %603 = add nsw i32 %602, 3
  %604 = icmp slt i32 %600, %603
  br i1 %604, label %605, label %606

; <label>:605:                                    ; preds = %597
  br label %1449

; <label>:606:                                    ; preds = %597
  br label %607

; <label>:607:                                    ; preds = %606, %592
  %608 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %609 = load i64, i64* %608, align 8
  %610 = icmp eq i64 %609, 0
  br i1 %610, label %611, label %614

; <label>:611:                                    ; preds = %607
  %612 = call i8** @uniqueiv_init()
  %613 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  store i8** %612, i8*** %613, align 8
  br label %614

; <label>:614:                                    ; preds = %611, %607
  %615 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  %616 = load i8**, i8*** %615, align 8
  %617 = call i32 @uniqueiv_check(i8** %616, i8* %14)
  %618 = icmp eq i32 %617, 0
  br i1 %618, label %619, label %626

; <label>:619:                                    ; preds = %614
  %620 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  %621 = load i8**, i8*** %620, align 8
  %622 = call i32 @uniqueiv_mark(i8** %621, i8* %14)
  %623 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %624 = load i64, i64* %623, align 8
  %625 = add nsw i64 %624, 1
  store i64 %625, i64* %623, align 8
  br label %626

; <label>:626:                                    ; preds = %619, %614
  br label %691

; <label>:627:                                    ; preds = %586
  %628 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %7, i32 0, i32 0
  %629 = load i16, i16* %628, align 2
  %630 = zext i16 %629 to i32
  %631 = and i32 %630, 16
  %632 = icmp ne i32 %631, 0
  br i1 %632, label %633, label %679

; <label>:633:                                    ; preds = %627
  %634 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 2, i32* %634, align 8
  %635 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %636 = load i32, i32* %635, align 4
  %637 = icmp ne i32 %636, 0
  br i1 %637, label %638, label %659

; <label>:638:                                    ; preds = %633
  %639 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %7, i32 0, i32 1
  %640 = load i16, i16* %639, align 2
  %641 = zext i16 %640 to i32
  %642 = getelementptr inbounds i8, i8* %14, i64 5
  %643 = load i8, i8* %642, align 1
  %644 = zext i8 %643 to i32
  %645 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %646 = load i32, i32* %645, align 4
  %647 = icmp slt i32 %644, %646
  br i1 %647, label %648, label %649

; <label>:648:                                    ; preds = %638
  br label %1449

; <label>:649:                                    ; preds = %638
  %650 = getelementptr inbounds i8, i8* %14, i64 4
  %651 = load i8, i8* %650, align 1
  %652 = zext i8 %651 to i32
  %653 = mul nsw i32 %652, 32
  %654 = add nsw i32 6, %653
  %655 = add nsw i32 %654, 64
  %656 = icmp slt i32 %641, %655
  br i1 %656, label %657, label %658

; <label>:657:                                    ; preds = %649
  br label %1449

; <label>:658:                                    ; preds = %649
  br label %659

; <label>:659:                                    ; preds = %658, %633
  %660 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %661 = load i64, i64* %660, align 8
  %662 = icmp eq i64 %661, 0
  br i1 %662, label %663, label %666

; <label>:663:                                    ; preds = %659
  %664 = call i8** @uniqueiv_init()
  %665 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  store i8** %664, i8*** %665, align 8
  br label %666

; <label>:666:                                    ; preds = %663, %659
  %667 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  %668 = load i8**, i8*** %667, align 8
  %669 = call i32 @uniqueiv_check(i8** %668, i8* %14)
  %670 = icmp eq i32 %669, 0
  br i1 %670, label %671, label %678

; <label>:671:                                    ; preds = %666
  %672 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 5
  %673 = load i8**, i8*** %672, align 8
  %674 = call i32 @uniqueiv_mark(i8** %673, i8* %14)
  %675 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 7
  %676 = load i64, i64* %675, align 8
  %677 = add nsw i64 %676, 1
  store i64 %677, i64* %675, align 8
  br label %678

; <label>:678:                                    ; preds = %671, %666
  br label %690

; <label>:679:                                    ; preds = %627
  %680 = getelementptr inbounds %struct.ivs2_pkthdr, %struct.ivs2_pkthdr* %7, i32 0, i32 0
  %681 = load i16, i16* %680, align 2
  %682 = zext i16 %681 to i32
  %683 = and i32 %682, 4
  %684 = icmp ne i32 %683, 0
  br i1 %684, label %685, label %689

; <label>:685:                                    ; preds = %679
  %686 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 3, i32* %686, align 8
  %687 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 14
  %688 = bitcast %struct.WPA_hdsk* %687 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %688, i8* align 1 %14, i64 356, i1 false), !track !137
  br label %689

; <label>:689:                                    ; preds = %685, %679
  br label %690

; <label>:690:                                    ; preds = %689, %678
  br label %691

; <label>:691:                                    ; preds = %690, %626
  br label %692

; <label>:692:                                    ; preds = %691, %585
  br label %1449

; <label>:693:                                    ; preds = %558
  %694 = getelementptr inbounds i8, i8* %.5, i64 1
  %695 = load i8, i8* %694, align 1
  %696 = zext i8 %695 to i32
  %697 = and i32 %696, 3
  switch i32 %697, label %714 [
    i32 0, label %698
    i32 1, label %701
    i32 2, label %704
  ]

; <label>:698:                                    ; preds = %693
  %699 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %700 = getelementptr inbounds i8, i8* %.5, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %699, i8* align 1 %700, i64 6, i1 false), !track !138
  br label %715

; <label>:701:                                    ; preds = %693
  %702 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %703 = getelementptr inbounds i8, i8* %.5, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %702, i8* align 1 %703, i64 6, i1 false), !track !139
  br label %715

; <label>:704:                                    ; preds = %693
  %705 = getelementptr inbounds i8, i8* %.5, i64 4
  %706 = load i8, i8* %705, align 1
  %707 = zext i8 %706 to i32
  %708 = srem i32 %707, 2
  %709 = icmp ne i32 %708, 0
  br i1 %709, label %710, label %711

; <label>:710:                                    ; preds = %704
  br label %756

; <label>:711:                                    ; preds = %704
  %712 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %713 = getelementptr inbounds i8, i8* %.5, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %712, i8* align 1 %713, i64 6, i1 false), !track !140
  br label %715

; <label>:714:                                    ; preds = %693
  br label %756

; <label>:715:                                    ; preds = %711, %701, %698
  %716 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 13
  %717 = load %struct.ST_info*, %struct.ST_info** %716, align 8
  %718 = icmp ne %struct.ST_info* %717, null
  br i1 %718, label %.lr.ph32, label %.loopexit25

.lr.ph32:                                         ; preds = %715
  %719 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %717, i32 0, i32 3
  %720 = getelementptr inbounds [6 x i8], [6 x i8]* %719, i32 0, i32 0
  %721 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %722 = call i32 @memcmp(i8* %720, i8* %721, i64 6) #10
  %723 = icmp ne i32 %722, 0
  br i1 %723, label %.lr.ph7, label %729

.lr.ph7:                                          ; preds = %.lr.ph32
  br label %730

; <label>:724:                                    ; preds = %730
  %.01730 = phi %struct.ST_info* [ %732, %730 ]
  %725 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.01730, i32 0, i32 3
  %726 = getelementptr inbounds [6 x i8], [6 x i8]* %725, i32 0, i32 0
  %727 = call i32 @memcmp(i8* %726, i8* %721, i64 6) #10
  %728 = icmp ne i32 %727, 0
  br i1 %728, label %730, label %._crit_edge8

._crit_edge8:                                     ; preds = %724
  %split9 = phi %struct.ST_info* [ %.01730, %724 ]
  %split10 = phi %struct.ST_info* [ %.017306, %724 ]
  br label %729

; <label>:729:                                    ; preds = %._crit_edge8, %.lr.ph32
  %.017.lcssa23 = phi %struct.ST_info* [ %split9, %._crit_edge8 ], [ %717, %.lr.ph32 ]
  %.016.lcssa22 = phi %struct.ST_info* [ %split10, %._crit_edge8 ], [ null, %.lr.ph32 ]
  br label %734

; <label>:730:                                    ; preds = %.lr.ph7, %724
  %.017306 = phi %struct.ST_info* [ %717, %.lr.ph7 ], [ %.01730, %724 ]
  call void @unroll_loop(i32 47)
  %731 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.017306, i32 0, i32 1
  %732 = load %struct.ST_info*, %struct.ST_info** %731, align 8
  %733 = icmp ne %struct.ST_info* %732, null
  br i1 %733, label %724, label %..loopexit25_crit_edge

..loopexit25_crit_edge:                           ; preds = %730
  %split33 = phi %struct.ST_info* [ %732, %730 ]
  %split34 = phi %struct.ST_info* [ %.017306, %730 ]
  br label %.loopexit25

.loopexit25:                                      ; preds = %..loopexit25_crit_edge, %715
  %.017.lcssa.ph = phi %struct.ST_info* [ %split33, %..loopexit25_crit_edge ], [ %717, %715 ]
  %.016.lcssa.ph = phi %struct.ST_info* [ %split34, %..loopexit25_crit_edge ], [ null, %715 ]
  br label %734

; <label>:734:                                    ; preds = %.loopexit25, %729
  %.017.lcssa = phi %struct.ST_info* [ %.017.lcssa23, %729 ], [ %.017.lcssa.ph, %.loopexit25 ]
  %.016.lcssa = phi %struct.ST_info* [ %.016.lcssa22, %729 ], [ %.016.lcssa.ph, %.loopexit25 ]
  %735 = icmp eq %struct.ST_info* %.017.lcssa, null
  br i1 %735, label %736, label %755

; <label>:736:                                    ; preds = %734
  %737 = call noalias i8* @malloc(i64 384) #9, !track !141
  %738 = bitcast i8* %737 to %struct.ST_info*
  %739 = icmp ne %struct.ST_info* %738, null
  br i1 %739, label %742, label %740

; <label>:740:                                    ; preds = %736
  %741 = getelementptr [14 x i8], [14 x i8]* @.str.7, i32 0, i32 0
  call void @perror(i8* %741)
  br label %1464

; <label>:742:                                    ; preds = %736
  %743 = bitcast %struct.ST_info* %738 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %743, i8 0, i64 384, i1 false)
  %744 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 13
  %745 = load %struct.ST_info*, %struct.ST_info** %744, align 8
  %746 = icmp eq %struct.ST_info* %745, null
  br i1 %746, label %747, label %749

; <label>:747:                                    ; preds = %742
  %748 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 13
  store %struct.ST_info* %738, %struct.ST_info** %748, align 8
  br label %751

; <label>:749:                                    ; preds = %742
  %750 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.016.lcssa, i32 0, i32 1
  store %struct.ST_info* %738, %struct.ST_info** %750, align 8
  br label %751

; <label>:751:                                    ; preds = %749, %747
  %752 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %738, i32 0, i32 3
  %753 = getelementptr inbounds [6 x i8], [6 x i8]* %752, i32 0, i32 0
  %754 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %753, i8* align 1 %754, i64 6, i1 false), !track !142
  br label %755

; <label>:755:                                    ; preds = %751, %734
  %.118 = phi %struct.ST_info* [ %738, %751 ], [ %.017.lcssa, %734 ]
  br label %756

; <label>:756:                                    ; preds = %755, %714, %710
  %.219 = phi %struct.ST_info* [ null, %714 ], [ null, %710 ], [ %.118, %755 ]
  %757 = getelementptr inbounds i8, i8* %.5, i64 0
  %758 = load i8, i8* %757, align 1
  %759 = zext i8 %758 to i32
  %760 = icmp eq i32 %759, 128
  br i1 %760, label %766, label %761

; <label>:761:                                    ; preds = %756
  %762 = getelementptr inbounds i8, i8* %.5, i64 0
  %763 = load i8, i8* %762, align 1
  %764 = zext i8 %763 to i32
  %765 = icmp eq i32 %764, 80
  br i1 %765, label %766, label %855

; <label>:766:                                    ; preds = %761, %756
  %767 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  %768 = load i32, i32* %767, align 8
  %769 = icmp slt i32 %768, 0
  br i1 %769, label %770, label %777

; <label>:770:                                    ; preds = %766
  %771 = getelementptr inbounds i8, i8* %.5, i64 34
  %772 = load i8, i8* %771, align 1
  %773 = zext i8 %772 to i32
  %774 = and i32 %773, 16
  %775 = ashr i32 %774, 4
  %776 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 %775, i32* %776, align 8
  br label %777

; <label>:777:                                    ; preds = %770, %766
  %778 = getelementptr inbounds i8, i8* %.5, i64 36
  %779 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %780 = load i32, i32* %779, align 4
  %781 = zext i32 %780 to i64
  %782 = getelementptr inbounds i8, i8* %.5, i64 %781
  %783 = icmp ult i8* %778, %782
  br i1 %783, label %.lr.ph36, label %.loopexit24

.lr.ph36:                                         ; preds = %777
  br label %784

; <label>:784:                                    ; preds = %.lr.ph36, %843
  %.0935 = phi i8* [ %778, %.lr.ph36 ], [ %849, %843 ]
  call void @unroll_loop(i32 48)
  %785 = getelementptr inbounds i8, i8* %.0935, i64 2
  %786 = getelementptr inbounds i8, i8* %.0935, i64 1
  %787 = load i8, i8* %786, align 1
  %788 = zext i8 %787 to i32
  %789 = sext i32 %788 to i64
  %790 = getelementptr inbounds i8, i8* %785, i64 %789
  %791 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %792 = load i32, i32* %791, align 4
  %793 = zext i32 %792 to i64
  %794 = getelementptr inbounds i8, i8* %.5, i64 %793
  %795 = icmp ugt i8* %790, %794
  br i1 %795, label %796, label %797

; <label>:796:                                    ; preds = %784
  br label %854

; <label>:797:                                    ; preds = %784
  %798 = load i8, i8* %.0935, align 1
  %799 = zext i8 %798 to i32
  %800 = icmp eq i32 %799, 0
  br i1 %800, label %801, label %843

; <label>:801:                                    ; preds = %797
  %802 = getelementptr inbounds i8, i8* %.0935, i64 1
  %803 = load i8, i8* %802, align 1
  %804 = zext i8 %803 to i32
  %805 = icmp sgt i32 %804, 0
  br i1 %805, label %806, label %843

; <label>:806:                                    ; preds = %801
  %807 = getelementptr inbounds i8, i8* %.0935, i64 2
  %808 = load i8, i8* %807, align 1
  %809 = zext i8 %808 to i32
  %810 = icmp ne i32 %809, 0
  br i1 %810, label %811, label %843

; <label>:811:                                    ; preds = %806
  %812 = getelementptr inbounds i8, i8* %.0935, i64 1
  %813 = load i8, i8* %812, align 1
  %814 = zext i8 %813 to i32
  %815 = icmp sgt i32 %814, 32
  br i1 %815, label %816, label %817

; <label>:816:                                    ; preds = %811
  br label %821

; <label>:817:                                    ; preds = %811
  %818 = getelementptr inbounds i8, i8* %.0935, i64 1
  %819 = load i8, i8* %818, align 1
  %820 = zext i8 %819 to i32
  br label %821

; <label>:821:                                    ; preds = %817, %816
  %822 = phi i32 [ 32, %816 ], [ %820, %817 ]
  %823 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 2
  %824 = getelementptr inbounds [33 x i8], [33 x i8]* %823, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 2 %824, i8 0, i64 33, i1 false)
  %825 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 2
  %826 = getelementptr inbounds [33 x i8], [33 x i8]* %825, i32 0, i32 0
  %827 = getelementptr inbounds i8, i8* %.0935, i64 2
  %828 = sext i32 %822 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %826, i8* align 1 %827, i64 %828, i1 false), !track !143
  %829 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %830 = load i32, i32* %829, align 4
  %831 = icmp ne i32 %830, 0
  br i1 %831, label %832, label %842

; <label>:832:                                    ; preds = %821
  %833 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 2
  %834 = getelementptr inbounds [33 x i8], [33 x i8]* %833, i32 0, i32 0
  %835 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 3, i32 0
  %836 = call i32 @strcmp(i8* %835, i8* %834) #10
  %837 = icmp ne i32 %836, 0
  br i1 %837, label %842, label %838

; <label>:838:                                    ; preds = %832
  %839 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 1
  %840 = getelementptr inbounds [6 x i8], [6 x i8]* %839, i32 0, i32 0
  %841 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 4, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %841, i8* align 8 %840, i64 6, i1 false), !track !144
  br label %842

; <label>:842:                                    ; preds = %838, %832, %821
  br label %843

; <label>:843:                                    ; preds = %842, %806, %801, %797
  %844 = getelementptr inbounds i8, i8* %.0935, i64 1
  %845 = load i8, i8* %844, align 1
  %846 = zext i8 %845 to i32
  %847 = add nsw i32 2, %846
  %848 = sext i32 %847 to i64
  %849 = getelementptr inbounds i8, i8* %.0935, i64 %848
  %850 = load i32, i32* %779, align 4
  %851 = zext i32 %850 to i64
  %852 = getelementptr inbounds i8, i8* %.5, i64 %851
  %853 = icmp ult i8* %849, %852
  br i1 %853, label %784, label %..loopexit24_crit_edge

..loopexit24_crit_edge:                           ; preds = %843
  br label %.loopexit24

.loopexit24:                                      ; preds = %..loopexit24_crit_edge, %777
  br label %854

; <label>:854:                                    ; preds = %.loopexit24, %796
  br label %855

; <label>:855:                                    ; preds = %854, %761
  %856 = getelementptr inbounds i8, i8* %.5, i64 0
  %857 = load i8, i8* %856, align 1
  %858 = zext i8 %857 to i32
  %859 = icmp eq i32 %858, 0
  br i1 %859, label %860, label %943

; <label>:860:                                    ; preds = %855
  %861 = getelementptr inbounds i8, i8* %.5, i64 28
  %862 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %863 = load i32, i32* %862, align 4
  %864 = zext i32 %863 to i64
  %865 = getelementptr inbounds i8, i8* %.5, i64 %864
  %866 = icmp ult i8* %861, %865
  br i1 %866, label %.lr.ph38, label %.loopexit

.lr.ph38:                                         ; preds = %860
  br label %867

; <label>:867:                                    ; preds = %.lr.ph38, %926
  %.11037 = phi i8* [ %861, %.lr.ph38 ], [ %932, %926 ]
  call void @unroll_loop(i32 49)
  %868 = getelementptr inbounds i8, i8* %.11037, i64 2
  %869 = getelementptr inbounds i8, i8* %.11037, i64 1
  %870 = load i8, i8* %869, align 1
  %871 = zext i8 %870 to i32
  %872 = sext i32 %871 to i64
  %873 = getelementptr inbounds i8, i8* %868, i64 %872
  %874 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %875 = load i32, i32* %874, align 4
  %876 = zext i32 %875 to i64
  %877 = getelementptr inbounds i8, i8* %.5, i64 %876
  %878 = icmp ugt i8* %873, %877
  br i1 %878, label %879, label %880

; <label>:879:                                    ; preds = %867
  br label %937

; <label>:880:                                    ; preds = %867
  %881 = load i8, i8* %.11037, align 1
  %882 = zext i8 %881 to i32
  %883 = icmp eq i32 %882, 0
  br i1 %883, label %884, label %926

; <label>:884:                                    ; preds = %880
  %885 = getelementptr inbounds i8, i8* %.11037, i64 1
  %886 = load i8, i8* %885, align 1
  %887 = zext i8 %886 to i32
  %888 = icmp sgt i32 %887, 0
  br i1 %888, label %889, label %926

; <label>:889:                                    ; preds = %884
  %890 = getelementptr inbounds i8, i8* %.11037, i64 2
  %891 = load i8, i8* %890, align 1
  %892 = zext i8 %891 to i32
  %893 = icmp ne i32 %892, 0
  br i1 %893, label %894, label %926

; <label>:894:                                    ; preds = %889
  %895 = getelementptr inbounds i8, i8* %.11037, i64 1
  %896 = load i8, i8* %895, align 1
  %897 = zext i8 %896 to i32
  %898 = icmp sgt i32 %897, 32
  br i1 %898, label %899, label %900

; <label>:899:                                    ; preds = %894
  br label %904

; <label>:900:                                    ; preds = %894
  %901 = getelementptr inbounds i8, i8* %.11037, i64 1
  %902 = load i8, i8* %901, align 1
  %903 = zext i8 %902 to i32
  br label %904

; <label>:904:                                    ; preds = %900, %899
  %905 = phi i32 [ 32, %899 ], [ %903, %900 ]
  %906 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 2
  %907 = getelementptr inbounds [33 x i8], [33 x i8]* %906, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 2 %907, i8 0, i64 33, i1 false)
  %908 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 2
  %909 = getelementptr inbounds [33 x i8], [33 x i8]* %908, i32 0, i32 0
  %910 = getelementptr inbounds i8, i8* %.11037, i64 2
  %911 = sext i32 %905 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %909, i8* align 1 %910, i64 %911, i1 false), !track !145
  %912 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %913 = load i32, i32* %912, align 4
  %914 = icmp ne i32 %913, 0
  br i1 %914, label %915, label %925

; <label>:915:                                    ; preds = %904
  %916 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 2
  %917 = getelementptr inbounds [33 x i8], [33 x i8]* %916, i32 0, i32 0
  %918 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 3, i32 0
  %919 = call i32 @strcmp(i8* %918, i8* %917) #10
  %920 = icmp ne i32 %919, 0
  br i1 %920, label %925, label %921

; <label>:921:                                    ; preds = %915
  %922 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 1
  %923 = getelementptr inbounds [6 x i8], [6 x i8]* %922, i32 0, i32 0
  %924 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 4, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %924, i8* align 8 %923, i64 6, i1 false), !track !146
  br label %925

; <label>:925:                                    ; preds = %921, %915, %904
  br label %926

; <label>:926:                                    ; preds = %925, %889, %884, %880
  %927 = getelementptr inbounds i8, i8* %.11037, i64 1
  %928 = load i8, i8* %927, align 1
  %929 = zext i8 %928 to i32
  %930 = add nsw i32 2, %929
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds i8, i8* %.11037, i64 %931
  %933 = load i32, i32* %862, align 4
  %934 = zext i32 %933 to i64
  %935 = getelementptr inbounds i8, i8* %.5, i64 %934
  %936 = icmp ult i8* %932, %935
  br i1 %936, label %867, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %926
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %860
  br label %937

; <label>:937:                                    ; preds = %.loopexit, %879
  %938 = icmp ne %struct.ST_info* %.219, null
  br i1 %938, label %939, label %942

; <label>:939:                                    ; preds = %937
  %940 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %941 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %940, i32 0, i32 7
  store i32 0, i32* %941, align 8
  br label %942

; <label>:942:                                    ; preds = %939, %937
  br label %943

; <label>:943:                                    ; preds = %942, %855
  %944 = getelementptr inbounds i8, i8* %.5, i64 0
  %945 = load i8, i8* %944, align 1
  %946 = zext i8 %945 to i32
  %947 = icmp eq i32 %946, 16
  br i1 %947, label %948, label %954

; <label>:948:                                    ; preds = %943
  %949 = icmp ne %struct.ST_info* %.219, null
  br i1 %949, label %950, label %953

; <label>:950:                                    ; preds = %948
  %951 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %952 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %951, i32 0, i32 7
  store i32 0, i32* %952, align 8
  br label %953

; <label>:953:                                    ; preds = %950, %948
  br label %954

; <label>:954:                                    ; preds = %953, %943
  %955 = getelementptr inbounds i8, i8* %.5, i64 0
  %956 = load i8, i8* %955, align 1
  %957 = zext i8 %956 to i32
  %958 = and i32 %957, 12
  %959 = icmp ne i32 %958, 8
  br i1 %959, label %960, label %961

; <label>:960:                                    ; preds = %954
  br label %1449

; <label>:961:                                    ; preds = %954
  %962 = getelementptr inbounds i8, i8* %.5, i64 1
  %963 = load i8, i8* %962, align 1
  %964 = zext i8 %963 to i32
  %965 = and i32 %964, 3
  %966 = icmp ne i32 %965, 3
  %967 = zext i1 %966 to i64
  %968 = select i1 %966, i32 24, i32 30
  %969 = getelementptr inbounds i8, i8* %.5, i64 0
  %970 = load i8, i8* %969, align 1
  %971 = zext i8 %970 to i32
  %972 = and i32 %971, 128
  %973 = icmp eq i32 %972, 128
  br i1 %973, label %974, label %976

; <label>:974:                                    ; preds = %961
  %975 = add nsw i32 %968, 2
  br label %976

; <label>:976:                                    ; preds = %974, %961
  %.03 = phi i32 [ %975, %974 ], [ %968, %961 ]
  %977 = add nsw i32 %.03, 16
  %978 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %979 = load i32, i32* %978, align 4
  %980 = icmp sgt i32 %977, %979
  br i1 %980, label %981, label %982

; <label>:981:                                    ; preds = %976
  br label %1449

; <label>:982:                                    ; preds = %976
  %983 = sext i32 %.03 to i64
  %984 = getelementptr inbounds i8, i8* %.5, i64 %983
  %985 = load i8, i8* %984, align 1
  %986 = zext i8 %985 to i32
  %987 = add nsw i32 %.03, 1
  %988 = sext i32 %987 to i64
  %989 = getelementptr inbounds i8, i8* %.5, i64 %988
  %990 = load i8, i8* %989, align 1
  %991 = zext i8 %990 to i32
  %992 = icmp ne i32 %986, %991
  br i1 %992, label %1000, label %993

; <label>:993:                                    ; preds = %982
  %994 = add nsw i32 %.03, 2
  %995 = sext i32 %994 to i64
  %996 = getelementptr inbounds i8, i8* %.5, i64 %995
  %997 = load i8, i8* %996, align 1
  %998 = zext i8 %997 to i32
  %999 = icmp ne i32 %998, 3
  br i1 %999, label %1000, label %1066

; <label>:1000:                                   ; preds = %993, %982
  %1001 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 2, i32* %1001, align 8
  %1002 = add nsw i32 %.03, 3
  %1003 = sext i32 %1002 to i64
  %1004 = getelementptr inbounds i8, i8* %.5, i64 %1003
  %1005 = load i8, i8* %1004, align 1
  %1006 = zext i8 %1005 to i32
  %1007 = and i32 %1006, 32
  %1008 = icmp ne i32 %1007, 0
  br i1 %1008, label %1009, label %1011

; <label>:1009:                                   ; preds = %1000
  %1010 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 3, i32* %1010, align 8
  br label %1011

; <label>:1011:                                   ; preds = %1009, %1000
  %1012 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %1013 = load i32, i32* %1012, align 8
  %1014 = icmp ne i32 %1013, 0
  br i1 %1014, label %1015, label %1027

; <label>:1015:                                   ; preds = %1011
  %1016 = add nsw i32 %.03, 3
  %1017 = sext i32 %1016 to i64
  %1018 = getelementptr inbounds i8, i8* %.5, i64 %1017
  %1019 = load i8, i8* %1018, align 1
  %1020 = zext i8 %1019 to i32
  %1021 = ashr i32 %1020, 6
  %1022 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %1023 = load i32, i32* %1022, align 8
  %1024 = sub nsw i32 %1023, 1
  %1025 = icmp ne i32 %1021, %1024
  br i1 %1025, label %1026, label %1027

; <label>:1026:                                   ; preds = %1015
  br label %1449

; <label>:1027:                                   ; preds = %1015, %1011
  %1028 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %1029 = load i32, i32* %1028, align 4
  %1030 = icmp ne i32 %1029, 0
  br i1 %1030, label %1031, label %1063

; <label>:1031:                                   ; preds = %1027
  %1032 = sext i32 %.03 to i64
  %1033 = getelementptr inbounds i8, i8* %.5, i64 %1032
  %1034 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %1035 = load i32, i32* %1034, align 4
  %1036 = zext i32 %1035 to i64
  %1037 = ptrtoint i8* %1033 to i64
  %1038 = ptrtoint i8* %.5 to i64
  %1039 = sub i64 %1037, %1038
  %1040 = sub nsw i64 %1036, %1039
  %1041 = sub nsw i64 %1040, 4
  %1042 = sub nsw i64 %1041, 4
  %1043 = trunc i64 %1042 to i32
  %1044 = getelementptr inbounds i8, i8* %.5, i64 1
  %1045 = load i8, i8* %1044, align 1
  %1046 = zext i8 %1045 to i32
  %1047 = and i32 %1046, 3
  %1048 = icmp eq i32 %1047, 3
  br i1 %1048, label %1049, label %1052

; <label>:1049:                                   ; preds = %1031
  %1050 = getelementptr inbounds i8, i8* %1033, i64 6
  %1051 = sub nsw i32 %1043, 6
  br label %1052

; <label>:1052:                                   ; preds = %1049, %1031
  %.0 = phi i32 [ %1051, %1049 ], [ %1043, %1031 ]
  %1053 = getelementptr inbounds [2048 x i8], [2048 x i8]* %11, i32 0, i32 0
  %1054 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i32 0, i32 0
  %1055 = call i32 @known_clear(i8* %1053, i32* %12, i32* %1054, i8* %.5, i32 %.0)
  %1056 = load i32, i32* %12, align 4
  %1057 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %1058 = load i32, i32* %1057, align 4
  %1059 = add nsw i32 %1058, 3
  %1060 = icmp slt i32 %1056, %1059
  br i1 %1060, label %1061, label %1062

; <label>:1061:                                   ; preds = %1052
  br label %1449

; <label>:1062:                                   ; preds = %1052
  br label %1063

; <label>:1063:                                   ; preds = %1062, %1027
  %1064 = sext i32 %.03 to i64
  %1065 = getelementptr inbounds i8, i8* %.5, i64 %1064
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %1065, i64 3, i1 false), !track !147
  br label %538

; <label>:1066:                                   ; preds = %993
  %1067 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  %1068 = load i32, i32* %1067, align 8
  %1069 = icmp slt i32 %1068, 0
  br i1 %1069, label %1070, label %1072

; <label>:1070:                                   ; preds = %1066
  %1071 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 0, i32* %1071, align 8
  br label %1072

; <label>:1072:                                   ; preds = %1070, %1066
  %1073 = add nsw i32 %.03, 6
  %1074 = add nsw i32 %1073, 20
  %1075 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 2
  %1076 = load i32, i32* %1075, align 4
  %1077 = icmp slt i32 %1074, %1076
  br i1 %1077, label %1078, label %1123

; <label>:1078:                                   ; preds = %1072
  %1079 = sext i32 %1073 to i64
  %1080 = getelementptr inbounds i8, i8* %.5, i64 %1079
  %1081 = load i8, i8* %1080, align 1
  %1082 = zext i8 %1081 to i32
  %1083 = icmp eq i32 %1082, 8
  br i1 %1083, label %1084, label %1103

; <label>:1084:                                   ; preds = %1078
  %1085 = add nsw i32 %1073, 1
  %1086 = sext i32 %1085 to i64
  %1087 = getelementptr inbounds i8, i8* %.5, i64 %1086
  %1088 = load i8, i8* %1087, align 1
  %1089 = zext i8 %1088 to i32
  %1090 = icmp eq i32 %1089, 0
  br i1 %1090, label %1091, label %1103

; <label>:1091:                                   ; preds = %1084
  %1092 = getelementptr inbounds i8, i8* %.5, i64 1
  %1093 = load i8, i8* %1092, align 1
  %1094 = zext i8 %1093 to i32
  %1095 = and i32 %1094, 3
  %1096 = icmp eq i32 %1095, 1
  br i1 %1096, label %1097, label %1103

; <label>:1097:                                   ; preds = %1091
  %1098 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 3
  %1099 = getelementptr inbounds [4 x i8], [4 x i8]* %1098, i32 0, i32 0
  %1100 = add nsw i32 %1073, 14
  %1101 = sext i32 %1100 to i64
  %1102 = getelementptr inbounds i8, i8* %.5, i64 %1101
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1099, i8* align 1 %1102, i64 4, i1 false), !track !148
  br label %1103

; <label>:1103:                                   ; preds = %1097, %1091, %1084, %1078
  %1104 = sext i32 %1073 to i64
  %1105 = getelementptr inbounds i8, i8* %.5, i64 %1104
  %1106 = load i8, i8* %1105, align 1
  %1107 = zext i8 %1106 to i32
  %1108 = icmp eq i32 %1107, 8
  br i1 %1108, label %1109, label %1122

; <label>:1109:                                   ; preds = %1103
  %1110 = add nsw i32 %1073, 1
  %1111 = sext i32 %1110 to i64
  %1112 = getelementptr inbounds i8, i8* %.5, i64 %1111
  %1113 = load i8, i8* %1112, align 1
  %1114 = zext i8 %1113 to i32
  %1115 = icmp eq i32 %1114, 6
  br i1 %1115, label %1116, label %1122

; <label>:1116:                                   ; preds = %1109
  %1117 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 3
  %1118 = getelementptr inbounds [4 x i8], [4 x i8]* %1117, i32 0, i32 0
  %1119 = add nsw i32 %1073, 16
  %1120 = sext i32 %1119 to i64
  %1121 = getelementptr inbounds i8, i8* %.5, i64 %1120
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1118, i8* align 1 %1121, i64 4, i1 false), !track !149
  br label %1122

; <label>:1122:                                   ; preds = %1116, %1109, %1103
  br label %1123

; <label>:1123:                                   ; preds = %1122, %1072
  %1124 = sext i32 %1073 to i64
  %1125 = getelementptr inbounds i8, i8* %.5, i64 %1124
  %1126 = load i8, i8* %1125, align 1
  %1127 = zext i8 %1126 to i32
  %1128 = icmp ne i32 %1127, 136
  br i1 %1128, label %1136, label %1129

; <label>:1129:                                   ; preds = %1123
  %1130 = add nsw i32 %1073, 1
  %1131 = sext i32 %1130 to i64
  %1132 = getelementptr inbounds i8, i8* %.5, i64 %1131
  %1133 = load i8, i8* %1132, align 1
  %1134 = zext i8 %1133 to i32
  %1135 = icmp ne i32 %1134, 142
  br i1 %1135, label %1136, label %1137

; <label>:1136:                                   ; preds = %1129, %1123
  br label %1449

; <label>:1137:                                   ; preds = %1129
  %1138 = add nsw i32 %1073, 2
  %1139 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 11
  store i32 1, i32* %1139, align 4
  %1140 = add nsw i32 %1138, 1
  %1141 = sext i32 %1140 to i64
  %1142 = getelementptr inbounds i8, i8* %.5, i64 %1141
  %1143 = load i8, i8* %1142, align 1
  %1144 = zext i8 %1143 to i32
  %1145 = icmp ne i32 %1144, 3
  br i1 %1145, label %1160, label %1146

; <label>:1146:                                   ; preds = %1137
  %1147 = add nsw i32 %1138, 4
  %1148 = sext i32 %1147 to i64
  %1149 = getelementptr inbounds i8, i8* %.5, i64 %1148
  %1150 = load i8, i8* %1149, align 1
  %1151 = zext i8 %1150 to i32
  %1152 = icmp ne i32 %1151, 254
  br i1 %1152, label %1153, label %1161

; <label>:1153:                                   ; preds = %1146
  %1154 = add nsw i32 %1138, 4
  %1155 = sext i32 %1154 to i64
  %1156 = getelementptr inbounds i8, i8* %.5, i64 %1155
  %1157 = load i8, i8* %1156, align 1
  %1158 = zext i8 %1157 to i32
  %1159 = icmp ne i32 %1158, 2
  br i1 %1159, label %1160, label %1161

; <label>:1160:                                   ; preds = %1153, %1137
  br label %1449

; <label>:1161:                                   ; preds = %1153, %1146
  %1162 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 11
  store i32 0, i32* %1162, align 4
  %1163 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 10
  store i32 3, i32* %1163, align 8
  %1164 = icmp eq %struct.ST_info* %.219, null
  br i1 %1164, label %1165, label %1167

; <label>:1165:                                   ; preds = %1161
  %1166 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @mx_apl) #9
  br label %.backedge

; <label>:1167:                                   ; preds = %1161
  %1168 = add nsw i32 %1138, 6
  %1169 = sext i32 %1168 to i64
  %1170 = getelementptr inbounds i8, i8* %.5, i64 %1169
  %1171 = load i8, i8* %1170, align 1
  %1172 = zext i8 %1171 to i32
  %1173 = and i32 %1172, 8
  %1174 = icmp ne i32 %1173, 0
  br i1 %1174, label %1175, label %1208

; <label>:1175:                                   ; preds = %1167
  %1176 = add nsw i32 %1138, 6
  %1177 = sext i32 %1176 to i64
  %1178 = getelementptr inbounds i8, i8* %.5, i64 %1177
  %1179 = load i8, i8* %1178, align 1
  %1180 = zext i8 %1179 to i32
  %1181 = and i32 %1180, 64
  %1182 = icmp eq i32 %1181, 0
  br i1 %1182, label %1183, label %1208

; <label>:1183:                                   ; preds = %1175
  %1184 = add nsw i32 %1138, 6
  %1185 = sext i32 %1184 to i64
  %1186 = getelementptr inbounds i8, i8* %.5, i64 %1185
  %1187 = load i8, i8* %1186, align 1
  %1188 = zext i8 %1187 to i32
  %1189 = and i32 %1188, 128
  %1190 = icmp ne i32 %1189, 0
  br i1 %1190, label %1191, label %1208

; <label>:1191:                                   ; preds = %1183
  %1192 = add nsw i32 %1138, 5
  %1193 = sext i32 %1192 to i64
  %1194 = getelementptr inbounds i8, i8* %.5, i64 %1193
  %1195 = load i8, i8* %1194, align 1
  %1196 = zext i8 %1195 to i32
  %1197 = and i32 %1196, 1
  %1198 = icmp eq i32 %1197, 0
  br i1 %1198, label %1199, label %1208

; <label>:1199:                                   ; preds = %1191
  %1200 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1201 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1200, i32 0, i32 2
  %1202 = getelementptr inbounds [32 x i8], [32 x i8]* %1201, i32 0, i32 0
  %1203 = add nsw i32 %1138, 17
  %1204 = sext i32 %1203 to i64
  %1205 = getelementptr inbounds i8, i8* %.5, i64 %1204
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1202, i8* align 1 %1205, i64 32, i1 false), !track !150
  %1206 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1207 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1206, i32 0, i32 7
  store i32 1, i32* %1207, align 8
  br label %1208

; <label>:1208:                                   ; preds = %1199, %1191, %1183, %1175, %1167
  %1209 = add nsw i32 %1138, 6
  %1210 = sext i32 %1209 to i64
  %1211 = getelementptr inbounds i8, i8* %.5, i64 %1210
  %1212 = load i8, i8* %1211, align 1
  %1213 = zext i8 %1212 to i32
  %1214 = and i32 %1213, 8
  %1215 = icmp ne i32 %1214, 0
  br i1 %1215, label %1216, label %1321

; <label>:1216:                                   ; preds = %1208
  %1217 = add nsw i32 %1138, 6
  %1218 = sext i32 %1217 to i64
  %1219 = getelementptr inbounds i8, i8* %.5, i64 %1218
  %1220 = load i8, i8* %1219, align 1
  %1221 = zext i8 %1220 to i32
  %1222 = and i32 %1221, 64
  %1223 = icmp eq i32 %1222, 0
  br i1 %1223, label %1224, label %1321

; <label>:1224:                                   ; preds = %1216
  %1225 = add nsw i32 %1138, 6
  %1226 = sext i32 %1225 to i64
  %1227 = getelementptr inbounds i8, i8* %.5, i64 %1226
  %1228 = load i8, i8* %1227, align 1
  %1229 = zext i8 %1228 to i32
  %1230 = and i32 %1229, 128
  %1231 = icmp eq i32 %1230, 0
  br i1 %1231, label %1232, label %1321

; <label>:1232:                                   ; preds = %1224
  %1233 = add nsw i32 %1138, 5
  %1234 = sext i32 %1233 to i64
  %1235 = getelementptr inbounds i8, i8* %.5, i64 %1234
  %1236 = load i8, i8* %1235, align 1
  %1237 = zext i8 %1236 to i32
  %1238 = and i32 %1237, 1
  %1239 = icmp ne i32 %1238, 0
  br i1 %1239, label %1240, label %1321

; <label>:1240:                                   ; preds = %1232
  %1241 = add nsw i32 %1138, 17
  %1242 = sext i32 %1241 to i64
  %1243 = getelementptr inbounds i8, i8* %.5, i64 %1242
  %1244 = getelementptr [32 x i8], [32 x i8]* @ZERO, i32 0, i32 0
  %1245 = call i32 @memcmp(i8* %1243, i8* %1244, i64 32) #10
  %1246 = icmp ne i32 %1245, 0
  br i1 %1246, label %1247, label %1258

; <label>:1247:                                   ; preds = %1240
  %1248 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1249 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1248, i32 0, i32 1
  %1250 = getelementptr inbounds [32 x i8], [32 x i8]* %1249, i32 0, i32 0
  %1251 = add nsw i32 %1138, 17
  %1252 = sext i32 %1251 to i64
  %1253 = getelementptr inbounds i8, i8* %.5, i64 %1252
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1250, i8* align 1 %1253, i64 32, i1 false), !track !151
  %1254 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1255 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1254, i32 0, i32 7
  %1256 = load i32, i32* %1255, align 8
  %1257 = or i32 %1256, 2
  store i32 %1257, i32* %1255, align 8
  br label %1258

; <label>:1258:                                   ; preds = %1247, %1240
  %1259 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1260 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1259, i32 0, i32 7
  %1261 = load i32, i32* %1260, align 8
  %1262 = and i32 %1261, 4
  %1263 = icmp ne i32 %1262, 4
  br i1 %1263, label %1264, label %1320

; <label>:1264:                                   ; preds = %1258
  %1265 = add nsw i32 %1138, 2
  %1266 = sext i32 %1265 to i64
  %1267 = getelementptr inbounds i8, i8* %.5, i64 %1266
  %1268 = load i8, i8* %1267, align 1
  %1269 = zext i8 %1268 to i32
  %1270 = shl i32 %1269, 8
  %1271 = add nsw i32 %1138, 3
  %1272 = sext i32 %1271 to i64
  %1273 = getelementptr inbounds i8, i8* %.5, i64 %1272
  %1274 = load i8, i8* %1273, align 1
  %1275 = zext i8 %1274 to i32
  %1276 = add nsw i32 %1270, %1275
  %1277 = add nsw i32 %1276, 4
  %1278 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1279 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1278, i32 0, i32 5
  store i32 %1277, i32* %1279, align 8
  %1280 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 3
  %1281 = load i32, i32* %1280, align 4
  %1282 = sub nsw i32 %1281, %1138
  %1283 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1284 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1283, i32 0, i32 5
  %1285 = load i32, i32* %1284, align 8
  %1286 = icmp slt i32 %1282, %1285
  br i1 %1286, label %1287, label %1288

; <label>:1287:                                   ; preds = %1264
  br label %.backedge

; <label>:1288:                                   ; preds = %1264
  %1289 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1290 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1289, i32 0, i32 3
  %1291 = getelementptr inbounds [16 x i8], [16 x i8]* %1290, i32 0, i32 0
  %1292 = add nsw i32 %1138, 81
  %1293 = sext i32 %1292 to i64
  %1294 = getelementptr inbounds i8, i8* %.5, i64 %1293
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1291, i8* align 1 %1294, i64 16, i1 false), !track !152
  %1295 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1296 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1295, i32 0, i32 4
  %1297 = getelementptr inbounds [256 x i8], [256 x i8]* %1296, i32 0, i32 0
  %1298 = sext i32 %1138 to i64
  %1299 = getelementptr inbounds i8, i8* %.5, i64 %1298
  %1300 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1301 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1300, i32 0, i32 5
  %1302 = load i32, i32* %1301, align 8
  %1303 = sext i32 %1302 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1297, i8* align 1 %1299, i64 %1303, i1 false), !track !153
  %1304 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1305 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1304, i32 0, i32 4
  %1306 = getelementptr inbounds [256 x i8], [256 x i8]* %1305, i32 0, i32 0
  %1307 = getelementptr inbounds i8, i8* %1306, i64 81
  call void @llvm.memset.p0i8.i64(i8* align 1 %1307, i8 0, i64 16, i1 false)
  %1308 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1309 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1308, i32 0, i32 7
  %1310 = load i32, i32* %1309, align 8
  %1311 = or i32 %1310, 4
  store i32 %1311, i32* %1309, align 8
  %1312 = add nsw i32 %1138, 6
  %1313 = sext i32 %1312 to i64
  %1314 = getelementptr inbounds i8, i8* %.5, i64 %1313
  %1315 = load i8, i8* %1314, align 1
  %1316 = zext i8 %1315 to i32
  %1317 = and i32 %1316, 7
  %1318 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1319 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1318, i32 0, i32 6
  store i32 %1317, i32* %1319, align 4
  br label %1320

; <label>:1320:                                   ; preds = %1288, %1258
  br label %1321

; <label>:1321:                                   ; preds = %1320, %1232, %1224, %1216, %1208
  %1322 = add nsw i32 %1138, 6
  %1323 = sext i32 %1322 to i64
  %1324 = getelementptr inbounds i8, i8* %.5, i64 %1323
  %1325 = load i8, i8* %1324, align 1
  %1326 = zext i8 %1325 to i32
  %1327 = and i32 %1326, 8
  %1328 = icmp ne i32 %1327, 0
  br i1 %1328, label %1329, label %1434

; <label>:1329:                                   ; preds = %1321
  %1330 = add nsw i32 %1138, 6
  %1331 = sext i32 %1330 to i64
  %1332 = getelementptr inbounds i8, i8* %.5, i64 %1331
  %1333 = load i8, i8* %1332, align 1
  %1334 = zext i8 %1333 to i32
  %1335 = and i32 %1334, 64
  %1336 = icmp ne i32 %1335, 0
  br i1 %1336, label %1337, label %1434

; <label>:1337:                                   ; preds = %1329
  %1338 = add nsw i32 %1138, 6
  %1339 = sext i32 %1338 to i64
  %1340 = getelementptr inbounds i8, i8* %.5, i64 %1339
  %1341 = load i8, i8* %1340, align 1
  %1342 = zext i8 %1341 to i32
  %1343 = and i32 %1342, 128
  %1344 = icmp ne i32 %1343, 0
  br i1 %1344, label %1345, label %1434

; <label>:1345:                                   ; preds = %1337
  %1346 = add nsw i32 %1138, 5
  %1347 = sext i32 %1346 to i64
  %1348 = getelementptr inbounds i8, i8* %.5, i64 %1347
  %1349 = load i8, i8* %1348, align 1
  %1350 = zext i8 %1349 to i32
  %1351 = and i32 %1350, 1
  %1352 = icmp ne i32 %1351, 0
  br i1 %1352, label %1353, label %1434

; <label>:1353:                                   ; preds = %1345
  %1354 = add nsw i32 %1138, 17
  %1355 = sext i32 %1354 to i64
  %1356 = getelementptr inbounds i8, i8* %.5, i64 %1355
  %1357 = getelementptr [32 x i8], [32 x i8]* @ZERO, i32 0, i32 0
  %1358 = call i32 @memcmp(i8* %1356, i8* %1357, i64 32) #10
  %1359 = icmp ne i32 %1358, 0
  br i1 %1359, label %1360, label %1371

; <label>:1360:                                   ; preds = %1353
  %1361 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1362 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1361, i32 0, i32 2
  %1363 = getelementptr inbounds [32 x i8], [32 x i8]* %1362, i32 0, i32 0
  %1364 = add nsw i32 %1138, 17
  %1365 = sext i32 %1364 to i64
  %1366 = getelementptr inbounds i8, i8* %.5, i64 %1365
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1363, i8* align 1 %1366, i64 32, i1 false), !track !154
  %1367 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1368 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1367, i32 0, i32 7
  %1369 = load i32, i32* %1368, align 8
  %1370 = or i32 %1369, 1
  store i32 %1370, i32* %1368, align 8
  br label %1371

; <label>:1371:                                   ; preds = %1360, %1353
  %1372 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1373 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1372, i32 0, i32 7
  %1374 = load i32, i32* %1373, align 8
  %1375 = and i32 %1374, 4
  %1376 = icmp ne i32 %1375, 4
  br i1 %1376, label %1377, label %1433

; <label>:1377:                                   ; preds = %1371
  %1378 = add nsw i32 %1138, 2
  %1379 = sext i32 %1378 to i64
  %1380 = getelementptr inbounds i8, i8* %.5, i64 %1379
  %1381 = load i8, i8* %1380, align 1
  %1382 = zext i8 %1381 to i32
  %1383 = shl i32 %1382, 8
  %1384 = add nsw i32 %1138, 3
  %1385 = sext i32 %1384 to i64
  %1386 = getelementptr inbounds i8, i8* %.5, i64 %1385
  %1387 = load i8, i8* %1386, align 1
  %1388 = zext i8 %1387 to i32
  %1389 = add nsw i32 %1383, %1388
  %1390 = add nsw i32 %1389, 4
  %1391 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1392 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1391, i32 0, i32 5
  store i32 %1390, i32* %1392, align 8
  %1393 = getelementptr inbounds %struct.pcap_pkthdr, %struct.pcap_pkthdr* %9, i32 0, i32 3
  %1394 = load i32, i32* %1393, align 4
  %1395 = sub nsw i32 %1394, %1138
  %1396 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1397 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1396, i32 0, i32 5
  %1398 = load i32, i32* %1397, align 8
  %1399 = icmp slt i32 %1395, %1398
  br i1 %1399, label %1400, label %1401

; <label>:1400:                                   ; preds = %1377
  br label %.backedge

; <label>:1401:                                   ; preds = %1377
  %1402 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1403 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1402, i32 0, i32 3
  %1404 = getelementptr inbounds [16 x i8], [16 x i8]* %1403, i32 0, i32 0
  %1405 = add nsw i32 %1138, 81
  %1406 = sext i32 %1405 to i64
  %1407 = getelementptr inbounds i8, i8* %.5, i64 %1406
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1404, i8* align 1 %1407, i64 16, i1 false), !track !155
  %1408 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1409 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1408, i32 0, i32 4
  %1410 = getelementptr inbounds [256 x i8], [256 x i8]* %1409, i32 0, i32 0
  %1411 = sext i32 %1138 to i64
  %1412 = getelementptr inbounds i8, i8* %.5, i64 %1411
  %1413 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1414 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1413, i32 0, i32 5
  %1415 = load i32, i32* %1414, align 8
  %1416 = sext i32 %1415 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1410, i8* align 1 %1412, i64 %1416, i1 false), !track !156
  %1417 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1418 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1417, i32 0, i32 4
  %1419 = getelementptr inbounds [256 x i8], [256 x i8]* %1418, i32 0, i32 0
  %1420 = getelementptr inbounds i8, i8* %1419, i64 81
  call void @llvm.memset.p0i8.i64(i8* align 1 %1420, i8 0, i64 16, i1 false)
  %1421 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1422 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1421, i32 0, i32 7
  %1423 = load i32, i32* %1422, align 8
  %1424 = or i32 %1423, 4
  store i32 %1424, i32* %1422, align 8
  %1425 = add nsw i32 %1138, 6
  %1426 = sext i32 %1425 to i64
  %1427 = getelementptr inbounds i8, i8* %.5, i64 %1426
  %1428 = load i8, i8* %1427, align 1
  %1429 = zext i8 %1428 to i32
  %1430 = and i32 %1429, 7
  %1431 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1432 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1431, i32 0, i32 6
  store i32 %1430, i32* %1432, align 4
  br label %1433

; <label>:1433:                                   ; preds = %1401, %1371
  br label %1434

; <label>:1434:                                   ; preds = %1433, %1345, %1337, %1329, %1321
  %1435 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1436 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1435, i32 0, i32 7
  %1437 = load i32, i32* %1436, align 8
  %1438 = icmp eq i32 %1437, 7
  br i1 %1438, label %1439, label %1448

; <label>:1439:                                   ; preds = %1434
  %1440 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1441 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1440, i32 0, i32 0
  %1442 = getelementptr inbounds [6 x i8], [6 x i8]* %1441, i32 0, i32 0
  %1443 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1442, i8* align 1 %1443, i64 6, i1 false), !track !157
  %1444 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.214, i32 0, i32 14
  %1445 = bitcast %struct.WPA_hdsk* %1444 to i8*
  %1446 = getelementptr inbounds %struct.ST_info, %struct.ST_info* %.219, i32 0, i32 2
  %1447 = bitcast %struct.WPA_hdsk* %1446 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1445, i8* align 8 %1447, i64 356, i1 false), !track !158
  br label %1448

; <label>:1448:                                   ; preds = %1439, %1434
  br label %1449

; <label>:1449:                                   ; preds = %1448, %1160, %1136, %1061, %1026, %981, %960, %692, %657, %648, %605, %557, %494, %468, %451, %407, %400
  %.315 = phi %struct.AP_info* [ %.01240, %400 ], [ %.01240, %407 ], [ %.01240, %451 ], [ %.01240, %468 ], [ %.01240, %494 ], [ %.214, %557 ], [ %.214, %692 ], [ %.214, %605 ], [ %.214, %648 ], [ %.214, %657 ], [ %.214, %960 ], [ %.214, %981 ], [ %.214, %1026 ], [ %.214, %1061 ], [ %.214, %1136 ], [ %.214, %1160 ], [ %.214, %1448 ]
  %1450 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @mx_apl) #9
  %1451 = icmp ne %struct.AP_info* %.315, null
  br i1 %1451, label %1452, label %1461

; <label>:1452:                                   ; preds = %1449
  %1453 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.315, i32 0, i32 7
  %1454 = load i64, i64* %1453, align 8
  %1455 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 33
  %1456 = load i32, i32* %1455, align 8
  %1457 = sext i32 %1456 to i64
  %1458 = icmp sge i64 %1454, %1457
  br i1 %1458, label %1459, label %1460

; <label>:1459:                                   ; preds = %1452
  br label %1464

; <label>:1460:                                   ; preds = %1452
  br label %1461

; <label>:1461:                                   ; preds = %1460, %1449
  br label %.backedge

.backedge:                                        ; preds = %1461, %1400, %1287, %1165, %382, %366, %345, %324
  %.012.be = phi %struct.AP_info* [ %.315, %1461 ], [ %.214, %1165 ], [ %.214, %1287 ], [ %.214, %1400 ], [ %.01239, %324 ], [ %.01239, %345 ], [ %.01239, %366 ], [ %.01239, %382 ]
  %.06.be = phi i8* [ %.5, %1461 ], [ %.5, %1165 ], [ %.5, %1287 ], [ %.5, %1400 ], [ %14, %324 ], [ %.17, %345 ], [ %.28, %366 ], [ %.28, %382 ]
  %1462 = load i32, i32* @close_aircrack, align 4
  %1463 = icmp ne i32 %1462, 0
  br i1 %1463, label %._crit_edge, label %164

; <label>:1464:                                   ; preds = %1459, %740, %520, %163
  br label %1465

; <label>:1465:                                   ; preds = %1464, %287, %274, %240, %232, %217, %204, %194, %187, %171, %158, %139, %132, %112, %69, %60, %40, %33, %16
  %1466 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %2, i32 0, i32 2
  %1467 = load i8*, i8** %1466, align 8
  %1468 = icmp ne i8* %1467, null
  br i1 %1468, label %1469, label %1473

; <label>:1469:                                   ; preds = %1465
  %1470 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %2, i32 0, i32 2
  %1471 = load i8*, i8** %1470, align 8
  call void @free(i8* %1471) #9
  %1472 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %2, i32 0, i32 2
  store i8* null, i8** %1472, align 8
  br label %1473

; <label>:1473:                                   ; preds = %1469, %1465
  %1474 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %2, i32 0, i32 3
  %1475 = load i8*, i8** %1474, align 8
  %1476 = icmp ne i8* %1475, null
  br i1 %1476, label %1477, label %1481

; <label>:1477:                                   ; preds = %1473
  %1478 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %2, i32 0, i32 3
  %1479 = load i8*, i8** %1478, align 8
  call void @free(i8* %1479) #9
  %1480 = getelementptr inbounds %struct.read_buf, %struct.read_buf* %2, i32 0, i32 3
  store i8* null, i8** %1480, align 8
  br label %1481

; <label>:1481:                                   ; preds = %1477, %1473
  %1482 = icmp ne i8* %14, null
  br i1 %1482, label %1483, label %1484

; <label>:1483:                                   ; preds = %1481
  call void @free(i8* %14) #9
  br label %1484

; <label>:1484:                                   ; preds = %1483, %1481
  ret void

UnifiedUnreachableBlock:                          ; preds = %151, %121
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define dso_local float @chrono(%struct.timeval*, i32) #0 {
  %3 = alloca %struct.timeval, align 8
  %4 = call i32 @gettimeofday(%struct.timeval* %3, %struct.vote* null) #9
  %5 = getelementptr inbounds %struct.timeval, %struct.timeval* %3, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.timeval, %struct.timeval* %0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = sub nsw i64 %6, %8
  %10 = sitofp i64 %9 to float
  %11 = getelementptr inbounds %struct.timeval, %struct.timeval* %3, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.timeval, %struct.timeval* %0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = sub nsw i64 %12, %14
  %16 = sitofp i64 %15 to float
  %17 = fdiv float %16, 1.000000e+06
  %18 = fadd float %10, %17
  %19 = icmp ne i32 %1, 0
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %2
  %21 = call i32 @gettimeofday(%struct.timeval* %0, %struct.vote* null) #9
  br label %22

; <label>:22:                                     ; preds = %20, %2
  ret float %18
}

; Function Attrs: nounwind
declare dso_local i32 @gettimeofday(%struct.timeval*, %struct.vote*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @safe_read(i32, i8*, i64) #0 {
  %4 = icmp ult i64 0, %2
  br i1 %4, label %.lr.ph.lr.ph, label %.outer._crit_edge

.lr.ph.lr.ph:                                     ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.lr.ph, %.outer
  %5 = phi i1 [ %4, %.lr.ph.lr.ph ], [ %26, %.outer ]
  %.01.ph14 = phi i8* [ %1, %.lr.ph.lr.ph ], [ %25, %.outer ]
  %.02.ph13 = phi i64 [ 0, %.lr.ph.lr.ph ], [ %23, %.outer ]
  call void @unroll_loop(i32 50)
  br label %7

; <label>:6:                                      ; preds = %15
  br i1 %5, label %7, label %._crit_edge

; <label>:7:                                      ; preds = %.lr.ph, %6
  call void @unroll_loop(i32 51)
  %8 = sub i64 %2, %.02.ph13
  %9 = call i64 @read(i32 %0, i8* %.01.ph14, i64 %8)
  %10 = trunc i64 %9 to i32
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %13, label %12

; <label>:12:                                     ; preds = %7
  br label %29

; <label>:13:                                     ; preds = %7
  %14 = icmp slt i32 %10, 0
  br i1 %14, label %15, label %19

; <label>:15:                                     ; preds = %13
  %16 = call i32* @__errno_location() #13
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 4
  br i1 %18, label %6, label %19

; <label>:19:                                     ; preds = %15, %13
  %.lcssa11 = phi i32 [ %10, %15 ], [ %10, %13 ]
  %20 = icmp slt i32 %.lcssa11, 0
  br i1 %20, label %21, label %.outer

; <label>:21:                                     ; preds = %19
  %.lcssa5 = phi i32 [ %.lcssa11, %19 ]
  br label %29

.outer:                                           ; preds = %19
  %22 = sext i32 %.lcssa11 to i64
  %23 = add i64 %.02.ph13, %22
  %24 = sext i32 %.lcssa11 to i64
  %25 = getelementptr inbounds i8, i8* %.01.ph14, i64 %24
  %26 = icmp ult i64 %23, %2
  br i1 %26, label %.lr.ph, label %.outer..outer._crit_edge_crit_edge

.outer..outer._crit_edge_crit_edge:               ; preds = %.outer
  %split15 = phi i64 [ %23, %.outer ]
  br label %.outer._crit_edge

.outer._crit_edge:                                ; preds = %.outer..outer._crit_edge_crit_edge, %3
  %split = phi i64 [ %split15, %.outer..outer._crit_edge_crit_edge ], [ 0, %3 ]
  br label %27

._crit_edge:                                      ; preds = %6
  %split12 = phi i64 [ %.02.ph13, %6 ]
  br label %27

; <label>:27:                                     ; preds = %._crit_edge, %.outer._crit_edge
  %.02.lcssa = phi i64 [ %split12, %._crit_edge ], [ %split, %.outer._crit_edge ]
  %28 = trunc i64 %.02.lcssa to i32
  br label %29

; <label>:29:                                     ; preds = %27, %21, %12
  %.0 = phi i32 [ %.lcssa5, %21 ], [ 0, %12 ], [ %28, %27 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @crack_wep_thread(i8*) #0 {
  %2 = alloca [256 x i8], align 16, !track !159
  %3 = alloca [256 x i8], align 16, !track !160
  %4 = alloca [256 x i8], align 16, !track !161
  %5 = alloca [64 x i8], align 16, !track !162
  %6 = alloca i32, align 4
  %7 = alloca [17 x [256 x i32]], align 16, !track !163
  %8 = ptrtoint i8* %0 to i64
  %9 = trunc i64 %8 to i32
  %10 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i32 0, i32 0
  %11 = getelementptr [256 x i8], [256 x i8]* @R, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 %11, i64 256, i1 false), !track !164
  %12 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i32 0, i32 0
  %13 = getelementptr [256 x i8], [256 x i8]* @R, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 %13, i64 256, i1 false), !track !165
  br label %14

; <label>:14:                                     ; preds = %701, %1
  %.04 = phi i32 [ 1, %1 ], [ %.37, %701 ]
  %.0 = phi i32 [ 0, %1 ], [ %.3, %701 ]
  call void @unroll_loop(i32 52)
  %15 = icmp ne i32 %.04, 0
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %14
  %17 = load i32, i32* %6, align 4
  br label %18

; <label>:18:                                     ; preds = %16, %14
  %19 = sext i32 %9 to i64
  %20 = getelementptr inbounds [256 x [2 x i32]], [256 x [2 x i32]]* @mc_pipe, i64 0, i64 %19
  %21 = getelementptr inbounds [2 x i32], [2 x i32]* %20, i64 0, i64 0
  %22 = load i32, i32* %21, align 8
  %23 = bitcast i32* %6 to i8*
  %24 = call i32 @safe_read(i32 %22, i8* %23, i64 4)
  %25 = sext i32 %24 to i64
  %26 = icmp ne i64 %25, 4
  br i1 %26, label %27, label %30

; <label>:27:                                     ; preds = %18
  %28 = getelementptr [12 x i8], [12 x i8]* @.str.27, i32 0, i32 0
  call void @perror(i8* %28)
  %29 = call i32 @kill(i32 0, i32 15) #9
  call void @_exit(i32 1) #12
  br label %UnifiedUnreachableBlock

; <label>:30:                                     ; preds = %18
  %31 = load i32, i32* @close_aircrack, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %34

; <label>:33:                                     ; preds = %30
  br label %714

; <label>:34:                                     ; preds = %30
  %35 = sext i32 %9 to i64
  %36 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 3
  %37 = load i64, i64* %36, align 8
  %38 = mul nsw i64 %35, %37
  %39 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %40 = load i32, i32* %39, align 4
  %41 = sext i32 %40 to i64
  %42 = sdiv i64 %38, %41
  %43 = mul nsw i64 5, %42
  %44 = add nsw i32 1, %9
  %45 = sext i32 %44 to i64
  %46 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 3
  %47 = load i64, i64* %46, align 8
  %48 = mul nsw i64 %45, %47
  %49 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %50 = load i32, i32* %49, align 4
  %51 = sext i32 %50 to i64
  %52 = sdiv i64 %48, %51
  %53 = mul nsw i64 5, %52
  %54 = load i32, i32* %6, align 4
  %55 = add nsw i32 3, %54
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  %58 = getelementptr inbounds i8, i8* %57, i64 3
  %59 = load i32, i32* %6, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 8 %61, i64 %60, i1 false), !track !166
  %62 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i32 0, i32 0
  %63 = bitcast [256 x i32]* %62 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %63, i8 0, i64 17408, i1 false)
  %64 = zext i8 %56 to i64
  %65 = icmp slt i64 %43, %53
  br i1 %65, label %.lr.ph31, label %.loopexit

.lr.ph31:                                         ; preds = %34
  %66 = zext i8 %56 to i64
  br label %67

; <label>:67:                                     ; preds = %.lr.ph31, %694
  %.127 = phi i32 [ %.0, %.lr.ph31 ], [ %.2, %694 ]
  %.0126 = phi i64 [ %43, %.lr.ph31 ], [ %695, %694 ]
  %.0225 = phi i32 [ 1, %.lr.ph31 ], [ %.13, %694 ]
  %.1524 = phi i32 [ %.04, %.lr.ph31 ], [ %.26, %694 ]
  call void @unroll_loop(i32 53)
  %68 = icmp ne i32 %.1524, 0
  br i1 %68, label %89, label %69

; <label>:69:                                     ; preds = %67
  %70 = icmp slt i32 0, %.127
  br i1 %70, label %.lr.ph, label %88

.lr.ph:                                           ; preds = %69
  %71 = zext i32 %.127 to i64
  br label %72

; <label>:72:                                     ; preds = %.lr.ph, %87
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %87 ]
  call void @unroll_loop(i32 54)
  %73 = trunc i64 %indvars.iv to i32
  %74 = trunc i32 %73 to i8
  %75 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %indvars.iv
  store i8 %74, i8* %75, align 1
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %indvars.iv
  store i8 %74, i8* %76, align 1
  %77 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 %indvars.iv
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 %indvars.iv
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i64
  %82 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %81
  store i8 %78, i8* %82, align 1
  %83 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 %indvars.iv
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i64
  %86 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %85
  store i8 %78, i8* %86, align 1
  br label %87

; <label>:87:                                     ; preds = %72
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next, %71
  br i1 %exitcond1, label %72, label %._crit_edge

._crit_edge:                                      ; preds = %87
  br label %88

; <label>:88:                                     ; preds = %._crit_edge, %69
  %.128 = phi i32 [ %.127, %._crit_edge ], [ %.127, %69 ]
  br label %89

; <label>:89:                                     ; preds = %88, %67
  %.129 = phi i32 [ %.128, %88 ], [ %.127, %67 ]
  %90 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* @mx_ivb) #9
  %91 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  %92 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  %93 = load i8*, i8** %92, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 %.0126
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %91, i8* align 1 %94, i64 3, i1 false), !track !167
  %95 = zext i8 %56 to i32
  %96 = icmp slt i32 0, %95
  br i1 %96, label %.lr.ph16, label %118

.lr.ph16:                                         ; preds = %89
  br label %97

; <label>:97:                                     ; preds = %.lr.ph16, %117
  %indvars.iv18 = phi i64 [ 0, %.lr.ph16 ], [ %indvars.iv.next19, %117 ]
  %.0814 = phi i32 [ 0, %.lr.ph16 ], [ %106, %117 ]
  call void @unroll_loop(i32 55)
  %98 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %indvars.iv18
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = add nsw i32 %.0814, %100
  %102 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %indvars.iv18
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = add nsw i32 %101, %104
  %106 = and i32 %105, 255
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 %indvars.iv18
  store i8 %107, i8* %108, align 1
  %109 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %indvars.iv18
  %110 = load i8, i8* %109, align 1
  %111 = sext i32 %106 to i64
  %112 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %indvars.iv18
  store i8 %113, i8* %114, align 1
  %115 = sext i32 %106 to i64
  %116 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %115
  store i8 %110, i8* %116, align 1
  br label %117

; <label>:117:                                    ; preds = %97
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 1
  %exitcond = icmp ne i64 %indvars.iv.next19, %66
  br i1 %exitcond, label %97, label %._crit_edge17

._crit_edge17:                                    ; preds = %117
  br label %118

; <label>:118:                                    ; preds = %._crit_edge17, %89
  %sext = sext i32 0 to i64
  br label %119

; <label>:119:                                    ; preds = %132, %118
  %indvars.iv22 = phi i64 [ %indvars.iv.next23, %132 ], [ %64, %118 ]
  call void @unroll_loop(i32 56)
  %indvars.iv.next23 = add nsw i64 %indvars.iv22, -1
  %120 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %indvars.iv.next23
  %121 = load i8, i8* %120, align 1
  %122 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 %indvars.iv.next23
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %indvars.iv.next23
  store i8 %126, i8* %127, align 1
  %128 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 %indvars.iv.next23
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i64
  %131 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %130
  store i8 %121, i8* %131, align 1
  br label %132

; <label>:132:                                    ; preds = %119
  %133 = icmp ne i64 %indvars.iv.next23, %sext
  br i1 %133, label %119, label %134

; <label>:134:                                    ; preds = %132
  %135 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  %136 = load i8*, i8** %135, align 8
  %137 = add nsw i64 %.0126, 3
  %138 = getelementptr inbounds i8, i8* %136, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = xor i32 %140, 170
  %142 = trunc i32 %141 to i8
  %143 = zext i8 %142 to i64
  %144 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 1
  %147 = load i8, i8* %146, align 1
  %148 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  %149 = load i8*, i8** %148, align 8
  %150 = add nsw i64 %.0126, 4
  %151 = getelementptr inbounds i8, i8* %149, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i32
  %154 = xor i32 %153, 170
  %155 = trunc i32 %154 to i8
  %156 = zext i8 %155 to i64
  %157 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 2
  %160 = load i8, i8* %159, align 2
  %161 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @mx_ivb) #9
  %162 = icmp ne i32 %.1524, 0
  br i1 %162, label %163, label %164

; <label>:163:                                    ; preds = %134
  br label %164

; <label>:164:                                    ; preds = %163, %134
  %.26 = phi i32 [ 0, %163 ], [ %.1524, %134 ]
  %165 = icmp ne i32 %.0225, 0
  br i1 %165, label %166, label %169

; <label>:166:                                    ; preds = %164
  %167 = load i32, i32* %6, align 4
  %168 = add nsw i32 3, %167
  br label %169

; <label>:169:                                    ; preds = %166, %164
  %.13 = phi i32 [ 0, %166 ], [ %.0225, %164 ]
  %.2 = phi i32 [ %168, %166 ], [ %.129, %164 ]
  %170 = zext i8 %56 to i64
  %171 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %170
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = zext i8 %56 to i32
  %175 = sub nsw i32 %174, 1
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 %176
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = add nsw i32 %173, %179
  %181 = trunc i32 %180 to i8
  %182 = zext i8 %160 to i32
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %221

; <label>:184:                                    ; preds = %169
  %185 = zext i8 %147 to i32
  %186 = icmp eq i32 %185, 2
  br i1 %186, label %187, label %207

; <label>:187:                                    ; preds = %184
  %188 = zext i8 %142 to i32
  %189 = icmp eq i32 %188, 2
  br i1 %189, label %190, label %207

; <label>:190:                                    ; preds = %187
  %191 = zext i8 %181 to i32
  %192 = sub nsw i32 1, %191
  %193 = trunc i32 %192 to i8
  %194 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 16
  %195 = zext i8 %193 to i64
  %196 = getelementptr inbounds [256 x i32], [256 x i32]* %194, i64 0, i64 %195
  %197 = load i32, i32* %196, align 4
  %198 = add nsw i32 %197, 1
  store i32 %198, i32* %196, align 4
  %199 = zext i8 %181 to i32
  %200 = sub nsw i32 2, %199
  %201 = trunc i32 %200 to i8
  %202 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 16
  %203 = zext i8 %201 to i64
  %204 = getelementptr inbounds [256 x i32], [256 x i32]* %202, i64 0, i64 %203
  %205 = load i32, i32* %204, align 4
  %206 = add nsw i32 %205, 1
  store i32 %206, i32* %204, align 4
  br label %220

; <label>:207:                                    ; preds = %187, %184
  %208 = zext i8 %155 to i32
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %219

; <label>:210:                                    ; preds = %207
  %211 = zext i8 %181 to i32
  %212 = sub nsw i32 2, %211
  %213 = trunc i32 %212 to i8
  %214 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 16
  %215 = zext i8 %213 to i64
  %216 = getelementptr inbounds [256 x i32], [256 x i32]* %214, i64 0, i64 %215
  %217 = load i32, i32* %216, align 4
  %218 = add nsw i32 %217, 1
  store i32 %218, i32* %216, align 4
  br label %219

; <label>:219:                                    ; preds = %210, %207
  br label %220

; <label>:220:                                    ; preds = %219, %190
  br label %237

; <label>:221:                                    ; preds = %169
  %222 = zext i8 %155 to i32
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %224, label %236

; <label>:224:                                    ; preds = %221
  %225 = zext i8 %172 to i32
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %236

; <label>:227:                                    ; preds = %224
  %228 = zext i8 %181 to i32
  %229 = sub nsw i32 2, %228
  %230 = trunc i32 %229 to i8
  %231 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 0
  %232 = zext i8 %230 to i64
  %233 = getelementptr inbounds [256 x i32], [256 x i32]* %231, i64 0, i64 %232
  %234 = load i32, i32* %233, align 4
  %235 = add nsw i32 %234, 1
  store i32 %235, i32* %233, align 4
  br label %236

; <label>:236:                                    ; preds = %227, %224, %221
  br label %237

; <label>:237:                                    ; preds = %236, %220
  %238 = zext i8 %147 to i32
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %240, label %261

; <label>:240:                                    ; preds = %237
  %241 = zext i8 %142 to i32
  %242 = zext i8 %160 to i32
  %243 = icmp eq i32 %241, %242
  br i1 %243, label %244, label %261

; <label>:244:                                    ; preds = %240
  %245 = zext i8 %181 to i32
  %246 = sub nsw i32 1, %245
  %247 = trunc i32 %246 to i8
  %248 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 16
  %249 = zext i8 %247 to i64
  %250 = getelementptr inbounds [256 x i32], [256 x i32]* %248, i64 0, i64 %249
  %251 = load i32, i32* %250, align 4
  %252 = add nsw i32 %251, 1
  store i32 %252, i32* %250, align 4
  %253 = zext i8 %181 to i32
  %254 = sub nsw i32 2, %253
  %255 = trunc i32 %254 to i8
  %256 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 16
  %257 = zext i8 %255 to i64
  %258 = getelementptr inbounds [256 x i32], [256 x i32]* %256, i64 0, i64 %257
  %259 = load i32, i32* %258, align 4
  %260 = add nsw i32 %259, 1
  store i32 %260, i32* %258, align 4
  br label %261

; <label>:261:                                    ; preds = %244, %240, %237
  %262 = zext i8 %147 to i32
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %264, label %289

; <label>:264:                                    ; preds = %261
  %265 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %266 = load i8, i8* %265, align 16
  %267 = zext i8 %266 to i32
  %268 = icmp eq i32 %267, 1
  br i1 %268, label %269, label %289

; <label>:269:                                    ; preds = %264
  %270 = zext i8 %142 to i32
  %271 = icmp eq i32 %270, 1
  br i1 %271, label %272, label %289

; <label>:272:                                    ; preds = %269
  %273 = zext i8 %181 to i32
  %274 = sub nsw i32 0, %273
  %275 = trunc i32 %274 to i8
  %276 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 16
  %277 = zext i8 %275 to i64
  %278 = getelementptr inbounds [256 x i32], [256 x i32]* %276, i64 0, i64 %277
  %279 = load i32, i32* %278, align 4
  %280 = add nsw i32 %279, 1
  store i32 %280, i32* %278, align 4
  %281 = zext i8 %181 to i32
  %282 = sub nsw i32 1, %281
  %283 = trunc i32 %282 to i8
  %284 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 16
  %285 = zext i8 %283 to i64
  %286 = getelementptr inbounds [256 x i32], [256 x i32]* %284, i64 0, i64 %285
  %287 = load i32, i32* %286, align 4
  %288 = add nsw i32 %287, 1
  store i32 %288, i32* %286, align 4
  br label %289

; <label>:289:                                    ; preds = %272, %269, %264, %261
  %290 = zext i8 %147 to i32
  %291 = zext i8 %56 to i32
  %292 = icmp eq i32 %290, %291
  br i1 %292, label %293, label %354

; <label>:293:                                    ; preds = %289
  %294 = zext i8 %142 to i32
  %295 = zext i8 %56 to i32
  %296 = icmp eq i32 %294, %295
  br i1 %296, label %297, label %309

; <label>:297:                                    ; preds = %293
  %298 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  %299 = load i8, i8* %298, align 16
  %300 = zext i8 %299 to i32
  %301 = zext i8 %181 to i32
  %302 = sub nsw i32 %300, %301
  %303 = trunc i32 %302 to i8
  %304 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 1
  %305 = zext i8 %303 to i64
  %306 = getelementptr inbounds [256 x i32], [256 x i32]* %304, i64 0, i64 %305
  %307 = load i32, i32* %306, align 4
  %308 = add nsw i32 %307, 1
  store i32 %308, i32* %306, align 4
  br label %353

; <label>:309:                                    ; preds = %293
  %310 = zext i8 %56 to i32
  %311 = sub nsw i32 1, %310
  %312 = zext i8 %142 to i32
  %313 = sub nsw i32 %311, %312
  %314 = and i32 %313, 255
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %316, label %326

; <label>:316:                                    ; preds = %309
  %317 = zext i8 %145 to i32
  %318 = zext i8 %181 to i32
  %319 = sub nsw i32 %317, %318
  %320 = trunc i32 %319 to i8
  %321 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 2
  %322 = zext i8 %320 to i64
  %323 = getelementptr inbounds [256 x i32], [256 x i32]* %321, i64 0, i64 %322
  %324 = load i32, i32* %323, align 4
  %325 = add nsw i32 %324, 1
  store i32 %325, i32* %323, align 4
  br label %352

; <label>:326:                                    ; preds = %309
  %327 = zext i8 %145 to i32
  %328 = zext i8 %56 to i32
  %329 = icmp slt i32 %327, %328
  br i1 %329, label %330, label %351

; <label>:330:                                    ; preds = %326
  %331 = zext i8 %145 to i32
  %332 = zext i8 %56 to i32
  %333 = sub nsw i32 %331, %332
  %334 = and i32 %333, 255
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %335
  %337 = load i8, i8* %336, align 1
  %338 = zext i8 %337 to i32
  %339 = icmp ne i32 %338, 1
  br i1 %339, label %340, label %350

; <label>:340:                                    ; preds = %330
  %341 = zext i8 %337 to i32
  %342 = zext i8 %181 to i32
  %343 = sub nsw i32 %341, %342
  %344 = trunc i32 %343 to i8
  %345 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 8
  %346 = zext i8 %344 to i64
  %347 = getelementptr inbounds [256 x i32], [256 x i32]* %345, i64 0, i64 %346
  %348 = load i32, i32* %347, align 4
  %349 = add nsw i32 %348, 1
  store i32 %349, i32* %347, align 4
  br label %350

; <label>:350:                                    ; preds = %340, %330
  br label %351

; <label>:351:                                    ; preds = %350, %326
  br label %352

; <label>:352:                                    ; preds = %351, %316
  br label %353

; <label>:353:                                    ; preds = %352, %297
  br label %354

; <label>:354:                                    ; preds = %353, %289
  %355 = zext i8 %145 to i32
  %356 = icmp eq i32 %355, 2
  br i1 %356, label %357, label %372

; <label>:357:                                    ; preds = %354
  %358 = zext i8 %56 to i64
  %359 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %358
  %360 = load i8, i8* %359, align 1
  %361 = zext i8 %360 to i32
  %362 = icmp eq i32 %361, 1
  br i1 %362, label %363, label %372

; <label>:363:                                    ; preds = %357
  %364 = zext i8 %181 to i32
  %365 = sub nsw i32 1, %364
  %366 = trunc i32 %365 to i8
  %367 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 9
  %368 = zext i8 %366 to i64
  %369 = getelementptr inbounds [256 x i32], [256 x i32]* %367, i64 0, i64 %368
  %370 = load i32, i32* %369, align 4
  %371 = add nsw i32 %370, 1
  store i32 %371, i32* %369, align 4
  br label %372

; <label>:372:                                    ; preds = %363, %357, %354
  %373 = zext i8 %56 to i64
  %374 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %373
  %375 = load i8, i8* %374, align 1
  %376 = zext i8 %375 to i32
  %377 = zext i8 %56 to i32
  %378 = icmp eq i32 %376, %377
  br i1 %378, label %379, label %441

; <label>:379:                                    ; preds = %372
  %380 = zext i8 %147 to i32
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %382, label %395

; <label>:382:                                    ; preds = %379
  %383 = zext i8 %142 to i32
  %384 = zext i8 %56 to i32
  %385 = icmp eq i32 %383, %384
  br i1 %385, label %386, label %395

; <label>:386:                                    ; preds = %382
  %387 = zext i8 %181 to i32
  %388 = sub nsw i32 1, %387
  %389 = trunc i32 %388 to i8
  %390 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 3
  %391 = zext i8 %389 to i64
  %392 = getelementptr inbounds [256 x i32], [256 x i32]* %390, i64 0, i64 %391
  %393 = load i32, i32* %392, align 4
  %394 = add nsw i32 %393, 1
  store i32 %394, i32* %392, align 4
  br label %440

; <label>:395:                                    ; preds = %382, %379
  %396 = zext i8 %56 to i32
  %397 = sub nsw i32 1, %396
  %398 = zext i8 %147 to i32
  %399 = sub nsw i32 %397, %398
  %400 = and i32 %399, 255
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %402, label %415

; <label>:402:                                    ; preds = %395
  %403 = zext i8 %142 to i32
  %404 = zext i8 %147 to i32
  %405 = icmp eq i32 %403, %404
  br i1 %405, label %406, label %415

; <label>:406:                                    ; preds = %402
  %407 = zext i8 %181 to i32
  %408 = sub nsw i32 1, %407
  %409 = trunc i32 %408 to i8
  %410 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 4
  %411 = zext i8 %409 to i64
  %412 = getelementptr inbounds [256 x i32], [256 x i32]* %410, i64 0, i64 %411
  %413 = load i32, i32* %412, align 4
  %414 = add nsw i32 %413, 1
  store i32 %414, i32* %412, align 4
  br label %439

; <label>:415:                                    ; preds = %402, %395
  %416 = zext i8 %147 to i32
  %417 = zext i8 %56 to i32
  %418 = sub nsw i32 0, %417
  %419 = and i32 %418, 255
  %420 = icmp sge i32 %416, %419
  br i1 %420, label %421, label %438

; <label>:421:                                    ; preds = %415
  %422 = zext i8 %56 to i32
  %423 = zext i8 %147 to i32
  %424 = add nsw i32 %422, %423
  %425 = zext i8 %145 to i32
  %426 = sub nsw i32 %424, %425
  %427 = and i32 %426, 255
  %428 = icmp eq i32 %427, 0
  br i1 %428, label %429, label %438

; <label>:429:                                    ; preds = %421
  %430 = zext i8 %181 to i32
  %431 = sub nsw i32 1, %430
  %432 = trunc i32 %431 to i8
  %433 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 10
  %434 = zext i8 %432 to i64
  %435 = getelementptr inbounds [256 x i32], [256 x i32]* %433, i64 0, i64 %434
  %436 = load i32, i32* %435, align 4
  %437 = add nsw i32 %436, 1
  store i32 %437, i32* %435, align 4
  br label %438

; <label>:438:                                    ; preds = %429, %421, %415
  br label %439

; <label>:439:                                    ; preds = %438, %406
  br label %440

; <label>:440:                                    ; preds = %439, %386
  br label %441

; <label>:441:                                    ; preds = %440, %372
  %442 = zext i8 %147 to i32
  %443 = zext i8 %56 to i32
  %444 = icmp slt i32 %442, %443
  br i1 %444, label %445, label %476

; <label>:445:                                    ; preds = %441
  %446 = zext i8 %147 to i32
  %447 = zext i8 %147 to i64
  %448 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %447
  %449 = load i8, i8* %448, align 1
  %450 = zext i8 %449 to i32
  %451 = add nsw i32 %446, %450
  %452 = zext i8 %56 to i32
  %453 = sub nsw i32 %451, %452
  %454 = and i32 %453, 255
  %455 = icmp eq i32 %454, 0
  br i1 %455, label %456, label %476

; <label>:456:                                    ; preds = %445
  %457 = zext i8 %145 to i32
  %458 = icmp ne i32 %457, 1
  br i1 %458, label %459, label %476

; <label>:459:                                    ; preds = %456
  %460 = zext i8 %145 to i32
  %461 = zext i8 %147 to i64
  %462 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %461
  %463 = load i8, i8* %462, align 1
  %464 = zext i8 %463 to i32
  %465 = icmp ne i32 %460, %464
  br i1 %465, label %466, label %476

; <label>:466:                                    ; preds = %459
  %467 = zext i8 %145 to i32
  %468 = zext i8 %181 to i32
  %469 = sub nsw i32 %467, %468
  %470 = trunc i32 %469 to i8
  %471 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 5
  %472 = zext i8 %470 to i64
  %473 = getelementptr inbounds [256 x i32], [256 x i32]* %471, i64 0, i64 %472
  %474 = load i32, i32* %473, align 4
  %475 = add nsw i32 %474, 1
  store i32 %475, i32* %473, align 4
  br label %476

; <label>:476:                                    ; preds = %466, %459, %456, %445, %441
  %477 = zext i8 %147 to i32
  %478 = zext i8 %56 to i32
  %479 = icmp sgt i32 %477, %478
  br i1 %479, label %480, label %541

; <label>:480:                                    ; preds = %476
  %481 = zext i8 %160 to i32
  %482 = zext i8 %147 to i32
  %483 = add nsw i32 %481, %482
  %484 = zext i8 %56 to i32
  %485 = sub nsw i32 %483, %484
  %486 = and i32 %485, 255
  %487 = icmp eq i32 %486, 0
  br i1 %487, label %488, label %541

; <label>:488:                                    ; preds = %480
  %489 = zext i8 %155 to i32
  %490 = zext i8 %147 to i32
  %491 = icmp eq i32 %489, %490
  br i1 %491, label %492, label %516

; <label>:492:                                    ; preds = %488
  %493 = zext i8 %147 to i32
  %494 = zext i8 %160 to i32
  %495 = sub nsw i32 %493, %494
  %496 = and i32 %495, 255
  %497 = sext i32 %496 to i64
  %498 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %497
  %499 = load i8, i8* %498, align 1
  %500 = zext i8 %499 to i32
  %501 = icmp ne i32 %500, 1
  br i1 %501, label %502, label %515

; <label>:502:                                    ; preds = %492
  %503 = zext i8 %499 to i32
  %504 = icmp ne i32 %503, 2
  br i1 %504, label %505, label %515

; <label>:505:                                    ; preds = %502
  %506 = zext i8 %499 to i32
  %507 = zext i8 %181 to i32
  %508 = sub nsw i32 %506, %507
  %509 = trunc i32 %508 to i8
  %510 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 6
  %511 = zext i8 %509 to i64
  %512 = getelementptr inbounds [256 x i32], [256 x i32]* %510, i64 0, i64 %511
  %513 = load i32, i32* %512, align 4
  %514 = add nsw i32 %513, 1
  store i32 %514, i32* %512, align 4
  br label %515

; <label>:515:                                    ; preds = %505, %502, %492
  br label %540

; <label>:516:                                    ; preds = %488
  %517 = zext i8 %155 to i32
  %518 = zext i8 %160 to i32
  %519 = sub nsw i32 2, %518
  %520 = and i32 %519, 255
  %521 = icmp eq i32 %517, %520
  br i1 %521, label %522, label %539

; <label>:522:                                    ; preds = %516
  %523 = zext i8 %158 to i32
  %524 = icmp ne i32 %523, 1
  br i1 %524, label %525, label %538

; <label>:525:                                    ; preds = %522
  %526 = zext i8 %158 to i32
  %527 = icmp ne i32 %526, 2
  br i1 %527, label %528, label %538

; <label>:528:                                    ; preds = %525
  %529 = zext i8 %158 to i32
  %530 = zext i8 %181 to i32
  %531 = sub nsw i32 %529, %530
  %532 = trunc i32 %531 to i8
  %533 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 7
  %534 = zext i8 %532 to i64
  %535 = getelementptr inbounds [256 x i32], [256 x i32]* %533, i64 0, i64 %534
  %536 = load i32, i32* %535, align 4
  %537 = add nsw i32 %536, 1
  store i32 %537, i32* %535, align 4
  br label %538

; <label>:538:                                    ; preds = %528, %525, %522
  br label %539

; <label>:539:                                    ; preds = %538, %516
  br label %540

; <label>:540:                                    ; preds = %539, %515
  br label %541

; <label>:541:                                    ; preds = %540, %480, %476
  %542 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 1
  %543 = load i8, i8* %542, align 1
  %544 = zext i8 %543 to i32
  %545 = icmp ne i32 %544, 2
  br i1 %545, label %546, label %598

; <label>:546:                                    ; preds = %541
  %547 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 2
  %548 = load i8, i8* %547, align 2
  %549 = zext i8 %548 to i32
  %550 = icmp ne i32 %549, 0
  br i1 %550, label %551, label %598

; <label>:551:                                    ; preds = %546
  %552 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 1
  %553 = load i8, i8* %552, align 1
  %554 = zext i8 %553 to i32
  %555 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 2
  %556 = load i8, i8* %555, align 2
  %557 = zext i8 %556 to i32
  %558 = add nsw i32 %554, %557
  %559 = trunc i32 %558 to i8
  %560 = zext i8 %559 to i32
  %561 = zext i8 %56 to i32
  %562 = icmp slt i32 %560, %561
  br i1 %562, label %563, label %597

; <label>:563:                                    ; preds = %551
  %564 = zext i8 %559 to i64
  %565 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %564
  %566 = load i8, i8* %565, align 1
  %567 = zext i8 %566 to i32
  %568 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 2
  %569 = load i8, i8* %568, align 2
  %570 = zext i8 %569 to i32
  %571 = add nsw i32 %567, %570
  %572 = trunc i32 %571 to i8
  %573 = zext i8 %572 to i32
  %574 = zext i8 %56 to i32
  %575 = icmp eq i32 %573, %574
  br i1 %575, label %576, label %596

; <label>:576:                                    ; preds = %563
  %577 = zext i8 %158 to i32
  %578 = icmp ne i32 %577, 1
  br i1 %578, label %579, label %596

; <label>:579:                                    ; preds = %576
  %580 = zext i8 %158 to i32
  %581 = icmp ne i32 %580, 2
  br i1 %581, label %582, label %596

; <label>:582:                                    ; preds = %579
  %583 = zext i8 %158 to i32
  %584 = zext i8 %559 to i32
  %585 = icmp ne i32 %583, %584
  br i1 %585, label %586, label %596

; <label>:586:                                    ; preds = %582
  %587 = zext i8 %158 to i32
  %588 = zext i8 %181 to i32
  %589 = sub nsw i32 %587, %588
  %590 = trunc i32 %589 to i8
  %591 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 12
  %592 = zext i8 %590 to i64
  %593 = getelementptr inbounds [256 x i32], [256 x i32]* %591, i64 0, i64 %592
  %594 = load i32, i32* %593, align 4
  %595 = add nsw i32 %594, 1
  store i32 %595, i32* %593, align 4
  br label %596

; <label>:596:                                    ; preds = %586, %582, %579, %576, %563
  br label %597

; <label>:597:                                    ; preds = %596, %551
  br label %598

; <label>:598:                                    ; preds = %597, %546, %541
  %599 = zext i8 %147 to i32
  %600 = icmp eq i32 %599, 2
  br i1 %600, label %601, label %689

; <label>:601:                                    ; preds = %598
  %602 = zext i8 %56 to i32
  %603 = icmp eq i32 %602, 4
  br i1 %603, label %604, label %661

; <label>:604:                                    ; preds = %601
  %605 = zext i8 %155 to i32
  %606 = icmp eq i32 %605, 0
  br i1 %606, label %607, label %619

; <label>:607:                                    ; preds = %604
  %608 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  %609 = load i8, i8* %608, align 16
  %610 = zext i8 %609 to i32
  %611 = zext i8 %181 to i32
  %612 = sub nsw i32 %610, %611
  %613 = trunc i32 %612 to i8
  %614 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 13
  %615 = zext i8 %613 to i64
  %616 = getelementptr inbounds [256 x i32], [256 x i32]* %614, i64 0, i64 %615
  %617 = load i32, i32* %616, align 4
  %618 = add nsw i32 %617, 1
  store i32 %618, i32* %616, align 4
  br label %660

; <label>:619:                                    ; preds = %604
  %620 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 1
  %621 = load i8, i8* %620, align 1
  %622 = zext i8 %621 to i32
  %623 = icmp eq i32 %622, 2
  br i1 %623, label %624, label %639

; <label>:624:                                    ; preds = %619
  %625 = zext i8 %158 to i32
  %626 = icmp eq i32 %625, 0
  br i1 %626, label %627, label %639

; <label>:627:                                    ; preds = %624
  %628 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 254
  %629 = load i8, i8* %628, align 2
  %630 = zext i8 %629 to i32
  %631 = zext i8 %181 to i32
  %632 = sub nsw i32 %630, %631
  %633 = trunc i32 %632 to i8
  %634 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 14
  %635 = zext i8 %633 to i64
  %636 = getelementptr inbounds [256 x i32], [256 x i32]* %634, i64 0, i64 %635
  %637 = load i32, i32* %636, align 4
  %638 = add nsw i32 %637, 1
  store i32 %638, i32* %636, align 4
  br label %639

; <label>:639:                                    ; preds = %627, %624, %619
  %640 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 1
  %641 = load i8, i8* %640, align 1
  %642 = zext i8 %641 to i32
  %643 = icmp eq i32 %642, 2
  br i1 %643, label %644, label %659

; <label>:644:                                    ; preds = %639
  %645 = zext i8 %158 to i32
  %646 = icmp eq i32 %645, 2
  br i1 %646, label %647, label %659

; <label>:647:                                    ; preds = %644
  %648 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 255
  %649 = load i8, i8* %648, align 1
  %650 = zext i8 %649 to i32
  %651 = zext i8 %181 to i32
  %652 = sub nsw i32 %650, %651
  %653 = trunc i32 %652 to i8
  %654 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 15
  %655 = zext i8 %653 to i64
  %656 = getelementptr inbounds [256 x i32], [256 x i32]* %654, i64 0, i64 %655
  %657 = load i32, i32* %656, align 4
  %658 = add nsw i32 %657, 1
  store i32 %658, i32* %656, align 4
  br label %659

; <label>:659:                                    ; preds = %647, %644, %639
  br label %660

; <label>:660:                                    ; preds = %659, %607
  br label %688

; <label>:661:                                    ; preds = %601
  %662 = zext i8 %56 to i32
  %663 = icmp sgt i32 %662, 4
  br i1 %663, label %664, label %687

; <label>:664:                                    ; preds = %661
  %665 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 4
  %666 = load i8, i8* %665, align 4
  %667 = zext i8 %666 to i32
  %668 = add nsw i32 %667, 2
  %669 = zext i8 %56 to i32
  %670 = icmp eq i32 %668, %669
  br i1 %670, label %671, label %687

; <label>:671:                                    ; preds = %664
  %672 = zext i8 %158 to i32
  %673 = icmp ne i32 %672, 1
  br i1 %673, label %674, label %687

; <label>:674:                                    ; preds = %671
  %675 = zext i8 %158 to i32
  %676 = icmp ne i32 %675, 4
  br i1 %676, label %677, label %687

; <label>:677:                                    ; preds = %674
  %678 = zext i8 %158 to i32
  %679 = zext i8 %181 to i32
  %680 = sub nsw i32 %678, %679
  %681 = trunc i32 %680 to i8
  %682 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i64 0, i64 11
  %683 = zext i8 %681 to i64
  %684 = getelementptr inbounds [256 x i32], [256 x i32]* %682, i64 0, i64 %683
  %685 = load i32, i32* %684, align 4
  %686 = add nsw i32 %685, 1
  store i32 %686, i32* %684, align 4
  br label %687

; <label>:687:                                    ; preds = %677, %674, %671, %664, %661
  br label %688

; <label>:688:                                    ; preds = %687, %660
  br label %689

; <label>:689:                                    ; preds = %688, %598
  %690 = load i32, i32* @close_aircrack, align 4
  %691 = icmp ne i32 %690, 0
  br i1 %691, label %692, label %693

; <label>:692:                                    ; preds = %689
  %.2.lcssa = phi i32 [ %.2, %689 ]
  %.26.lcssa = phi i32 [ %.26, %689 ]
  br label %697

; <label>:693:                                    ; preds = %689
  br label %694

; <label>:694:                                    ; preds = %693
  %695 = add nsw i64 %.0126, 5
  %696 = icmp slt i64 %695, %53
  br i1 %696, label %67, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %694
  %split = phi i32 [ %.26, %694 ]
  %split32 = phi i32 [ %.2, %694 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %34
  %.37.ph = phi i32 [ %split, %..loopexit_crit_edge ], [ %.04, %34 ]
  %.3.ph = phi i32 [ %split32, %..loopexit_crit_edge ], [ %.0, %34 ]
  br label %697

; <label>:697:                                    ; preds = %.loopexit, %692
  %.37 = phi i32 [ %.26.lcssa, %692 ], [ %.37.ph, %.loopexit ]
  %.3 = phi i32 [ %.2.lcssa, %692 ], [ %.3.ph, %.loopexit ]
  %698 = load i32, i32* @close_aircrack, align 4
  %699 = icmp ne i32 %698, 0
  br i1 %699, label %700, label %701

; <label>:700:                                    ; preds = %697
  br label %714

; <label>:701:                                    ; preds = %697
  %702 = sext i32 %9 to i64
  %703 = getelementptr inbounds [256 x [2 x i32]], [256 x [2 x i32]]* @cm_pipe, i64 0, i64 %702
  %704 = getelementptr inbounds [2 x i32], [2 x i32]* %703, i64 0, i64 1
  %705 = load i32, i32* %704, align 4
  %706 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %7, i32 0, i32 0
  %707 = bitcast [256 x i32]* %706 to i8*
  %708 = call i32 @safe_write(i32 %705, i8* %707, i64 17408)
  %709 = sext i32 %708 to i64
  %710 = icmp ne i64 %709, 17408
  br i1 %710, label %711, label %14

; <label>:711:                                    ; preds = %701
  %712 = getelementptr [13 x i8], [13 x i8]* @.str.28, i32 0, i32 0
  call void @perror(i8* %712)
  %713 = call i32 @kill(i32 0, i32 15) #9
  call void @_exit(i32 1) #12
  br label %UnifiedUnreachableBlock

; <label>:714:                                    ; preds = %700, %33
  ret i32 0

UnifiedUnreachableBlock:                          ; preds = %711, %27
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @show_wep_stats(i32, i32, [256 x %struct.PTW_tableentry]*, i32*, i32*, i32) #0 {
  %7 = alloca %struct.winsize, align 2
  %8 = call float @chrono(%struct.timeval* @t_stats, i32 0)
  %9 = fpext float %8 to double
  %10 = fcmp olt double %9, 1.510000e+00
  br i1 %10, label %14, label %11

; <label>:11:                                     ; preds = %6
  %12 = load i32, i32* @wepkey_crack_success, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %17

; <label>:14:                                     ; preds = %11, %6
  %15 = icmp eq i32 %1, 0
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %14
  br label %376

; <label>:17:                                     ; preds = %14, %11
  %18 = call i32 (i32, i64, ...) @ioctl(i32 0, i64 21523, %struct.winsize* %7) #9
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %23

; <label>:20:                                     ; preds = %17
  %21 = getelementptr inbounds %struct.winsize, %struct.winsize* %7, i32 0, i32 0
  store i16 25, i16* %21, align 2
  %22 = getelementptr inbounds %struct.winsize, %struct.winsize* %7, i32 0, i32 1
  store i16 80, i16* %22, align 2
  br label %23

; <label>:23:                                     ; preds = %20, %17
  %24 = call float @chrono(%struct.timeval* @t_stats, i32 1)
  %25 = call float @chrono(%struct.timeval* @t_begin, i32 0)
  %26 = fdiv float %25, 3.600000e+03
  %27 = fptosi float %26 to i32
  %28 = mul nsw i32 %27, 3600
  %29 = sitofp i32 %28 to float
  %30 = fsub float %25, %29
  %31 = fdiv float %30, 6.000000e+01
  %32 = fptosi float %31 to i32
  %33 = mul nsw i32 %27, 3600
  %34 = sitofp i32 %33 to float
  %35 = fsub float %25, %34
  %36 = mul nsw i32 %32, 60
  %37 = sitofp i32 %36 to float
  %38 = fsub float %35, %37
  %39 = fptosi float %38 to i32
  %40 = load i32, i32* @show_wep_stats.is_cleared, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %54

; <label>:42:                                     ; preds = %23
  %43 = load i32, i32* @show_wep_stats.is_cleared, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* @show_wep_stats.is_cleared, align 4
  %45 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %46 = load i32, i32* %45, align 4
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %51

; <label>:48:                                     ; preds = %42
  %49 = getelementptr [6 x i8], [6 x i8]* @.str.29, i32 0, i32 0
  %50 = call i32 (i8*, ...) @printf(i8* %49)
  br label %51

; <label>:51:                                     ; preds = %48, %42
  %52 = getelementptr [5 x i8], [5 x i8]* @.str.30, i32 0, i32 0
  %53 = call i32 (i8*, ...) @printf(i8* %52)
  br label %54

; <label>:54:                                     ; preds = %51, %23
  %55 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %56 = load i32, i32* %55, align 4
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %61

; <label>:58:                                     ; preds = %54
  %59 = getelementptr [8 x i8], [8 x i8]* @.str.31, i32 0, i32 0
  %60 = call i32 (i8*, ...) @printf(i8* %59)
  br label %61

; <label>:61:                                     ; preds = %58, %54
  %62 = getelementptr inbounds %struct.winsize, %struct.winsize* %7, i32 0, i32 1
  %63 = load i16, i16* %62, align 2
  %64 = zext i16 %63 to i32
  %65 = sub nsw i32 %64, 12
  %66 = sdiv i32 %65, 2
  %67 = load i8*, i8** @progname, align 8
  %68 = getelementptr [12 x i8], [12 x i8]* @.str.32, i32 0, i32 0
  %69 = call i32 (i8*, ...) @printf(i8* %68, i32 %66, i8* %67)
  %70 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %71 = load i32, i32* %70, align 4
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %76

; <label>:73:                                     ; preds = %61
  %74 = getelementptr [8 x i8], [8 x i8]* @.str.33, i32 0, i32 0
  %75 = call i32 (i8*, ...) @printf(i8* %74)
  br label %76

; <label>:76:                                     ; preds = %73, %61
  %77 = icmp ne [256 x %struct.PTW_tableentry]* %2, null
  br i1 %77, label %78, label %90

; <label>:78:                                     ; preds = %76
  %79 = getelementptr inbounds %struct.winsize, %struct.winsize* %7, i32 0, i32 1
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = sub nsw i32 %81, 44
  %83 = sdiv i32 %82, 2
  %84 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 37
  %85 = load %struct.AP_info*, %struct.AP_info** %84, align 8
  %86 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %85, i32 0, i32 7
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr [56 x i8], [56 x i8]* @.str.34, i32 0, i32 0
  %89 = call i32 (i8*, ...) @printf(i8* %88, i32 %83, i32 %27, i32 %32, i32 %39, i32 %5, i64 %87)
  br label %101

; <label>:90:                                     ; preds = %76
  %91 = getelementptr inbounds %struct.winsize, %struct.winsize* %7, i32 0, i32 1
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = sub nsw i32 %93, 44
  %95 = sdiv i32 %94, 2
  %96 = load i64, i64* @nb_tried, align 8
  %97 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 4
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr [58 x i8], [58 x i8]* @.str.35, i32 0, i32 0
  %100 = call i32 (i8*, ...) @printf(i8* %99, i32 %95, i32 %27, i32 %32, i32 %39, i64 %96, i64 %98)
  br label %101

; <label>:101:                                    ; preds = %90, %78
  %102 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %103 = load i32, i32* %102, align 4
  %104 = icmp ne i32 %103, 0
  br i1 %104, label %105, label %108

; <label>:105:                                    ; preds = %101
  %106 = getelementptr [9 x i8], [9 x i8]* @.str.36, i32 0, i32 0
  %107 = call i32 (i8*, ...) @printf(i8* %106)
  br label %108

; <label>:108:                                    ; preds = %105, %101
  %109 = getelementptr [32 x i8], [32 x i8]* @.str.37, i32 0, i32 0
  %110 = call i32 (i8*, ...) @printf(i8* %109)
  %111 = icmp sle i32 0, %0
  br i1 %111, label %.lr.ph17, label %365

.lr.ph17:                                         ; preds = %108
  br label %112

; <label>:112:                                    ; preds = %.lr.ph17, %362
  %.018 = phi i32 [ 0, %.lr.ph17 ], [ %363, %362 ]
  call void @unroll_loop(i32 57)
  %113 = getelementptr inbounds %struct.winsize, %struct.winsize* %7, i32 0, i32 1
  %114 = load i16, i16* %113, align 2
  %115 = zext i16 %114 to i32
  %116 = sub nsw i32 %115, 20
  %117 = sdiv i32 %116, 11
  %118 = icmp ne [256 x %struct.PTW_tableentry]* %2, null
  br i1 %118, label %146, label %119

; <label>:119:                                    ; preds = %112
  %120 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %121 = load i32, i32* %120, align 4
  %122 = icmp ne i32 %121, 0
  br i1 %122, label %123, label %134

; <label>:123:                                    ; preds = %119
  %124 = sext i32 %.018 to i64
  %125 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %126 = getelementptr inbounds [64 x i32], [64 x i32]* %125, i64 0, i64 %124
  %127 = load i32, i32* %126, align 4
  %128 = sext i32 %.018 to i64
  %129 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 5
  %130 = getelementptr inbounds [64 x i32], [64 x i32]* %129, i64 0, i64 %128
  %131 = load i32, i32* %130, align 4
  %132 = getelementptr [28 x i8], [28 x i8]* @.str.38, i32 0, i32 0
  %133 = call i32 (i8*, ...) @printf(i8* %132, i32 %.018, i32 %127, i32 %131)
  br label %145

; <label>:134:                                    ; preds = %119
  %135 = sext i32 %.018 to i64
  %136 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %137 = getelementptr inbounds [64 x i32], [64 x i32]* %136, i64 0, i64 %135
  %138 = load i32, i32* %137, align 4
  %139 = sext i32 %.018 to i64
  %140 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 5
  %141 = getelementptr inbounds [64 x i32], [64 x i32]* %140, i64 0, i64 %139
  %142 = load i32, i32* %141, align 4
  %143 = getelementptr [19 x i8], [19 x i8]* @.str.39, i32 0, i32 0
  %144 = call i32 (i8*, ...) @printf(i8* %143, i32 %.018, i32 %138, i32 %142)
  br label %145

; <label>:145:                                    ; preds = %134, %123
  br label %155

; <label>:146:                                    ; preds = %112
  %147 = sext i32 %.018 to i64
  %148 = getelementptr inbounds i32, i32* %4, i64 %147
  %149 = load i32, i32* %148, align 4
  %150 = sext i32 %.018 to i64
  %151 = getelementptr inbounds i32, i32* %3, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr [19 x i8], [19 x i8]* @.str.39, i32 0, i32 0
  %154 = call i32 (i8*, ...) @printf(i8* %153, i32 %.018, i32 %149, i32 %152)
  br label %155

; <label>:155:                                    ; preds = %146, %145
  %156 = icmp ne [256 x %struct.PTW_tableentry]* %2, null
  br i1 %156, label %157, label %209

; <label>:157:                                    ; preds = %155
  %158 = sext i32 %.018 to i64
  %159 = getelementptr inbounds i32, i32* %4, i64 %158
  %160 = load i32, i32* %159, align 4
  %161 = sext i32 %.018 to i64
  %162 = getelementptr inbounds i32, i32* %4, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = add nsw i32 %117, %163
  %165 = icmp slt i32 %160, %164
  br i1 %165, label %.lr.ph5, label %.loopexit

.lr.ph5:                                          ; preds = %157
  %166 = sext i32 %160 to i64
  br label %167

; <label>:167:                                    ; preds = %.lr.ph5, %203
  %indvars.iv6 = phi i64 [ %166, %.lr.ph5 ], [ %indvars.iv.next7, %203 ]
  call void @unroll_loop(i32 58)
  %168 = icmp sge i64 %indvars.iv6, 256
  br i1 %168, label %169, label %170

; <label>:169:                                    ; preds = %167
  br label %208

; <label>:170:                                    ; preds = %167
  %171 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %172 = load i32, i32* %171, align 4
  %173 = icmp ne i32 %172, 0
  br i1 %173, label %174, label %188

; <label>:174:                                    ; preds = %170
  %175 = sext i32 %.018 to i64
  %176 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %2, i64 %175
  %177 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %176, i64 0, i64 %indvars.iv6
  %178 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %177, i32 0, i32 1
  %179 = load i8, i8* %178, align 4
  %180 = zext i8 %179 to i32
  %181 = sext i32 %.018 to i64
  %182 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %2, i64 %181
  %183 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %182, i64 0, i64 %indvars.iv6
  %184 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %183, i32 0, i32 0
  %185 = load i32, i32* %184, align 4
  %186 = getelementptr [20 x i8], [20 x i8]* @.str.40, i32 0, i32 0
  %187 = call i32 (i8*, ...) @printf(i8* %186, i32 %180, i32 %185)
  br label %202

; <label>:188:                                    ; preds = %170
  %189 = sext i32 %.018 to i64
  %190 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %2, i64 %189
  %191 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %190, i64 0, i64 %indvars.iv6
  %192 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %191, i32 0, i32 1
  %193 = load i8, i8* %192, align 4
  %194 = zext i8 %193 to i32
  %195 = sext i32 %.018 to i64
  %196 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %2, i64 %195
  %197 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %196, i64 0, i64 %indvars.iv6
  %198 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %197, i32 0, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = getelementptr [11 x i8], [11 x i8]* @.str.41, i32 0, i32 0
  %201 = call i32 (i8*, ...) @printf(i8* %200, i32 %194, i32 %199)
  br label %202

; <label>:202:                                    ; preds = %188, %174
  br label %203

; <label>:203:                                    ; preds = %202
  %indvars.iv.next7 = add nsw i64 %indvars.iv6, 1
  %204 = load i32, i32* %162, align 4
  %205 = add nsw i32 %117, %204
  %206 = sext i32 %205 to i64
  %207 = icmp slt i64 %indvars.iv.next7, %206
  br i1 %207, label %167, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %203
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %157
  %.0113 = phi i32 [ %.018, %..loopexit_crit_edge ], [ %.018, %157 ]
  br label %208

; <label>:208:                                    ; preds = %.loopexit, %169
  %.0110 = phi i32 [ %.0113, %.loopexit ], [ %.018, %169 ]
  br label %297

; <label>:209:                                    ; preds = %155
  %210 = sext i32 %.018 to i64
  %211 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %212 = getelementptr inbounds [64 x i32], [64 x i32]* %211, i64 0, i64 %210
  %213 = load i32, i32* %212, align 4
  %214 = sext i32 %.018 to i64
  %215 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %216 = getelementptr inbounds [64 x i32], [64 x i32]* %215, i64 0, i64 %214
  %217 = load i32, i32* %216, align 4
  %218 = add nsw i32 %117, %217
  %219 = icmp slt i32 %213, %218
  br i1 %219, label %.lr.ph, label %.loopexit2

.lr.ph:                                           ; preds = %209
  %220 = sext i32 %213 to i64
  br label %221

; <label>:221:                                    ; preds = %.lr.ph, %291
  %indvars.iv = phi i64 [ %220, %.lr.ph ], [ %indvars.iv.next, %291 ]
  call void @unroll_loop(i32 59)
  %222 = icmp sge i64 %indvars.iv, 256
  br i1 %222, label %223, label %224

; <label>:223:                                    ; preds = %221
  br label %296

; <label>:224:                                    ; preds = %221
  %225 = sext i32 %.018 to i64
  %226 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %227 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %226, i64 0, i64 %225
  %228 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %227, i64 0, i64 %indvars.iv
  %229 = getelementptr inbounds %struct.vote, %struct.vote* %228, i32 0, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = icmp eq i32 %230, 32767
  br i1 %231, label %232, label %255

; <label>:232:                                    ; preds = %224
  %233 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %234 = load i32, i32* %233, align 4
  %235 = icmp ne i32 %234, 0
  br i1 %235, label %236, label %245

; <label>:236:                                    ; preds = %232
  %237 = sext i32 %.018 to i64
  %238 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %239 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %238, i64 0, i64 %237
  %240 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %239, i64 0, i64 %indvars.iv
  %241 = getelementptr inbounds %struct.vote, %struct.vote* %240, i32 0, i32 0
  %242 = load i32, i32* %241, align 8
  %243 = getelementptr [21 x i8], [21 x i8]* @.str.42, i32 0, i32 0
  %244 = call i32 (i8*, ...) @printf(i8* %243, i32 %242)
  br label %254

; <label>:245:                                    ; preds = %232
  %246 = sext i32 %.018 to i64
  %247 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %248 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %247, i64 0, i64 %246
  %249 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %248, i64 0, i64 %indvars.iv
  %250 = getelementptr inbounds %struct.vote, %struct.vote* %249, i32 0, i32 0
  %251 = load i32, i32* %250, align 8
  %252 = getelementptr [12 x i8], [12 x i8]* @.str.43, i32 0, i32 0
  %253 = call i32 (i8*, ...) @printf(i8* %252, i32 %251)
  br label %254

; <label>:254:                                    ; preds = %245, %236
  br label %290

; <label>:255:                                    ; preds = %224
  %256 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %257 = load i32, i32* %256, align 4
  %258 = icmp ne i32 %257, 0
  br i1 %258, label %259, label %274

; <label>:259:                                    ; preds = %255
  %260 = sext i32 %.018 to i64
  %261 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %262 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %261, i64 0, i64 %260
  %263 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %262, i64 0, i64 %indvars.iv
  %264 = getelementptr inbounds %struct.vote, %struct.vote* %263, i32 0, i32 0
  %265 = load i32, i32* %264, align 8
  %266 = sext i32 %.018 to i64
  %267 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %268 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %267, i64 0, i64 %266
  %269 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %268, i64 0, i64 %indvars.iv
  %270 = getelementptr inbounds %struct.vote, %struct.vote* %269, i32 0, i32 1
  %271 = load i32, i32* %270, align 4
  %272 = getelementptr [20 x i8], [20 x i8]* @.str.40, i32 0, i32 0
  %273 = call i32 (i8*, ...) @printf(i8* %272, i32 %265, i32 %271)
  br label %289

; <label>:274:                                    ; preds = %255
  %275 = sext i32 %.018 to i64
  %276 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %277 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %276, i64 0, i64 %275
  %278 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %277, i64 0, i64 %indvars.iv
  %279 = getelementptr inbounds %struct.vote, %struct.vote* %278, i32 0, i32 0
  %280 = load i32, i32* %279, align 8
  %281 = sext i32 %.018 to i64
  %282 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %283 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %282, i64 0, i64 %281
  %284 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %283, i64 0, i64 %indvars.iv
  %285 = getelementptr inbounds %struct.vote, %struct.vote* %284, i32 0, i32 1
  %286 = load i32, i32* %285, align 4
  %287 = getelementptr [11 x i8], [11 x i8]* @.str.41, i32 0, i32 0
  %288 = call i32 (i8*, ...) @printf(i8* %287, i32 %280, i32 %286)
  br label %289

; <label>:289:                                    ; preds = %274, %259
  br label %290

; <label>:290:                                    ; preds = %289, %254
  br label %291

; <label>:291:                                    ; preds = %290
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %292 = load i32, i32* %216, align 4
  %293 = add nsw i32 %117, %292
  %294 = sext i32 %293 to i64
  %295 = icmp slt i64 %indvars.iv.next, %294
  br i1 %295, label %221, label %..loopexit2_crit_edge

..loopexit2_crit_edge:                            ; preds = %291
  br label %.loopexit2

.loopexit2:                                       ; preds = %..loopexit2_crit_edge, %209
  %.0112 = phi i32 [ %.018, %..loopexit2_crit_edge ], [ %.018, %209 ]
  br label %296

; <label>:296:                                    ; preds = %.loopexit2, %223
  %.0111 = phi i32 [ %.0112, %.loopexit2 ], [ %.018, %223 ]
  br label %297

; <label>:297:                                    ; preds = %296, %208
  %.019 = phi i32 [ %.0111, %296 ], [ %.0110, %208 ]
  %298 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  %299 = load i32, i32* %298, align 8
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %301, label %359

; <label>:301:                                    ; preds = %297
  %302 = icmp ne [256 x %struct.PTW_tableentry]* %2, null
  br i1 %302, label %359, label %303

; <label>:303:                                    ; preds = %301
  %304 = sext i32 %.019 to i64
  %305 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %306 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %305, i64 0, i64 %304
  %307 = sext i32 %.019 to i64
  %308 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %309 = getelementptr inbounds [64 x i32], [64 x i32]* %308, i64 0, i64 %307
  %310 = load i32, i32* %309, align 4
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %306, i64 0, i64 %311
  %313 = getelementptr inbounds %struct.vote, %struct.vote* %312, i32 0, i32 0
  %314 = load i32, i32* %313, align 8
  %315 = icmp sge i32 %314, 33
  br i1 %315, label %316, label %358

; <label>:316:                                    ; preds = %303
  %317 = sext i32 %.019 to i64
  %318 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %319 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %318, i64 0, i64 %317
  %320 = sext i32 %.019 to i64
  %321 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %322 = getelementptr inbounds [64 x i32], [64 x i32]* %321, i64 0, i64 %320
  %323 = load i32, i32* %322, align 4
  %324 = sext i32 %323 to i64
  %325 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %319, i64 0, i64 %324
  %326 = getelementptr inbounds %struct.vote, %struct.vote* %325, i32 0, i32 0
  %327 = load i32, i32* %326, align 8
  %328 = icmp sle i32 %327, 126
  br i1 %328, label %329, label %358

; <label>:329:                                    ; preds = %316
  %330 = sext i32 %.019 to i64
  %331 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %332 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %331, i64 0, i64 %330
  %333 = sext i32 %.019 to i64
  %334 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %335 = getelementptr inbounds [64 x i32], [64 x i32]* %334, i64 0, i64 %333
  %336 = load i32, i32* %335, align 4
  %337 = sext i32 %336 to i64
  %338 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %332, i64 0, i64 %337
  %339 = getelementptr inbounds %struct.vote, %struct.vote* %338, i32 0, i32 1
  %340 = load i32, i32* %339, align 4
  %341 = icmp sge i32 %340, 150
  br i1 %341, label %343, label %342

; <label>:342:                                    ; preds = %329
  br i1 true, label %343, label %357

; <label>:343:                                    ; preds = %342, %329
  %344 = sext i32 %.019 to i64
  %345 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %346 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %345, i64 0, i64 %344
  %347 = sext i32 %.019 to i64
  %348 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %349 = getelementptr inbounds [64 x i32], [64 x i32]* %348, i64 0, i64 %347
  %350 = load i32, i32* %349, align 4
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %346, i64 0, i64 %351
  %353 = getelementptr inbounds %struct.vote, %struct.vote* %352, i32 0, i32 0
  %354 = load i32, i32* %353, align 8
  %355 = getelementptr [5 x i8], [5 x i8]* @.str.44, i32 0, i32 0
  %356 = call i32 (i8*, ...) @printf(i8* %355, i32 %354)
  br label %357

; <label>:357:                                    ; preds = %343, %342
  %.0116 = phi i32 [ %.019, %343 ], [ %.019, %342 ]
  br label %358

; <label>:358:                                    ; preds = %357, %316, %303
  %.0115 = phi i32 [ %.0116, %357 ], [ %.019, %316 ], [ %.019, %303 ]
  br label %359

; <label>:359:                                    ; preds = %358, %301, %297
  %.0114 = phi i32 [ %.0115, %358 ], [ %.019, %301 ], [ %.019, %297 ]
  %360 = getelementptr [2 x i8], [2 x i8]* @.str.2, i32 0, i32 0
  %361 = call i32 (i8*, ...) @printf(i8* %360)
  br label %362

; <label>:362:                                    ; preds = %359
  %363 = add nsw i32 %.0114, 1
  %364 = icmp sle i32 %363, %0
  br i1 %364, label %112, label %._crit_edge

._crit_edge:                                      ; preds = %362
  br label %365

; <label>:365:                                    ; preds = %._crit_edge, %108
  %366 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %367 = load i32, i32* %366, align 4
  %368 = sub nsw i32 %367, 1
  %369 = icmp slt i32 %0, %368
  br i1 %369, label %370, label %373

; <label>:370:                                    ; preds = %365
  %371 = getelementptr [4 x i8], [4 x i8]* @.str.45, i32 0, i32 0
  %372 = call i32 (i8*, ...) @printf(i8* %371)
  br label %373

; <label>:373:                                    ; preds = %370, %365
  %374 = getelementptr [2 x i8], [2 x i8]* @.str.2, i32 0, i32 0
  %375 = call i32 (i8*, ...) @printf(i8* %374)
  br label %376

; <label>:376:                                    ; preds = %373, %16
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @ioctl(i32, i64, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @check_wep_key(i8*, i32, i32) #0 {
  %4 = alloca [64 x i8], align 16, !track !168
  %5 = alloca [256 x i8], align 16, !track !169
  %6 = icmp sle i32 %2, 0
  br i1 %6, label %7, label %10

; <label>:7:                                      ; preds = %3
  %8 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %9 = load i32, i32* %8, align 4
  br label %10

; <label>:10:                                     ; preds = %7, %3
  %.04 = phi i32 [ %9, %7 ], [ %2, %3 ]
  %11 = load i64, i64* @nb_tried, align 8
  %12 = add nsw i64 %11, 1
  store i64 %12, i64* @nb_tried, align 8
  %13 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  %14 = getelementptr inbounds i8, i8* %13, i64 3
  %15 = sext i32 %.04 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %0, i64 %15, i1 false), !track !170
  %16 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %16, align 8
  %18 = icmp ne %struct._IO_FILE* %17, null
  br i1 %18, label %19, label %23

; <label>:19:                                     ; preds = %10
  %20 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 3
  %21 = load i64, i64* %20, align 8
  %22 = trunc i64 %21 to i32
  br label %23

; <label>:23:                                     ; preds = %19, %10
  %.01 = phi i32 [ %22, %19 ], [ 32, %10 ]
  %24 = icmp slt i32 %.01, 4
  br i1 %24, label %25, label %26

; <label>:25:                                     ; preds = %23
  br label %26

; <label>:26:                                     ; preds = %25, %23
  %.1 = phi i32 [ 4, %25 ], [ %.01, %23 ]
  %27 = icmp sgt i32 %.1, 32
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %26
  br label %29

; <label>:29:                                     ; preds = %28, %26
  %.2 = phi i32 [ 32, %28 ], [ %.1, %26 ]
  %30 = icmp slt i32 0, %.2
  br i1 %30, label %.lr.ph, label %177

.lr.ph:                                           ; preds = %29
  %31 = zext i32 %.2 to i64
  br label %32

; <label>:32:                                     ; preds = %.lr.ph, %175
  %indvars.iv13 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next14, %175 ]
  %.0212 = phi i32 [ 0, %.lr.ph ], [ %.13, %175 ]
  call void @unroll_loop(i32 12)
  %33 = mul nuw nsw i64 5, %indvars.iv13
  %34 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* @mx_ivb) #9
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  %36 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %33
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %35, i8* align 1 %38, i64 3, i1 false), !track !171
  %39 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i32 0, i32 0
  %40 = getelementptr [256 x i8], [256 x i8]* @R, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %39, i8* align 16 %40, i64 256, i1 false), !track !172
  br label %41

; <label>:41:                                     ; preds = %32, %63
  %indvars.iv = phi i64 [ 0, %32 ], [ %indvars.iv.next, %63 ]
  %.0610 = phi i32 [ 0, %32 ], [ %54, %63 ]
  call void @unroll_loop(i32 13)
  %42 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %indvars.iv
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = add nsw i32 %.0610, %44
  %46 = add nsw i32 3, %.04
  %47 = trunc i64 %indvars.iv to i32
  %48 = srem i32 %47, %46
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add nsw i32 %45, %52
  %54 = and i32 %53, 255
  %55 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %indvars.iv
  %56 = load i8, i8* %55, align 1
  %57 = sext i32 %54 to i64
  %58 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %indvars.iv
  store i8 %59, i8* %60, align 1
  %61 = sext i32 %54 to i64
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %61
  store i8 %56, i8* %62, align 1
  br label %63

; <label>:63:                                     ; preds = %41
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %41, label %64

; <label>:64:                                     ; preds = %63
  %65 = sext i32 1 to i64
  %66 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = add nsw i32 0, %68
  %70 = and i32 %69, 255
  %71 = sext i32 1 to i64
  %72 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = sext i32 %70 to i64
  %75 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = sext i32 1 to i64
  %78 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %77
  store i8 %76, i8* %78, align 1
  %79 = sext i32 %70 to i64
  %80 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %79
  store i8 %73, i8* %80, align 1
  %81 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  %82 = load i8*, i8** %81, align 8
  %83 = add nuw nsw i64 %33, 3
  %84 = getelementptr inbounds i8, i8* %82, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = sext i32 1 to i64
  %88 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = sext i32 %70 to i64
  %92 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = add nsw i32 %90, %94
  %96 = and i32 %95, 255
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = xor i32 %86, %100
  %102 = trunc i32 %101 to i8
  %103 = sext i32 2 to i64
  %104 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = add nsw i32 %70, %106
  %108 = and i32 %107, 255
  %109 = sext i32 2 to i64
  %110 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = sext i32 %108 to i64
  %113 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = sext i32 2 to i64
  %116 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %115
  store i8 %114, i8* %116, align 1
  %117 = sext i32 %108 to i64
  %118 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %117
  store i8 %111, i8* %118, align 1
  %119 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  %120 = load i8*, i8** %119, align 8
  %121 = add nuw nsw i64 %33, 4
  %122 = getelementptr inbounds i8, i8* %120, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = sext i32 2 to i64
  %126 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = sext i32 %108 to i64
  %130 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %129
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = add nsw i32 %128, %132
  %134 = and i32 %133, 255
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = xor i32 %124, %138
  %140 = trunc i32 %139 to i8
  %141 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @mx_ivb) #9
  %142 = zext i8 %102 to i32
  %143 = icmp ne i32 %142, 170
  br i1 %143, label %147, label %144

; <label>:144:                                    ; preds = %64
  %145 = zext i8 %140 to i32
  %146 = icmp ne i32 %145, 170
  br i1 %146, label %147, label %167

; <label>:147:                                    ; preds = %144, %64
  %148 = zext i8 %102 to i32
  %149 = icmp ne i32 %148, 224
  br i1 %149, label %153, label %150

; <label>:150:                                    ; preds = %147
  %151 = zext i8 %140 to i32
  %152 = icmp ne i32 %151, 224
  br i1 %152, label %153, label %167

; <label>:153:                                    ; preds = %150, %147
  %154 = zext i8 %102 to i32
  %155 = icmp ne i32 %154, 66
  br i1 %155, label %159, label %156

; <label>:156:                                    ; preds = %153
  %157 = zext i8 %140 to i32
  %158 = icmp ne i32 %157, 66
  br i1 %158, label %159, label %167

; <label>:159:                                    ; preds = %156, %153
  %160 = zext i8 %102 to i32
  %161 = icmp ne i32 %160, 2
  br i1 %161, label %165, label %162

; <label>:162:                                    ; preds = %159
  %163 = zext i8 %140 to i32
  %164 = icmp ne i32 %163, 170
  br i1 %164, label %165, label %167

; <label>:165:                                    ; preds = %162, %159
  %166 = add nsw i32 %.0212, 1
  br label %167

; <label>:167:                                    ; preds = %165, %162, %156, %150, %144
  %.13 = phi i32 [ %166, %165 ], [ %.0212, %162 ], [ %.0212, %156 ], [ %.0212, %150 ], [ %.0212, %144 ]
  %168 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 29
  %169 = load i32, i32* %168, align 4
  %170 = mul nsw i32 %.2, %169
  %171 = sdiv i32 %170, 100
  %172 = icmp sgt i32 %.13, %171
  br i1 %172, label %173, label %174

; <label>:173:                                    ; preds = %167
  br label %182

; <label>:174:                                    ; preds = %167
  br label %175

; <label>:175:                                    ; preds = %174
  %indvars.iv.next14 = add nuw nsw i64 %indvars.iv13, 1
  %176 = icmp ult i64 %indvars.iv.next14, %31
  br i1 %176, label %32, label %._crit_edge

._crit_edge:                                      ; preds = %175
  %split = phi i32 [ %.13, %175 ]
  br label %177

; <label>:177:                                    ; preds = %._crit_edge, %29
  %.02.lcssa = phi i32 [ %split, %._crit_edge ], [ 0, %29 ]
  %178 = sub nsw i32 %.2, %.02.lcssa
  %179 = mul nsw i32 %178, 100
  %180 = sdiv i32 %179, %.2
  %181 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 29
  store i32 %180, i32* %181, align 4
  call void @key_found(i8* %0, i32 %.04, i32 %1)
  br label %182

; <label>:182:                                    ; preds = %177, %173
  %.0 = phi i32 [ 1, %173 ], [ 0, %177 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @key_found(i8*, i32, i32) #0 {
  %4 = icmp slt i32 0, %1
  br i1 %4, label %.lr.ph26, label %25

.lr.ph26:                                         ; preds = %3
  %5 = zext i32 %1 to i64
  br label %6

; <label>:6:                                      ; preds = %.lr.ph26, %24
  %indvars.iv28 = phi i64 [ 0, %.lr.ph26 ], [ %indvars.iv.next29, %24 ]
  %.024 = phi i32 [ 0, %.lr.ph26 ], [ %.1, %24 ]
  call void @unroll_loop(i32 0)
  %7 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv28
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %21, label %11

; <label>:11:                                     ; preds = %6
  %12 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv28
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = icmp sge i32 %14, 32
  br i1 %15, label %16, label %23

; <label>:16:                                     ; preds = %11
  %17 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv28
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = icmp slt i32 %19, 127
  br i1 %20, label %21, label %23

; <label>:21:                                     ; preds = %16, %6
  %22 = add nsw i32 %.024, 1
  br label %23

; <label>:23:                                     ; preds = %21, %16, %11
  %.1 = phi i32 [ %22, %21 ], [ %.024, %16 ], [ %.024, %11 ]
  br label %24

; <label>:24:                                     ; preds = %23
  %indvars.iv.next29 = add nuw nsw i64 %indvars.iv28, 1
  %exitcond3 = icmp ne i64 %indvars.iv.next29, %5
  br i1 %exitcond3, label %6, label %._crit_edge27

._crit_edge27:                                    ; preds = %24
  %split = phi i32 [ %.1, %24 ]
  br label %25

; <label>:25:                                     ; preds = %._crit_edge27, %3
  %.0.lcssa = phi i32 [ %split, %._crit_edge27 ], [ 0, %3 ]
  store i32 1, i32* @wepkey_crack_success, align 4
  %26 = sext i32 %1 to i64
  %27 = getelementptr [64 x i8], [64 x i8]* @bf_wepkey, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %27, i8* align 1 %0, i64 %26, i1 false), !track !173
  %28 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %29 = load i32, i32* %28, align 8
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %34

; <label>:31:                                     ; preds = %25
  %32 = getelementptr [14 x i8], [14 x i8]* @.str.150, i32 0, i32 0
  %33 = call i32 (i8*, ...) @printf(i8* %32)
  br label %62

; <label>:34:                                     ; preds = %25
  %35 = icmp ne i32 %2, -1
  br i1 %35, label %36, label %38

; <label>:36:                                     ; preds = %34
  %37 = sub nsw i32 %2, 1
  call void @show_wep_stats(i32 %37, i32 1, [256 x %struct.PTW_tableentry]* null, i32* null, i32* null, i32 0)
  br label %38

; <label>:38:                                     ; preds = %36, %34
  %39 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %40 = load i32, i32* %39, align 4
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %45

; <label>:42:                                     ; preds = %38
  %43 = getelementptr [8 x i8], [8 x i8]* @.str.62, i32 0, i32 0
  %44 = call i32 (i8*, ...) @printf(i8* %43)
  br label %45

; <label>:45:                                     ; preds = %42, %38
  %46 = mul nsw i32 %1, 3
  %47 = sub nsw i32 66, %46
  %48 = sdiv i32 %47, 2
  %49 = mul nsw i32 100, %.0.lcssa
  %50 = mul nsw i32 75, %1
  %51 = icmp sgt i32 %49, %50
  br i1 %51, label %52, label %56

; <label>:52:                                     ; preds = %45
  %53 = add nsw i32 %1, 4
  %54 = sdiv i32 %53, 2
  %55 = sub nsw i32 %48, %54
  br label %56

; <label>:56:                                     ; preds = %52, %45
  %.01 = phi i32 [ %55, %52 ], [ %48, %45 ]
  %57 = icmp sle i32 %.01, 0
  br i1 %57, label %58, label %59

; <label>:58:                                     ; preds = %56
  br label %59

; <label>:59:                                     ; preds = %58, %56
  %.12 = phi i32 [ 0, %58 ], [ %.01, %56 ]
  %60 = getelementptr [22 x i8], [22 x i8]* @.str.151, i32 0, i32 0
  %61 = call i32 (i8*, ...) @printf(i8* %60, i32 %.12)
  br label %62

; <label>:62:                                     ; preds = %59, %31
  %.05 = phi i32 [ %.0.lcssa, %59 ], [ %.0.lcssa, %31 ]
  %63 = sub nsw i32 %1, 1
  %64 = icmp slt i32 0, %63
  br i1 %64, label %.lr.ph17, label %78

.lr.ph17:                                         ; preds = %62
  %65 = add i32 %1, -2
  %66 = add i32 %1, -1
  %67 = zext i32 %66 to i64
  br label %68

; <label>:68:                                     ; preds = %.lr.ph17, %74
  %indvars.iv19 = phi i64 [ 0, %.lr.ph17 ], [ %indvars.iv.next20, %74 ]
  call void @unroll_loop(i32 1)
  %69 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv19
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = getelementptr [6 x i8], [6 x i8]* @.str.152, i32 0, i32 0
  %73 = call i32 (i8*, ...) @printf(i8* %72, i32 %71)
  br label %74

; <label>:74:                                     ; preds = %68
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 1
  %exitcond2 = icmp ne i64 %indvars.iv.next20, %67
  br i1 %exitcond2, label %68, label %._crit_edge18

._crit_edge18:                                    ; preds = %74
  %75 = zext i32 %65 to i64
  %76 = add i64 %75, 1
  %77 = trunc i64 %76 to i32
  br label %78

; <label>:78:                                     ; preds = %._crit_edge18, %62
  %.14.lcssa = phi i32 [ %77, %._crit_edge18 ], [ 0, %62 ]
  %79 = sext i32 %.14.lcssa to i64
  %80 = getelementptr inbounds i8, i8* %0, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = getelementptr [8 x i8], [8 x i8]* @.str.153, i32 0, i32 0
  %84 = call i32 (i8*, ...) @printf(i8* %83, i32 %82)
  %85 = icmp eq i32 %.05, %1
  br i1 %85, label %86, label %119

; <label>:86:                                     ; preds = %78
  %87 = getelementptr [9 x i8], [9 x i8]* @.str.154, i32 0, i32 0
  %88 = call i32 (i8*, ...) @printf(i8* %87)
  %89 = icmp slt i32 0, %1
  br i1 %89, label %.lr.ph11, label %116

.lr.ph11:                                         ; preds = %86
  %90 = sext i32 %1 to i64
  br label %91

; <label>:91:                                     ; preds = %.lr.ph11, %115
  %indvars.iv13 = phi i64 [ 0, %.lr.ph11 ], [ %indvars.iv.next14, %115 ]
  call void @unroll_loop(i32 2)
  %92 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv13
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = icmp sgt i32 %94, 31
  br i1 %95, label %96, label %101

; <label>:96:                                     ; preds = %91
  %97 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv13
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = icmp slt i32 %99, 127
  br i1 %100, label %106, label %101

; <label>:101:                                    ; preds = %96, %91
  %102 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv13
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = icmp sgt i32 %104, 160
  br i1 %105, label %106, label %110

; <label>:106:                                    ; preds = %101, %96
  %107 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv13
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  br label %111

; <label>:110:                                    ; preds = %101
  br label %111

; <label>:111:                                    ; preds = %110, %106
  %112 = phi i32 [ %109, %106 ], [ 46, %110 ]
  %113 = getelementptr [3 x i8], [3 x i8]* @.str.155, i32 0, i32 0
  %114 = call i32 (i8*, ...) @printf(i8* %113, i32 %112)
  br label %115

; <label>:115:                                    ; preds = %111
  %indvars.iv.next14 = add nuw nsw i64 %indvars.iv13, 1
  %exitcond = icmp ne i64 %indvars.iv.next14, %90
  br i1 %exitcond, label %91, label %._crit_edge12

._crit_edge12:                                    ; preds = %115
  br label %116

; <label>:116:                                    ; preds = %._crit_edge12, %86
  %117 = getelementptr [3 x i8], [3 x i8]* @.str.156, i32 0, i32 0
  %118 = call i32 (i8*, ...) @printf(i8* %117)
  br label %119

; <label>:119:                                    ; preds = %116, %78
  %120 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %121 = load i32, i32* %120, align 4
  %122 = icmp ne i32 %121, 0
  br i1 %122, label %123, label %126

; <label>:123:                                    ; preds = %119
  %124 = getelementptr [9 x i8], [9 x i8]* @.str.36, i32 0, i32 0
  %125 = call i32 (i8*, ...) @printf(i8* %124)
  br label %126

; <label>:126:                                    ; preds = %123, %119
  %127 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 29
  %128 = load i32, i32* %127, align 4
  %129 = getelementptr [29 x i8], [29 x i8]* @.str.157, i32 0, i32 0
  %130 = call i32 (i8*, ...) @printf(i8* %129, i32 %128)
  %131 = getelementptr [2 x i8], [2 x i8]* @.str.2, i32 0, i32 0
  %132 = call i32 (i8*, ...) @printf(i8* %131)
  %133 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 42
  %134 = load i8*, i8** %133, align 8
  %135 = icmp ne i8* %134, null
  br i1 %135, label %136, label %155

; <label>:136:                                    ; preds = %126
  %137 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 42
  %138 = load i8*, i8** %137, align 8
  %139 = getelementptr [2 x i8], [2 x i8]* @.str.64, i32 0, i32 0
  %140 = call %struct._IO_FILE* @fopen64(i8* %138, i8* %139), !track !174
  %141 = icmp ne %struct._IO_FILE* %140, null
  br i1 %141, label %142, label %154

; <label>:142:                                    ; preds = %136
  %143 = icmp slt i32 0, %1
  br i1 %143, label %.lr.ph, label %152

.lr.ph:                                           ; preds = %142
  %144 = zext i32 %1 to i64
  br label %145

; <label>:145:                                    ; preds = %.lr.ph, %151
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %151 ]
  call void @unroll_loop(i32 3)
  %146 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = getelementptr [5 x i8], [5 x i8]* @.str.158, i32 0, i32 0
  %150 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %140, i8* %149, i32 %148)
  br label %151

; <label>:151:                                    ; preds = %145
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next, %144
  br i1 %exitcond1, label %145, label %._crit_edge

._crit_edge:                                      ; preds = %151
  br label %152

; <label>:152:                                    ; preds = %._crit_edge, %142
  %153 = call i32 @fclose(%struct._IO_FILE* %140)
  br label %154

; <label>:154:                                    ; preds = %152, %136
  br label %155

; <label>:155:                                    ; preds = %154, %126
  ret void
}

declare dso_local %struct._IO_FILE* @fopen64(i8*, i8*) #1

declare dso_local i32 @fclose(%struct._IO_FILE*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @cmp_votes(i8*, i8*) #0 {
  %3 = bitcast i8* %0 to %struct.vote*
  %4 = getelementptr inbounds %struct.vote, %struct.vote* %3, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = bitcast i8* %1 to %struct.vote*
  %7 = getelementptr inbounds %struct.vote, %struct.vote* %6, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %5, %8
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %2
  br label %21

; <label>:11:                                     ; preds = %2
  %12 = bitcast i8* %0 to %struct.vote*
  %13 = getelementptr inbounds %struct.vote, %struct.vote* %12, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = bitcast i8* %1 to %struct.vote*
  %16 = getelementptr inbounds %struct.vote, %struct.vote* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp sgt i32 %14, %17
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %11
  br label %21

; <label>:20:                                     ; preds = %11
  br label %21

; <label>:21:                                     ; preds = %20, %19, %10
  %.0 = phi i32 [ 1, %10 ], [ -1, %19 ], [ 0, %20 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @calc_poll(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [17 x [256 x i32]], align 16
  store i32 %0, i32* %2, align 4
  %4 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 30
  %5 = bitcast [17 x i32]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 68, i1 false)
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 0, %7
  br i1 %8, label %.lr.ph42, label %26

.lr.ph42:                                         ; preds = %1
  br label %9

; <label>:9:                                      ; preds = %.lr.ph42, %21
  %indvars.iv44 = phi i64 [ 0, %.lr.ph42 ], [ %indvars.iv.next45, %21 ]
  call void @unroll_loop(i32 14)
  %10 = getelementptr inbounds [256 x [2 x i32]], [256 x [2 x i32]]* @mc_pipe, i64 0, i64 %indvars.iv44
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = bitcast i32* %2 to i8*
  %14 = sext i32 4 to i64
  %15 = call i32 @safe_write(i32 %12, i8* %13, i64 %14)
  %16 = icmp ne i32 %15, 4
  br i1 %16, label %17, label %20

; <label>:17:                                     ; preds = %9
  %18 = getelementptr [13 x i8], [13 x i8]* @.str.28, i32 0, i32 0
  call void @perror(i8* %18)
  %19 = call i32 @kill(i32 0, i32 15) #9
  call void @_exit(i32 1) #12
  br label %UnifiedUnreachableBlock

; <label>:20:                                     ; preds = %9
  br label %21

; <label>:21:                                     ; preds = %20
  %indvars.iv.next45 = add nuw nsw i64 %indvars.iv44, 1
  %22 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = icmp slt i64 %indvars.iv.next45, %24
  br i1 %25, label %9, label %._crit_edge43

._crit_edge43:                                    ; preds = %21
  br label %26

; <label>:26:                                     ; preds = %._crit_edge43, %1
  br label %27

; <label>:27:                                     ; preds = %26, %41
  %indvars.iv37 = phi i64 [ 0, %26 ], [ %indvars.iv.next38, %41 ]
  call void @unroll_loop(i32 15)
  %28 = load i32, i32* %2, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %31 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %30, i64 0, i64 %29
  %32 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %31, i64 0, i64 %indvars.iv37
  %33 = getelementptr inbounds %struct.vote, %struct.vote* %32, i32 0, i32 0
  %34 = trunc i64 %indvars.iv37 to i32
  store i32 %34, i32* %33, align 8
  %35 = load i32, i32* %2, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %38 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %37, i64 0, i64 %36
  %39 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %38, i64 0, i64 %indvars.iv37
  %40 = getelementptr inbounds %struct.vote, %struct.vote* %39, i32 0, i32 1
  store i32 0, i32* %40, align 4
  br label %41

; <label>:41:                                     ; preds = %27
  %indvars.iv.next38 = add nuw nsw i64 %indvars.iv37, 1
  %exitcond39 = icmp ne i64 %indvars.iv.next38, 256
  br i1 %exitcond39, label %27, label %42

; <label>:42:                                     ; preds = %41
  %43 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %44 = load i32, i32* %43, align 4
  %45 = icmp slt i32 0, %44
  br i1 %45, label %.lr.ph, label %95

.lr.ph:                                           ; preds = %42
  br label %46

; <label>:46:                                     ; preds = %.lr.ph, %90
  %indvars.iv34 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next35, %90 ]
  call void @unroll_loop(i32 16)
  %47 = getelementptr inbounds [256 x [2 x i32]], [256 x [2 x i32]]* @cm_pipe, i64 0, i64 %indvars.iv34
  %48 = getelementptr inbounds [2 x i32], [2 x i32]* %47, i64 0, i64 0
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %3, i32 0, i32 0
  %51 = bitcast [256 x i32]* %50 to i8*
  %52 = sext i32 17408 to i64
  %53 = call i32 @safe_read(i32 %49, i8* %51, i64 %52)
  %54 = icmp ne i32 %53, 17408
  br i1 %54, label %55, label %58

; <label>:55:                                     ; preds = %46
  %56 = getelementptr [12 x i8], [12 x i8]* @.str.27, i32 0, i32 0
  call void @perror(i8* %56)
  %57 = call i32 @kill(i32 0, i32 15) #9
  call void @_exit(i32 1) #12
  br label %UnifiedUnreachableBlock

; <label>:58:                                     ; preds = %46
  %59 = getelementptr inbounds [17 x [256 x i32]], [17 x [256 x i32]]* %3, i32 0, i32 0
  %60 = bitcast [256 x i32]* %59 to i32*
  br label %61

; <label>:61:                                     ; preds = %58, %88
  %indvars.iv30 = phi i64 [ 0, %58 ], [ %indvars.iv.next31, %88 ]
  %.0428 = phi i32* [ %60, %58 ], [ %scevgep, %88 ]
  br label %62

; <label>:62:                                     ; preds = %61, %85
  %indvars.iv25 = phi i64 [ 0, %61 ], [ %indvars.iv.next26, %85 ]
  %.1523 = phi i32* [ %.0428, %61 ], [ %86, %85 ]
  call void @unroll_loop(i32 17)
  %63 = load i32, i32* %.1523, align 4
  %64 = getelementptr inbounds [17 x i32], [17 x i32]* @K_COEFF, i64 0, i64 %indvars.iv30
  %65 = load i32, i32* %64, align 4
  %66 = mul nsw i32 %63, %65
  %67 = load i32, i32* %2, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %70 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %69, i64 0, i64 %68
  %71 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %70, i64 0, i64 %indvars.iv25
  %72 = getelementptr inbounds %struct.vote, %struct.vote* %71, i32 0, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = add nsw i32 %73, %66
  store i32 %74, i32* %72, align 4
  %75 = getelementptr inbounds [17 x i32], [17 x i32]* @K_COEFF, i64 0, i64 %indvars.iv30
  %76 = load i32, i32* %75, align 4
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %78, label %84

; <label>:78:                                     ; preds = %62
  %79 = load i32, i32* %.1523, align 4
  %80 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 30
  %81 = getelementptr inbounds [17 x i32], [17 x i32]* %80, i64 0, i64 %indvars.iv30
  %82 = load i32, i32* %81, align 4
  %83 = add nsw i32 %82, %79
  store i32 %83, i32* %81, align 4
  br label %84

; <label>:84:                                     ; preds = %78, %62
  br label %85

; <label>:85:                                     ; preds = %84
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 1
  %86 = getelementptr inbounds i32, i32* %.1523, i32 1
  %exitcond27 = icmp ne i64 %indvars.iv.next26, 256
  br i1 %exitcond27, label %62, label %87

; <label>:87:                                     ; preds = %85
  %scevgep = getelementptr i32, i32* %.0428, i64 256
  br label %88

; <label>:88:                                     ; preds = %87
  %indvars.iv.next31 = add nuw nsw i64 %indvars.iv30, 1
  %exitcond32 = icmp ne i64 %indvars.iv.next31, 17
  br i1 %exitcond32, label %61, label %89

; <label>:89:                                     ; preds = %88
  br label %90

; <label>:90:                                     ; preds = %89
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1
  %91 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %92 = load i32, i32* %91, align 4
  %93 = sext i32 %92 to i64
  %94 = icmp slt i64 %indvars.iv.next35, %93
  br i1 %94, label %46, label %._crit_edge

._crit_edge:                                      ; preds = %90
  br label %95

; <label>:95:                                     ; preds = %._crit_edge, %42
  %96 = load i32, i32* %2, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 8
  %99 = getelementptr inbounds [64 x i32], [64 x i32]* %98, i64 0, i64 %97
  %100 = load i32, i32* %99, align 4
  %101 = icmp ne i32 %100, 0
  br i1 %101, label %102, label %115

; <label>:102:                                    ; preds = %95
  %103 = load i32, i32* %2, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %106 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %105, i64 0, i64 %104
  %107 = load i32, i32* %2, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 7
  %110 = getelementptr inbounds [64 x i8], [64 x i8]* %109, i64 0, i64 %108
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i64
  %113 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %106, i64 0, i64 %112
  %114 = getelementptr inbounds %struct.vote, %struct.vote* %113, i32 0, i32 1
  store i32 32767, i32* %114, align 4
  br label %115

; <label>:115:                                    ; preds = %102, %95
  %116 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 15
  %117 = load i32, i32* %116, align 8
  %118 = icmp ne i32 %117, 0
  br i1 %118, label %119, label %138

; <label>:119:                                    ; preds = %115
  br label %120

; <label>:120:                                    ; preds = %119, %127
  %indvars.iv20 = phi i64 [ 1, %119 ], [ %indvars.iv.next21, %127 ]
  call void @unroll_loop(i32 18)
  %121 = load i32, i32* %2, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %124 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %123, i64 0, i64 %122
  %125 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %124, i64 0, i64 %indvars.iv20
  %126 = getelementptr inbounds %struct.vote, %struct.vote* %125, i32 0, i32 1
  store i32 -1, i32* %126, align 4
  br label %127

; <label>:127:                                    ; preds = %120
  %indvars.iv.next21 = add nuw nsw i64 %indvars.iv20, 1
  %exitcond22 = icmp ne i64 %indvars.iv.next21, 32
  br i1 %exitcond22, label %120, label %128

; <label>:128:                                    ; preds = %127
  br label %129

; <label>:129:                                    ; preds = %128, %136
  %indvars.iv16 = phi i64 [ 127, %128 ], [ %indvars.iv.next17, %136 ]
  call void @unroll_loop(i32 19)
  %130 = load i32, i32* %2, align 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %133 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %132, i64 0, i64 %131
  %134 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %133, i64 0, i64 %indvars.iv16
  %135 = getelementptr inbounds %struct.vote, %struct.vote* %134, i32 0, i32 1
  store i32 -1, i32* %135, align 4
  br label %136

; <label>:136:                                    ; preds = %129
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 1
  %exitcond18 = icmp ne i64 %indvars.iv.next17, 256
  br i1 %exitcond18, label %129, label %137

; <label>:137:                                    ; preds = %136
  br label %138

; <label>:138:                                    ; preds = %137, %115
  %139 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 14
  %140 = load i32, i32* %139, align 4
  %141 = icmp ne i32 %140, 0
  br i1 %141, label %142, label %161

; <label>:142:                                    ; preds = %138
  br label %143

; <label>:143:                                    ; preds = %142, %150
  %indvars.iv12 = phi i64 [ 0, %142 ], [ %indvars.iv.next13, %150 ]
  call void @unroll_loop(i32 20)
  %144 = load i32, i32* %2, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %147 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %146, i64 0, i64 %145
  %148 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %147, i64 0, i64 %indvars.iv12
  %149 = getelementptr inbounds %struct.vote, %struct.vote* %148, i32 0, i32 1
  store i32 -1, i32* %149, align 4
  br label %150

; <label>:150:                                    ; preds = %143
  %indvars.iv.next13 = add nuw nsw i64 %indvars.iv12, 1
  %exitcond14 = icmp ne i64 %indvars.iv.next13, 48
  br i1 %exitcond14, label %143, label %151

; <label>:151:                                    ; preds = %150
  br label %152

; <label>:152:                                    ; preds = %151, %159
  %indvars.iv8 = phi i64 [ 58, %151 ], [ %indvars.iv.next9, %159 ]
  call void @unroll_loop(i32 21)
  %153 = load i32, i32* %2, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %156 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %155, i64 0, i64 %154
  %157 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %156, i64 0, i64 %indvars.iv8
  %158 = getelementptr inbounds %struct.vote, %struct.vote* %157, i32 0, i32 1
  store i32 -1, i32* %158, align 4
  br label %159

; <label>:159:                                    ; preds = %152
  %indvars.iv.next9 = add nuw nsw i64 %indvars.iv8, 1
  %exitcond10 = icmp ne i64 %indvars.iv.next9, 256
  br i1 %exitcond10, label %152, label %160

; <label>:160:                                    ; preds = %159
  br label %161

; <label>:161:                                    ; preds = %160, %138
  %162 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 16
  %163 = load i32, i32* %162, align 4
  %164 = icmp ne i32 %163, 0
  br i1 %164, label %165, label %182

; <label>:165:                                    ; preds = %161
  br label %166

; <label>:166:                                    ; preds = %165, %180
  %indvars.iv = phi i64 [ 1, %165 ], [ %indvars.iv.next, %180 ]
  call void @unroll_loop(i32 22)
  %167 = icmp ugt i64 %indvars.iv, 153
  br i1 %167, label %172, label %168

; <label>:168:                                    ; preds = %166
  %169 = trunc i64 %indvars.iv to i32
  %170 = and i32 %169, 15
  %171 = icmp sgt i32 %170, 9
  br i1 %171, label %172, label %179

; <label>:172:                                    ; preds = %168, %166
  %173 = load i32, i32* %2, align 4
  %174 = sext i32 %173 to i64
  %175 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %176 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %175, i64 0, i64 %174
  %177 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %176, i64 0, i64 %indvars.iv
  %178 = getelementptr inbounds %struct.vote, %struct.vote* %177, i32 0, i32 1
  store i32 -1, i32* %178, align 4
  br label %179

; <label>:179:                                    ; preds = %172, %168
  br label %180

; <label>:180:                                    ; preds = %179
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %166, label %181

; <label>:181:                                    ; preds = %180
  br label %182

; <label>:182:                                    ; preds = %181, %161
  %183 = load i32, i32* %2, align 4
  %184 = sext i32 %183 to i64
  %185 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %186 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %185, i64 0, i64 %184
  %187 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %186, i32 0, i32 0
  %188 = bitcast %struct.vote* %187 to i8*
  call void @qsort(i8* %188, i64 256, i64 8, i32 (i8*, i8*)* @cmp_votes)
  ret i32 0

UnifiedUnreachableBlock:                          ; preds = %55, %17
  unreachable
}

declare dso_local void @qsort(i8*, i64, i64, i32 (i8*, i8*)*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @update_ivbuf() #0 {
  %1 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 4
  store i64 0, i64* %1, align 8
  %2 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 2
  store i32 0, i32* %2, align 8
  %3 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  %4 = icmp ne %struct.AP_info* %3, null
  br i1 %4, label %.lr.ph5, label %28

.lr.ph5:                                          ; preds = %0
  br label %5

; <label>:5:                                      ; preds = %.lr.ph5, %24
  %.013 = phi %struct.AP_info* [ %3, %.lr.ph5 ], [ %26, %24 ]
  call void @unroll_loop(i32 60)
  %6 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.013, i32 0, i32 10
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %24

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.013, i32 0, i32 12
  %11 = load i32, i32* %10, align 8
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %24

; <label>:13:                                     ; preds = %9
  %14 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.013, i32 0, i32 7
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 4
  %17 = load i64, i64* %16, align 8
  %18 = add nsw i64 %17, %15
  %19 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 4
  store i64 %18, i64* %19, align 8
  %20 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = add nsw i32 %21, 1
  %23 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 2
  store i32 %22, i32* %23, align 8
  br label %24

; <label>:24:                                     ; preds = %13, %9, %5
  %25 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.013, i32 0, i32 0
  %26 = load %struct.AP_info*, %struct.AP_info** %25, align 8
  %27 = icmp ne %struct.AP_info* %26, null
  br i1 %27, label %5, label %._crit_edge6

._crit_edge6:                                     ; preds = %24
  br label %28

; <label>:28:                                     ; preds = %._crit_edge6, %0
  %29 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 3
  %30 = load i64, i64* %29, align 8
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %54, label %32

; <label>:32:                                     ; preds = %28
  %33 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %36, label %43

; <label>:36:                                     ; preds = %32
  %37 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 4
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 3
  %40 = load i64, i64* %39, align 8
  %41 = sub nsw i64 %38, %40
  %42 = icmp sgt i64 %41, 20000
  br i1 %42, label %54, label %43

; <label>:43:                                     ; preds = %36, %32
  %44 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %45 = load i32, i32* %44, align 4
  %46 = icmp sge i32 %45, 13
  br i1 %46, label %47, label %115

; <label>:47:                                     ; preds = %43
  %48 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 4
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 3
  %51 = load i64, i64* %50, align 8
  %52 = sub nsw i64 %49, %51
  %53 = icmp sgt i64 %52, 40000
  br i1 %53, label %54, label %115

; <label>:54:                                     ; preds = %47, %36, %28
  %55 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* @mx_ivb) #9
  %56 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  %57 = load i8*, i8** %56, align 8
  %58 = icmp ne i8* %57, null
  br i1 %58, label %59, label %63

; <label>:59:                                     ; preds = %54
  %60 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  %61 = load i8*, i8** %60, align 8
  call void @free(i8* %61) #9
  %62 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  store i8* null, i8** %62, align 8
  br label %63

; <label>:63:                                     ; preds = %59, %54
  %64 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 3
  store i64 0, i64* %64, align 8
  %65 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  %66 = icmp ne %struct.AP_info* %65, null
  br i1 %66, label %.lr.ph, label %113

.lr.ph:                                           ; preds = %63
  br label %67

; <label>:67:                                     ; preds = %.lr.ph, %109
  %.12 = phi %struct.AP_info* [ %65, %.lr.ph ], [ %111, %109 ]
  call void @unroll_loop(i32 61)
  %68 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.12, i32 0, i32 10
  %69 = load i32, i32* %68, align 8
  %70 = icmp eq i32 %69, 2
  br i1 %70, label %71, label %109

; <label>:71:                                     ; preds = %67
  %72 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.12, i32 0, i32 12
  %73 = load i32, i32* %72, align 8
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %75, label %109

; <label>:75:                                     ; preds = %71
  %76 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.12, i32 0, i32 7
  %77 = load i64, i64* %76, align 8
  %78 = trunc i64 %77 to i32
  %79 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 3
  %82 = load i64, i64* %81, align 8
  %83 = sext i32 %78 to i64
  %84 = add nsw i64 %82, %83
  %85 = mul nsw i64 %84, 5
  %86 = call i8* @realloc(i8* %80, i64 %85) #9, !track !175
  %87 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  store i8* %86, i8** %87, align 8
  %88 = icmp eq i8* %86, null
  br i1 %88, label %89, label %93

; <label>:89:                                     ; preds = %75
  %90 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @mx_ivb) #9
  %91 = getelementptr [15 x i8], [15 x i8]* @.str.25, i32 0, i32 0
  call void @perror(i8* %91)
  %92 = call i32 @kill(i32 0, i32 15) #9
  call void @_exit(i32 1) #12
  unreachable

; <label>:93:                                     ; preds = %75
  %94 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 1
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 3
  %97 = load i64, i64* %96, align 8
  %98 = mul nsw i64 %97, 5
  %99 = getelementptr inbounds i8, i8* %95, i64 %98
  %100 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.12, i32 0, i32 4
  %101 = load i8*, i8** %100, align 8
  %102 = mul nsw i32 5, %78
  %103 = sext i32 %102 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %99, i8* align 1 %101, i64 %103, i1 false), !track !176
  %104 = sext i32 %78 to i64
  %105 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 3
  %106 = load i64, i64* %105, align 8
  %107 = add nsw i64 %106, %104
  %108 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 3
  store i64 %107, i64* %108, align 8
  br label %109

; <label>:109:                                    ; preds = %93, %71, %67
  %110 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.12, i32 0, i32 0
  %111 = load %struct.AP_info*, %struct.AP_info** %110, align 8
  %112 = icmp ne %struct.AP_info* %111, null
  br i1 %112, label %67, label %._crit_edge

._crit_edge:                                      ; preds = %109
  br label %113

; <label>:113:                                    ; preds = %._crit_edge, %63
  %114 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @mx_ivb) #9
  br label %116

; <label>:115:                                    ; preds = %47, %43
  br label %116

; <label>:116:                                    ; preds = %115, %113
  %.0 = phi i32 [ 2, %113 ], [ 0, %115 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @remove_votes(i32, i8 zeroext) #0 {
  br label %3

; <label>:3:                                      ; preds = %2, %69
  %indvars.iv = phi i64 [ 0, %2 ], [ %indvars.iv.next, %69 ]
  %.03 = phi i32 [ 0, %2 ], [ %.1, %69 ]
  call void @unroll_loop(i32 62)
  %4 = sext i32 %0 to i64
  %5 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %6 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %5, i64 0, i64 %4
  %7 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %6, i64 0, i64 %indvars.iv
  %8 = getelementptr inbounds %struct.vote, %struct.vote* %7, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = zext i8 %1 to i32
  %11 = icmp eq i32 %9, %10
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %3
  br label %13

; <label>:13:                                     ; preds = %12, %3
  %.1 = phi i32 [ 1, %12 ], [ %.03, %3 ]
  %14 = icmp ne i32 %.1, 0
  br i1 %14, label %15, label %68

; <label>:15:                                     ; preds = %13
  %16 = icmp eq i64 %indvars.iv, 255
  br i1 %16, label %17, label %29

; <label>:17:                                     ; preds = %15
  %18 = zext i8 %1 to i32
  %19 = sext i32 %0 to i64
  %20 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %21 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %20, i64 0, i64 %19
  %22 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %21, i64 0, i64 %indvars.iv
  %23 = getelementptr inbounds %struct.vote, %struct.vote* %22, i32 0, i32 0
  store i32 %18, i32* %23, align 8
  %24 = sext i32 %0 to i64
  %25 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %26 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %25, i64 0, i64 %24
  %27 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %26, i64 0, i64 %indvars.iv
  %28 = getelementptr inbounds %struct.vote, %struct.vote* %27, i32 0, i32 1
  store i32 0, i32* %28, align 4
  br label %67

; <label>:29:                                     ; preds = %15
  %30 = sext i32 %0 to i64
  %31 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %32 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %31, i64 0, i64 %30
  %33 = add nuw nsw i64 %indvars.iv, 1
  %34 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %32, i64 0, i64 %33
  %35 = getelementptr inbounds %struct.vote, %struct.vote* %34, i32 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = sext i32 %0 to i64
  %38 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %39 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %38, i64 0, i64 %37
  %40 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %39, i64 0, i64 %indvars.iv
  %41 = getelementptr inbounds %struct.vote, %struct.vote* %40, i32 0, i32 0
  store i32 %36, i32* %41, align 8
  %42 = sext i32 %0 to i64
  %43 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %44 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %43, i64 0, i64 %42
  %45 = add nuw nsw i64 %indvars.iv, 1
  %46 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %44, i64 0, i64 %45
  %47 = getelementptr inbounds %struct.vote, %struct.vote* %46, i32 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = sext i32 %0 to i64
  %50 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %51 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %50, i64 0, i64 %49
  %52 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %51, i64 0, i64 %indvars.iv
  %53 = getelementptr inbounds %struct.vote, %struct.vote* %52, i32 0, i32 1
  store i32 %48, i32* %53, align 4
  %54 = icmp eq i64 %indvars.iv, 0
  br i1 %54, label %55, label %66

; <label>:55:                                     ; preds = %29
  %56 = sext i32 %0 to i64
  %57 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %58 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %57, i64 0, i64 %56
  %59 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %58, i64 0, i64 %indvars.iv
  %60 = getelementptr inbounds %struct.vote, %struct.vote* %59, i32 0, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = trunc i32 %61 to i8
  %63 = sext i32 %0 to i64
  %64 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %65 = getelementptr inbounds [64 x i8], [64 x i8]* %64, i64 0, i64 %63
  store i8 %62, i8* %65, align 1
  br label %66

; <label>:66:                                     ; preds = %55, %29
  br label %67

; <label>:67:                                     ; preds = %66, %17
  br label %68

; <label>:68:                                     ; preds = %67, %13
  br label %69

; <label>:69:                                     ; preds = %68
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %3, label %70

; <label>:70:                                     ; preds = %69
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @do_wep_crack1(i32) #0 {
  %2 = alloca [4 x i8], align 1
  br label %3

; <label>:3:                                      ; preds = %34, %1
  call void @unroll_loop(i32 65)
  %4 = call i32 @update_ivbuf()
  switch i32 %4, label %7 [
    i32 1, label %5
    i32 2, label %6
  ]

; <label>:5:                                      ; preds = %3
  br label %521

; <label>:6:                                      ; preds = %3
  br label %521

; <label>:7:                                      ; preds = %3
  br label %8

; <label>:8:                                      ; preds = %7
  %9 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 4
  %10 = load i64, i64* %9, align 8
  %11 = icmp slt i64 %10, 256
  br i1 %11, label %12, label %17

; <label>:12:                                     ; preds = %8
  %13 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 7, i64 0
  %14 = load i8, i8* %13, align 4
  %15 = zext i8 %14 to i32
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %26, label %17

; <label>:17:                                     ; preds = %12, %8
  %18 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 4
  %19 = load i64, i64* %18, align 8
  %20 = icmp slt i64 %19, 32
  br i1 %20, label %21, label %43

; <label>:21:                                     ; preds = %17
  %22 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 7, i64 0
  %23 = load i8, i8* %22, align 4
  %24 = zext i8 %23 to i32
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %43

; <label>:26:                                     ; preds = %21, %12
  %27 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 24
  %28 = load i32, i32* %27, align 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %34, label %30

; <label>:30:                                     ; preds = %26
  %31 = getelementptr [125 x i8], [125 x i8]* @.str.46, i32 0, i32 0
  %32 = call i32 (i8*, ...) @printf(i8* %31)
  %33 = call i32 @kill(i32 0, i32 15) #9
  call void @_exit(i32 1) #12
  br label %UnifiedUnreachableBlock

; <label>:34:                                     ; preds = %26
  %35 = load i64, i64* @nb_pkt, align 8
  %36 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 4
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr [34 x i8], [34 x i8]* @.str.47, i32 0, i32 0
  %39 = call i32 (i8*, ...) @printf(i8* %38, i64 %35, i64 %37)
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %41 = call i32 @fflush(%struct._IO_FILE* %40)
  %42 = call i32 @sleep(i32 1)
  br label %3

; <label>:43:                                     ; preds = %21, %17
  %44 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %0, %45
  br i1 %46, label %47, label %56

; <label>:47:                                     ; preds = %43
  %48 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %49 = load i32, i32* %48, align 8
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %53, label %51

; <label>:51:                                     ; preds = %47
  %52 = sub nsw i32 %0, 1
  call void @show_wep_stats(i32 %52, i32 0, [256 x %struct.PTW_tableentry]* null, i32* null, i32* null, i32 0)
  br label %53

; <label>:53:                                     ; preds = %51, %47
  %54 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %55 = call i32 @check_wep_key(i8* %54, i32 %0, i32 0)
  br label %521

; <label>:56:                                     ; preds = %43
  %57 = call i32 @calc_poll(i32 %0)
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %60

; <label>:59:                                     ; preds = %56
  br label %521

; <label>:60:                                     ; preds = %56
  %61 = sext i32 %0 to i64
  %62 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 5
  %63 = getelementptr inbounds [64 x i32], [64 x i32]* %62, i64 0, i64 %61
  store i32 1, i32* %63, align 4
  %64 = sext i32 %0 to i64
  %65 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 5
  %66 = getelementptr inbounds [64 x i32], [64 x i32]* %65, i64 0, i64 %64
  %67 = load i32, i32* %66, align 4
  %68 = icmp slt i32 %67, 256
  br i1 %68, label %.lr.ph26, label %.loopexit10

.lr.ph26:                                         ; preds = %60
  br label %69

; <label>:69:                                     ; preds = %.lr.ph26, %95
  call void @unroll_loop(i32 66)
  %70 = sext i32 %0 to i64
  %71 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %72 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %71, i64 0, i64 %70
  %73 = sext i32 %0 to i64
  %74 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 5
  %75 = getelementptr inbounds [64 x i32], [64 x i32]* %74, i64 0, i64 %73
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %72, i64 0, i64 %77
  %79 = getelementptr inbounds %struct.vote, %struct.vote* %78, i32 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = sitofp i32 %80 to float
  %82 = sext i32 %0 to i64
  %83 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %84 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %83, i64 0, i64 %82
  %85 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %84, i64 0, i64 0
  %86 = getelementptr inbounds %struct.vote, %struct.vote* %85, i32 0, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = sitofp i32 %87 to float
  %89 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %90 = load float, float* %89, align 4
  %91 = fdiv float %88, %90
  %92 = fcmp olt float %81, %91
  br i1 %92, label %93, label %94

; <label>:93:                                     ; preds = %69
  br label %103

; <label>:94:                                     ; preds = %69
  br label %95

; <label>:95:                                     ; preds = %94
  %96 = sext i32 %0 to i64
  %97 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 5
  %98 = getelementptr inbounds [64 x i32], [64 x i32]* %97, i64 0, i64 %96
  %99 = load i32, i32* %98, align 4
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %98, align 4
  %101 = load i32, i32* %66, align 4
  %102 = icmp slt i32 %101, 256
  br i1 %102, label %69, label %..loopexit10_crit_edge

..loopexit10_crit_edge:                           ; preds = %95
  br label %.loopexit10

.loopexit10:                                      ; preds = %..loopexit10_crit_edge, %60
  br label %103

; <label>:103:                                    ; preds = %.loopexit10, %93
  %104 = sext i32 %0 to i64
  %105 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %106 = getelementptr inbounds [64 x i32], [64 x i32]* %105, i64 0, i64 %104
  store i32 0, i32* %106, align 4
  %107 = sext i32 %0 to i64
  %108 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %109 = getelementptr inbounds [64 x i32], [64 x i32]* %108, i64 0, i64 %107
  %110 = load i32, i32* %109, align 4
  %111 = sext i32 %0 to i64
  %112 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 5
  %113 = getelementptr inbounds [64 x i32], [64 x i32]* %112, i64 0, i64 %111
  %114 = load i32, i32* %113, align 4
  %115 = icmp slt i32 %110, %114
  br i1 %115, label %.lr.ph23, label %485

.lr.ph23:                                         ; preds = %103
  br label %116

; <label>:116:                                    ; preds = %.lr.ph23, %476
  call void @unroll_loop(i32 67)
  %117 = call i32 @update_ivbuf()
  switch i32 %117, label %120 [
    i32 1, label %118
    i32 2, label %119
  ]

; <label>:118:                                    ; preds = %116
  br label %521

; <label>:119:                                    ; preds = %116
  br label %521

; <label>:120:                                    ; preds = %116
  br label %121

; <label>:121:                                    ; preds = %120
  %122 = sext i32 %0 to i64
  %123 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %124 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %123, i64 0, i64 %122
  %125 = sext i32 %0 to i64
  %126 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %127 = getelementptr inbounds [64 x i32], [64 x i32]* %126, i64 0, i64 %125
  %128 = load i32, i32* %127, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %124, i64 0, i64 %129
  %131 = getelementptr inbounds %struct.vote, %struct.vote* %130, i32 0, i32 0
  %132 = load i32, i32* %131, align 8
  %133 = trunc i32 %132 to i8
  %134 = sext i32 %0 to i64
  %135 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %136 = getelementptr inbounds [64 x i8], [64 x i8]* %135, i64 0, i64 %134
  store i8 %133, i8* %136, align 1
  %137 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %138 = load i32, i32* %137, align 8
  %139 = icmp ne i32 %138, 0
  br i1 %139, label %141, label %140

; <label>:140:                                    ; preds = %121
  call void @show_wep_stats(i32 %0, i32 0, [256 x %struct.PTW_tableentry]* null, i32* null, i32* null, i32 0)
  br label %141

; <label>:141:                                    ; preds = %140, %121
  %142 = icmp eq i32 %0, 4
  br i1 %142, label %143, label %154

; <label>:143:                                    ; preds = %141
  %144 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %145 = load i32, i32* %144, align 4
  %146 = icmp eq i32 %145, 13
  br i1 %146, label %147, label %154

; <label>:147:                                    ; preds = %143
  %148 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %149 = call i32 @check_wep_key(i8* %148, i32 %0, i32 5)
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %153

; <label>:151:                                    ; preds = %147
  %152 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  store i32 5, i32* %152, align 4
  br label %521

; <label>:153:                                    ; preds = %147
  br label %154

; <label>:154:                                    ; preds = %153, %143, %141
  %155 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %156 = load i32, i32* %155, align 8
  %157 = add nsw i32 %0, %156
  %158 = add nsw i32 %157, 1
  %159 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %160 = load i32, i32* %159, align 4
  %161 = icmp eq i32 %158, %160
  br i1 %161, label %162, label %468

; <label>:162:                                    ; preds = %154
  %163 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %164 = load i32, i32* %163, align 8
  %165 = icmp ne i32 %164, 0
  br i1 %165, label %166, label %468

; <label>:166:                                    ; preds = %162
  %167 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 40
  %168 = load i32, i32* %167, align 8
  %169 = icmp eq i32 %168, 1
  br i1 %169, label %170, label %228

; <label>:170:                                    ; preds = %166
  br label %171

; <label>:171:                                    ; preds = %.backedge, %170
  call void @unroll_loop(i32 68)
  call void @show_wep_stats(i32 %0, i32 1, [256 x %struct.PTW_tableentry]* null, i32* null, i32* null, i32 0)
  %172 = getelementptr [69 x i8], [69 x i8]* @.str.48, i32 0, i32 0
  %173 = call i32 (i8*, ...) @printf(i8* %172)
  %174 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %174, i8 0, i64 4, i1 false)
  %175 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  %176 = call i32 @readLine(i8* %175, i32 3)
  %177 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 0
  %178 = load i8, i8* %177, align 1
  %179 = sext i8 %178 to i32
  %180 = icmp eq i32 %179, 0
  %181 = icmp eq i32 %176, 0
  %or.cond = or i1 %180, %181
  br i1 %or.cond, label %182, label %183

; <label>:182:                                    ; preds = %171
  br label %227

; <label>:183:                                    ; preds = %171
  %184 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  %185 = call i32 @atoi(i8* %184) #10
  %186 = call i16** @__ctype_b_loc() #13
  %187 = load i16*, i16** %186, align 8
  %188 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 0
  %189 = load i8, i8* %188, align 1
  %190 = sext i8 %189 to i32
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds i16, i16* %187, i64 %191
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = and i32 %194, 2048
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %203, label %197

; <label>:197:                                    ; preds = %183
  %198 = icmp slt i32 %185, 0
  br i1 %198, label %203, label %199

; <label>:199:                                    ; preds = %197
  %200 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %201 = load i32, i32* %200, align 4
  %202 = icmp sge i32 %185, %201
  br i1 %202, label %203, label %204

; <label>:203:                                    ; preds = %199, %197, %183
  br label %.backedge

; <label>:204:                                    ; preds = %199
  %205 = getelementptr [81 x i8], [81 x i8]* @.str.49, i32 0, i32 0
  %206 = call i32 (i8*, ...) @printf(i8* %205)
  %207 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %207, i8 0, i64 4, i1 false)
  %208 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  %209 = call i32 @readLine(i8* %208, i32 3)
  %210 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 0
  %211 = load i8, i8* %210, align 1
  %212 = sext i8 %211 to i32
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %216, label %214

; <label>:214:                                    ; preds = %204
  %215 = icmp eq i32 %209, 0
  br i1 %215, label %216, label %217

; <label>:216:                                    ; preds = %214, %204
  br label %.backedge

; <label>:217:                                    ; preds = %214
  %218 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  %219 = call i32 @hexToInt(i8* %218, i32 %209)
  %220 = icmp slt i32 %219, 0
  br i1 %220, label %223, label %221

; <label>:221:                                    ; preds = %217
  %222 = icmp sgt i32 %219, 255
  br i1 %222, label %223, label %224

; <label>:223:                                    ; preds = %221, %217
  br label %.backedge

; <label>:224:                                    ; preds = %221
  %225 = trunc i32 %219 to i8
  %226 = call i32 @remove_votes(i32 %185, i8 zeroext %225)
  br label %.backedge

.backedge:                                        ; preds = %224, %223, %216, %203
  br label %171

; <label>:227:                                    ; preds = %182
  br label %228

; <label>:228:                                    ; preds = %227, %166
  %229 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %230 = load i32, i32* %229, align 4
  %231 = icmp eq i32 %230, 1
  br i1 %231, label %236, label %232

; <label>:232:                                    ; preds = %228
  %233 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 18
  %234 = load i32, i32* %233, align 4
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %236, label %389

; <label>:236:                                    ; preds = %232, %228
  %237 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %238 = load i32, i32* %237, align 8
  %239 = icmp eq i32 %238, 4
  br i1 %239, label %240, label %291

; <label>:240:                                    ; preds = %236
  br label %241

; <label>:241:                                    ; preds = %240, %287
  %.0521 = phi i32 [ 0, %240 ], [ %288, %287 ]
  call void @unroll_loop(i32 69)
  %242 = trunc i32 %.0521 to i8
  %243 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 0
  %244 = load i32, i32* %243, align 4
  %245 = sext i32 %244 to i64
  %246 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %247 = getelementptr inbounds [64 x i8], [64 x i8]* %246, i64 0, i64 %245
  store i8 %242, i8* %247, align 1
  br label %248

; <label>:248:                                    ; preds = %241, %283
  %.0620 = phi i32 [ 0, %241 ], [ %284, %283 ]
  call void @unroll_loop(i32 70)
  %249 = trunc i32 %.0620 to i8
  %250 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 1
  %251 = load i32, i32* %250, align 4
  %252 = sext i32 %251 to i64
  %253 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %254 = getelementptr inbounds [64 x i8], [64 x i8]* %253, i64 0, i64 %252
  store i8 %249, i8* %254, align 1
  br label %255

; <label>:255:                                    ; preds = %248, %279
  %.0119 = phi i32 [ 0, %248 ], [ %280, %279 ]
  call void @unroll_loop(i32 71)
  %256 = trunc i32 %.0119 to i8
  %257 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 2
  %258 = load i32, i32* %257, align 4
  %259 = sext i32 %258 to i64
  %260 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %261 = getelementptr inbounds [64 x i8], [64 x i8]* %260, i64 0, i64 %259
  store i8 %256, i8* %261, align 1
  br label %262

; <label>:262:                                    ; preds = %255, %275
  %.0218 = phi i32 [ 0, %255 ], [ %276, %275 ]
  call void @unroll_loop(i32 72)
  %263 = trunc i32 %.0218 to i8
  %264 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 3
  %265 = load i32, i32* %264, align 4
  %266 = sext i32 %265 to i64
  %267 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %268 = getelementptr inbounds [64 x i8], [64 x i8]* %267, i64 0, i64 %266
  store i8 %263, i8* %268, align 1
  %269 = add nsw i32 %0, 1
  %270 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %271 = call i32 @check_wep_key(i8* %270, i32 %269, i32 0)
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %273, label %274

; <label>:273:                                    ; preds = %262
  br label %521

; <label>:274:                                    ; preds = %262
  br label %275

; <label>:275:                                    ; preds = %274
  %276 = add nuw nsw i32 %.0218, 1
  %277 = icmp ult i32 %276, 256
  br i1 %277, label %262, label %278

; <label>:278:                                    ; preds = %275
  br label %279

; <label>:279:                                    ; preds = %278
  %280 = add nuw nsw i32 %.0119, 1
  %281 = icmp ult i32 %280, 256
  br i1 %281, label %255, label %282

; <label>:282:                                    ; preds = %279
  br label %283

; <label>:283:                                    ; preds = %282
  %284 = add nuw nsw i32 %.0620, 1
  %285 = icmp ult i32 %284, 256
  br i1 %285, label %248, label %286

; <label>:286:                                    ; preds = %283
  br label %287

; <label>:287:                                    ; preds = %286
  %288 = add nuw nsw i32 %.0521, 1
  %289 = icmp ult i32 %288, 256
  br i1 %289, label %241, label %290

; <label>:290:                                    ; preds = %287
  br label %388

; <label>:291:                                    ; preds = %236
  %292 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %293 = load i32, i32* %292, align 8
  %294 = icmp eq i32 %293, 3
  br i1 %294, label %295, label %335

; <label>:295:                                    ; preds = %291
  br label %296

; <label>:296:                                    ; preds = %295, %331
  %.1717 = phi i32 [ 0, %295 ], [ %332, %331 ]
  call void @unroll_loop(i32 73)
  %297 = trunc i32 %.1717 to i8
  %298 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 0
  %299 = load i32, i32* %298, align 4
  %300 = sext i32 %299 to i64
  %301 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %302 = getelementptr inbounds [64 x i8], [64 x i8]* %301, i64 0, i64 %300
  store i8 %297, i8* %302, align 1
  br label %303

; <label>:303:                                    ; preds = %296, %327
  %.116 = phi i32 [ 0, %296 ], [ %328, %327 ]
  call void @unroll_loop(i32 74)
  %304 = trunc i32 %.116 to i8
  %305 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 1
  %306 = load i32, i32* %305, align 4
  %307 = sext i32 %306 to i64
  %308 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %309 = getelementptr inbounds [64 x i8], [64 x i8]* %308, i64 0, i64 %307
  store i8 %304, i8* %309, align 1
  br label %310

; <label>:310:                                    ; preds = %303, %323
  %.1315 = phi i32 [ 0, %303 ], [ %324, %323 ]
  call void @unroll_loop(i32 75)
  %311 = trunc i32 %.1315 to i8
  %312 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 2
  %313 = load i32, i32* %312, align 4
  %314 = sext i32 %313 to i64
  %315 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %316 = getelementptr inbounds [64 x i8], [64 x i8]* %315, i64 0, i64 %314
  store i8 %311, i8* %316, align 1
  %317 = add nsw i32 %0, 1
  %318 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %319 = call i32 @check_wep_key(i8* %318, i32 %317, i32 0)
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %322

; <label>:321:                                    ; preds = %310
  br label %521

; <label>:322:                                    ; preds = %310
  br label %323

; <label>:323:                                    ; preds = %322
  %324 = add nuw nsw i32 %.1315, 1
  %325 = icmp ult i32 %324, 256
  br i1 %325, label %310, label %326

; <label>:326:                                    ; preds = %323
  br label %327

; <label>:327:                                    ; preds = %326
  %328 = add nuw nsw i32 %.116, 1
  %329 = icmp ult i32 %328, 256
  br i1 %329, label %303, label %330

; <label>:330:                                    ; preds = %327
  br label %331

; <label>:331:                                    ; preds = %330
  %332 = add nuw nsw i32 %.1717, 1
  %333 = icmp ult i32 %332, 256
  br i1 %333, label %296, label %334

; <label>:334:                                    ; preds = %331
  br label %387

; <label>:335:                                    ; preds = %291
  %336 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %337 = load i32, i32* %336, align 8
  %338 = icmp eq i32 %337, 2
  br i1 %338, label %339, label %368

; <label>:339:                                    ; preds = %335
  br label %340

; <label>:340:                                    ; preds = %339, %364
  %.214 = phi i32 [ 0, %339 ], [ %365, %364 ]
  call void @unroll_loop(i32 76)
  %341 = trunc i32 %.214 to i8
  %342 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 0
  %343 = load i32, i32* %342, align 4
  %344 = sext i32 %343 to i64
  %345 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %346 = getelementptr inbounds [64 x i8], [64 x i8]* %345, i64 0, i64 %344
  store i8 %341, i8* %346, align 1
  br label %347

; <label>:347:                                    ; preds = %340, %360
  %.2413 = phi i32 [ 0, %340 ], [ %361, %360 ]
  call void @unroll_loop(i32 77)
  %348 = trunc i32 %.2413 to i8
  %349 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 1
  %350 = load i32, i32* %349, align 4
  %351 = sext i32 %350 to i64
  %352 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %353 = getelementptr inbounds [64 x i8], [64 x i8]* %352, i64 0, i64 %351
  store i8 %348, i8* %353, align 1
  %354 = add nsw i32 %0, 1
  %355 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %356 = call i32 @check_wep_key(i8* %355, i32 %354, i32 0)
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %358, label %359

; <label>:358:                                    ; preds = %347
  br label %521

; <label>:359:                                    ; preds = %347
  br label %360

; <label>:360:                                    ; preds = %359
  %361 = add nuw nsw i32 %.2413, 1
  %362 = icmp ult i32 %361, 256
  br i1 %362, label %347, label %363

; <label>:363:                                    ; preds = %360
  br label %364

; <label>:364:                                    ; preds = %363
  %365 = add nuw nsw i32 %.214, 1
  %366 = icmp ult i32 %365, 256
  br i1 %366, label %340, label %367

; <label>:367:                                    ; preds = %364
  br label %386

; <label>:368:                                    ; preds = %335
  br label %369

; <label>:369:                                    ; preds = %368, %382
  %.312 = phi i32 [ 0, %368 ], [ %383, %382 ]
  call void @unroll_loop(i32 78)
  %370 = trunc i32 %.312 to i8
  %371 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 0
  %372 = load i32, i32* %371, align 4
  %373 = sext i32 %372 to i64
  %374 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %375 = getelementptr inbounds [64 x i8], [64 x i8]* %374, i64 0, i64 %373
  store i8 %370, i8* %375, align 1
  %376 = add nsw i32 %0, 1
  %377 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %378 = call i32 @check_wep_key(i8* %377, i32 %376, i32 0)
  %379 = icmp eq i32 %378, 0
  br i1 %379, label %380, label %381

; <label>:380:                                    ; preds = %369
  br label %521

; <label>:381:                                    ; preds = %369
  br label %382

; <label>:382:                                    ; preds = %381
  %383 = add nuw nsw i32 %.312, 1
  %384 = icmp ult i32 %383, 256
  br i1 %384, label %369, label %385

; <label>:385:                                    ; preds = %382
  br label %386

; <label>:386:                                    ; preds = %385, %367
  br label %387

; <label>:387:                                    ; preds = %386, %334
  br label %388

; <label>:388:                                    ; preds = %387, %290
  br label %467

; <label>:389:                                    ; preds = %232
  %390 = load i32, i32* @do_wep_crack1.k, align 4
  %391 = add nsw i32 %390, 1
  %392 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %393 = load i32, i32* %392, align 4
  %394 = srem i32 %391, %393
  store i32 %394, i32* @do_wep_crack1.k, align 4
  br label %395

; <label>:395:                                    ; preds = %455, %389
  call void @unroll_loop(i32 79)
  br label %396

; <label>:396:                                    ; preds = %444, %395
  %.08 = phi i32 [ 0, %395 ], [ %445, %444 ]
  call void @unroll_loop(i32 80)
  %397 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %398 = load i32, i32* %397, align 4
  %399 = icmp slt i32 %.08, %398
  br i1 %399, label %400, label %404

; <label>:400:                                    ; preds = %396
  %401 = load i32, i32* @wepkey_crack_success, align 4
  %402 = icmp ne i32 %401, 0
  %403 = xor i1 %402, true
  br label %404

; <label>:404:                                    ; preds = %400, %396
  %405 = phi i1 [ false, %396 ], [ %403, %400 ]
  br i1 %405, label %406, label %.loopexit

; <label>:406:                                    ; preds = %404
  %407 = load i32, i32* @do_wep_crack1.k, align 4
  %408 = add nsw i32 %.08, %407
  %409 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %410 = load i32, i32* %409, align 4
  %411 = srem i32 %408, %410
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds [256 x i32], [256 x i32]* @bf_nkeys, i64 0, i64 %412
  %414 = load i32, i32* %413, align 4
  %415 = icmp sgt i32 %414, 16
  br i1 %415, label %416, label %418

; <label>:416:                                    ; preds = %406
  %417 = call i32 @usleep(i32 1)
  br label %444

; <label>:418:                                    ; preds = %406
  %.08.lcssa9 = phi i32 [ %.08, %406 ]
  %419 = load i32, i32* @do_wep_crack1.k, align 4
  %420 = add nsw i32 %.08.lcssa9, %419
  %421 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %422 = load i32, i32* %421, align 4
  %423 = srem i32 %420, %422
  %424 = sext i32 %423 to i64
  %425 = getelementptr inbounds [256 x i32], [256 x i32]* @bf_nkeys, i64 0, i64 %424
  %426 = load i32, i32* %425, align 4
  %427 = add nsw i32 %426, 1
  store i32 %427, i32* %425, align 4
  %428 = load i32, i32* @do_wep_crack1.k, align 4
  %429 = add nsw i32 %.08.lcssa9, %428
  %430 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %431 = load i32, i32* %430, align 4
  %432 = srem i32 %429, %431
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds [256 x [2 x i32]], [256 x [2 x i32]]* @bf_pipe, i64 0, i64 %433
  %435 = getelementptr inbounds [2 x i32], [2 x i32]* %434, i64 0, i64 1
  %436 = load i32, i32* %435, align 4
  %437 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %438 = call i32 @safe_write(i32 %436, i8* %437, i64 64)
  %439 = icmp ne i32 %438, 64
  br i1 %439, label %440, label %443

; <label>:440:                                    ; preds = %418
  %441 = getelementptr [17 x i8], [17 x i8]* @.str.50, i32 0, i32 0
  call void @perror(i8* %441)
  %442 = call i32 @kill(i32 0, i32 15) #9
  call void @_exit(i32 1) #12
  br label %UnifiedUnreachableBlock

; <label>:443:                                    ; preds = %418
  br label %446

; <label>:444:                                    ; preds = %416
  %445 = add nuw nsw i32 %.08, 1
  br label %396

.loopexit:                                        ; preds = %404
  %.08.lcssa.ph = phi i32 [ %.08, %404 ]
  br label %446

; <label>:446:                                    ; preds = %.loopexit, %443
  %.08.lcssa = phi i32 [ %.08.lcssa9, %443 ], [ %.08.lcssa.ph, %.loopexit ]
  br label %447

; <label>:447:                                    ; preds = %446
  %448 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %449 = load i32, i32* %448, align 4
  %450 = icmp sge i32 %.08.lcssa, %449
  br i1 %450, label %451, label %455

; <label>:451:                                    ; preds = %447
  %452 = load i32, i32* @wepkey_crack_success, align 4
  %453 = icmp ne i32 %452, 0
  %454 = xor i1 %453, true
  br label %455

; <label>:455:                                    ; preds = %451, %447
  %456 = phi i1 [ false, %447 ], [ %454, %451 ]
  br i1 %456, label %395, label %457

; <label>:457:                                    ; preds = %455
  %458 = load i32, i32* @wepkey_crack_success, align 4
  %459 = icmp ne i32 %458, 0
  br i1 %459, label %460, label %466

; <label>:460:                                    ; preds = %457
  %461 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %462 = load i32, i32* %461, align 4
  %463 = sext i32 %462 to i64
  %464 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %465 = getelementptr [64 x i8], [64 x i8]* @bf_wepkey, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %464, i8* align 16 %465, i64 %463, i1 false), !track !177
  br label %521

; <label>:466:                                    ; preds = %457
  br label %467

; <label>:467:                                    ; preds = %466, %388
  br label %475

; <label>:468:                                    ; preds = %162, %154
  %469 = add nsw i32 %0, 1
  %470 = call i32 @do_wep_crack1(i32 %469)
  switch i32 %470, label %473 [
    i32 0, label %471
    i32 2, label %472
  ]

; <label>:471:                                    ; preds = %468
  br label %521

; <label>:472:                                    ; preds = %468
  br label %521

; <label>:473:                                    ; preds = %468
  br label %474

; <label>:474:                                    ; preds = %473
  br label %475

; <label>:475:                                    ; preds = %474, %467
  br label %476

; <label>:476:                                    ; preds = %475
  %477 = sext i32 %0 to i64
  %478 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %479 = getelementptr inbounds [64 x i32], [64 x i32]* %478, i64 0, i64 %477
  %480 = load i32, i32* %479, align 4
  %481 = add nsw i32 %480, 1
  store i32 %481, i32* %479, align 4
  %482 = load i32, i32* %109, align 4
  %483 = load i32, i32* %113, align 4
  %484 = icmp slt i32 %482, %483
  br i1 %484, label %116, label %._crit_edge24

._crit_edge24:                                    ; preds = %476
  br label %485

; <label>:485:                                    ; preds = %._crit_edge24, %103
  %486 = icmp eq i32 %0, 0
  br i1 %486, label %487, label %520

; <label>:487:                                    ; preds = %485
  %488 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %489 = load i32, i32* %488, align 4
  %490 = icmp slt i32 0, %489
  br i1 %490, label %.lr.ph, label %510

.lr.ph:                                           ; preds = %487
  br label %491

; <label>:491:                                    ; preds = %.lr.ph, %505
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %505 ]
  call void @unroll_loop(i32 81)
  br label %492

; <label>:492:                                    ; preds = %502, %491
  call void @unroll_loop(i32 82)
  %493 = getelementptr inbounds [256 x i32], [256 x i32]* @bf_nkeys, i64 0, i64 %indvars.iv
  %494 = load i32, i32* %493, align 4
  %495 = icmp sgt i32 %494, 0
  br i1 %495, label %496, label %500

; <label>:496:                                    ; preds = %492
  %497 = load i32, i32* @wepkey_crack_success, align 4
  %498 = icmp ne i32 %497, 0
  %499 = xor i1 %498, true
  br label %500

; <label>:500:                                    ; preds = %496, %492
  %501 = phi i1 [ false, %492 ], [ %499, %496 ]
  br i1 %501, label %502, label %504

; <label>:502:                                    ; preds = %500
  %503 = call i32 @usleep(i32 1)
  br label %492

; <label>:504:                                    ; preds = %500
  br label %505

; <label>:505:                                    ; preds = %504
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %506 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %507 = load i32, i32* %506, align 4
  %508 = sext i32 %507 to i64
  %509 = icmp slt i64 %indvars.iv.next, %508
  br i1 %509, label %491, label %._crit_edge

._crit_edge:                                      ; preds = %505
  br label %510

; <label>:510:                                    ; preds = %._crit_edge, %487
  %511 = load i32, i32* @wepkey_crack_success, align 4
  %512 = icmp ne i32 %511, 0
  br i1 %512, label %513, label %519

; <label>:513:                                    ; preds = %510
  %514 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %515 = load i32, i32* %514, align 4
  %516 = sext i32 %515 to i64
  %517 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %518 = getelementptr [64 x i8], [64 x i8]* @bf_wepkey, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %517, i8* align 16 %518, i64 %516, i1 false), !track !178
  br label %521

; <label>:519:                                    ; preds = %510
  br label %520

; <label>:520:                                    ; preds = %519, %485
  br label %521

; <label>:521:                                    ; preds = %520, %513, %472, %471, %460, %380, %358, %321, %273, %151, %119, %118, %59, %53, %6, %5
  %.0 = phi i32 [ %55, %53 ], [ 1, %59 ], [ 0, %151 ], [ 0, %273 ], [ 0, %321 ], [ 0, %358 ], [ 0, %380 ], [ 0, %460 ], [ 2, %472 ], [ 0, %471 ], [ 2, %119 ], [ 1, %118 ], [ 0, %513 ], [ 1, %520 ], [ 2, %6 ], [ 1, %5 ]
  ret i32 %.0

UnifiedUnreachableBlock:                          ; preds = %440, %30
  unreachable
}

declare dso_local i32 @sleep(i32) #1

; Function Attrs: nounwind readonly
declare dso_local i32 @atoi(i8*) #3

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #7

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @do_wep_crack2(i32) #0 {
  %2 = call i32 @update_ivbuf()
  switch i32 %2, label %5 [
    i32 1, label %3
    i32 2, label %4
  ]

; <label>:3:                                      ; preds = %1
  br label %212

; <label>:4:                                      ; preds = %1
  br label %212

; <label>:5:                                      ; preds = %1
  br label %6

; <label>:6:                                      ; preds = %5
  %7 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %10 = load i32, i32* %9, align 4
  %11 = sext i32 %10 to i64
  %12 = sdiv i64 %8, %11
  %13 = icmp slt i64 %12, 60000
  br i1 %13, label %14, label %21

; <label>:14:                                     ; preds = %6
  %15 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %16 = load i32, i32* %15, align 4
  %17 = mul nsw i32 %16, 60000
  %18 = getelementptr [123 x i8], [123 x i8]* @.str.51, i32 0, i32 0
  %19 = call i32 (i8*, ...) @printf(i8* %18, i32 %17)
  %20 = call i32 @kill(i32 0, i32 15) #9
  call void @_exit(i32 1) #12
  unreachable

; <label>:21:                                     ; preds = %6
  %22 = icmp sle i32 0, %0
  br i1 %22, label %.lr.ph13, label %50

.lr.ph13:                                         ; preds = %21
  %23 = sext i32 %0 to i64
  br label %24

; <label>:24:                                     ; preds = %.lr.ph13, %48
  %indvars.iv15 = phi i64 [ 0, %.lr.ph13 ], [ %indvars.iv.next16, %48 ]
  call void @unroll_loop(i32 63)
  %25 = trunc i64 %indvars.iv15 to i32
  %26 = call i32 @calc_poll(i32 %25)
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %24
  br label %212

; <label>:29:                                     ; preds = %24
  %30 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %31 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %30, i64 0, i64 %indvars.iv15
  %32 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %31, i64 0, i64 0
  %33 = getelementptr inbounds %struct.vote, %struct.vote* %32, i32 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = trunc i32 %34 to i8
  %36 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %37 = getelementptr inbounds [64 x i8], [64 x i8]* %36, i64 0, i64 %indvars.iv15
  store i8 %35, i8* %37, align 1
  %38 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 5
  %39 = getelementptr inbounds [64 x i32], [64 x i32]* %38, i64 0, i64 %indvars.iv15
  store i32 1, i32* %39, align 4
  %40 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %41 = getelementptr inbounds [64 x i32], [64 x i32]* %40, i64 0, i64 %indvars.iv15
  store i32 0, i32* %41, align 4
  %42 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %43 = load i32, i32* %42, align 8
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %47, label %45

; <label>:45:                                     ; preds = %29
  %46 = trunc i64 %indvars.iv15 to i32
  call void @show_wep_stats(i32 %46, i32 0, [256 x %struct.PTW_tableentry]* null, i32* null, i32* null, i32 0)
  br label %47

; <label>:47:                                     ; preds = %45, %29
  br label %48

; <label>:48:                                     ; preds = %47
  %indvars.iv.next16 = add nuw nsw i64 %indvars.iv15, 1
  %49 = icmp sle i64 %indvars.iv.next16, %23
  br i1 %49, label %24, label %._crit_edge14

._crit_edge14:                                    ; preds = %48
  br label %50

; <label>:50:                                     ; preds = %._crit_edge14, %21
  %51 = sext i32 %0 to i64
  %52 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 5
  %53 = getelementptr inbounds [64 x i32], [64 x i32]* %52, i64 0, i64 %51
  store i32 1, i32* %53, align 4
  %54 = sext i32 %0 to i64
  %55 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 5
  %56 = getelementptr inbounds [64 x i32], [64 x i32]* %55, i64 0, i64 %54
  %57 = load i32, i32* %56, align 4
  %58 = icmp slt i32 %57, 256
  br i1 %58, label %.lr.ph10, label %.loopexit

.lr.ph10:                                         ; preds = %50
  br label %59

; <label>:59:                                     ; preds = %.lr.ph10, %85
  call void @unroll_loop(i32 64)
  %60 = sext i32 %0 to i64
  %61 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %62 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %61, i64 0, i64 %60
  %63 = sext i32 %0 to i64
  %64 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 5
  %65 = getelementptr inbounds [64 x i32], [64 x i32]* %64, i64 0, i64 %63
  %66 = load i32, i32* %65, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %62, i64 0, i64 %67
  %69 = getelementptr inbounds %struct.vote, %struct.vote* %68, i32 0, i32 1
  %70 = load i32, i32* %69, align 4
  %71 = sitofp i32 %70 to float
  %72 = sext i32 %0 to i64
  %73 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %74 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %73, i64 0, i64 %72
  %75 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %74, i64 0, i64 0
  %76 = getelementptr inbounds %struct.vote, %struct.vote* %75, i32 0, i32 1
  %77 = load i32, i32* %76, align 4
  %78 = sitofp i32 %77 to float
  %79 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %80 = load float, float* %79, align 4
  %81 = fdiv float %78, %80
  %82 = fcmp olt float %71, %81
  br i1 %82, label %83, label %84

; <label>:83:                                     ; preds = %59
  br label %93

; <label>:84:                                     ; preds = %59
  br label %85

; <label>:85:                                     ; preds = %84
  %86 = sext i32 %0 to i64
  %87 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 5
  %88 = getelementptr inbounds [64 x i32], [64 x i32]* %87, i64 0, i64 %86
  %89 = load i32, i32* %88, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %88, align 4
  %91 = load i32, i32* %56, align 4
  %92 = icmp slt i32 %91, 256
  br i1 %92, label %59, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %85
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %50
  br label %93

; <label>:93:                                     ; preds = %.loopexit, %83
  %94 = sext i32 %0 to i64
  %95 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %96 = getelementptr inbounds [64 x i32], [64 x i32]* %95, i64 0, i64 %94
  store i32 0, i32* %96, align 4
  %97 = add i32 %0, 1
  %98 = sext i32 %97 to i64
  %99 = sext i32 %0 to i64
  %100 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %101 = getelementptr inbounds [64 x i32], [64 x i32]* %100, i64 0, i64 %99
  %102 = load i32, i32* %101, align 4
  %103 = sext i32 %0 to i64
  %104 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 5
  %105 = getelementptr inbounds [64 x i32], [64 x i32]* %104, i64 0, i64 %103
  %106 = load i32, i32* %105, align 4
  %107 = icmp slt i32 %102, %106
  br i1 %107, label %.lr.ph7, label %211

.lr.ph7:                                          ; preds = %93
  br label %108

; <label>:108:                                    ; preds = %.lr.ph7, %202
  call void @unroll_loop(i32 83)
  %109 = call i32 @update_ivbuf()
  switch i32 %109, label %112 [
    i32 1, label %110
    i32 2, label %111
  ]

; <label>:110:                                    ; preds = %108
  br label %212

; <label>:111:                                    ; preds = %108
  br label %212

; <label>:112:                                    ; preds = %108
  br label %113

; <label>:113:                                    ; preds = %112
  %114 = sext i32 %0 to i64
  %115 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %116 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %115, i64 0, i64 %114
  %117 = sext i32 %0 to i64
  %118 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %119 = getelementptr inbounds [64 x i32], [64 x i32]* %118, i64 0, i64 %117
  %120 = load i32, i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %116, i64 0, i64 %121
  %123 = getelementptr inbounds %struct.vote, %struct.vote* %122, i32 0, i32 0
  %124 = load i32, i32* %123, align 8
  %125 = trunc i32 %124 to i8
  %126 = sext i32 %0 to i64
  %127 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %128 = getelementptr inbounds [64 x i8], [64 x i8]* %127, i64 0, i64 %126
  store i8 %125, i8* %128, align 1
  %129 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %130 = load i32, i32* %129, align 8
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %133, label %132

; <label>:132:                                    ; preds = %113
  call void @show_wep_stats(i32 %0, i32 0, [256 x %struct.PTW_tableentry]* null, i32* null, i32* null, i32 0)
  br label %133

; <label>:133:                                    ; preds = %132, %113
  %134 = add nsw i32 %0, 1
  %135 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %136 = load i32, i32* %135, align 4
  %137 = sub nsw i32 %136, 2
  %138 = icmp slt i32 %134, %137
  br i1 %138, label %.lr.ph, label %169

.lr.ph:                                           ; preds = %133
  br label %139

; <label>:139:                                    ; preds = %.lr.ph, %163
  %indvars.iv = phi i64 [ %98, %.lr.ph ], [ %indvars.iv.next, %163 ]
  call void @unroll_loop(i32 84)
  %140 = trunc i64 %indvars.iv to i32
  %141 = call i32 @calc_poll(i32 %140)
  %142 = icmp ne i32 %141, 0
  br i1 %142, label %143, label %144

; <label>:143:                                    ; preds = %139
  br label %212

; <label>:144:                                    ; preds = %139
  %145 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 7
  %146 = getelementptr inbounds [64 x [256 x %struct.vote]], [64 x [256 x %struct.vote]]* %145, i64 0, i64 %indvars.iv
  %147 = getelementptr inbounds [256 x %struct.vote], [256 x %struct.vote]* %146, i64 0, i64 0
  %148 = getelementptr inbounds %struct.vote, %struct.vote* %147, i32 0, i32 0
  %149 = load i32, i32* %148, align 8
  %150 = trunc i32 %149 to i8
  %151 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %152 = getelementptr inbounds [64 x i8], [64 x i8]* %151, i64 0, i64 %indvars.iv
  store i8 %150, i8* %152, align 1
  %153 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 5
  %154 = getelementptr inbounds [64 x i32], [64 x i32]* %153, i64 0, i64 %indvars.iv
  store i32 1, i32* %154, align 4
  %155 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %156 = getelementptr inbounds [64 x i32], [64 x i32]* %155, i64 0, i64 %indvars.iv
  store i32 0, i32* %156, align 4
  %157 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %158 = load i32, i32* %157, align 8
  %159 = icmp ne i32 %158, 0
  br i1 %159, label %162, label %160

; <label>:160:                                    ; preds = %144
  %161 = trunc i64 %indvars.iv to i32
  call void @show_wep_stats(i32 %161, i32 0, [256 x %struct.PTW_tableentry]* null, i32* null, i32* null, i32 0)
  br label %162

; <label>:162:                                    ; preds = %160, %144
  br label %163

; <label>:163:                                    ; preds = %162
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %164 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %165 = load i32, i32* %164, align 4
  %166 = sub nsw i32 %165, 2
  %167 = sext i32 %166 to i64
  %168 = icmp slt i64 %indvars.iv.next, %167
  br i1 %168, label %139, label %._crit_edge

._crit_edge:                                      ; preds = %163
  br label %169

; <label>:169:                                    ; preds = %._crit_edge, %133
  br label %170

; <label>:170:                                    ; preds = %169, %198
  %.25 = phi i32 [ 0, %169 ], [ %199, %198 ]
  call void @unroll_loop(i32 85)
  %171 = trunc i32 %.25 to i8
  %172 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %173 = load i32, i32* %172, align 4
  %174 = sub nsw i32 %173, 2
  %175 = sext i32 %174 to i64
  %176 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %177 = getelementptr inbounds [64 x i8], [64 x i8]* %176, i64 0, i64 %175
  store i8 %171, i8* %177, align 1
  br label %178

; <label>:178:                                    ; preds = %170, %194
  %.014 = phi i32 [ 0, %170 ], [ %195, %194 ]
  call void @unroll_loop(i32 86)
  %179 = trunc i32 %.014 to i8
  %180 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %181 = load i32, i32* %180, align 4
  %182 = sub nsw i32 %181, 1
  %183 = sext i32 %182 to i64
  %184 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %185 = getelementptr inbounds [64 x i8], [64 x i8]* %184, i64 0, i64 %183
  store i8 %179, i8* %185, align 1
  %186 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %187 = load i32, i32* %186, align 4
  %188 = sub nsw i32 %187, 2
  %189 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %190 = call i32 @check_wep_key(i8* %189, i32 %188, i32 0)
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %193

; <label>:192:                                    ; preds = %178
  br label %212

; <label>:193:                                    ; preds = %178
  br label %194

; <label>:194:                                    ; preds = %193
  %195 = add nuw nsw i32 %.014, 1
  %196 = icmp ult i32 %195, 256
  br i1 %196, label %178, label %197

; <label>:197:                                    ; preds = %194
  br label %198

; <label>:198:                                    ; preds = %197
  %199 = add nuw nsw i32 %.25, 1
  %200 = icmp ult i32 %199, 256
  br i1 %200, label %170, label %201

; <label>:201:                                    ; preds = %198
  br label %202

; <label>:202:                                    ; preds = %201
  %203 = sext i32 %0 to i64
  %204 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 6
  %205 = getelementptr inbounds [64 x i32], [64 x i32]* %204, i64 0, i64 %203
  %206 = load i32, i32* %205, align 4
  %207 = add nsw i32 %206, 1
  store i32 %207, i32* %205, align 4
  %208 = load i32, i32* %101, align 4
  %209 = load i32, i32* %105, align 4
  %210 = icmp slt i32 %208, %209
  br i1 %210, label %108, label %._crit_edge8

._crit_edge8:                                     ; preds = %202
  br label %211

; <label>:211:                                    ; preds = %._crit_edge8, %93
  br label %212

; <label>:212:                                    ; preds = %211, %192, %143, %111, %110, %28, %4, %3
  %.0 = phi i32 [ 1, %28 ], [ 1, %143 ], [ 0, %192 ], [ 2, %111 ], [ 1, %110 ], [ 1, %211 ], [ 2, %4 ], [ 1, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @inner_bruteforcer_thread(i8*) #0 {
  %2 = alloca [64 x i8], align 16, !track !179
  %3 = ptrtoint i8* %0 to i64
  %4 = load i32, i32* @close_aircrack, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %.lr.ph

.lr.ph:                                           ; preds = %1
  br label %7

._crit_edge:                                      ; preds = %182
  br label %6

; <label>:6:                                      ; preds = %._crit_edge, %1
  br label %185

; <label>:7:                                      ; preds = %.lr.ph, %182
  call void @unroll_loop(i32 87)
  %8 = load i32, i32* @wepkey_crack_success, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %7
  br label %185

; <label>:11:                                     ; preds = %7
  %12 = getelementptr inbounds [256 x [2 x i32]], [256 x [2 x i32]]* @bf_pipe, i64 0, i64 %3
  %13 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 0
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i32 0, i32 0
  %16 = call i32 @safe_read(i32 %14, i8* %15, i64 64)
  %17 = icmp ne i32 %16, 64
  br i1 %17, label %18, label %21

; <label>:18:                                     ; preds = %11
  %19 = getelementptr [12 x i8], [12 x i8]* @.str.27, i32 0, i32 0
  call void @perror(i8* %19)
  %20 = call i32 @kill(i32 0, i32 15) #9
  call void @_exit(i32 1) #12
  unreachable

; <label>:21:                                     ; preds = %11
  br label %22

; <label>:22:                                     ; preds = %21
  %23 = load i32, i32* @close_aircrack, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %26

; <label>:25:                                     ; preds = %22
  br label %185

; <label>:26:                                     ; preds = %22
  %27 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 4
  br i1 %29, label %30, label %79

; <label>:30:                                     ; preds = %26
  br label %31

; <label>:31:                                     ; preds = %30, %75
  %.0717 = phi i32 [ 0, %30 ], [ %76, %75 ]
  call void @unroll_loop(i32 88)
  %32 = trunc i32 %.0717 to i8
  %33 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 0
  %34 = load i32, i32* %33, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 %35
  store i8 %32, i8* %36, align 1
  br label %37

; <label>:37:                                     ; preds = %31, %71
  %.0516 = phi i32 [ 0, %31 ], [ %72, %71 ]
  call void @unroll_loop(i32 89)
  %38 = trunc i32 %.0516 to i8
  %39 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 1
  %40 = load i32, i32* %39, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 %41
  store i8 %38, i8* %42, align 1
  br label %43

; <label>:43:                                     ; preds = %37, %67
  %.0115 = phi i32 [ 0, %37 ], [ %68, %67 ]
  call void @unroll_loop(i32 90)
  %44 = trunc i32 %.0115 to i8
  %45 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 2
  %46 = load i32, i32* %45, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 %47
  store i8 %44, i8* %48, align 1
  br label %49

; <label>:49:                                     ; preds = %43, %63
  %.0214 = phi i32 [ 0, %43 ], [ %64, %63 ]
  call void @unroll_loop(i32 91)
  %50 = trunc i32 %.0214 to i8
  %51 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 3
  %52 = load i32, i32* %51, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 %53
  store i8 %50, i8* %54, align 1
  %55 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i32 0, i32 0
  %56 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %57 = load i32, i32* %56, align 4
  %58 = sub nsw i32 %57, 2
  %59 = call i32 @check_wep_key(i8* %55, i32 %58, i32 0)
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

; <label>:61:                                     ; preds = %49
  br label %185

; <label>:62:                                     ; preds = %49
  br label %63

; <label>:63:                                     ; preds = %62
  %64 = add nuw nsw i32 %.0214, 1
  %65 = icmp ult i32 %64, 256
  br i1 %65, label %49, label %66

; <label>:66:                                     ; preds = %63
  br label %67

; <label>:67:                                     ; preds = %66
  %68 = add nuw nsw i32 %.0115, 1
  %69 = icmp ult i32 %68, 256
  br i1 %69, label %43, label %70

; <label>:70:                                     ; preds = %67
  br label %71

; <label>:71:                                     ; preds = %70
  %72 = add nuw nsw i32 %.0516, 1
  %73 = icmp ult i32 %72, 256
  br i1 %73, label %37, label %74

; <label>:74:                                     ; preds = %71
  br label %75

; <label>:75:                                     ; preds = %74
  %76 = add nuw nsw i32 %.0717, 1
  %77 = icmp ult i32 %76, 256
  br i1 %77, label %31, label %78

; <label>:78:                                     ; preds = %75
  br label %176

; <label>:79:                                     ; preds = %26
  %80 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 3
  br i1 %82, label %83, label %122

; <label>:83:                                     ; preds = %79
  br label %84

; <label>:84:                                     ; preds = %83, %118
  %.1613 = phi i32 [ 0, %83 ], [ %119, %118 ]
  call void @unroll_loop(i32 92)
  %85 = trunc i32 %.1613 to i8
  %86 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 0
  %87 = load i32, i32* %86, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 %88
  store i8 %85, i8* %89, align 1
  br label %90

; <label>:90:                                     ; preds = %84, %114
  %.112 = phi i32 [ 0, %84 ], [ %115, %114 ]
  call void @unroll_loop(i32 93)
  %91 = trunc i32 %.112 to i8
  %92 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 1
  %93 = load i32, i32* %92, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 %94
  store i8 %91, i8* %95, align 1
  br label %96

; <label>:96:                                     ; preds = %90, %110
  %.1311 = phi i32 [ 0, %90 ], [ %111, %110 ]
  call void @unroll_loop(i32 94)
  %97 = trunc i32 %.1311 to i8
  %98 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 2
  %99 = load i32, i32* %98, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 %100
  store i8 %97, i8* %101, align 1
  %102 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i32 0, i32 0
  %103 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %104 = load i32, i32* %103, align 4
  %105 = sub nsw i32 %104, 2
  %106 = call i32 @check_wep_key(i8* %102, i32 %105, i32 0)
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %109

; <label>:108:                                    ; preds = %96
  br label %185

; <label>:109:                                    ; preds = %96
  br label %110

; <label>:110:                                    ; preds = %109
  %111 = add nuw nsw i32 %.1311, 1
  %112 = icmp ult i32 %111, 256
  br i1 %112, label %96, label %113

; <label>:113:                                    ; preds = %110
  br label %114

; <label>:114:                                    ; preds = %113
  %115 = add nuw nsw i32 %.112, 1
  %116 = icmp ult i32 %115, 256
  br i1 %116, label %90, label %117

; <label>:117:                                    ; preds = %114
  br label %118

; <label>:118:                                    ; preds = %117
  %119 = add nuw nsw i32 %.1613, 1
  %120 = icmp ult i32 %119, 256
  br i1 %120, label %84, label %121

; <label>:121:                                    ; preds = %118
  br label %175

; <label>:122:                                    ; preds = %79
  %123 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %124 = load i32, i32* %123, align 8
  %125 = icmp eq i32 %124, 2
  br i1 %125, label %126, label %155

; <label>:126:                                    ; preds = %122
  br label %127

; <label>:127:                                    ; preds = %126, %151
  %.210 = phi i32 [ 0, %126 ], [ %152, %151 ]
  call void @unroll_loop(i32 95)
  %128 = trunc i32 %.210 to i8
  %129 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 0
  %130 = load i32, i32* %129, align 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 %131
  store i8 %128, i8* %132, align 1
  br label %133

; <label>:133:                                    ; preds = %127, %147
  %.249 = phi i32 [ 0, %127 ], [ %148, %147 ]
  call void @unroll_loop(i32 96)
  %134 = trunc i32 %.249 to i8
  %135 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 1
  %136 = load i32, i32* %135, align 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 %137
  store i8 %134, i8* %138, align 1
  %139 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i32 0, i32 0
  %140 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %141 = load i32, i32* %140, align 4
  %142 = sub nsw i32 %141, 2
  %143 = call i32 @check_wep_key(i8* %139, i32 %142, i32 0)
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %146

; <label>:145:                                    ; preds = %133
  br label %185

; <label>:146:                                    ; preds = %133
  br label %147

; <label>:147:                                    ; preds = %146
  %148 = add nuw nsw i32 %.249, 1
  %149 = icmp ult i32 %148, 256
  br i1 %149, label %133, label %150

; <label>:150:                                    ; preds = %147
  br label %151

; <label>:151:                                    ; preds = %150
  %152 = add nuw nsw i32 %.210, 1
  %153 = icmp ult i32 %152, 256
  br i1 %153, label %127, label %154

; <label>:154:                                    ; preds = %151
  br label %174

; <label>:155:                                    ; preds = %122
  br label %156

; <label>:156:                                    ; preds = %155, %170
  %.38 = phi i32 [ 0, %155 ], [ %171, %170 ]
  call void @unroll_loop(i32 97)
  %157 = trunc i32 %.38 to i8
  %158 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31, i64 0
  %159 = load i32, i32* %158, align 4
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 %160
  store i8 %157, i8* %161, align 1
  %162 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i32 0, i32 0
  %163 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %164 = load i32, i32* %163, align 4
  %165 = sub nsw i32 %164, 2
  %166 = call i32 @check_wep_key(i8* %162, i32 %165, i32 0)
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %169

; <label>:168:                                    ; preds = %156
  br label %185

; <label>:169:                                    ; preds = %156
  br label %170

; <label>:170:                                    ; preds = %169
  %171 = add nuw nsw i32 %.38, 1
  %172 = icmp ult i32 %171, 256
  br i1 %172, label %156, label %173

; <label>:173:                                    ; preds = %170
  br label %174

; <label>:174:                                    ; preds = %173, %154
  br label %175

; <label>:175:                                    ; preds = %174, %121
  br label %176

; <label>:176:                                    ; preds = %175, %78
  %177 = icmp ne i32 1, 0
  br i1 %177, label %178, label %182

; <label>:178:                                    ; preds = %176
  %179 = getelementptr inbounds [256 x i32], [256 x i32]* @bf_nkeys, i64 0, i64 %3
  %180 = load i32, i32* %179, align 4
  %181 = add nsw i32 %180, -1
  store i32 %181, i32* %179, align 4
  br label %182

; <label>:182:                                    ; preds = %178, %176
  %183 = load i32, i32* @close_aircrack, align 4
  %184 = icmp ne i32 %183, 0
  br i1 %184, label %._crit_edge, label %7

; <label>:185:                                    ; preds = %168, %145, %108, %61, %25, %10, %6
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @show_wpa_stats(i8*, i32, i8*, i8*, i8*, i32) #0 {
  %7 = alloca [28 x i8], align 16, !track !180
  %8 = call float @chrono(%struct.timeval* @t_stats, i32 0)
  %9 = fpext float %8 to double
  %10 = fcmp olt double %9, 1.500000e-01
  br i1 %10, label %11, label %14

; <label>:11:                                     ; preds = %6
  %12 = icmp eq i32 %5, 0
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %11
  br label %177

; <label>:14:                                     ; preds = %11, %6
  %15 = icmp ne i32 %5, 0
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %14
  %17 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* @mx_wpastats) #9
  br label %23

; <label>:18:                                     ; preds = %14
  %19 = call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* @mx_wpastats) #9
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %18
  br label %177

; <label>:22:                                     ; preds = %18
  br label %23

; <label>:23:                                     ; preds = %22, %16
  %24 = call float @chrono(%struct.timeval* @t_stats, i32 1)
  %25 = call float @chrono(%struct.timeval* @t_begin, i32 0)
  %26 = fdiv float %25, 3.600000e+03
  %27 = fptosi float %26 to i32
  %28 = mul nsw i32 %27, 3600
  %29 = sitofp i32 %28 to float
  %30 = fsub float %25, %29
  %31 = fdiv float %30, 6.000000e+01
  %32 = fptosi float %31 to i32
  %33 = mul nsw i32 %27, 3600
  %34 = sitofp i32 %33 to float
  %35 = fsub float %25, %34
  %36 = mul nsw i32 %32, 60
  %37 = sitofp i32 %36 to float
  %38 = fsub float %35, %37
  %39 = fptosi float %38 to i32
  %40 = call float @chrono(%struct.timeval* @t_kprev, i32 0)
  %41 = fcmp oge float %40, 6.000000e+00
  br i1 %41, label %42, label %55

; <label>:42:                                     ; preds = %23
  %43 = fptosi float %40 to i32
  %44 = getelementptr %struct.timeval, %struct.timeval* @t_kprev, i32 0, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = add nsw i64 %45, 3
  %47 = getelementptr %struct.timeval, %struct.timeval* @t_kprev, i32 0, i32 0
  store i64 %46, i64* %47, align 8
  %48 = call float @chrono(%struct.timeval* @t_kprev, i32 0)
  %49 = sitofp i32 %43 to float
  %50 = fdiv float %48, %49
  %51 = load i64, i64* @nb_kprev, align 8
  %52 = sitofp i64 %51 to float
  %53 = fmul float %52, %50
  %54 = fptosi float %53 to i64
  store i64 %54, i64* @nb_kprev, align 8
  br label %55

; <label>:55:                                     ; preds = %42, %23
  %.01 = phi float [ %48, %42 ], [ %40, %23 ]
  %56 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %57 = load i32, i32* %56, align 4
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %62

; <label>:59:                                     ; preds = %55
  %60 = getelementptr [8 x i8], [8 x i8]* @.str.33, i32 0, i32 0
  %61 = call i32 (i8*, ...) @printf(i8* %60)
  br label %62

; <label>:62:                                     ; preds = %59, %55
  %63 = load i64, i64* @nb_tried, align 8
  %64 = load i64, i64* @nb_kprev, align 8
  %65 = sitofp i64 %64 to float
  %66 = fdiv float %65, %.01
  %67 = fpext float %66 to double
  %68 = getelementptr [53 x i8], [53 x i8]* @.str.52, i32 0, i32 0
  %69 = call i32 (i8*, ...) @printf(i8* %68, i32 %27, i32 %32, i32 %39, i64 %63, double %67)
  %70 = getelementptr inbounds [28 x i8], [28 x i8]* %7, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %70, i8 32, i64 28, i1 false)
  %71 = getelementptr inbounds [28 x i8], [28 x i8]* %7, i32 0, i32 0
  %72 = icmp sgt i32 %1, 27
  br i1 %72, label %73, label %74

; <label>:73:                                     ; preds = %62
  br label %75

; <label>:74:                                     ; preds = %62
  br label %75

; <label>:75:                                     ; preds = %74, %73
  %76 = phi i32 [ 27, %73 ], [ %1, %74 ]
  %77 = sext i32 %76 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %71, i8* align 1 %0, i64 %77, i1 false), !track !181
  %78 = getelementptr inbounds [28 x i8], [28 x i8]* %7, i64 0, i64 27
  store i8 0, i8* %78, align 1
  %79 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %80 = load i32, i32* %79, align 4
  %81 = icmp ne i32 %80, 0
  br i1 %81, label %82, label %85

; <label>:82:                                     ; preds = %75
  %83 = getelementptr [8 x i8], [8 x i8]* @.str.53, i32 0, i32 0
  %84 = call i32 (i8*, ...) @printf(i8* %83)
  br label %85

; <label>:85:                                     ; preds = %82, %75
  %86 = getelementptr inbounds [28 x i8], [28 x i8]* %7, i32 0, i32 0
  %87 = getelementptr [31 x i8], [31 x i8]* @.str.54, i32 0, i32 0
  %88 = call i32 (i8*, ...) @printf(i8* %87, i8* %86)
  %89 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %90 = load i32, i32* %89, align 4
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %92, label %95

; <label>:92:                                     ; preds = %85
  %93 = getelementptr [9 x i8], [9 x i8]* @.str.36, i32 0, i32 0
  %94 = call i32 (i8*, ...) @printf(i8* %93)
  br label %95

; <label>:95:                                     ; preds = %92, %85
  %96 = getelementptr [25 x i8], [25 x i8]* @.str.55, i32 0, i32 0
  %97 = call i32 (i8*, ...) @printf(i8* %96)
  %98 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %99 = load i32, i32* %98, align 4
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %101, label %104

; <label>:101:                                    ; preds = %95
  %102 = getelementptr [8 x i8], [8 x i8]* @.str.56, i32 0, i32 0
  %103 = call i32 (i8*, ...) @printf(i8* %102)
  br label %104

; <label>:104:                                    ; preds = %101, %95
  br label %105

; <label>:105:                                    ; preds = %104, %116
  %indvars.iv8 = phi i64 [ 0, %104 ], [ %indvars.iv.next9, %116 ]
  call void @unroll_loop(i32 98)
  %106 = icmp eq i64 %indvars.iv8, 16
  br i1 %106, label %107, label %110

; <label>:107:                                    ; preds = %105
  %108 = getelementptr [7 x i8], [7 x i8]* @.str.57, i32 0, i32 0
  %109 = call i32 (i8*, ...) @printf(i8* %108)
  br label %110

; <label>:110:                                    ; preds = %107, %105
  %111 = getelementptr inbounds i8, i8* %2, i64 %indvars.iv8
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = getelementptr [6 x i8], [6 x i8]* @.str.58, i32 0, i32 0
  %115 = call i32 (i8*, ...) @printf(i8* %114, i32 %113)
  br label %116

; <label>:116:                                    ; preds = %110
  %indvars.iv.next9 = add nuw nsw i64 %indvars.iv8, 1
  %exitcond10 = icmp ne i64 %indvars.iv.next9, 32
  br i1 %exitcond10, label %105, label %117

; <label>:117:                                    ; preds = %116
  %118 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %119 = load i32, i32* %118, align 4
  %120 = icmp ne i32 %119, 0
  br i1 %120, label %121, label %124

; <label>:121:                                    ; preds = %117
  %122 = getelementptr [9 x i8], [9 x i8]* @.str.36, i32 0, i32 0
  %123 = call i32 (i8*, ...) @printf(i8* %122)
  br label %124

; <label>:124:                                    ; preds = %121, %117
  %125 = getelementptr [25 x i8], [25 x i8]* @.str.59, i32 0, i32 0
  %126 = call i32 (i8*, ...) @printf(i8* %125)
  %127 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %128 = load i32, i32* %127, align 4
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %130, label %133

; <label>:130:                                    ; preds = %124
  %131 = getelementptr [8 x i8], [8 x i8]* @.str.56, i32 0, i32 0
  %132 = call i32 (i8*, ...) @printf(i8* %131)
  br label %133

; <label>:133:                                    ; preds = %130, %124
  br label %134

; <label>:134:                                    ; preds = %133, %148
  %indvars.iv4 = phi i64 [ 0, %133 ], [ %indvars.iv.next5, %148 ]
  call void @unroll_loop(i32 99)
  %135 = icmp ugt i64 %indvars.iv4, 0
  br i1 %135, label %136, label %142

; <label>:136:                                    ; preds = %134
  %137 = trunc i64 %indvars.iv4 to i32
  %.urem = urem i32 %137, 16
  %138 = icmp eq i32 %.urem, 0
  br i1 %138, label %139, label %142

; <label>:139:                                    ; preds = %136
  %140 = getelementptr [7 x i8], [7 x i8]* @.str.57, i32 0, i32 0
  %141 = call i32 (i8*, ...) @printf(i8* %140)
  br label %142

; <label>:142:                                    ; preds = %139, %136, %134
  %143 = getelementptr inbounds i8, i8* %3, i64 %indvars.iv4
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = getelementptr [6 x i8], [6 x i8]* @.str.58, i32 0, i32 0
  %147 = call i32 (i8*, ...) @printf(i8* %146, i32 %145)
  br label %148

; <label>:148:                                    ; preds = %142
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp ne i64 %indvars.iv.next5, 64
  br i1 %exitcond6, label %134, label %149

; <label>:149:                                    ; preds = %148
  %150 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %151 = load i32, i32* %150, align 4
  %152 = icmp ne i32 %151, 0
  br i1 %152, label %153, label %156

; <label>:153:                                    ; preds = %149
  %154 = getelementptr [9 x i8], [9 x i8]* @.str.36, i32 0, i32 0
  %155 = call i32 (i8*, ...) @printf(i8* %154)
  br label %156

; <label>:156:                                    ; preds = %153, %149
  %157 = getelementptr [25 x i8], [25 x i8]* @.str.60, i32 0, i32 0
  %158 = call i32 (i8*, ...) @printf(i8* %157)
  %159 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %160 = load i32, i32* %159, align 4
  %161 = icmp ne i32 %160, 0
  br i1 %161, label %162, label %165

; <label>:162:                                    ; preds = %156
  %163 = getelementptr [8 x i8], [8 x i8]* @.str.56, i32 0, i32 0
  %164 = call i32 (i8*, ...) @printf(i8* %163)
  br label %165

; <label>:165:                                    ; preds = %162, %156
  br label %166

; <label>:166:                                    ; preds = %165, %172
  %indvars.iv = phi i64 [ 0, %165 ], [ %indvars.iv.next, %172 ]
  call void @unroll_loop(i32 100)
  %167 = getelementptr inbounds i8, i8* %4, i64 %indvars.iv
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i32
  %170 = getelementptr [6 x i8], [6 x i8]* @.str.58, i32 0, i32 0
  %171 = call i32 (i8*, ...) @printf(i8* %170, i32 %169)
  br label %172

; <label>:172:                                    ; preds = %166
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 16
  br i1 %exitcond, label %166, label %173

; <label>:173:                                    ; preds = %172
  %174 = getelementptr [2 x i8], [2 x i8]* @.str.2, i32 0, i32 0
  %175 = call i32 (i8*, ...) @printf(i8* %174)
  %176 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @mx_wpastats) #9
  br label %177

; <label>:177:                                    ; preds = %173, %21, %13
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @crack_wpa_thread(i8*) #0 {
  %2 = alloca [36 x i8], align 16, !track !182
  %3 = alloca [4 x [128 x i8]], align 16, !track !183
  %4 = alloca [4 x [128 x i8]], align 16, !track !184
  %5 = alloca [100 x i8], align 16, !track !185
  %6 = alloca [4 x [80 x i8]], align 16, !track !186
  %7 = alloca [4 x [20 x i8]], align 16, !track !187
  %8 = alloca i32, align 4
  store i32 0, i32* %8, align 4
  %9 = call i32 @shasse2_cpuid()
  %10 = icmp sge i32 %9, 2
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %1
  br label %12

; <label>:12:                                     ; preds = %11, %1
  %.01 = phi i32 [ 4, %11 ], [ 1, %1 ]
  %13 = bitcast i8* %0 to %struct.WPA_data*
  %14 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %13, i32 0, i32 0
  %15 = load %struct.AP_info*, %struct.AP_info** %14, align 8
  %16 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %13, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds [36 x i8], [36 x i8]* %2, i32 0, i32 0
  %19 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 2
  %20 = getelementptr inbounds [33 x i8], [33 x i8]* %19, i32 0, i32 0
  %21 = call i8* @strncpy(i8* %18, i8* %20, i64 36) #9, !track !188
  %22 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %23 = getelementptr [23 x i8], [23 x i8]* @.str.61, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %22, i8* align 1 %23, i64 23, i1 false), !track !189
  %24 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %25 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %24, i32 0, i32 0
  %26 = getelementptr inbounds [6 x i8], [6 x i8]* %25, i32 0, i32 0
  %27 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 1
  %28 = getelementptr inbounds [6 x i8], [6 x i8]* %27, i32 0, i32 0
  %29 = call i32 @memcmp(i8* %26, i8* %28, i64 6) #10
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %31, label %41

; <label>:31:                                     ; preds = %12
  %32 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %33 = getelementptr inbounds i8, i8* %32, i64 23
  %34 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %35 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %34, i32 0, i32 0
  %36 = getelementptr inbounds [6 x i8], [6 x i8]* %35, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 8 %36, i64 6, i1 false), !track !190
  %37 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %38 = getelementptr inbounds i8, i8* %37, i64 29
  %39 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 1
  %40 = getelementptr inbounds [6 x i8], [6 x i8]* %39, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 8 %40, i64 6, i1 false), !track !191
  br label %51

; <label>:41:                                     ; preds = %12
  %42 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %43 = getelementptr inbounds i8, i8* %42, i64 23
  %44 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 1
  %45 = getelementptr inbounds [6 x i8], [6 x i8]* %44, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 8 %45, i64 6, i1 false), !track !192
  %46 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %47 = getelementptr inbounds i8, i8* %46, i64 29
  %48 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %49 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %48, i32 0, i32 0
  %50 = getelementptr inbounds [6 x i8], [6 x i8]* %49, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 8 %50, i64 6, i1 false), !track !193
  br label %51

; <label>:51:                                     ; preds = %41, %31
  %52 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %53 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %52, i32 0, i32 1
  %54 = getelementptr inbounds [32 x i8], [32 x i8]* %53, i32 0, i32 0
  %55 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %56 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %55, i32 0, i32 2
  %57 = getelementptr inbounds [32 x i8], [32 x i8]* %56, i32 0, i32 0
  %58 = call i32 @memcmp(i8* %54, i8* %57, i64 32) #10
  %59 = icmp slt i32 %58, 0
  br i1 %59, label %60, label %71

; <label>:60:                                     ; preds = %51
  %61 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %62 = getelementptr inbounds i8, i8* %61, i64 35
  %63 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %64 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %63, i32 0, i32 1
  %65 = getelementptr inbounds [32 x i8], [32 x i8]* %64, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 2 %65, i64 32, i1 false), !track !194
  %66 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %67 = getelementptr inbounds i8, i8* %66, i64 67
  %68 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %69 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %68, i32 0, i32 2
  %70 = getelementptr inbounds [32 x i8], [32 x i8]* %69, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 2 %70, i64 32, i1 false), !track !195
  br label %82

; <label>:71:                                     ; preds = %51
  %72 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %73 = getelementptr inbounds i8, i8* %72, i64 35
  %74 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %75 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %74, i32 0, i32 2
  %76 = getelementptr inbounds [32 x i8], [32 x i8]* %75, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 2 %76, i64 32, i1 false), !track !196
  %77 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %78 = getelementptr inbounds i8, i8* %77, i64 67
  %79 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %80 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %79, i32 0, i32 1
  %81 = getelementptr inbounds [32 x i8], [32 x i8]* %80, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 2 %81, i64 32, i1 false), !track !197
  br label %82

; <label>:82:                                     ; preds = %71, %60
  %83 = getelementptr inbounds [36 x i8], [36 x i8]* %2, i32 0, i32 0
  %84 = call i64 @strlen(i8* %83) #10
  %85 = add i64 %84, 4
  %86 = trunc i64 %85 to i32
  %87 = zext i32 %.01 to i64
  %88 = zext i32 %.01 to i64
  %89 = load i32, i32* @close_aircrack, align 4
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %91, label %.lr.ph26

.lr.ph26:                                         ; preds = %82
  br label %93

._crit_edge27:                                    ; preds = %348
  br label %91

; <label>:91:                                     ; preds = %._crit_edge27, %82
  %92 = bitcast i32* %8 to i8*
  call void @pthread_exit(i8* %92) #12
  unreachable

; <label>:93:                                     ; preds = %.lr.ph26, %348
  call void @unroll_loop(i32 101)
  br label %94

; <label>:94:                                     ; preds = %93, %115
  %indvars.iv13 = phi i64 [ 0, %93 ], [ %indvars.iv.next14, %115 ]
  call void @unroll_loop(i32 102)
  %95 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 %indvars.iv13
  %96 = getelementptr inbounds [128 x i8], [128 x i8]* %95, i64 0, i64 0
  store i8 0, i8* %96, align 16
  %97 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 %indvars.iv13
  %98 = getelementptr inbounds [128 x i8], [128 x i8]* %97, i32 0, i32 0
  %99 = call i32 @wpa_receive_passphrase(i8* %98, %struct.WPA_data* %13)
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %.lr.ph11, label %.loopexit

.lr.ph11:                                         ; preds = %94
  br label %101

; <label>:101:                                    ; preds = %.lr.ph11, %108
  call void @unroll_loop(i32 103)
  %102 = load i32, i32* @wpa_wordlists_done, align 4
  %103 = icmp eq i32 %102, 1
  br i1 %103, label %104, label %108

; <label>:104:                                    ; preds = %101
  %105 = icmp eq i64 %indvars.iv13, 0
  br i1 %105, label %106, label %107

; <label>:106:                                    ; preds = %104
  br label %351

; <label>:107:                                    ; preds = %104
  br label %112

; <label>:108:                                    ; preds = %101
  %109 = call i32 @sched_yield() #9
  %110 = call i32 @wpa_receive_passphrase(i8* %98, %struct.WPA_data* %13)
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %101, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %108
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %94
  br label %112

; <label>:112:                                    ; preds = %.loopexit, %107
  %113 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 %indvars.iv13
  %114 = getelementptr inbounds [128 x i8], [128 x i8]* %113, i64 0, i64 127
  store i8 0, i8* %114, align 1
  br label %115

; <label>:115:                                    ; preds = %112
  %indvars.iv.next14 = add nuw nsw i64 %indvars.iv13, 1
  %116 = icmp ult i64 %indvars.iv.next14, %87
  br i1 %116, label %94, label %117

; <label>:117:                                    ; preds = %115
  %118 = icmp eq i32 %.01, 4
  br i1 %118, label %119, label %137

; <label>:119:                                    ; preds = %117
  %120 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 0
  %121 = getelementptr inbounds [128 x i8], [128 x i8]* %120, i32 0, i32 0
  %122 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 1
  %123 = getelementptr inbounds [128 x i8], [128 x i8]* %122, i32 0, i32 0
  %124 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 2
  %125 = getelementptr inbounds [128 x i8], [128 x i8]* %124, i32 0, i32 0
  %126 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 3
  %127 = getelementptr inbounds [128 x i8], [128 x i8]* %126, i32 0, i32 0
  %128 = getelementptr inbounds [36 x i8], [36 x i8]* %2, i32 0, i32 0
  %129 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %4, i64 0, i64 0
  %130 = getelementptr inbounds [128 x i8], [128 x i8]* %129, i32 0, i32 0
  %131 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %4, i64 0, i64 1
  %132 = getelementptr inbounds [128 x i8], [128 x i8]* %131, i32 0, i32 0
  %133 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %4, i64 0, i64 2
  %134 = getelementptr inbounds [128 x i8], [128 x i8]* %133, i32 0, i32 0
  %135 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %4, i64 0, i64 3
  %136 = getelementptr inbounds [128 x i8], [128 x i8]* %135, i32 0, i32 0
  call void @calc_4pmk(i8* %121, i8* %123, i8* %125, i8* %127, i8* %128, i8* %130, i8* %132, i8* %134, i8* %136)
  br label %146

; <label>:137:                                    ; preds = %117
  br label %138

; <label>:138:                                    ; preds = %137, %144
  %indvars.iv16 = phi i64 [ 0, %137 ], [ %indvars.iv.next17, %144 ]
  call void @unroll_loop(i32 104)
  %139 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 %indvars.iv16
  %140 = getelementptr inbounds [128 x i8], [128 x i8]* %139, i32 0, i32 0
  %141 = getelementptr inbounds [36 x i8], [36 x i8]* %2, i32 0, i32 0
  %142 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %4, i64 0, i64 %indvars.iv16
  %143 = getelementptr inbounds [128 x i8], [128 x i8]* %142, i32 0, i32 0
  call void @calc_pmk(i8* %140, i8* %141, i8* %143)
  br label %144

; <label>:144:                                    ; preds = %138
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next17, %87
  br i1 %exitcond1, label %138, label %145

; <label>:145:                                    ; preds = %144
  br label %146

; <label>:146:                                    ; preds = %145, %119
  br label %147

; <label>:147:                                    ; preds = %146, %317
  %indvars.iv23 = phi i64 [ 0, %146 ], [ %indvars.iv.next24, %317 ]
  call void @unroll_loop(i32 105)
  br label %148

; <label>:148:                                    ; preds = %147, %160
  %indvars.iv19 = phi i64 [ 0, %147 ], [ %indvars.iv.next20, %160 ]
  %.0618 = phi i32 [ 0, %147 ], [ %161, %160 ]
  call void @unroll_loop(i32 106)
  %149 = trunc i32 %.0618 to i8
  %150 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i64 0, i64 99
  store i8 %149, i8* %150, align 1
  %151 = call %struct.env_md_st* @EVP_sha1()
  %152 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %4, i64 0, i64 %indvars.iv23
  %153 = getelementptr inbounds [128 x i8], [128 x i8]* %152, i32 0, i32 0
  %154 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %155 = getelementptr inbounds [4 x [80 x i8]], [4 x [80 x i8]]* %6, i64 0, i64 %indvars.iv23
  %156 = getelementptr inbounds [80 x i8], [80 x i8]* %155, i32 0, i32 0
  %157 = mul nuw nsw i64 %indvars.iv19, 20
  %158 = getelementptr inbounds i8, i8* %156, i64 %157
  %159 = call i8* @HMAC(%struct.env_md_st* %151, i8* %153, i32 32, i8* %154, i64 100, i8* %158, i32* null)
  br label %160

; <label>:160:                                    ; preds = %148
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 1
  %161 = add nuw nsw i32 %.0618, 1
  %exitcond21 = icmp ne i64 %indvars.iv.next20, 4
  br i1 %exitcond21, label %148, label %162

; <label>:162:                                    ; preds = %160
  %163 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %164 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %163, i32 0, i32 6
  %165 = load i32, i32* %164, align 4
  %166 = icmp eq i32 %165, 1
  br i1 %166, label %167, label %181

; <label>:167:                                    ; preds = %162
  %168 = call %struct.env_md_st* @EVP_md5()
  %169 = getelementptr inbounds [4 x [80 x i8]], [4 x [80 x i8]]* %6, i64 0, i64 %indvars.iv23
  %170 = getelementptr inbounds [80 x i8], [80 x i8]* %169, i32 0, i32 0
  %171 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %172 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %171, i32 0, i32 4
  %173 = getelementptr inbounds [256 x i8], [256 x i8]* %172, i32 0, i32 0
  %174 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %175 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %174, i32 0, i32 5
  %176 = load i32, i32* %175, align 8
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds [4 x [20 x i8]], [4 x [20 x i8]]* %7, i64 0, i64 %indvars.iv23
  %179 = getelementptr inbounds [20 x i8], [20 x i8]* %178, i32 0, i32 0
  %180 = call i8* @HMAC(%struct.env_md_st* %168, i8* %170, i32 16, i8* %173, i64 %177, i8* %179, i32* null)
  br label %195

; <label>:181:                                    ; preds = %162
  %182 = call %struct.env_md_st* @EVP_sha1()
  %183 = getelementptr inbounds [4 x [80 x i8]], [4 x [80 x i8]]* %6, i64 0, i64 %indvars.iv23
  %184 = getelementptr inbounds [80 x i8], [80 x i8]* %183, i32 0, i32 0
  %185 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %186 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %185, i32 0, i32 4
  %187 = getelementptr inbounds [256 x i8], [256 x i8]* %186, i32 0, i32 0
  %188 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %189 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %188, i32 0, i32 5
  %190 = load i32, i32* %189, align 8
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds [4 x [20 x i8]], [4 x [20 x i8]]* %7, i64 0, i64 %indvars.iv23
  %193 = getelementptr inbounds [20 x i8], [20 x i8]* %192, i32 0, i32 0
  %194 = call i8* @HMAC(%struct.env_md_st* %182, i8* %184, i32 16, i8* %187, i64 %191, i8* %193, i32* null)
  br label %195

; <label>:195:                                    ; preds = %181, %167
  %196 = getelementptr inbounds [4 x [20 x i8]], [4 x [20 x i8]]* %7, i64 0, i64 %indvars.iv23
  %197 = getelementptr inbounds [20 x i8], [20 x i8]* %196, i32 0, i32 0
  %198 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %15, i32 0, i32 14
  %199 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %198, i32 0, i32 3
  %200 = getelementptr inbounds [16 x i8], [16 x i8]* %199, i32 0, i32 0
  %201 = call i32 @memcmp(i8* %197, i8* %200, i64 16) #10
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %316

; <label>:203:                                    ; preds = %195
  %.25.lcssa8.wide = phi i64 [ %indvars.iv23, %195 ]
  %204 = trunc i64 %.25.lcssa8.wide to i32
  %205 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %206 = load %struct._IO_FILE*, %struct._IO_FILE** %205, align 8
  %207 = icmp ne %struct._IO_FILE* %206, null
  br i1 %207, label %208, label %218

; <label>:208:                                    ; preds = %203
  %209 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 28
  %210 = load i32, i32* %209, align 8
  %211 = icmp ne i32 %210, 0
  br i1 %211, label %216, label %212

; <label>:212:                                    ; preds = %208
  %213 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %214 = load %struct._IO_FILE*, %struct._IO_FILE** %213, align 8
  %215 = call i32 @fclose(%struct._IO_FILE* %214)
  br label %216

; <label>:216:                                    ; preds = %212, %208
  %217 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  store %struct._IO_FILE* null, %struct._IO_FILE** %217, align 8
  br label %218

; <label>:218:                                    ; preds = %216, %203
  %219 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %220 = load i32, i32* %219, align 4
  %221 = icmp slt i32 0, %220
  br i1 %221, label %.lr.ph, label %237

.lr.ph:                                           ; preds = %218
  br label %222

; <label>:222:                                    ; preds = %.lr.ph, %232
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %232 ]
  call void @unroll_loop(i32 107)
  %223 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv
  %224 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %223, i32 0, i32 8
  %225 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %224) #9
  %226 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv
  %227 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %226, i32 0, i32 7
  %228 = call i32 @pthread_cond_signal(%union.pthread_cond_t* %227) #9
  %229 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv
  %230 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %229, i32 0, i32 8
  %231 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %230) #9
  br label %232

; <label>:232:                                    ; preds = %222
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %233 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %234 = load i32, i32* %233, align 4
  %235 = sext i32 %234 to i64
  %236 = icmp slt i64 %indvars.iv.next, %235
  br i1 %236, label %222, label %._crit_edge

._crit_edge:                                      ; preds = %232
  br label %237

; <label>:237:                                    ; preds = %._crit_edge, %218
  %238 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %13, i32 0, i32 6
  %239 = getelementptr inbounds [128 x i8], [128 x i8]* %238, i32 0, i32 0
  %240 = sext i32 %204 to i64
  %241 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 %240
  %242 = getelementptr inbounds [128 x i8], [128 x i8]* %241, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %239, i8* align 16 %242, i64 128, i1 false), !track !198
  %243 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %244 = load i32, i32* %243, align 8
  %245 = icmp ne i32 %244, 0
  br i1 %245, label %246, label %247

; <label>:246:                                    ; preds = %237
  br label %351

; <label>:247:                                    ; preds = %237
  %248 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* @mx_nb) #9
  %249 = load i64, i64* @nb_tried, align 8
  %250 = add nsw i64 %249, 4
  store i64 %250, i64* @nb_tried, align 8
  %251 = load i64, i64* @nb_kprev, align 8
  %252 = add nsw i64 %251, 4
  store i64 %252, i64* @nb_kprev, align 8
  %253 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @mx_nb) #9
  %254 = sext i32 %204 to i64
  %255 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 %254
  %256 = getelementptr inbounds [128 x i8], [128 x i8]* %255, i32 0, i32 0
  %257 = call i64 @strlen(i8* %256) #10
  %258 = trunc i64 %257 to i32
  %259 = icmp sgt i32 %258, 64
  br i1 %259, label %260, label %261

; <label>:260:                                    ; preds = %247
  br label %261

; <label>:261:                                    ; preds = %260, %247
  %.02 = phi i32 [ 64, %260 ], [ %258, %247 ]
  %262 = icmp slt i32 %.02, 8
  br i1 %262, label %263, label %264

; <label>:263:                                    ; preds = %261
  br label %264

; <label>:264:                                    ; preds = %263, %261
  %.1 = phi i32 [ 8, %263 ], [ %.02, %261 ]
  %265 = sext i32 %204 to i64
  %266 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 %265
  %267 = getelementptr inbounds [128 x i8], [128 x i8]* %266, i32 0, i32 0
  %268 = sext i32 %204 to i64
  %269 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %4, i64 0, i64 %268
  %270 = getelementptr inbounds [128 x i8], [128 x i8]* %269, i32 0, i32 0
  %271 = sext i32 %204 to i64
  %272 = getelementptr inbounds [4 x [80 x i8]], [4 x [80 x i8]]* %6, i64 0, i64 %271
  %273 = getelementptr inbounds [80 x i8], [80 x i8]* %272, i32 0, i32 0
  %274 = sext i32 %204 to i64
  %275 = getelementptr inbounds [4 x [20 x i8]], [4 x [20 x i8]]* %7, i64 0, i64 %274
  %276 = getelementptr inbounds [20 x i8], [20 x i8]* %275, i32 0, i32 0
  call void @show_wpa_stats(i8* %267, i32 %.1, i8* %270, i8* %273, i8* %276, i32 1)
  %277 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %278 = load i32, i32* %277, align 4
  %279 = icmp ne i32 %278, 0
  br i1 %279, label %280, label %283

; <label>:280:                                    ; preds = %264
  %281 = getelementptr [8 x i8], [8 x i8]* @.str.62, i32 0, i32 0
  %282 = call i32 (i8*, ...) @printf(i8* %281)
  br label %283

; <label>:283:                                    ; preds = %280, %264
  %284 = sub nsw i32 65, %.1
  %285 = sdiv i32 %284, 2
  %286 = sext i32 %204 to i64
  %287 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 %286
  %288 = getelementptr inbounds [128 x i8], [128 x i8]* %287, i32 0, i32 0
  %289 = getelementptr [35 x i8], [35 x i8]* @.str.63, i32 0, i32 0
  %290 = call i32 (i8*, ...) @printf(i8* %289, i32 %285, i8* %288)
  %291 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %292 = load i32, i32* %291, align 4
  %293 = icmp ne i32 %292, 0
  br i1 %293, label %294, label %297

; <label>:294:                                    ; preds = %283
  %295 = getelementptr [9 x i8], [9 x i8]* @.str.36, i32 0, i32 0
  %296 = call i32 (i8*, ...) @printf(i8* %295)
  br label %297

; <label>:297:                                    ; preds = %294, %283
  %298 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 42
  %299 = load i8*, i8** %298, align 8
  %300 = icmp ne i8* %299, null
  br i1 %300, label %301, label %315

; <label>:301:                                    ; preds = %297
  %302 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 42
  %303 = load i8*, i8** %302, align 8
  %304 = getelementptr [2 x i8], [2 x i8]* @.str.64, i32 0, i32 0
  %305 = call %struct._IO_FILE* @fopen64(i8* %303, i8* %304), !track !199
  %306 = icmp ne %struct._IO_FILE* %305, null
  br i1 %306, label %307, label %314

; <label>:307:                                    ; preds = %301
  %308 = sext i32 %204 to i64
  %309 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 %308
  %310 = getelementptr inbounds [128 x i8], [128 x i8]* %309, i32 0, i32 0
  %311 = getelementptr [3 x i8], [3 x i8]* @.str.65, i32 0, i32 0
  %312 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %305, i8* %311, i8* %310)
  %313 = call i32 @fclose(%struct._IO_FILE* %305)
  br label %314

; <label>:314:                                    ; preds = %307, %301
  br label %315

; <label>:315:                                    ; preds = %314, %297
  br label %351

; <label>:316:                                    ; preds = %195
  br label %317

; <label>:317:                                    ; preds = %316
  %indvars.iv.next24 = add nuw nsw i64 %indvars.iv23, 1
  %318 = icmp ult i64 %indvars.iv.next24, %88
  br i1 %318, label %147, label %319

; <label>:319:                                    ; preds = %317
  %320 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* @mx_nb) #9
  %321 = load i64, i64* @nb_tried, align 8
  %322 = add nsw i64 %321, 4
  store i64 %322, i64* @nb_tried, align 8
  %323 = load i64, i64* @nb_kprev, align 8
  %324 = add nsw i64 %323, 4
  store i64 %324, i64* @nb_kprev, align 8
  %325 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @mx_nb) #9
  %326 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %327 = load i32, i32* %326, align 8
  %328 = icmp ne i32 %327, 0
  br i1 %328, label %348, label %329

; <label>:329:                                    ; preds = %319
  %330 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 0
  %331 = getelementptr inbounds [128 x i8], [128 x i8]* %330, i32 0, i32 0
  %332 = call i64 @strlen(i8* %331) #10
  %333 = trunc i64 %332 to i32
  %334 = icmp sgt i32 %333, 64
  br i1 %334, label %335, label %336

; <label>:335:                                    ; preds = %329
  br label %336

; <label>:336:                                    ; preds = %335, %329
  %.2 = phi i32 [ 64, %335 ], [ %333, %329 ]
  %337 = icmp slt i32 %.2, 8
  br i1 %337, label %338, label %339

; <label>:338:                                    ; preds = %336
  br label %339

; <label>:339:                                    ; preds = %338, %336
  %.3 = phi i32 [ 8, %338 ], [ %.2, %336 ]
  %340 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %3, i64 0, i64 0
  %341 = getelementptr inbounds [128 x i8], [128 x i8]* %340, i32 0, i32 0
  %342 = getelementptr inbounds [4 x [128 x i8]], [4 x [128 x i8]]* %4, i64 0, i64 0
  %343 = getelementptr inbounds [128 x i8], [128 x i8]* %342, i32 0, i32 0
  %344 = getelementptr inbounds [4 x [80 x i8]], [4 x [80 x i8]]* %6, i64 0, i64 0
  %345 = getelementptr inbounds [80 x i8], [80 x i8]* %344, i32 0, i32 0
  %346 = getelementptr inbounds [4 x [20 x i8]], [4 x [20 x i8]]* %7, i64 0, i64 0
  %347 = getelementptr inbounds [20 x i8], [20 x i8]* %346, i32 0, i32 0
  call void @show_wpa_stats(i8* %341, i32 %.3, i8* %343, i8* %345, i8* %347, i32 0)
  br label %348

; <label>:348:                                    ; preds = %339, %319
  %349 = load i32, i32* @close_aircrack, align 4
  %350 = icmp ne i32 %349, 0
  br i1 %350, label %._crit_edge27, label %93

; <label>:351:                                    ; preds = %315, %246, %106
  ret i32 0
}

declare dso_local i32 @shasse2_cpuid() #1

; Function Attrs: noreturn
declare dso_local void @pthread_exit(i8*) #6

; Function Attrs: nounwind
declare dso_local i32 @sched_yield() #2

declare dso_local %struct.env_md_st* @EVP_md5() #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @next_dict(i32) #0 {
  %2 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8
  %4 = icmp ne %struct._IO_FILE* %3, null
  br i1 %4, label %5, label %15

; <label>:5:                                      ; preds = %1
  %6 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 28
  %7 = load i32, i32* %6, align 8
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %13, label %9

; <label>:9:                                      ; preds = %5
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8
  %12 = call i32 @fclose(%struct._IO_FILE* %11)
  br label %13

; <label>:13:                                     ; preds = %9, %5
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  store %struct._IO_FILE* null, %struct._IO_FILE** %14, align 8
  br label %15

; <label>:15:                                     ; preds = %13, %1
  %16 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  store i32 %0, i32* %16, align 8
  %17 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %18 = load i32, i32* %17, align 8
  %19 = sext i32 %18 to i64
  %20 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %21 = getelementptr inbounds [128 x i8*], [128 x i8*]* %20, i64 0, i64 %19
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %24, label %25

; <label>:24:                                     ; preds = %15
  br label %121

; <label>:25:                                     ; preds = %15
  br label %26

; <label>:26:                                     ; preds = %.backedge, %25
  call void @unroll_loop(i32 108)
  %27 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %28 = load i32, i32* %27, align 8
  %29 = icmp slt i32 %28, 128
  br i1 %29, label %30, label %38

; <label>:30:                                     ; preds = %26
  %31 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %32 = load i32, i32* %31, align 8
  %33 = sext i32 %32 to i64
  %34 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %35 = getelementptr inbounds [128 x i8*], [128 x i8*]* %34, i64 0, i64 %33
  %36 = load i8*, i8** %35, align 8
  %37 = icmp ne i8* %36, null
  br label %38

; <label>:38:                                     ; preds = %30, %26
  %39 = phi i1 [ false, %26 ], [ %37, %30 ]
  br i1 %39, label %40, label %.loopexit

; <label>:40:                                     ; preds = %38
  %41 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %42 = load i32, i32* %41, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %45 = getelementptr inbounds [128 x i8*], [128 x i8*]* %44, i64 0, i64 %43
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr [2 x i8], [2 x i8]* @.str.10, i32 0, i32 0
  %48 = call i32 @strcmp(i8* %46, i8* %47) #10
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %66

; <label>:50:                                     ; preds = %40
  %51 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 28
  store i32 1, i32* %51, align 8
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %53 = call i32 @fileno(%struct._IO_FILE* %52) #9
  %54 = getelementptr [2 x i8], [2 x i8]* @.str.66, i32 0, i32 0
  %55 = call %struct._IO_FILE* @fdopen(i32 %53, i8* %54) #9, !track !200
  %56 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  store %struct._IO_FILE* %55, %struct._IO_FILE** %56, align 8
  %57 = icmp eq %struct._IO_FILE* %55, null
  br i1 %57, label %58, label %64

; <label>:58:                                     ; preds = %50
  %59 = getelementptr [25 x i8], [25 x i8]* @.str.67, i32 0, i32 0
  call void @perror(i8* %59)
  %60 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %61 = load i32, i32* %60, align 8
  %62 = add nsw i32 %61, 1
  %63 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  store i32 %62, i32* %63, align 8
  br label %.backedge

.backedge:                                        ; preds = %58, %78, %92
  br label %26

; <label>:64:                                     ; preds = %50
  %65 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 24
  store i32 1, i32* %65, align 4
  br label %106

; <label>:66:                                     ; preds = %40
  %67 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 28
  store i32 0, i32* %67, align 8
  %68 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %69 = load i32, i32* %68, align 8
  %70 = sext i32 %69 to i64
  %71 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %72 = getelementptr inbounds [128 x i8*], [128 x i8*]* %71, i64 0, i64 %70
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr [2 x i8], [2 x i8]* @.str.66, i32 0, i32 0
  %75 = call %struct._IO_FILE* @fopen64(i8* %73, i8* %74), !track !201
  %76 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  store %struct._IO_FILE* %75, %struct._IO_FILE** %76, align 8
  %77 = icmp eq %struct._IO_FILE* %75, null
  br i1 %77, label %78, label %84

; <label>:78:                                     ; preds = %66
  %79 = getelementptr [25 x i8], [25 x i8]* @.str.67, i32 0, i32 0
  call void @perror(i8* %79)
  %80 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %81 = load i32, i32* %80, align 8
  %82 = add nsw i32 %81, 1
  %83 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  store i32 %82, i32* %83, align 8
  br label %.backedge

; <label>:84:                                     ; preds = %66
  %85 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %85, align 8
  %87 = call i32 @fseek(%struct._IO_FILE* %86, i64 0, i32 2)
  %88 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** %88, align 8
  %90 = call i64 @ftell(%struct._IO_FILE* %89)
  %91 = icmp sle i64 %90, 0
  br i1 %91, label %92, label %103

; <label>:92:                                     ; preds = %84
  %93 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** %93, align 8
  %95 = call i32 @fclose(%struct._IO_FILE* %94)
  %96 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  store %struct._IO_FILE* null, %struct._IO_FILE** %96, align 8
  %97 = getelementptr [18 x i8], [18 x i8]* @.str.68, i32 0, i32 0
  %98 = call i32 (i8*, ...) @printf(i8* %97)
  %99 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %100 = load i32, i32* %99, align 8
  %101 = add nsw i32 %100, 1
  %102 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  store i32 %101, i32* %102, align 8
  br label %.backedge

; <label>:103:                                    ; preds = %84
  %104 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %105 = load %struct._IO_FILE*, %struct._IO_FILE** %104, align 8
  call void @rewind(%struct._IO_FILE* %105)
  br label %106

; <label>:106:                                    ; preds = %103, %64
  br label %107

.loopexit:                                        ; preds = %38
  br label %107

; <label>:107:                                    ; preds = %.loopexit, %106
  %108 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %109 = load i32, i32* %108, align 8
  %110 = icmp sge i32 %109, 128
  br i1 %110, label %119, label %111

; <label>:111:                                    ; preds = %107
  %112 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %113 = load i32, i32* %112, align 8
  %114 = sext i32 %113 to i64
  %115 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %116 = getelementptr inbounds [128 x i8*], [128 x i8*]* %115, i64 0, i64 %114
  %117 = load i8*, i8** %116, align 8
  %118 = icmp eq i8* %117, null
  br i1 %118, label %119, label %120

; <label>:119:                                    ; preds = %111, %107
  br label %121

; <label>:120:                                    ; preds = %111
  br label %121

; <label>:121:                                    ; preds = %120, %119, %24
  %.0 = phi i32 [ 1, %24 ], [ 1, %119 ], [ 0, %120 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local %struct._IO_FILE* @fdopen(i32, i8*) #2

declare dso_local i32 @fseek(%struct._IO_FILE*, i64, i32) #1

declare dso_local i64 @ftell(%struct._IO_FILE*) #1

declare dso_local void @rewind(%struct._IO_FILE*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @do_wpa_crack() #0 {
  %1 = alloca [128 x i8], align 16, !track !202
  %2 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  store i32 2, i32* %2, align 8
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %6 = load i32, i32* %5, align 8
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %28, label %8

; <label>:8:                                      ; preds = %0
  %9 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %10 = load i32, i32* %9, align 4
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %15

; <label>:12:                                     ; preds = %8
  %13 = getelementptr [9 x i8], [9 x i8]* @.str.69, i32 0, i32 0
  %14 = call i32 (i8*, ...) @printf(i8* %13)
  br label %15

; <label>:15:                                     ; preds = %12, %8
  %16 = getelementptr [5 x i8], [5 x i8]* @.str.30, i32 0, i32 0
  %17 = call i32 (i8*, ...) @printf(i8* %16)
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %19 = load i32, i32* %18, align 4
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %24

; <label>:21:                                     ; preds = %15
  %22 = getelementptr [8 x i8], [8 x i8]* @.str.31, i32 0, i32 0
  %23 = call i32 (i8*, ...) @printf(i8* %22)
  br label %24

; <label>:24:                                     ; preds = %21, %15
  %25 = load i8*, i8** @progname, align 8
  %26 = getelementptr [10 x i8], [10 x i8]* @.str.70, i32 0, i32 0
  %27 = call i32 (i8*, ...) @printf(i8* %26, i8* %25)
  br label %28

; <label>:28:                                     ; preds = %24, %0
  %29 = icmp sgt i32 %4, 0
  br i1 %29, label %.lr.ph26, label %149

.lr.ph26:                                         ; preds = %28
  br label %30

; <label>:30:                                     ; preds = %.lr.ph26, %148
  %.0124 = phi i32 [ 0, %.lr.ph26 ], [ %.7.lcssa, %148 ]
  %.0323 = phi i32 [ 0, %.lr.ph26 ], [ %.25, %148 ]
  %.0622 = phi i32 [ 0, %.lr.ph26 ], [ %.28, %148 ]
  call void @unroll_loop(i32 109)
  %31 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %31, align 8
  %33 = icmp eq %struct._IO_FILE* %32, null
  br i1 %33, label %34, label %35

; <label>:34:                                     ; preds = %30
  br label %150

; <label>:35:                                     ; preds = %30
  br label %36

; <label>:36:                                     ; preds = %114, %35
  %.1 = phi i32 [ %.0124, %35 ], [ %.6, %114 ]
  call void @unroll_loop(i32 110)
  %37 = getelementptr inbounds [128 x i8], [128 x i8]* %1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %37, i8 0, i64 128, i1 false)
  %38 = getelementptr inbounds [128 x i8], [128 x i8]* %1, i32 0, i32 0
  %39 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %39, align 8
  %41 = call i8* @fgets(i8* %38, i32 128, %struct._IO_FILE* %40), !track !203
  %42 = icmp eq i8* %41, null
  br i1 %42, label %43, label %58

; <label>:43:                                     ; preds = %36
  %44 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %45 = load i32, i32* %44, align 4
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %50

; <label>:47:                                     ; preds = %43
  %48 = getelementptr [9 x i8], [9 x i8]* @.str.36, i32 0, i32 0
  %49 = call i32 (i8*, ...) @printf(i8* %48)
  br label %50

; <label>:50:                                     ; preds = %47, %43
  %51 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %52 = load i32, i32* %51, align 8
  %53 = add nsw i32 %52, 1
  %54 = call i32 @next_dict(i32 %53)
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %57

; <label>:56:                                     ; preds = %50
  br label %150

; <label>:57:                                     ; preds = %50
  br label %114

; <label>:58:                                     ; preds = %36
  %59 = getelementptr inbounds [128 x i8], [128 x i8]* %1, i32 0, i32 0
  %60 = call i64 @strlen(i8* %59) #10
  %61 = trunc i64 %60 to i32
  %62 = icmp slt i32 %61, 8
  br i1 %62, label %63, label %64

; <label>:63:                                     ; preds = %58
  br label %114

; <label>:64:                                     ; preds = %58
  %65 = icmp sgt i32 %61, 64
  br i1 %65, label %66, label %67

; <label>:66:                                     ; preds = %64
  br label %67

; <label>:67:                                     ; preds = %66, %64
  %.2 = phi i32 [ 64, %66 ], [ %61, %64 ]
  %68 = sub i32 %.2, -1
  %69 = sext i32 %68 to i64
  %70 = add i64 %69, -1
  br label %71

; <label>:71:                                     ; preds = %87, %67
  %indvars.iv = phi i64 [ %indvars.iv.next, %87 ], [ %70, %67 ]
  call void @unroll_loop(i32 111)
  %72 = icmp sgt i64 %indvars.iv, 0
  br i1 %72, label %73, label %87

; <label>:73:                                     ; preds = %71
  %74 = sub nsw i64 %indvars.iv, 1
  %75 = getelementptr inbounds [128 x i8], [128 x i8]* %1, i64 0, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = sext i8 %76 to i32
  %78 = icmp eq i32 %77, 13
  br i1 %78, label %85, label %79

; <label>:79:                                     ; preds = %73
  %80 = sub nsw i64 %indvars.iv, 1
  %81 = getelementptr inbounds [128 x i8], [128 x i8]* %1, i64 0, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = sext i8 %82 to i32
  %84 = icmp eq i32 %83, 10
  br label %85

; <label>:85:                                     ; preds = %79, %73
  %86 = phi i1 [ true, %73 ], [ %84, %79 ]
  br label %87

; <label>:87:                                     ; preds = %85, %71
  %88 = phi i1 [ false, %71 ], [ %86, %85 ]
  %indvars.iv.next = add i64 %indvars.iv, -1
  br i1 %88, label %71, label %89

; <label>:89:                                     ; preds = %87
  %.3.lcssa.wide = phi i64 [ %indvars.iv, %87 ]
  %90 = trunc i64 %.3.lcssa.wide to i32
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

; <label>:92:                                     ; preds = %89
  br label %114

; <label>:93:                                     ; preds = %89
  %94 = sext i32 %90 to i64
  %95 = getelementptr inbounds [128 x i8], [128 x i8]* %1, i64 0, i64 %94
  store i8 0, i8* %95, align 1
  %96 = icmp slt i32 0, %90
  br i1 %96, label %.lr.ph, label %113

.lr.ph:                                           ; preds = %93
  br label %97

; <label>:97:                                     ; preds = %.lr.ph, %110
  %indvars.iv13 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next14, %110 ]
  %.412 = phi i32 [ %90, %.lr.ph ], [ %.5, %110 ]
  call void @unroll_loop(i32 112)
  %98 = getelementptr inbounds [128 x i8], [128 x i8]* %1, i64 0, i64 %indvars.iv13
  %99 = load i8, i8* %98, align 1
  %100 = sext i8 %99 to i32
  %101 = and i32 %100, -128
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %108

; <label>:103:                                    ; preds = %97
  %104 = getelementptr inbounds [128 x i8], [128 x i8]* %1, i64 0, i64 %indvars.iv13
  %105 = load i8, i8* %104, align 1
  %106 = sext i8 %105 to i32
  %107 = icmp slt i32 %106, 32
  br i1 %107, label %108, label %109

; <label>:108:                                    ; preds = %103, %97
  br label %109

; <label>:109:                                    ; preds = %108, %103
  %.5 = phi i32 [ 0, %108 ], [ %.412, %103 ]
  br label %110

; <label>:110:                                    ; preds = %109
  %indvars.iv.next14 = add nuw nsw i64 %indvars.iv13, 1
  %111 = sext i32 %.5 to i64
  %112 = icmp slt i64 %indvars.iv.next14, %111
  br i1 %112, label %97, label %._crit_edge

._crit_edge:                                      ; preds = %110
  %split = phi i32 [ %.5, %110 ]
  br label %113

; <label>:113:                                    ; preds = %._crit_edge, %93
  %.4.lcssa = phi i32 [ %split, %._crit_edge ], [ %90, %93 ]
  br label %114

; <label>:114:                                    ; preds = %113, %92, %63, %57
  %.6 = phi i32 [ %.1, %57 ], [ %61, %63 ], [ %90, %92 ], [ %.4.lcssa, %113 ]
  %115 = icmp slt i32 %.6, 8
  br i1 %115, label %36, label %116

; <label>:116:                                    ; preds = %114
  %117 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %118 = load i32, i32* %117, align 4
  %119 = icmp slt i32 0, %118
  br i1 %119, label %.lr.ph18, label %.loopexit

.lr.ph18:                                         ; preds = %116
  br label %120

; <label>:120:                                    ; preds = %.lr.ph18, %132
  %.716 = phi i32 [ 0, %.lr.ph18 ], [ %133, %132 ]
  %.1415 = phi i32 [ %.0323, %.lr.ph18 ], [ %131, %132 ]
  call void @unroll_loop(i32 113)
  %121 = getelementptr inbounds [128 x i8], [128 x i8]* %1, i32 0, i32 0
  %122 = sext i32 %.1415 to i64
  %123 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %122
  %124 = call i32 @wpa_send_passphrase(i8* %121, %struct.WPA_data* %123, i32 0)
  %125 = icmp ne i32 %124, 0
  br i1 %125, label %126, label %127

; <label>:126:                                    ; preds = %120
  %.lcssa = phi i32 [ %124, %120 ]
  %.14.lcssa10 = phi i32 [ %.1415, %120 ]
  %.7.lcssa9 = phi i32 [ %.716, %120 ]
  br label %137

; <label>:127:                                    ; preds = %120
  %128 = add nsw i32 %.1415, 1
  %129 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %130 = load i32, i32* %129, align 4
  %131 = srem i32 %128, %130
  br label %132

; <label>:132:                                    ; preds = %127
  %133 = add nuw nsw i32 %.716, 1
  %134 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %135 = load i32, i32* %134, align 4
  %136 = icmp slt i32 %133, %135
  br i1 %136, label %120, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %132
  %split19 = phi i32 [ %131, %132 ]
  %split20 = phi i32 [ %133, %132 ]
  %split21 = phi i32 [ %124, %132 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %116
  %.14.lcssa.ph = phi i32 [ %split19, %..loopexit_crit_edge ], [ %.0323, %116 ]
  %.7.lcssa.ph = phi i32 [ %split20, %..loopexit_crit_edge ], [ 0, %116 ]
  %.28.ph = phi i32 [ %split21, %..loopexit_crit_edge ], [ %.0622, %116 ]
  br label %137

; <label>:137:                                    ; preds = %.loopexit, %126
  %.14.lcssa = phi i32 [ %.14.lcssa10, %126 ], [ %.14.lcssa.ph, %.loopexit ]
  %.7.lcssa = phi i32 [ %.7.lcssa9, %126 ], [ %.7.lcssa.ph, %.loopexit ]
  %.28 = phi i32 [ %.lcssa, %126 ], [ %.28.ph, %.loopexit ]
  %138 = icmp eq i32 %.28, 0
  br i1 %138, label %139, label %148

; <label>:139:                                    ; preds = %137
  %140 = getelementptr inbounds [128 x i8], [128 x i8]* %1, i32 0, i32 0
  %141 = sext i32 %.14.lcssa to i64
  %142 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %141
  %143 = call i32 @wpa_send_passphrase(i8* %140, %struct.WPA_data* %142, i32 1)
  %144 = add nsw i32 %.14.lcssa, 1
  %145 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %146 = load i32, i32* %145, align 4
  %147 = srem i32 %144, %146
  br label %148

; <label>:148:                                    ; preds = %139, %137
  %.25 = phi i32 [ %147, %139 ], [ %.14.lcssa, %137 ]
  br i1 %29, label %30, label %._crit_edge27

._crit_edge27:                                    ; preds = %148
  br label %149

; <label>:149:                                    ; preds = %._crit_edge27, %28
  br label %150

; <label>:150:                                    ; preds = %149, %56, %34
  ret i32 1
}

declare dso_local i8* @fgets(i8*, i32, %struct._IO_FILE*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @next_key(i8**, i32) #0 {
  %3 = alloca i8*, align 8, !track !204
  %4 = alloca i32, align 4, !track !205
  %5 = call noalias i8* @malloc(i64 1024) #9, !track !206
  store i8* %5, i8** %3, align 8
  %6 = sext i32 %1 to i64
  store i8* %5, i8** %3, align 8
  %7 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %9 = icmp eq %struct._IO_FILE* %8, null
  br i1 %9, label %10, label %.lr.ph

.lr.ph:                                           ; preds = %2
  br label %12

._crit_edge:                                      ; preds = %.backedge
  br label %10

; <label>:10:                                     ; preds = %._crit_edge, %2
  %11 = load i8*, i8** %3, align 8
  call void @free(i8* %11) #9
  store i8* null, i8** %3, align 8
  br label %176

; <label>:12:                                     ; preds = %.lr.ph, %.backedge
  call void @unroll_loop(i32 114)
  %13 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %14 = load i32, i32* %13, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 25
  %17 = getelementptr inbounds [128 x i32], [128 x i32]* %16, i64 0, i64 %15
  %18 = load i32, i32* %17, align 4
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %112

; <label>:20:                                     ; preds = %12
  %21 = load i8*, i8** %3, align 8
  %22 = mul nsw i32 %1, 2
  %23 = sub nsw i32 %1, 1
  %24 = add nsw i32 %22, %23
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %25, align 8
  %27 = call i8* @fgets(i8* %21, i32 %24, %struct._IO_FILE* %26), !track !207
  %28 = icmp eq i8* %27, null
  br i1 %28, label %29, label %45

; <label>:29:                                     ; preds = %20
  %30 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %31 = load i32, i32* %30, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %36

; <label>:33:                                     ; preds = %29
  %34 = getelementptr [9 x i8], [9 x i8]* @.str.36, i32 0, i32 0
  %35 = call i32 (i8*, ...) @printf(i8* %34)
  br label %36

; <label>:36:                                     ; preds = %33, %29
  %37 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %38 = load i32, i32* %37, align 8
  %39 = add nsw i32 %38, 1
  %40 = call i32 @next_dict(i32 %39)
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %44

; <label>:42:                                     ; preds = %36
  %43 = load i8*, i8** %3, align 8
  call void @free(i8* %43) #9
  store i8* null, i8** %3, align 8
  br label %176

; <label>:44:                                     ; preds = %36
  br label %.backedge

; <label>:45:                                     ; preds = %20
  %46 = load i8*, i8** %3, align 8
  %47 = call i64 @strlen(i8* %46) #10
  %48 = trunc i64 %47 to i32
  %49 = icmp sle i32 %48, 2
  br i1 %49, label %50, label %51

; <label>:50:                                     ; preds = %45
  br label %.backedge

; <label>:51:                                     ; preds = %45
  %52 = load i8*, i8** %3, align 8
  %53 = sub nsw i32 %48, 1
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %52, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %57, 10
  br i1 %58, label %59, label %64

; <label>:59:                                     ; preds = %51
  %60 = load i8*, i8** %3, align 8
  %61 = add nsw i32 %48, -1
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %60, i64 %62
  store i8 0, i8* %63, align 1
  br label %64

; <label>:64:                                     ; preds = %59, %51
  %.03 = phi i32 [ %61, %59 ], [ %48, %51 ]
  %65 = load i8*, i8** %3, align 8
  %66 = sub nsw i32 %.03, 1
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %65, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = sext i8 %69 to i32
  %71 = icmp eq i32 %70, 13
  br i1 %71, label %72, label %77

; <label>:72:                                     ; preds = %64
  %73 = load i8*, i8** %3, align 8
  %74 = add nsw i32 %.03, -1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %73, i64 %75
  store i8 0, i8* %76, align 1
  br label %77

; <label>:77:                                     ; preds = %72, %64
  %.1 = phi i32 [ %74, %72 ], [ %.03, %64 ]
  %78 = icmp sle i32 %.1, 0
  br i1 %78, label %79, label %80

; <label>:79:                                     ; preds = %77
  br label %.backedge

; <label>:80:                                     ; preds = %77
  %81 = getelementptr [2 x i8], [2 x i8]* @.str.71, i32 0, i32 0
  %82 = call i8* @strsep(i8** %3, i8* %81) #9
  br label %83

; <label>:83:                                     ; preds = %101, %80
  %indvars.iv = phi i64 [ %indvars.iv.next, %101 ], [ 0, %80 ]
  %.01 = phi i8* [ %82, %80 ], [ %107, %101 ]
  call void @unroll_loop(i32 115)
  %84 = icmp slt i64 %indvars.iv, %6
  br i1 %84, label %85, label %87

; <label>:85:                                     ; preds = %83
  %86 = icmp ne i8* %.01, null
  br label %87

; <label>:87:                                     ; preds = %85, %83
  %88 = phi i1 [ false, %83 ], [ %86, %85 ]
  br i1 %88, label %89, label %.loopexit

; <label>:89:                                     ; preds = %87
  %90 = call i64 @strlen(i8* %.01) #10
  %91 = icmp ugt i64 %90, 2
  br i1 %91, label %95, label %92

; <label>:92:                                     ; preds = %89
  %93 = call i64 @strlen(i8* %.01) #10
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %96

; <label>:95:                                     ; preds = %92, %89
  br label %108

; <label>:96:                                     ; preds = %92
  %97 = getelementptr [3 x i8], [3 x i8]* @.str.72, i32 0, i32 0
  %98 = call i32 (i8*, i8*, ...) @sscanf(i8* %.01, i8* %97, i32* %4) #9
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %101

; <label>:100:                                    ; preds = %96
  br label %108

; <label>:101:                                    ; preds = %96
  %102 = load i32, i32* %4, align 4
  %103 = trunc i32 %102 to i8
  %104 = load i8*, i8** %0, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 %indvars.iv
  store i8 %103, i8* %105, align 1
  %106 = getelementptr [2 x i8], [2 x i8]* @.str.71, i32 0, i32 0
  %107 = call i8* @strsep(i8** %3, i8* %106) #9
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  br label %83

.loopexit:                                        ; preds = %87
  %.02.ph = phi i32 [ 0, %87 ]
  br label %108

; <label>:108:                                    ; preds = %.loopexit, %100, %95
  %.02 = phi i32 [ 1, %95 ], [ 1, %100 ], [ %.02.ph, %.loopexit ]
  %109 = icmp ne i32 %.02, 0
  br i1 %109, label %110, label %111

; <label>:110:                                    ; preds = %108
  br label %.backedge

; <label>:111:                                    ; preds = %108
  br label %173

; <label>:112:                                    ; preds = %12
  %113 = load i8*, i8** %0, align 8
  %114 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %115 = load %struct._IO_FILE*, %struct._IO_FILE** %114, align 8
  %116 = call i8* @fgets(i8* %113, i32 %1, %struct._IO_FILE* %115), !track !208
  %117 = icmp eq i8* %116, null
  br i1 %117, label %118, label %134

; <label>:118:                                    ; preds = %112
  %119 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %120 = load i32, i32* %119, align 4
  %121 = icmp ne i32 %120, 0
  br i1 %121, label %122, label %125

; <label>:122:                                    ; preds = %118
  %123 = getelementptr [9 x i8], [9 x i8]* @.str.36, i32 0, i32 0
  %124 = call i32 (i8*, ...) @printf(i8* %123)
  br label %125

; <label>:125:                                    ; preds = %122, %118
  %126 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %127 = load i32, i32* %126, align 8
  %128 = add nsw i32 %127, 1
  %129 = call i32 @next_dict(i32 %128)
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %131, label %133

; <label>:131:                                    ; preds = %125
  %132 = load i8*, i8** %3, align 8
  call void @free(i8* %132) #9
  store i8* null, i8** %3, align 8
  br label %176

; <label>:133:                                    ; preds = %125
  br label %.backedge

; <label>:134:                                    ; preds = %112
  %135 = load i8*, i8** %0, align 8
  %136 = call i64 @strlen(i8* %135) #10
  %137 = trunc i64 %136 to i32
  %138 = icmp sle i32 %137, 2
  br i1 %138, label %139, label %140

; <label>:139:                                    ; preds = %134
  br label %.backedge

; <label>:140:                                    ; preds = %134
  %141 = load i8*, i8** %0, align 8
  %142 = sub nsw i32 %137, 1
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %141, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = sext i8 %145 to i32
  %147 = icmp eq i32 %146, 10
  br i1 %147, label %148, label %153

; <label>:148:                                    ; preds = %140
  %149 = load i8*, i8** %0, align 8
  %150 = add nsw i32 %137, -1
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %149, i64 %151
  store i8 0, i8* %152, align 1
  br label %153

; <label>:153:                                    ; preds = %148, %140
  %.3 = phi i32 [ %150, %148 ], [ %137, %140 ]
  %154 = load i8*, i8** %0, align 8
  %155 = sub nsw i32 %.3, 1
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i8, i8* %154, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = sext i8 %158 to i32
  %160 = icmp eq i32 %159, 13
  br i1 %160, label %161, label %166

; <label>:161:                                    ; preds = %153
  %162 = load i8*, i8** %0, align 8
  %163 = add nsw i32 %.3, -1
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %162, i64 %164
  store i8 0, i8* %165, align 1
  br label %166

; <label>:166:                                    ; preds = %161, %153
  %.4 = phi i32 [ %163, %161 ], [ %.3, %153 ]
  %167 = icmp sle i32 %.4, 0
  br i1 %167, label %168, label %172

; <label>:168:                                    ; preds = %166
  br label %.backedge

.backedge:                                        ; preds = %168, %139, %133, %110, %79, %50, %44
  store i8* %5, i8** %3, align 8
  %169 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %170 = load %struct._IO_FILE*, %struct._IO_FILE** %169, align 8
  %171 = icmp eq %struct._IO_FILE* %170, null
  br i1 %171, label %._crit_edge, label %12

; <label>:172:                                    ; preds = %166
  br label %173

; <label>:173:                                    ; preds = %172, %111
  br label %174

; <label>:174:                                    ; preds = %173
  %175 = load i8*, i8** %3, align 8
  call void @free(i8* %175) #9
  store i8* null, i8** %3, align 8
  br label %176

; <label>:176:                                    ; preds = %174, %131, %42, %10
  %.0 = phi i32 [ 1, %10 ], [ 1, %42 ], [ 0, %174 ], [ 1, %131 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare dso_local i32 @sscanf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @set_dicts(i8*) #0 {
  %2 = alloca i8*, align 8, !track !209
  store i8* %0, i8** %2, align 8
  %3 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  store i32 0, i32* %3, align 8
  %4 = getelementptr [2 x i8], [2 x i8]* @.str.6, i32 0, i32 0
  %5 = call i8* @strsep(i8** %2, i8* %4) #9
  br label %6

; <label>:6:                                      ; preds = %1, %9
  %indvars.iv = phi i64 [ 0, %1 ], [ %indvars.iv.next, %9 ]
  call void @unroll_loop(i32 116)
  %7 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %8 = getelementptr inbounds [128 x i8*], [128 x i8*]* %7, i64 0, i64 %indvars.iv
  store i8* null, i8** %8, align 8
  br label %9

; <label>:9:                                      ; preds = %6
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 128
  br i1 %exitcond, label %6, label %10

; <label>:10:                                     ; preds = %9
  br label %11

; <label>:11:                                     ; preds = %74, %10
  %.02 = phi i8* [ %5, %10 ], [ %76, %74 ]
  call void @unroll_loop(i32 117)
  %12 = icmp ne i8* %.02, null
  br i1 %12, label %13, label %17

; <label>:13:                                     ; preds = %11
  %14 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %15 = load i32, i32* %14, align 8
  %16 = icmp slt i32 %15, 128
  br label %17

; <label>:17:                                     ; preds = %13, %11
  %18 = phi i1 [ false, %11 ], [ %16, %13 ]
  br i1 %18, label %19, label %81

; <label>:19:                                     ; preds = %17
  %20 = call i64 @strlen(i8* %.02) #10
  %21 = add i64 %20, 1
  %22 = trunc i64 %21 to i32
  %23 = sext i32 %22 to i64
  %24 = mul i64 %23, 1
  %25 = call noalias i8* @malloc(i64 %24) #9, !track !210
  %26 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %27 = load i32, i32* %26, align 8
  %28 = sext i32 %27 to i64
  %29 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %30 = getelementptr inbounds [128 x i8*], [128 x i8*]* %29, i64 0, i64 %28
  store i8* %25, i8** %30, align 8
  %31 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %32 = load i32, i32* %31, align 8
  %33 = sext i32 %32 to i64
  %34 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %35 = getelementptr inbounds [128 x i8*], [128 x i8*]* %34, i64 0, i64 %33
  %36 = load i8*, i8** %35, align 8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %38, label %40

; <label>:38:                                     ; preds = %19
  %39 = getelementptr [19 x i8], [19 x i8]* @.str.73, i32 0, i32 0
  call void @perror(i8* %39)
  br label %91

; <label>:40:                                     ; preds = %19
  %41 = getelementptr [3 x i8], [3 x i8]* @.str.74, i32 0, i32 0
  %42 = call i32 @strncasecmp(i8* %.02, i8* %41, i64 2) #10
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %60

; <label>:44:                                     ; preds = %40
  %45 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %46 = load i32, i32* %45, align 8
  %47 = sext i32 %46 to i64
  %48 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %49 = getelementptr inbounds [128 x i8*], [128 x i8*]* %48, i64 0, i64 %47
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds i8, i8* %.02, i64 2
  %52 = sub nsw i32 %22, 2
  %53 = sext i32 %52 to i64
  %54 = call i8* @strncpy(i8* %50, i8* %51, i64 %53) #9, !track !211
  %55 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %56 = load i32, i32* %55, align 8
  %57 = sext i32 %56 to i64
  %58 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 25
  %59 = getelementptr inbounds [128 x i32], [128 x i32]* %58, i64 0, i64 %57
  store i32 1, i32* %59, align 4
  br label %74

; <label>:60:                                     ; preds = %40
  %61 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %62 = load i32, i32* %61, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 21
  %65 = getelementptr inbounds [128 x i8*], [128 x i8*]* %64, i64 0, i64 %63
  %66 = load i8*, i8** %65, align 8
  %67 = sext i32 %22 to i64
  %68 = call i8* @strncpy(i8* %66, i8* %.02, i64 %67) #9, !track !212
  %69 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %70 = load i32, i32* %69, align 8
  %71 = sext i32 %70 to i64
  %72 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 25
  %73 = getelementptr inbounds [128 x i32], [128 x i32]* %72, i64 0, i64 %71
  store i32 0, i32* %73, align 4
  br label %74

; <label>:74:                                     ; preds = %60, %44
  %75 = getelementptr [2 x i8], [2 x i8]* @.str.6, i32 0, i32 0
  %76 = call i8* @strsep(i8** %2, i8* %75) #9
  %77 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %78 = load i32, i32* %77, align 8
  %79 = add nsw i32 %78, 1
  %80 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  store i32 %79, i32* %80, align 8
  br label %11

; <label>:81:                                     ; preds = %17
  %82 = call i32 @next_dict(i32 0)
  br label %83

; <label>:83:                                     ; preds = %83, %81
  call void @unroll_loop(i32 118)
  %84 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  %85 = load i32, i32* %84, align 8
  %86 = add nsw i32 %85, 1
  %87 = call i32 @next_dict(i32 %86)
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %83, label %89

; <label>:89:                                     ; preds = %83
  %90 = call i32 @next_dict(i32 0)
  br label %91

; <label>:91:                                     ; preds = %89, %38
  %.0 = phi i32 [ 1, %38 ], [ 0, %89 ]
  ret i32 %.0
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strncasecmp(i8*, i8*, i64) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @crack_wep_dict() #0 {
  %1 = alloca %struct.timeval, align 8
  %2 = alloca %struct.timeval, align 8
  %3 = alloca i8*, align 8, !track !213
  %4 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, 1
  %7 = sext i32 %6 to i64
  %8 = mul i64 1, %7
  %9 = call noalias i8* @malloc(i64 %8) #9, !track !214
  store i8* %9, i8** %3, align 8
  %10 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %11 = load i32, i32* %10, align 4
  %12 = add nsw i32 %11, 1
  %13 = call i32 @update_ivbuf()
  %14 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 3
  %15 = load i64, i64* %14, align 8
  %16 = icmp slt i64 %15, 4
  br i1 %16, label %17, label %22

; <label>:17:                                     ; preds = %0
  %18 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr [79 x i8], [79 x i8]* @.str.75, i32 0, i32 0
  %21 = call i32 (i8*, ...) @printf(i8* %20, i64 %19, i32 4)
  br label %97

; <label>:22:                                     ; preds = %0
  %23 = call i32 @gettimeofday(%struct.timeval* %1, %struct.vote* null) #9
  %24 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = add nsw i64 %25, -1
  store i64 %26, i64* %24, align 8
  %27 = call i32 @next_key(i8** %3, i32 %12)
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %32, label %.lr.ph10

.lr.ph10:                                         ; preds = %22
  br label %33

; <label>:29:                                     ; preds = %90
  %30 = call i32 @next_key(i8** %3, i32 %12)
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %._crit_edge11, label %33

._crit_edge11:                                    ; preds = %29
  br label %32

; <label>:32:                                     ; preds = %._crit_edge11, %22
  br label %97

; <label>:33:                                     ; preds = %.lr.ph10, %29
  call void @unroll_loop(i32 119)
  %34 = load i8*, i8** %3, align 8
  %35 = call i64 @strlen(i8* %34) #10
  %36 = trunc i64 %35 to i32
  %37 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %36, %38
  br i1 %39, label %.lr.ph, label %54

.lr.ph:                                           ; preds = %33
  %40 = sext i32 %36 to i64
  %41 = sext i32 %36 to i64
  br label %42

; <label>:42:                                     ; preds = %.lr.ph, %42
  %indvars.iv = phi i64 [ %40, %.lr.ph ], [ %indvars.iv.next, %42 ]
  call void @unroll_loop(i32 120)
  %43 = load i8*, i8** %3, align 8
  %44 = sub nsw i64 %indvars.iv, %41
  %45 = getelementptr inbounds i8, i8* %43, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = load i8*, i8** %3, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 %indvars.iv
  store i8 %46, i8* %48, align 1
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %49 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %50 = load i32, i32* %49, align 4
  %51 = sext i32 %50 to i64
  %52 = icmp slt i64 %indvars.iv.next, %51
  br i1 %52, label %42, label %._crit_edge

._crit_edge:                                      ; preds = %42
  %split.wide = phi i64 [ %indvars.iv.next, %42 ]
  %53 = trunc i64 %split.wide to i32
  br label %54

; <label>:54:                                     ; preds = %._crit_edge, %33
  %.01.lcssa = phi i32 [ %53, %._crit_edge ], [ %36, %33 ]
  %55 = load i8*, i8** %3, align 8
  %56 = sext i32 %.01.lcssa to i64
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  store i8 0, i8* %57, align 1
  %58 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %59 = load i32, i32* %58, align 8
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %75, label %61

; <label>:61:                                     ; preds = %54
  %62 = call i32 @gettimeofday(%struct.timeval* %2, %struct.vote* null) #9
  %63 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i32 0, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i32 0, i32 0
  %66 = load i64, i64* %65, align 8
  %67 = sub nsw i64 %64, %66
  %68 = icmp sgt i64 %67, 0
  br i1 %68, label %69, label %74

; <label>:69:                                     ; preds = %61
  %70 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %71 = load i32, i32* %70, align 4
  %72 = sub nsw i32 %71, 1
  call void @show_wep_stats(i32 %72, i32 1, [256 x %struct.PTW_tableentry]* null, i32* null, i32* null, i32 0)
  %73 = call i32 @gettimeofday(%struct.timeval* %1, %struct.vote* null) #9
  br label %74

; <label>:74:                                     ; preds = %69, %61
  br label %75

; <label>:75:                                     ; preds = %74, %54
  %76 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %77 = load i32, i32* %76, align 4
  %78 = icmp sle i32 0, %77
  br i1 %78, label %.lr.ph5, label %90

.lr.ph5:                                          ; preds = %75
  br label %79

; <label>:79:                                     ; preds = %.lr.ph5, %85
  %indvars.iv7 = phi i64 [ 0, %.lr.ph5 ], [ %indvars.iv.next8, %85 ]
  call void @unroll_loop(i32 121)
  %80 = load i8*, i8** %3, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 %indvars.iv7
  %82 = load i8, i8* %81, align 1
  %83 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0
  %84 = getelementptr inbounds [64 x i8], [64 x i8]* %83, i64 0, i64 %indvars.iv7
  store i8 %82, i8* %84, align 1
  br label %85

; <label>:85:                                     ; preds = %79
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %86 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %87 = load i32, i32* %86, align 4
  %88 = sext i32 %87 to i64
  %89 = icmp sle i64 %indvars.iv.next8, %88
  br i1 %89, label %79, label %._crit_edge6

._crit_edge6:                                     ; preds = %85
  br label %90

; <label>:90:                                     ; preds = %._crit_edge6, %75
  %91 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %94 = call i32 @check_wep_key(i8* %93, i32 %92, i32 0)
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %29

; <label>:96:                                     ; preds = %90
  br label %97

; <label>:97:                                     ; preds = %96, %32, %17
  %.0 = phi i32 [ 1, %17 ], [ 1, %32 ], [ 0, %96 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main(i32, i8**) #0 {
  %3 = alloca i32, align 4, !track !215
  %4 = alloca [128 x i8], align 16, !track !216
  %5 = alloca [33 x i8], align 16, !track !217
  %6 = alloca i32, align 4
  %7 = call i32 @setsid() #9
  %8 = getelementptr [12 x i8], [12 x i8]* @.str.76, i32 0, i32 0
  %9 = call i8* @getVersion(i8* %8, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0)
  store i8* %9, i8** @progname, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.options* @opt to i8*), i8 0, i64 2392, i1 false)
  %10 = call i64 @time(i64* null) #9
  %11 = trunc i64 %10 to i32
  call void @srand(i32 %11) #9
  %12 = call i32 (...) bitcast (i32 ()* @get_nb_cpus to i32 (...)*)()
  %13 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  store i32 1, i32* %13, align 4
  %14 = icmp sgt i32 %12, 1
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %2
  %16 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  store i32 %12, i32* %16, align 4
  br label %17

; <label>:17:                                     ; preds = %15, %2
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 23
  store i32 0, i32* %18, align 8
  %19 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  store i32 0, i32* %19, align 8
  %20 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  store i32 1, i32* %20, align 8
  %21 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 18
  store i32 1, i32* %21, align 4
  %22 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  store i32 0, i32* %22, align 8
  %23 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 29
  store i32 51, i32* %23, align 4
  %24 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 32
  store i32 0, i32* %24, align 4
  %25 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  store i32 1, i32* %25, align 4
  %26 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 33
  store i32 2147483647, i32* %26, align 8
  %27 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 40
  store i32 0, i32* %27, align 8
  %28 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 35
  store i8* null, i8** %28, align 8
  %29 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 36
  store %struct.mergeBSSID* null, %struct.mergeBSSID** %29, align 8
  %30 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 34
  store i8* null, i8** %30, align 8
  %31 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 41
  store i32 0, i32* %31, align 4
  %32 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 42
  store i8* null, i8** %32, align 8
  store i32 0, i32* %6, align 4
  %33 = getelementptr [50 x i8], [50 x i8]* @.str.86, i32 0, i32 0
  %34 = getelementptr [10 x %struct.option], [10 x %struct.option]* @main.long_options, i32 0, i32 0
  %35 = call i32 @getopt_long(i32 %0, i8** %1, i8* %33, %struct.option* %34, i32* %6) #9, !track_argc !218
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %37, label %.lr.ph141

.lr.ph141:                                        ; preds = %17
  br label %38

._crit_edge142:                                   ; preds = %599
  %split143 = phi i32 [ %.531, %599 ]
  br label %37

; <label>:37:                                     ; preds = %._crit_edge142, %17
  %.026.lcssa = phi i32 [ %split143, %._crit_edge142 ], [ 0, %17 ]
  br label %604

; <label>:38:                                     ; preds = %.lr.ph141, %599
  %39 = phi i32 [ %35, %.lr.ph141 ], [ %602, %599 ]
  %.026139 = phi i32 [ 0, %.lr.ph141 ], [ %.531, %599 ]
  %.033138 = phi i32 [ 0, %.lr.ph141 ], [ %.134, %599 ]
  call void @unroll_loop(i32 124)
  switch i32 %39, label %598 [
    i32 58, label %40
    i32 63, label %45
    i32 117, label %50
    i32 86, label %66
    i32 97, label %78
    i32 101, label %113
    i32 98, label %119
    i32 112, label %133
    i32 113, label %155
    i32 99, label %157
    i32 68, label %159
    i32 104, label %161
    i32 116, label %163
    i32 49, label %165
    i32 100, label %167
    i32 109, label %332
    i32 110, label %345
    i32 105, label %384
    i32 102, label %406
    i32 107, label %424
    i32 108, label %451
    i32 77, label %470
    i32 80, label %493
    i32 120, label %515
    i32 88, label %543
    i32 121, label %545
    i32 75, label %547
    i32 115, label %549
    i32 119, label %551
    i32 114, label %561
    i32 48, label %565
    i32 72, label %567
    i32 67, label %568
    i32 122, label %586
  ]

; <label>:40:                                     ; preds = %38
  %41 = getelementptr inbounds i8*, i8** %1, i64 0
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %44 = call i32 (i8*, ...) @printf(i8* %43, i8* %42)
  br label %1599

; <label>:45:                                     ; preds = %38
  %46 = getelementptr inbounds i8*, i8** %1, i64 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %49 = call i32 (i8*, ...) @printf(i8* %48, i8* %47)
  br label %1599

; <label>:50:                                     ; preds = %38
  %51 = getelementptr [21 x i8], [21 x i8]* @.str.88, i32 0, i32 0
  %52 = call i32 (i8*, ...) @printf(i8* %51, i32 %12)
  %53 = call i32 @shasse2_cpuid()
  %54 = icmp eq i32 %53, 1
  br i1 %54, label %55, label %58

; <label>:55:                                     ; preds = %50
  %56 = getelementptr [17 x i8], [17 x i8]* @.str.89, i32 0, i32 0
  %57 = call i32 (i8*, ...) @printf(i8* %56)
  br label %58

; <label>:58:                                     ; preds = %55, %50
  %59 = icmp sge i32 %53, 2
  br i1 %59, label %60, label %63

; <label>:60:                                     ; preds = %58
  %61 = getelementptr [18 x i8], [18 x i8]* @.str.90, i32 0, i32 0
  %62 = call i32 (i8*, ...) @printf(i8* %61)
  br label %63

; <label>:63:                                     ; preds = %60, %58
  %64 = getelementptr [2 x i8], [2 x i8]* @.str.2, i32 0, i32 0
  %65 = call i32 (i8*, ...) @printf(i8* %64)
  br label %1599

; <label>:66:                                     ; preds = %38
  %67 = icmp ne i32 %.033138, 0
  br i1 %67, label %68, label %75

; <label>:68:                                     ; preds = %66
  %69 = getelementptr [47 x i8], [47 x i8]* @.str.91, i32 0, i32 0
  %70 = call i32 (i8*, ...) @printf(i8* %69)
  %71 = getelementptr inbounds i8*, i8** %1, i64 0
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr [27 x i8], [27 x i8]* @.str.92, i32 0, i32 0
  %74 = call i32 (i8*, ...) @printf(i8* %73, i8* %72)
  br label %1599

; <label>:75:                                     ; preds = %66
  %76 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 40
  store i32 1, i32* %76, align 8
  %77 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  store i32 0, i32* %77, align 4
  br label %599

; <label>:78:                                     ; preds = %38
  %79 = load i8*, i8** @optarg, align 8
  %80 = getelementptr [3 x i8], [3 x i8]* @.str.93, i32 0, i32 0
  %81 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %82 = call i32 (i8*, i8*, ...) @sscanf(i8* %79, i8* %80, i32* %81) #9
  %83 = load i8*, i8** @optarg, align 8
  %84 = getelementptr [4 x i8], [4 x i8]* @.str.94, i32 0, i32 0
  %85 = call i32 @strcasecmp(i8* %83, i8* %84) #10
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %89

; <label>:87:                                     ; preds = %78
  %88 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  store i32 1, i32* %88, align 8
  br label %97

; <label>:89:                                     ; preds = %78
  %90 = load i8*, i8** @optarg, align 8
  %91 = getelementptr [4 x i8], [4 x i8]* @.str.95, i32 0, i32 0
  %92 = call i32 @strcasecmp(i8* %90, i8* %91) #10
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %96

; <label>:94:                                     ; preds = %89
  %95 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  store i32 2, i32* %95, align 8
  br label %96

; <label>:96:                                     ; preds = %94, %89
  br label %97

; <label>:97:                                     ; preds = %96, %87
  %98 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %99 = load i32, i32* %98, align 8
  %100 = icmp ne i32 %99, 1
  br i1 %100, label %101, label %112

; <label>:101:                                    ; preds = %97
  %102 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %103 = load i32, i32* %102, align 8
  %104 = icmp ne i32 %103, 2
  br i1 %104, label %105, label %112

; <label>:105:                                    ; preds = %101
  %106 = getelementptr [41 x i8], [41 x i8]* @.str.96, i32 0, i32 0
  %107 = call i32 (i8*, ...) @printf(i8* %106)
  %108 = getelementptr inbounds i8*, i8** %1, i64 0
  %109 = load i8*, i8** %108, align 8
  %110 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %111 = call i32 (i8*, ...) @printf(i8* %110, i8* %109)
  br label %1599

; <label>:112:                                    ; preds = %101, %97
  br label %599

; <label>:113:                                    ; preds = %38
  %114 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 3, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %114, i8 0, i64 33, i1 false)
  %115 = load i8*, i8** @optarg, align 8
  %116 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 3, i32 0
  %117 = call i8* @strncpy(i8* %116, i8* %115, i64 32) #9, !track !219
  %118 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  store i32 1, i32* %118, align 4
  br label %599

; <label>:119:                                    ; preds = %38
  %120 = load i8*, i8** @optarg, align 8
  %121 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 4, i32 0
  %122 = call i32 @getmac(i8* %120, i32 1, i8* %121)
  %123 = icmp ne i32 %122, 0
  br i1 %123, label %124, label %131

; <label>:124:                                    ; preds = %119
  %125 = getelementptr [28 x i8], [28 x i8]* @.str.97, i32 0, i32 0
  %126 = call i32 (i8*, ...) @printf(i8* %125)
  %127 = getelementptr inbounds i8*, i8** %1, i64 0
  %128 = load i8*, i8** %127, align 8
  %129 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %130 = call i32 (i8*, ...) @printf(i8* %129, i8* %128)
  br label %1599

; <label>:131:                                    ; preds = %119
  %132 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  store i32 1, i32* %132, align 8
  br label %599

; <label>:133:                                    ; preds = %38
  %134 = load i8*, i8** @optarg, align 8
  %135 = getelementptr [3 x i8], [3 x i8]* @.str.93, i32 0, i32 0
  %136 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %137 = call i32 (i8*, i8*, ...) @sscanf(i8* %134, i8* %135, i32* %136) #9
  %138 = icmp ne i32 %137, 1
  br i1 %138, label %147, label %139

; <label>:139:                                    ; preds = %133
  %140 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %141 = load i32, i32* %140, align 4
  %142 = icmp slt i32 %141, 1
  br i1 %142, label %147, label %143

; <label>:143:                                    ; preds = %139
  %144 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %145 = load i32, i32* %144, align 4
  %146 = icmp sgt i32 %145, 128
  br i1 %146, label %147, label %154

; <label>:147:                                    ; preds = %143, %139, %133
  %148 = getelementptr [47 x i8], [47 x i8]* @.str.98, i32 0, i32 0
  %149 = call i32 (i8*, ...) @printf(i8* %148, i32 %12)
  %150 = getelementptr inbounds i8*, i8** %1, i64 0
  %151 = load i8*, i8** %150, align 8
  %152 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %153 = call i32 (i8*, ...) @printf(i8* %152, i8* %151)
  br label %1599

; <label>:154:                                    ; preds = %143
  br label %599

; <label>:155:                                    ; preds = %38
  %156 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  store i32 1, i32* %156, align 8
  br label %599

; <label>:157:                                    ; preds = %38
  %158 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 15
  store i32 1, i32* %158, align 8
  br label %599

; <label>:159:                                    ; preds = %38
  %160 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 38
  store i32 1, i32* %160, align 8
  br label %599

; <label>:161:                                    ; preds = %38
  %162 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 14
  store i32 1, i32* %162, align 4
  br label %599

; <label>:163:                                    ; preds = %38
  %164 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 16
  store i32 1, i32* %164, align 4
  br label %599

; <label>:165:                                    ; preds = %38
  %166 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 41
  store i32 1, i32* %166, align 4
  br label %599

; <label>:167:                                    ; preds = %38
  store i32 0, i32* %3, align 4
  %168 = load i8*, i8** @optarg, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 0
  %170 = load i8, i8* %169, align 1
  %171 = sext i8 %170 to i32
  %172 = icmp ne i32 %171, 0
  br i1 %172, label %.lr.ph136, label %226

.lr.ph136:                                        ; preds = %167
  br label %173

; <label>:173:                                    ; preds = %.lr.ph136, %220
  %.02134 = phi i32 [ 0, %.lr.ph136 ], [ %.13, %220 ]
  call void @unroll_loop(i32 125)
  %174 = sext i32 %.02134 to i64
  %175 = getelementptr inbounds i8, i8* %168, i64 %174
  %176 = load i8, i8* %175, align 1
  %177 = sext i8 %176 to i32
  %178 = icmp eq i32 %177, 120
  br i1 %178, label %179, label %182

; <label>:179:                                    ; preds = %173
  %180 = sext i32 %.02134 to i64
  %181 = getelementptr inbounds i8, i8* %168, i64 %180
  store i8 88, i8* %181, align 1
  br label %182

; <label>:182:                                    ; preds = %179, %173
  %183 = sext i32 %.02134 to i64
  %184 = getelementptr inbounds i8, i8* %168, i64 %183
  %185 = load i8, i8* %184, align 1
  %186 = sext i8 %185 to i32
  %187 = icmp eq i32 %186, 121
  br i1 %187, label %188, label %191

; <label>:188:                                    ; preds = %182
  %189 = sext i32 %.02134 to i64
  %190 = getelementptr inbounds i8, i8* %168, i64 %189
  store i8 89, i8* %190, align 1
  br label %191

; <label>:191:                                    ; preds = %188, %182
  %192 = sext i32 %.02134 to i64
  %193 = getelementptr inbounds i8, i8* %168, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = sext i8 %194 to i32
  %196 = icmp eq i32 %195, 45
  br i1 %196, label %209, label %197

; <label>:197:                                    ; preds = %191
  %198 = sext i32 %.02134 to i64
  %199 = getelementptr inbounds i8, i8* %168, i64 %198
  %200 = load i8, i8* %199, align 1
  %201 = sext i8 %200 to i32
  %202 = icmp eq i32 %201, 58
  br i1 %202, label %209, label %203

; <label>:203:                                    ; preds = %197
  %204 = sext i32 %.02134 to i64
  %205 = getelementptr inbounds i8, i8* %168, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = sext i8 %206 to i32
  %208 = icmp eq i32 %207, 32
  br i1 %208, label %209, label %211

; <label>:209:                                    ; preds = %203, %197, %191
  %210 = add nsw i32 %.02134, 1
  br label %220

; <label>:211:                                    ; preds = %203
  %212 = add nsw i32 %.02134, 1
  %213 = sext i32 %.02134 to i64
  %214 = getelementptr inbounds i8, i8* %168, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = load i32, i32* %3, align 4
  %217 = add nsw i32 %216, 1
  store i32 %217, i32* %3, align 4
  %218 = sext i32 %216 to i64
  %219 = getelementptr inbounds i8, i8* %168, i64 %218
  store i8 %215, i8* %219, align 1
  br label %220

; <label>:220:                                    ; preds = %211, %209
  %.13 = phi i32 [ %210, %209 ], [ %212, %211 ]
  %221 = sext i32 %.13 to i64
  %222 = getelementptr inbounds i8, i8* %168, i64 %221
  %223 = load i8, i8* %222, align 1
  %224 = sext i8 %223 to i32
  %225 = icmp ne i32 %224, 0
  br i1 %225, label %173, label %._crit_edge137

._crit_edge137:                                   ; preds = %220
  br label %226

; <label>:226:                                    ; preds = %._crit_edge137, %167
  %227 = load i32, i32* %3, align 4
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds i8, i8* %168, i64 %228
  store i8 0, i8* %229, align 1
  %230 = getelementptr inbounds i8, i8* %168, i64 0
  %231 = load i8, i8* %230, align 1
  %232 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 0
  store i8 %231, i8* %232, align 16
  %233 = getelementptr inbounds i8, i8* %168, i64 1
  %234 = load i8, i8* %233, align 1
  %235 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 1
  store i8 %234, i8* %235, align 1
  %236 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 2
  store i8 0, i8* %236, align 2
  br label %237

; <label>:237:                                    ; preds = %324, %226
  %.127 = phi i32 [ 0, %226 ], [ %.329, %324 ]
  %.025 = phi i8* [ %168, %226 ], [ %325, %324 ]
  %.24 = phi i32 [ 0, %226 ], [ %.46, %324 ]
  call void @unroll_loop(i32 126)
  %238 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i32 0, i32 0
  %239 = getelementptr [3 x i8], [3 x i8]* @.str.72, i32 0, i32 0
  %240 = call i32 (i8*, i8*, ...) @sscanf(i8* %238, i8* %239, i32* %3) #9
  %241 = icmp eq i32 %240, 1
  br i1 %241, label %264, label %242

; <label>:242:                                    ; preds = %237
  %243 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 0
  %244 = load i8, i8* %243, align 16
  %245 = sext i8 %244 to i32
  %246 = icmp eq i32 %245, 88
  br i1 %246, label %247, label %252

; <label>:247:                                    ; preds = %242
  %248 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 1
  %249 = load i8, i8* %248, align 1
  %250 = sext i8 %249 to i32
  %251 = icmp eq i32 %250, 88
  br i1 %251, label %264, label %252

; <label>:252:                                    ; preds = %247, %242
  %253 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 0
  %254 = load i8, i8* %253, align 16
  %255 = sext i8 %254 to i32
  %256 = icmp eq i32 %255, 89
  br i1 %256, label %257, label %262

; <label>:257:                                    ; preds = %252
  %258 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 1
  %259 = load i8, i8* %258, align 1
  %260 = sext i8 %259 to i32
  %261 = icmp eq i32 %260, 89
  br label %262

; <label>:262:                                    ; preds = %257, %252
  %263 = phi i1 [ false, %252 ], [ %261, %257 ]
  br label %264

; <label>:264:                                    ; preds = %262, %247, %237
  %265 = phi i1 [ true, %247 ], [ true, %237 ], [ %263, %262 ]
  br i1 %265, label %266, label %.loopexit71

; <label>:266:                                    ; preds = %264
  %267 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 0
  %268 = load i8, i8* %267, align 16
  %269 = sext i8 %268 to i32
  %270 = icmp eq i32 %269, 88
  br i1 %270, label %271, label %281

; <label>:271:                                    ; preds = %266
  %272 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 1
  %273 = load i8, i8* %272, align 1
  %274 = sext i8 %273 to i32
  %275 = icmp eq i32 %274, 88
  br i1 %275, label %276, label %281

; <label>:276:                                    ; preds = %271
  %277 = add nsw i32 %.24, 1
  %278 = sext i32 %.24 to i64
  %279 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 8
  %280 = getelementptr inbounds [64 x i32], [64 x i32]* %279, i64 0, i64 %278
  store i32 0, i32* %280, align 4
  br label %321

; <label>:281:                                    ; preds = %271, %266
  %282 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 0
  %283 = load i8, i8* %282, align 16
  %284 = sext i8 %283 to i32
  %285 = icmp eq i32 %284, 89
  br i1 %285, label %286, label %297

; <label>:286:                                    ; preds = %281
  %287 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 1
  %288 = load i8, i8* %287, align 1
  %289 = sext i8 %288 to i32
  %290 = icmp eq i32 %289, 89
  br i1 %290, label %291, label %297

; <label>:291:                                    ; preds = %286
  %292 = add nsw i32 %.24, 1
  %293 = add nsw i32 %.127, 1
  %294 = sext i32 %.127 to i64
  %295 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31
  %296 = getelementptr inbounds [64 x i32], [64 x i32]* %295, i64 0, i64 %294
  store i32 %.24, i32* %296, align 4
  br label %320

; <label>:297:                                    ; preds = %286, %281
  %298 = load i32, i32* %3, align 4
  %299 = icmp slt i32 %298, 0
  br i1 %299, label %303, label %300

; <label>:300:                                    ; preds = %297
  %301 = load i32, i32* %3, align 4
  %302 = icmp sgt i32 %301, 255
  br i1 %302, label %303, label %310

; <label>:303:                                    ; preds = %300, %297
  %304 = getelementptr [20 x i8], [20 x i8]* @.str.99, i32 0, i32 0
  %305 = call i32 (i8*, ...) @printf(i8* %304)
  %306 = getelementptr inbounds i8*, i8** %1, i64 0
  %307 = load i8*, i8** %306, align 8
  %308 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %309 = call i32 (i8*, ...) @printf(i8* %308, i8* %307)
  br label %1599

; <label>:310:                                    ; preds = %300
  %311 = load i32, i32* %3, align 4
  %312 = trunc i32 %311 to i8
  %313 = sext i32 %.24 to i64
  %314 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 7
  %315 = getelementptr inbounds [64 x i8], [64 x i8]* %314, i64 0, i64 %313
  store i8 %312, i8* %315, align 1
  %316 = add nsw i32 %.24, 1
  %317 = sext i32 %.24 to i64
  %318 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 8
  %319 = getelementptr inbounds [64 x i32], [64 x i32]* %318, i64 0, i64 %317
  store i32 1, i32* %319, align 4
  br label %320

; <label>:320:                                    ; preds = %310, %291
  %.228 = phi i32 [ %293, %291 ], [ %.127, %310 ]
  %.35 = phi i32 [ %292, %291 ], [ %316, %310 ]
  br label %321

; <label>:321:                                    ; preds = %320, %276
  %.329 = phi i32 [ %.127, %276 ], [ %.228, %320 ]
  %.46 = phi i32 [ %277, %276 ], [ %.35, %320 ]
  %322 = icmp sge i32 %.46, 64
  br i1 %322, label %323, label %324

; <label>:323:                                    ; preds = %321
  %.329.lcssa = phi i32 [ %.329, %321 ]
  br label %331

; <label>:324:                                    ; preds = %321
  %325 = getelementptr inbounds i8, i8* %.025, i64 2
  %326 = load i8, i8* %325, align 1
  %327 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 0
  store i8 %326, i8* %327, align 16
  %328 = getelementptr inbounds i8, i8* %325, i64 1
  %329 = load i8, i8* %328, align 1
  %330 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i64 0, i64 1
  store i8 %329, i8* %330, align 1
  br label %237

.loopexit71:                                      ; preds = %264
  %.430.ph = phi i32 [ %.127, %264 ]
  br label %331

; <label>:331:                                    ; preds = %.loopexit71, %323
  %.430 = phi i32 [ %.329.lcssa, %323 ], [ %.430.ph, %.loopexit71 ]
  br label %599

; <label>:332:                                    ; preds = %38
  %333 = load i8*, i8** @optarg, align 8
  %334 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 9, i32 0
  %335 = call i32 @getmac(i8* %333, i32 1, i8* %334)
  %336 = icmp ne i32 %335, 0
  br i1 %336, label %337, label %344

; <label>:337:                                    ; preds = %332
  %338 = getelementptr [29 x i8], [29 x i8]* @.str.100, i32 0, i32 0
  %339 = call i32 (i8*, ...) @printf(i8* %338)
  %340 = getelementptr inbounds i8*, i8** %1, i64 0
  %341 = load i8*, i8** %340, align 8
  %342 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %343 = call i32 (i8*, ...) @printf(i8* %342, i8* %341)
  br label %1599

; <label>:344:                                    ; preds = %332
  br label %599

; <label>:345:                                    ; preds = %38
  %346 = load i8*, i8** @optarg, align 8
  %347 = getelementptr [3 x i8], [3 x i8]* @.str.93, i32 0, i32 0
  %348 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %349 = call i32 (i8*, i8*, ...) @sscanf(i8* %346, i8* %347, i32* %348) #9
  %350 = icmp ne i32 %349, 1
  br i1 %350, label %371, label %351

; <label>:351:                                    ; preds = %345
  %352 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %353 = load i32, i32* %352, align 4
  %354 = icmp ne i32 %353, 64
  br i1 %354, label %355, label %378

; <label>:355:                                    ; preds = %351
  %356 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %357 = load i32, i32* %356, align 4
  %358 = icmp ne i32 %357, 128
  br i1 %358, label %359, label %378

; <label>:359:                                    ; preds = %355
  %360 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %361 = load i32, i32* %360, align 4
  %362 = icmp ne i32 %361, 152
  br i1 %362, label %363, label %378

; <label>:363:                                    ; preds = %359
  %364 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %365 = load i32, i32* %364, align 4
  %366 = icmp ne i32 %365, 256
  br i1 %366, label %367, label %378

; <label>:367:                                    ; preds = %363
  %368 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %369 = load i32, i32* %368, align 4
  %370 = icmp ne i32 %369, 512
  br i1 %370, label %371, label %378

; <label>:371:                                    ; preds = %367, %345
  %372 = getelementptr [46 x i8], [46 x i8]* @.str.101, i32 0, i32 0
  %373 = call i32 (i8*, ...) @printf(i8* %372)
  %374 = getelementptr inbounds i8*, i8** %1, i64 0
  %375 = load i8*, i8** %374, align 8
  %376 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %377 = call i32 (i8*, ...) @printf(i8* %376, i8* %375)
  br label %1599

; <label>:378:                                    ; preds = %367, %363, %359, %355, %351
  %379 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %380 = load i32, i32* %379, align 4
  %381 = sdiv i32 %380, 8
  %382 = sub nsw i32 %381, 3
  %383 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  store i32 %382, i32* %383, align 4
  br label %599

; <label>:384:                                    ; preds = %38
  %385 = load i8*, i8** @optarg, align 8
  %386 = getelementptr [3 x i8], [3 x i8]* @.str.93, i32 0, i32 0
  %387 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %388 = call i32 (i8*, i8*, ...) @sscanf(i8* %385, i8* %386, i32* %387) #9
  %389 = icmp ne i32 %388, 1
  br i1 %389, label %398, label %390

; <label>:390:                                    ; preds = %384
  %391 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %392 = load i32, i32* %391, align 8
  %393 = icmp slt i32 %392, 1
  br i1 %393, label %398, label %394

; <label>:394:                                    ; preds = %390
  %395 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 11
  %396 = load i32, i32* %395, align 8
  %397 = icmp sgt i32 %396, 4
  br i1 %397, label %398, label %405

; <label>:398:                                    ; preds = %394, %390, %384
  %399 = getelementptr [30 x i8], [30 x i8]* @.str.102, i32 0, i32 0
  %400 = call i32 (i8*, ...) @printf(i8* %399)
  %401 = getelementptr inbounds i8*, i8** %1, i64 0
  %402 = load i8*, i8** %401, align 8
  %403 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %404 = call i32 (i8*, ...) @printf(i8* %403, i8* %402)
  br label %1599

; <label>:405:                                    ; preds = %394
  br label %599

; <label>:406:                                    ; preds = %38
  %407 = load i8*, i8** @optarg, align 8
  %408 = getelementptr [3 x i8], [3 x i8]* @.str.103, i32 0, i32 0
  %409 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %410 = call i32 (i8*, i8*, ...) @sscanf(i8* %407, i8* %408, float* %409) #9
  %411 = icmp ne i32 %410, 1
  br i1 %411, label %416, label %412

; <label>:412:                                    ; preds = %406
  %413 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %414 = load float, float* %413, align 4
  %415 = fcmp olt float %414, 1.000000e+00
  br i1 %415, label %416, label %423

; <label>:416:                                    ; preds = %412, %406
  %417 = getelementptr [29 x i8], [29 x i8]* @.str.104, i32 0, i32 0
  %418 = call i32 (i8*, ...) @printf(i8* %417)
  %419 = getelementptr inbounds i8*, i8** %1, i64 0
  %420 = load i8*, i8** %419, align 8
  %421 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %422 = call i32 (i8*, ...) @printf(i8* %421, i8* %420)
  br label %1599

; <label>:423:                                    ; preds = %412
  br label %599

; <label>:424:                                    ; preds = %38
  %425 = load i8*, i8** @optarg, align 8
  %426 = getelementptr [3 x i8], [3 x i8]* @.str.93, i32 0, i32 0
  %427 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 13
  %428 = call i32 (i8*, i8*, ...) @sscanf(i8* %425, i8* %426, i32* %427) #9
  %429 = icmp ne i32 %428, 1
  br i1 %429, label %438, label %430

; <label>:430:                                    ; preds = %424
  %431 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 13
  %432 = load i32, i32* %431, align 8
  %433 = icmp slt i32 %432, 1
  br i1 %433, label %438, label %434

; <label>:434:                                    ; preds = %430
  %435 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 13
  %436 = load i32, i32* %435, align 8
  %437 = icmp sgt i32 %436, 17
  br i1 %437, label %438, label %445

; <label>:438:                                    ; preds = %434, %430, %424
  %439 = getelementptr [39 x i8], [39 x i8]* @.str.105, i32 0, i32 0
  %440 = call i32 (i8*, ...) @printf(i8* %439, i32 17)
  %441 = getelementptr inbounds i8*, i8** %1, i64 0
  %442 = load i8*, i8** %441, align 8
  %443 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %444 = call i32 (i8*, ...) @printf(i8* %443, i8* %442)
  br label %1599

; <label>:445:                                    ; preds = %434
  %446 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 13
  %447 = load i32, i32* %446, align 8
  %448 = sub nsw i32 %447, 1
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds [17 x i32], [17 x i32]* @K_COEFF, i64 0, i64 %449
  store i32 0, i32* %450, align 4
  br label %599

; <label>:451:                                    ; preds = %38
  %452 = load i8*, i8** @optarg, align 8
  %453 = call i64 @strlen(i8* %452) #10
  %454 = add i64 %453, 1
  %455 = call noalias i8* @calloc(i64 1, i64 %454) #9, !track !220
  %456 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 42
  store i8* %455, i8** %456, align 8
  %457 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 42
  %458 = load i8*, i8** %457, align 8
  %459 = icmp eq i8* %458, null
  br i1 %459, label %460, label %463

; <label>:460:                                    ; preds = %451
  %461 = getelementptr [25 x i8], [25 x i8]* @.str.106, i32 0, i32 0
  %462 = call i32 (i8*, ...) @printf(i8* %461)
  br label %1599

; <label>:463:                                    ; preds = %451
  %464 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 42
  %465 = load i8*, i8** %464, align 8
  %466 = load i8*, i8** @optarg, align 8
  %467 = load i8*, i8** @optarg, align 8
  %468 = call i64 @strlen(i8* %467) #10
  %469 = call i8* @strncpy(i8* %465, i8* %466, i64 %468) #9, !track !221
  br label %599

; <label>:470:                                    ; preds = %38
  %471 = load i8*, i8** @optarg, align 8
  %472 = getelementptr [3 x i8], [3 x i8]* @.str.93, i32 0, i32 0
  %473 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 33
  %474 = call i32 (i8*, i8*, ...) @sscanf(i8* %471, i8* %472, i32* %473) #9
  %475 = icmp ne i32 %474, 1
  br i1 %475, label %480, label %476

; <label>:476:                                    ; preds = %470
  %477 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 33
  %478 = load i32, i32* %477, align 8
  %479 = icmp slt i32 %478, 1
  br i1 %479, label %480, label %487

; <label>:480:                                    ; preds = %476, %470
  %481 = getelementptr [33 x i8], [33 x i8]* @.str.107, i32 0, i32 0
  %482 = call i32 (i8*, ...) @printf(i8* %481)
  %483 = getelementptr inbounds i8*, i8** %1, i64 0
  %484 = load i8*, i8** %483, align 8
  %485 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %486 = call i32 (i8*, ...) @printf(i8* %485, i8* %484)
  br label %1599

; <label>:487:                                    ; preds = %476
  %488 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 13
  %489 = load i32, i32* %488, align 8
  %490 = sub nsw i32 %489, 1
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds [17 x i32], [17 x i32]* @K_COEFF, i64 0, i64 %491
  store i32 0, i32* %492, align 4
  br label %599

; <label>:493:                                    ; preds = %38
  %494 = load i8*, i8** @optarg, align 8
  %495 = getelementptr [3 x i8], [3 x i8]* @.str.93, i32 0, i32 0
  %496 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 39
  %497 = call i32 (i8*, i8*, ...) @sscanf(i8* %494, i8* %495, i32* %496) #9
  %498 = icmp ne i32 %497, 1
  br i1 %498, label %507, label %499

; <label>:499:                                    ; preds = %493
  %500 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 39
  %501 = load i32, i32* %500, align 4
  %502 = icmp slt i32 %501, 0
  br i1 %502, label %507, label %503

; <label>:503:                                    ; preds = %499
  %504 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 39
  %505 = load i32, i32* %504, align 4
  %506 = icmp sgt i32 %505, 2
  br i1 %506, label %507, label %514

; <label>:507:                                    ; preds = %503, %499, %493
  %508 = getelementptr [36 x i8], [36 x i8]* @.str.108, i32 0, i32 0
  %509 = call i32 (i8*, ...) @printf(i8* %508)
  %510 = getelementptr inbounds i8*, i8** %1, i64 0
  %511 = load i8*, i8** %510, align 8
  %512 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %513 = call i32 (i8*, ...) @printf(i8* %512, i8* %511)
  br label %1599

; <label>:514:                                    ; preds = %503
  br label %599

; <label>:515:                                    ; preds = %38
  %516 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  store i32 0, i32* %516, align 8
  %517 = load i8*, i8** @optarg, align 8
  %518 = icmp ne i8* %517, null
  br i1 %518, label %519, label %542

; <label>:519:                                    ; preds = %515
  %520 = load i8*, i8** @optarg, align 8
  %521 = getelementptr [3 x i8], [3 x i8]* @.str.93, i32 0, i32 0
  %522 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %523 = call i32 (i8*, i8*, ...) @sscanf(i8* %520, i8* %521, i32* %522) #9
  %524 = icmp ne i32 %523, 1
  br i1 %524, label %533, label %525

; <label>:525:                                    ; preds = %519
  %526 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %527 = load i32, i32* %526, align 8
  %528 = icmp slt i32 %527, 0
  br i1 %528, label %533, label %529

; <label>:529:                                    ; preds = %525
  %530 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %531 = load i32, i32* %530, align 8
  %532 = icmp sgt i32 %531, 4
  br i1 %532, label %533, label %541

; <label>:533:                                    ; preds = %529, %525, %519
  %534 = load i8*, i8** @optarg, align 8
  %535 = getelementptr [28 x i8], [28 x i8]* @.str.109, i32 0, i32 0
  %536 = call i32 (i8*, ...) @printf(i8* %535, i8* %534)
  %537 = getelementptr inbounds i8*, i8** %1, i64 0
  %538 = load i8*, i8** %537, align 8
  %539 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %540 = call i32 (i8*, ...) @printf(i8* %539, i8* %538)
  br label %1599

; <label>:541:                                    ; preds = %529
  br label %542

; <label>:542:                                    ; preds = %541, %515
  br label %599

; <label>:543:                                    ; preds = %38
  %544 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 18
  store i32 0, i32* %544, align 4
  br label %599

; <label>:545:                                    ; preds = %38
  %546 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 19
  store i32 1, i32* %546, align 8
  br label %599

; <label>:547:                                    ; preds = %38
  %548 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  store i32 0, i32* %548, align 4
  br label %599

; <label>:549:                                    ; preds = %38
  %550 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 26
  store i32 1, i32* %550, align 8
  br label %599

; <label>:551:                                    ; preds = %38
  %552 = load i8*, i8** @optarg, align 8
  %553 = call i32 @set_dicts(i8* %552)
  %554 = icmp ne i32 %553, 0
  br i1 %554, label %555, label %560

; <label>:555:                                    ; preds = %551
  %556 = getelementptr inbounds i8*, i8** %1, i64 0
  %557 = load i8*, i8** %556, align 8
  %558 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %559 = call i32 (i8*, ...) @printf(i8* %558, i8* %557)
  br label %1599

; <label>:560:                                    ; preds = %551
  br label %599

; <label>:561:                                    ; preds = %38
  %562 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %563 = getelementptr [56 x i8], [56 x i8]* @.str.110, i32 0, i32 0
  %564 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %562, i8* %563)
  br label %1599

; <label>:565:                                    ; preds = %38
  %566 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  store i32 1, i32* %566, align 4
  br label %599

; <label>:567:                                    ; preds = %38
  br label %611

; <label>:568:                                    ; preds = %38
  %569 = load i8*, i8** @optarg, align 8
  %570 = call i32 @checkbssids(i8* %569)
  %571 = icmp slt i32 %570, 1
  br i1 %571, label %572, label %577

; <label>:572:                                    ; preds = %568
  %573 = getelementptr inbounds i8*, i8** %1, i64 0
  %574 = load i8*, i8** %573, align 8
  %575 = getelementptr [44 x i8], [44 x i8]* @.str.111, i32 0, i32 0
  %576 = call i32 (i8*, ...) @printf(i8* %575, i8* %574)
  br label %1599

; <label>:577:                                    ; preds = %568
  %578 = icmp eq i32 %570, 1
  br i1 %578, label %579, label %582

; <label>:579:                                    ; preds = %577
  %580 = getelementptr [50 x i8], [50 x i8]* @.str.112, i32 0, i32 0
  %581 = call i32 (i8*, ...) @printf(i8* %580)
  br label %585

; <label>:582:                                    ; preds = %577
  %583 = load i8*, i8** @optarg, align 8
  %584 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 34
  store i8* %583, i8** %584, align 8
  br label %585

; <label>:585:                                    ; preds = %582, %579
  br label %599

; <label>:586:                                    ; preds = %38
  %587 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 40
  %588 = load i32, i32* %587, align 8
  %589 = icmp ne i32 %588, 0
  br i1 %589, label %590, label %597

; <label>:590:                                    ; preds = %586
  %591 = getelementptr [47 x i8], [47 x i8]* @.str.91, i32 0, i32 0
  %592 = call i32 (i8*, ...) @printf(i8* %591)
  %593 = getelementptr inbounds i8*, i8** %1, i64 0
  %594 = load i8*, i8** %593, align 8
  %595 = getelementptr [27 x i8], [27 x i8]* @.str.92, i32 0, i32 0
  %596 = call i32 (i8*, ...) @printf(i8* %595, i8* %594)
  br label %1599

; <label>:597:                                    ; preds = %586
  br label %599

; <label>:598:                                    ; preds = %38
  br label %611

; <label>:599:                                    ; preds = %597, %585, %565, %560, %549, %547, %545, %543, %542, %514, %487, %463, %445, %423, %405, %378, %344, %331, %165, %163, %161, %159, %157, %155, %154, %131, %113, %112, %75
  %.134 = phi i32 [ 1, %597 ], [ %.033138, %585 ], [ %.033138, %565 ], [ %.033138, %560 ], [ %.033138, %549 ], [ %.033138, %547 ], [ %.033138, %545 ], [ %.033138, %543 ], [ %.033138, %542 ], [ %.033138, %514 ], [ %.033138, %487 ], [ %.033138, %463 ], [ %.033138, %445 ], [ %.033138, %423 ], [ %.033138, %405 ], [ %.033138, %378 ], [ %.033138, %344 ], [ %.033138, %331 ], [ %.033138, %165 ], [ %.033138, %163 ], [ %.033138, %161 ], [ %.033138, %159 ], [ %.033138, %157 ], [ %.033138, %155 ], [ %.033138, %154 ], [ %.033138, %131 ], [ %.033138, %113 ], [ %.033138, %112 ], [ %.033138, %75 ]
  %.531 = phi i32 [ %.026139, %597 ], [ %.026139, %585 ], [ %.026139, %565 ], [ %.026139, %560 ], [ %.026139, %549 ], [ %.026139, %547 ], [ %.026139, %545 ], [ %.026139, %543 ], [ %.026139, %542 ], [ %.026139, %514 ], [ %.026139, %487 ], [ %.026139, %463 ], [ %.026139, %445 ], [ %.026139, %423 ], [ %.026139, %405 ], [ %.026139, %378 ], [ %.026139, %344 ], [ %.430, %331 ], [ %.026139, %165 ], [ %.026139, %163 ], [ %.026139, %161 ], [ %.026139, %159 ], [ %.026139, %157 ], [ %.026139, %155 ], [ %.026139, %154 ], [ %.026139, %131 ], [ %.026139, %113 ], [ %.026139, %112 ], [ %.026139, %75 ]
  store i32 0, i32* %6, align 4
  %600 = getelementptr [50 x i8], [50 x i8]* @.str.86, i32 0, i32 0
  %601 = getelementptr [10 x %struct.option], [10 x %struct.option]* @main.long_options, i32 0, i32 0
  %602 = call i32 @getopt_long(i32 %0, i8** %1, i8* %600, %struct.option* %601, i32* %6) #9, !track_argc !218
  %603 = icmp slt i32 %602, 0
  br i1 %603, label %._crit_edge142, label %38

; <label>:604:                                    ; preds = %37
  %605 = load i32, i32* @optind, align 4
  %606 = sub nsw i32 %0, %605, !track_argc !218
  %607 = icmp slt i32 %606, 1
  br i1 %607, label %608, label %642

; <label>:608:                                    ; preds = %604
  %609 = icmp eq i32 %0, 1, !track_argc !218
  br i1 %609, label %610, label %627

; <label>:610:                                    ; preds = %608
  br label %611

; <label>:611:                                    ; preds = %610, %598, %567
  %.036 = phi i32 [ 0, %610 ], [ 0, %598 ], [ 1, %567 ]
  %612 = load i8*, i8** @progname, align 8
  %613 = icmp sgt i32 %12, 1
  br i1 %613, label %616, label %614

; <label>:614:                                    ; preds = %611
  %615 = icmp eq i32 %12, -1
  br label %616

; <label>:616:                                    ; preds = %614, %611
  %617 = phi i1 [ true, %611 ], [ %615, %614 ]
  %618 = zext i1 %617 to i64
  %619 = getelementptr [58 x i8], [58 x i8]* @.str.113, i32 0, i32 0
  %620 = getelementptr [2 x i8], [2 x i8]* @.str.2, i32 0, i32 0
  %621 = select i1 %617, i8* %619, i8* %620
  %622 = getelementptr [1799 x i8], [1799 x i8]* @usage, i32 0, i32 0
  %623 = call i32 (i8*, ...) @printf(i8* %622, i8* %612, i8* %621)
  %624 = icmp eq i32 %.036, 1
  br i1 %624, label %625, label %626

; <label>:625:                                    ; preds = %616
  call void @exit(i32 0) #11
  br label %UnifiedUnreachableBlock

; <label>:626:                                    ; preds = %616
  br label %627

; <label>:627:                                    ; preds = %626, %608
  %628 = load i32, i32* @optind, align 4
  %629 = sub nsw i32 %0, %628, !track_argc !218
  %630 = icmp eq i32 %629, 0
  br i1 %630, label %631, label %634

; <label>:631:                                    ; preds = %627
  %632 = getelementptr [29 x i8], [29 x i8]* @.str.114, i32 0, i32 0
  %633 = call i32 (i8*, ...) @printf(i8* %632)
  br label %634

; <label>:634:                                    ; preds = %631, %627
  %635 = icmp sgt i32 %0, 1, !track_argc !218
  br i1 %635, label %636, label %641

; <label>:636:                                    ; preds = %634
  %637 = getelementptr inbounds i8*, i8** %1, i64 0
  %638 = load i8*, i8** %637, align 8
  %639 = getelementptr [23 x i8], [23 x i8]* @.str.87, i32 0, i32 0
  %640 = call i32 (i8*, ...) @printf(i8* %639, i8* %638)
  br label %641

; <label>:641:                                    ; preds = %636, %634
  br label %1599

; <label>:642:                                    ; preds = %604
  %643 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %644 = load i32, i32* %643, align 8
  %645 = icmp eq i32 %644, 2
  br i1 %645, label %646, label %654

; <label>:646:                                    ; preds = %642
  %647 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %648 = load %struct._IO_FILE*, %struct._IO_FILE** %647, align 8
  %649 = icmp eq %struct._IO_FILE* %648, null
  br i1 %649, label %650, label %654

; <label>:650:                                    ; preds = %646
  br label %651

; <label>:651:                                    ; preds = %1400, %650
  %.011 = phi i32 [ 1, %650 ], [ %.1021, %1400 ]
  %652 = getelementptr [42 x i8], [42 x i8]* @.str.115, i32 0, i32 0
  %653 = call i32 (i8*, ...) @printf(i8* %652)
  br label %1589

; <label>:654:                                    ; preds = %646, %642
  %655 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %656 = load i32, i32* %655, align 4
  %657 = icmp ne i32 %656, 0
  br i1 %657, label %673, label %658

; <label>:658:                                    ; preds = %654
  %659 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  %660 = load i32, i32* %659, align 8
  %661 = icmp ne i32 %660, 0
  br i1 %661, label %673, label %662

; <label>:662:                                    ; preds = %658
  %663 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %664 = load i32, i32* %663, align 8
  %665 = icmp ne i32 %664, 0
  br i1 %665, label %670, label %666

; <label>:666:                                    ; preds = %662
  %667 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 24
  %668 = load i32, i32* %667, align 4
  %669 = icmp ne i32 %668, 0
  br i1 %669, label %670, label %673

; <label>:670:                                    ; preds = %666, %662
  %671 = getelementptr [35 x i8], [35 x i8]* @.str.116, i32 0, i32 0
  %672 = call i32 (i8*, ...) @printf(i8* %671)
  br label %1589

; <label>:673:                                    ; preds = %666, %658, %654
  %674 = call void (i32)* @signal(i32 2, void (i32)* @sighandler) #9
  %675 = call void (i32)* @signal(i32 3, void (i32)* @sighandler) #9
  %676 = call void (i32)* @signal(i32 15, void (i32)* @sighandler) #9
  %677 = call void (i32)* @signal(i32 14, void (i32)* inttoptr (i64 1 to void (i32)*)) #9
  %678 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* @mx_apl, %union.pthread_mutexattr_t* null) #9
  %679 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* @mx_ivb, %union.pthread_mutexattr_t* null) #9
  %680 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* @mx_eof, %union.pthread_mutexattr_t* null) #9
  %681 = call i32 @pthread_cond_init(%union.pthread_cond_t* @cv_eof, %union.pthread_mutexattr_t* null) #9
  store %struct.AP_info* null, %struct.AP_info** @ap_1st, align 8
  %682 = load i32, i32* @optind, align 4
  %683 = load i32, i32* @optind, align 4
  %684 = sub nsw i32 %0, %683, !track_argc !218
  store i32 %684, i32* %3, align 4
  store i32 0, i32* @id, align 4
  %685 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  %686 = load i32, i32* %685, align 8
  %687 = icmp ne i32 %686, 0
  br i1 %687, label %952, label %688

; <label>:688:                                    ; preds = %673
  br label %689

; <label>:689:                                    ; preds = %726, %688
  call void @unroll_loop(i32 127)
  %690 = load i32, i32* @optind, align 4
  %691 = sext i32 %690 to i64
  %692 = getelementptr inbounds i8*, i8** %1, i64 %691
  %693 = load i8*, i8** %692, align 8
  %694 = getelementptr [2 x i8], [2 x i8]* @.str.10, i32 0, i32 0
  %695 = call i32 @strcmp(i8* %693, i8* %694) #10
  %696 = icmp eq i32 %695, 0
  br i1 %696, label %697, label %699

; <label>:697:                                    ; preds = %689
  %698 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 24
  store i32 1, i32* %698, align 4
  br label %699

; <label>:699:                                    ; preds = %697, %689
  %700 = load i32, i32* @id, align 4
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds [128 x i64], [128 x i64]* @tid, i64 0, i64 %701
  %703 = load i32, i32* @optind, align 4
  %704 = sext i32 %703 to i64
  %705 = getelementptr inbounds i8*, i8** %1, i64 %704
  %706 = load i8*, i8** %705, align 8
  %707 = call i32 @pthread_create(i64* %702, %union.pthread_attr_t* null, i8* (i8*)* bitcast (void (i8*)* @check_thread to i8* (i8*)*), i8* %706) #9
  %708 = icmp ne i32 %707, 0
  br i1 %708, label %709, label %711

; <label>:709:                                    ; preds = %699
  %710 = getelementptr [22 x i8], [22 x i8]* @.str.117, i32 0, i32 0
  call void @perror(i8* %710)
  br label %1589

; <label>:711:                                    ; preds = %699
  %712 = call i32 @usleep(i32 131071)
  %713 = load i32, i32* @id, align 4
  %714 = add nsw i32 %713, 1
  store i32 %714, i32* @id, align 4
  %715 = load i32, i32* @id, align 4
  %716 = icmp sge i32 %715, 128
  br i1 %716, label %717, label %725

; <label>:717:                                    ; preds = %711
  %718 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %719 = load i32, i32* %718, align 8
  %720 = icmp ne i32 %719, 0
  br i1 %720, label %724, label %721

; <label>:721:                                    ; preds = %717
  %722 = getelementptr [51 x i8], [51 x i8]* @.str.118, i32 0, i32 0
  %723 = call i32 (i8*, ...) @printf(i8* %722, i32 128)
  br label %724

; <label>:724:                                    ; preds = %721, %717
  br label %730

; <label>:725:                                    ; preds = %711
  br label %726

; <label>:726:                                    ; preds = %725
  %727 = load i32, i32* @optind, align 4
  %728 = add nsw i32 %727, 1
  store i32 %728, i32* @optind, align 4
  %729 = icmp slt i32 %728, %0, !track_argc !218
  br i1 %729, label %689, label %.loopexit70

.loopexit70:                                      ; preds = %726
  br label %730

; <label>:730:                                    ; preds = %.loopexit70, %724
  %731 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %732 = load i32, i32* %731, align 8
  %733 = icmp ne i32 %732, 0
  br i1 %733, label %739, label %734

; <label>:734:                                    ; preds = %730
  %735 = getelementptr [33 x i8], [33 x i8]* @.str.119, i32 0, i32 0
  %736 = call i32 (i8*, ...) @printf(i8* %735)
  %737 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %738 = call i32 @fflush(%struct._IO_FILE* %737)
  br label %739

; <label>:739:                                    ; preds = %734, %730
  store i32 1, i32* @intr_read, align 4
  %740 = load i32, i32* @id, align 4
  %741 = icmp slt i32 0, %740
  br i1 %741, label %.lr.ph130, label %750

.lr.ph130:                                        ; preds = %739
  br label %742

; <label>:742:                                    ; preds = %.lr.ph130, %746
  %indvars.iv132 = phi i64 [ 0, %.lr.ph130 ], [ %indvars.iv.next133, %746 ]
  call void @unroll_loop(i32 128)
  %743 = getelementptr inbounds [128 x i64], [128 x i64]* @tid, i64 0, i64 %indvars.iv132
  %744 = load i64, i64* %743, align 8
  %745 = call i32 @pthread_join(i64 %744, i8** null)
  br label %746

; <label>:746:                                    ; preds = %742
  %indvars.iv.next133 = add nuw nsw i64 %indvars.iv132, 1
  %747 = load i32, i32* @id, align 4
  %748 = sext i32 %747 to i64
  %749 = icmp slt i64 %indvars.iv.next133, %748
  br i1 %749, label %742, label %._crit_edge131

._crit_edge131:                                   ; preds = %746
  br label %750

; <label>:750:                                    ; preds = %._crit_edge131, %739
  store i32 0, i32* @id, align 4
  %751 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %752 = load i32, i32* %751, align 8
  %753 = icmp ne i32 %752, 0
  br i1 %753, label %762, label %754

; <label>:754:                                    ; preds = %750
  %755 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 24
  %756 = load i32, i32* %755, align 4
  %757 = icmp ne i32 %756, 0
  br i1 %757, label %762, label %758

; <label>:758:                                    ; preds = %754
  %759 = load i64, i64* @nb_pkt, align 8
  %760 = getelementptr [23 x i8], [23 x i8]* @.str.120, i32 0, i32 0
  %761 = call i32 (i8*, ...) @printf(i8* %760, i64 %759)
  br label %762

; <label>:762:                                    ; preds = %758, %754, %750
  %763 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  %764 = icmp eq %struct.AP_info* %763, null
  br i1 %764, label %765, label %768

; <label>:765:                                    ; preds = %762
  %766 = getelementptr [29 x i8], [29 x i8]* @.str.121, i32 0, i32 0
  %767 = call i32 (i8*, ...) @printf(i8* %766)
  br label %1589

; <label>:768:                                    ; preds = %762
  %769 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %770 = load i32, i32* %769, align 4
  %771 = icmp ne i32 %770, 0
  br i1 %771, label %951, label %772

; <label>:772:                                    ; preds = %768
  %773 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  %774 = load i32, i32* %773, align 8
  %775 = icmp ne i32 %774, 0
  br i1 %775, label %951, label %776

; <label>:776:                                    ; preds = %772
  %777 = getelementptr [37 x i8], [37 x i8]* @.str.122, i32 0, i32 0
  %778 = getelementptr [1 x i8], [1 x i8]* @.str.123, i32 0, i32 0
  %779 = call i32 (i8*, ...) @printf(i8* %777, i8* %778, i8* %778)
  %780 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  %781 = icmp ne %struct.AP_info* %780, null
  br i1 %781, label %.lr.ph125, label %886

.lr.ph125:                                        ; preds = %776
  br label %782

; <label>:782:                                    ; preds = %.lr.ph125, %881
  %.01123 = phi %struct.AP_info* [ %780, %.lr.ph125 ], [ %884, %881 ]
  %.68122 = phi i32 [ 1, %.lr.ph125 ], [ %882, %881 ]
  call void @unroll_loop(i32 129)
  %783 = getelementptr inbounds [33 x i8], [33 x i8]* %5, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %783, i8 0, i64 33, i1 false)
  %784 = getelementptr inbounds [33 x i8], [33 x i8]* %5, i32 0, i32 0
  %785 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 2
  %786 = getelementptr inbounds [33 x i8], [33 x i8]* %785, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %784, i8* align 2 %786, i64 32, i1 false), !track !222
  br label %787

; <label>:787:                                    ; preds = %782, %805
  %indvars.iv120 = phi i64 [ 0, %782 ], [ %indvars.iv.next121, %805 ]
  call void @unroll_loop(i32 130)
  %788 = getelementptr inbounds [33 x i8], [33 x i8]* %5, i64 0, i64 %indvars.iv120
  %789 = load i8, i8* %788, align 1
  %790 = sext i8 %789 to i32
  %791 = icmp sgt i32 %790, 0
  br i1 %791, label %792, label %797

; <label>:792:                                    ; preds = %787
  %793 = getelementptr inbounds [33 x i8], [33 x i8]* %5, i64 0, i64 %indvars.iv120
  %794 = load i8, i8* %793, align 1
  %795 = sext i8 %794 to i32
  %796 = icmp slt i32 %795, 32
  br i1 %796, label %802, label %797

; <label>:797:                                    ; preds = %792, %787
  %798 = getelementptr inbounds [33 x i8], [33 x i8]* %5, i64 0, i64 %indvars.iv120
  %799 = load i8, i8* %798, align 1
  %800 = sext i8 %799 to i32
  %801 = icmp sgt i32 %800, 126
  br i1 %801, label %802, label %804

; <label>:802:                                    ; preds = %797, %792
  %803 = getelementptr inbounds [33 x i8], [33 x i8]* %5, i64 0, i64 %indvars.iv120
  store i8 63, i8* %803, align 1
  br label %804

; <label>:804:                                    ; preds = %802, %797
  br label %805

; <label>:805:                                    ; preds = %804
  %indvars.iv.next121 = add nuw nsw i64 %indvars.iv120, 1
  %exitcond = icmp ne i64 %indvars.iv.next121, 32
  br i1 %exitcond, label %787, label %806

; <label>:806:                                    ; preds = %805
  %807 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 1
  %808 = getelementptr inbounds [6 x i8], [6 x i8]* %807, i64 0, i64 0
  %809 = load i8, i8* %808, align 8
  %810 = zext i8 %809 to i32
  %811 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 1
  %812 = getelementptr inbounds [6 x i8], [6 x i8]* %811, i64 0, i64 1
  %813 = load i8, i8* %812, align 1
  %814 = zext i8 %813 to i32
  %815 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 1
  %816 = getelementptr inbounds [6 x i8], [6 x i8]* %815, i64 0, i64 2
  %817 = load i8, i8* %816, align 2
  %818 = zext i8 %817 to i32
  %819 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 1
  %820 = getelementptr inbounds [6 x i8], [6 x i8]* %819, i64 0, i64 3
  %821 = load i8, i8* %820, align 1
  %822 = zext i8 %821 to i32
  %823 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 1
  %824 = getelementptr inbounds [6 x i8], [6 x i8]* %823, i64 0, i64 4
  %825 = load i8, i8* %824, align 4
  %826 = zext i8 %825 to i32
  %827 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 1
  %828 = getelementptr inbounds [6 x i8], [6 x i8]* %827, i64 0, i64 5
  %829 = load i8, i8* %828, align 1
  %830 = zext i8 %829 to i32
  %831 = getelementptr inbounds [33 x i8], [33 x i8]* %5, i32 0, i32 0
  %832 = getelementptr [44 x i8], [44 x i8]* @.str.124, i32 0, i32 0
  %833 = call i32 (i8*, ...) @printf(i8* %832, i32 %.68122, i32 %810, i32 %814, i32 %818, i32 %822, i32 %826, i32 %830, i8* %831)
  %834 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 11
  %835 = load i32, i32* %834, align 4
  %836 = icmp ne i32 %835, 0
  br i1 %836, label %837, label %840

; <label>:837:                                    ; preds = %806
  %838 = getelementptr [7 x i8], [7 x i8]* @.str.125, i32 0, i32 0
  %839 = call i32 (i8*, ...) @printf(i8* %838)
  br label %840

; <label>:840:                                    ; preds = %837, %806
  %841 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 10
  %842 = load i32, i32* %841, align 8
  switch i32 %842, label %878 [
    i32 0, label %843
    i32 1, label %862
    i32 2, label %865
    i32 3, label %870
  ]

; <label>:843:                                    ; preds = %840
  %844 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 3
  %845 = getelementptr inbounds [4 x i8], [4 x i8]* %844, i64 0, i64 0
  %846 = load i8, i8* %845, align 1
  %847 = zext i8 %846 to i32
  %848 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 3
  %849 = getelementptr inbounds [4 x i8], [4 x i8]* %848, i64 0, i64 1
  %850 = load i8, i8* %849, align 1
  %851 = zext i8 %850 to i32
  %852 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 3
  %853 = getelementptr inbounds [4 x i8], [4 x i8]* %852, i64 0, i64 2
  %854 = load i8, i8* %853, align 1
  %855 = zext i8 %854 to i32
  %856 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 3
  %857 = getelementptr inbounds [4 x i8], [4 x i8]* %856, i64 0, i64 3
  %858 = load i8, i8* %857, align 1
  %859 = zext i8 %858 to i32
  %860 = getelementptr [20 x i8], [20 x i8]* @.str.126, i32 0, i32 0
  %861 = call i32 (i8*, ...) @printf(i8* %860, i32 %847, i32 %851, i32 %855, i32 %859)
  br label %881

; <label>:862:                                    ; preds = %840
  %863 = getelementptr [22 x i8], [22 x i8]* @.str.127, i32 0, i32 0
  %864 = call i32 (i8*, ...) @printf(i8* %863)
  br label %881

; <label>:865:                                    ; preds = %840
  %866 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 7
  %867 = load i64, i64* %866, align 8
  %868 = getelementptr [15 x i8], [15 x i8]* @.str.128, i32 0, i32 0
  %869 = call i32 (i8*, ...) @printf(i8* %868, i64 %867)
  br label %881

; <label>:870:                                    ; preds = %840
  %871 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 14
  %872 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %871, i32 0, i32 7
  %873 = load i32, i32* %872, align 8
  %874 = icmp eq i32 %873, 7
  %875 = zext i1 %874 to i32
  %876 = getelementptr [20 x i8], [20 x i8]* @.str.129, i32 0, i32 0
  %877 = call i32 (i8*, ...) @printf(i8* %876, i32 %875)
  br label %881

; <label>:878:                                    ; preds = %840
  %879 = getelementptr [9 x i8], [9 x i8]* @.str.130, i32 0, i32 0
  %880 = call i32 (i8*, ...) @printf(i8* %879)
  br label %881

; <label>:881:                                    ; preds = %878, %870, %865, %862, %843
  %882 = add nuw nsw i32 %.68122, 1
  %883 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.01123, i32 0, i32 0
  %884 = load %struct.AP_info*, %struct.AP_info** %883, align 8
  %885 = icmp ne %struct.AP_info* %884, null
  br i1 %885, label %782, label %._crit_edge126

._crit_edge126:                                   ; preds = %881
  %split127 = phi %struct.AP_info* [ %884, %881 ]
  br label %886

; <label>:886:                                    ; preds = %._crit_edge126, %776
  %.01.lcssa = phi %struct.AP_info* [ %split127, %._crit_edge126 ], [ %780, %776 ]
  %887 = getelementptr [2 x i8], [2 x i8]* @.str.2, i32 0, i32 0
  %888 = call i32 (i8*, ...) @printf(i8* %887)
  %889 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  %890 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %889, i32 0, i32 0
  %891 = load %struct.AP_info*, %struct.AP_info** %890, align 8
  %892 = icmp ne %struct.AP_info* %891, null
  br i1 %892, label %893, label %930

; <label>:893:                                    ; preds = %886
  br label %894

; <label>:894:                                    ; preds = %927, %893
  %.1 = phi %struct.AP_info* [ %.01.lcssa, %893 ], [ %.3, %927 ]
  call void @unroll_loop(i32 131)
  %895 = getelementptr [34 x i8], [34 x i8]* @.str.131, i32 0, i32 0
  %896 = call i32 (i8*, ...) @printf(i8* %895)
  %897 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %898 = call i32 @fflush(%struct._IO_FILE* %897)
  br label %899

; <label>:899:                                    ; preds = %894, %899
  call void @unroll_loop(i32 132)
  %900 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i32 0, i32 0
  %901 = getelementptr [6 x i8], [6 x i8]* @.str.132, i32 0, i32 0
  %902 = call i32 (i8*, ...) @scanf(i8* %901, i8* %900)
  %903 = icmp ne i32 %902, 0
  %904 = xor i1 %903, true
  br i1 %904, label %899, label %905

; <label>:905:                                    ; preds = %899
  %906 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i32 0, i32 0
  %907 = call i32 @atoi(i8* %906) #10
  %908 = icmp slt i32 %907, 1
  br i1 %908, label %909, label %910

; <label>:909:                                    ; preds = %905
  br label %923

; <label>:910:                                    ; preds = %905
  %911 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  br label %912

; <label>:912:                                    ; preds = %918, %910
  %.79 = phi i32 [ 1, %910 ], [ %919, %918 ]
  %.2 = phi %struct.AP_info* [ %911, %910 ], [ %921, %918 ]
  call void @unroll_loop(i32 133)
  %913 = icmp ne %struct.AP_info* %.2, null
  br i1 %913, label %914, label %916

; <label>:914:                                    ; preds = %912
  %915 = icmp slt i32 %.79, %907
  br label %916

; <label>:916:                                    ; preds = %914, %912
  %917 = phi i1 [ false, %912 ], [ %915, %914 ]
  br i1 %917, label %918, label %922

; <label>:918:                                    ; preds = %916
  %919 = add nuw nsw i32 %.79, 1
  %920 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.2, i32 0, i32 0
  %921 = load %struct.AP_info*, %struct.AP_info** %920, align 8
  br label %912

; <label>:922:                                    ; preds = %916
  %.2.lcssa = phi %struct.AP_info* [ %.2, %916 ]
  br label %923

; <label>:923:                                    ; preds = %922, %909
  %.3 = phi %struct.AP_info* [ %.1, %909 ], [ %.2.lcssa, %922 ]
  %924 = icmp slt i32 %907, 0
  br i1 %924, label %927, label %925

; <label>:925:                                    ; preds = %923
  %926 = icmp eq %struct.AP_info* %.3, null
  br label %927

; <label>:927:                                    ; preds = %925, %923
  %928 = phi i1 [ true, %923 ], [ %926, %925 ]
  br i1 %928, label %894, label %929

; <label>:929:                                    ; preds = %927
  %.3.lcssa = phi %struct.AP_info* [ %.3, %927 ]
  br label %934

; <label>:930:                                    ; preds = %886
  %931 = getelementptr [35 x i8], [35 x i8]* @.str.133, i32 0, i32 0
  %932 = call i32 (i8*, ...) @printf(i8* %931)
  %933 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  br label %934

; <label>:934:                                    ; preds = %930, %929
  %.4 = phi %struct.AP_info* [ %.3.lcssa, %929 ], [ %933, %930 ]
  %935 = getelementptr [2 x i8], [2 x i8]* @.str.2, i32 0, i32 0
  %936 = call i32 (i8*, ...) @printf(i8* %935)
  %937 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.4, i32 0, i32 1
  %938 = getelementptr inbounds [6 x i8], [6 x i8]* %937, i32 0, i32 0
  %939 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 4, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %939, i8* align 8 %938, i64 6, i1 false), !track !223
  %940 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  store i32 1, i32* %940, align 8
  %941 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.4, i32 0, i32 10
  %942 = load i32, i32* %941, align 8
  %943 = icmp eq i32 %942, 2
  br i1 %943, label %944, label %950

; <label>:944:                                    ; preds = %934
  %945 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %946 = load %struct._IO_FILE*, %struct._IO_FILE** %945, align 8
  %947 = icmp ne %struct._IO_FILE* %946, null
  br i1 %947, label %948, label %950

; <label>:948:                                    ; preds = %944
  %949 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  store i32 0, i32* %949, align 4
  br label %950

; <label>:950:                                    ; preds = %948, %944, %934
  br label %951

; <label>:951:                                    ; preds = %950, %772, %768
  store %struct.AP_info* null, %struct.AP_info** @ap_1st, align 8
  store i32 %682, i32* @optind, align 4
  store i32 0, i32* @id, align 4
  br label %952

; <label>:952:                                    ; preds = %951, %673
  store i32 0, i32* @nb_eof, align 4
  %953 = call void (i32)* @signal(i32 2, void (i32)* @sighandler) #9
  br label %954

; <label>:954:                                    ; preds = %984, %952
  call void @unroll_loop(i32 134)
  %955 = load i32, i32* @optind, align 4
  %956 = sext i32 %955 to i64
  %957 = getelementptr inbounds i8*, i8** %1, i64 %956
  %958 = load i8*, i8** %957, align 8
  %959 = getelementptr [2 x i8], [2 x i8]* @.str.10, i32 0, i32 0
  %960 = call i32 @strcmp(i8* %958, i8* %959) #10
  %961 = icmp eq i32 %960, 0
  br i1 %961, label %962, label %964

; <label>:962:                                    ; preds = %954
  %963 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 24
  store i32 1, i32* %963, align 4
  br label %964

; <label>:964:                                    ; preds = %962, %954
  %965 = load i32, i32* @id, align 4
  %966 = sext i32 %965 to i64
  %967 = getelementptr inbounds [128 x i64], [128 x i64]* @tid, i64 0, i64 %966
  %968 = load i32, i32* @optind, align 4
  %969 = sext i32 %968 to i64
  %970 = getelementptr inbounds i8*, i8** %1, i64 %969
  %971 = load i8*, i8** %970, align 8
  %972 = call i32 @pthread_create(i64* %967, %union.pthread_attr_t* null, i8* (i8*)* bitcast (void (i8*)* @read_thread to i8* (i8*)*), i8* %971) #9
  %973 = icmp ne i32 %972, 0
  br i1 %973, label %974, label %976

; <label>:974:                                    ; preds = %964
  %975 = getelementptr [22 x i8], [22 x i8]* @.str.117, i32 0, i32 0
  call void @perror(i8* %975)
  br label %1589

; <label>:976:                                    ; preds = %964
  %977 = load i32, i32* @id, align 4
  %978 = add nsw i32 %977, 1
  store i32 %978, i32* @id, align 4
  %979 = call i32 @usleep(i32 131071)
  %980 = load i32, i32* @id, align 4
  %981 = icmp sge i32 %980, 128
  br i1 %981, label %982, label %983

; <label>:982:                                    ; preds = %976
  br label %988

; <label>:983:                                    ; preds = %976
  br label %984

; <label>:984:                                    ; preds = %983
  %985 = load i32, i32* @optind, align 4
  %986 = add nsw i32 %985, 1
  store i32 %986, i32* @optind, align 4
  %987 = icmp slt i32 %986, %0, !track_argc !218
  br i1 %987, label %954, label %.loopexit69

.loopexit69:                                      ; preds = %984
  br label %988

; <label>:988:                                    ; preds = %.loopexit69, %982
  store i64 0, i64* @nb_pkt, align 8
  store i32 0, i32* @intr_read, align 4
  %989 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* @mx_eof) #9
  %990 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %991 = load i32, i32* %990, align 8
  %992 = icmp ne i32 %991, 0
  br i1 %992, label %998, label %993

; <label>:993:                                    ; preds = %988
  %994 = getelementptr [33 x i8], [33 x i8]* @.str.119, i32 0, i32 0
  %995 = call i32 (i8*, ...) @printf(i8* %994)
  %996 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %997 = call i32 @fflush(%struct._IO_FILE* %996)
  br label %998

; <label>:998:                                    ; preds = %993, %988
  br label %999

; <label>:999:                                    ; preds = %1009, %998
  call void @unroll_loop(i32 135)
  %1000 = load i32, i32* @nb_eof, align 4
  %1001 = load i32, i32* %3, align 4
  %1002 = icmp slt i32 %1000, %1001
  br i1 %1002, label %1003, label %1007

; <label>:1003:                                   ; preds = %999
  %1004 = load i32, i32* @intr_read, align 4
  %1005 = icmp ne i32 %1004, 0
  %1006 = xor i1 %1005, true
  br label %1007

; <label>:1007:                                   ; preds = %1003, %999
  %1008 = phi i1 [ false, %999 ], [ %1006, %1003 ]
  br i1 %1008, label %1009, label %1011

; <label>:1009:                                   ; preds = %1007
  %1010 = call i32 @pthread_cond_wait(%union.pthread_cond_t* @cv_eof, %union.pthread_mutex_t* @mx_eof)
  br label %999

; <label>:1011:                                   ; preds = %1007
  %1012 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @mx_eof) #9
  store i32 1, i32* @intr_read, align 4
  %1013 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  %1014 = icmp ne %struct.AP_info* %1013, null
  br i1 %1014, label %.lr.ph115, label %1046

.lr.ph115:                                        ; preds = %1011
  br label %1015

; <label>:1015:                                   ; preds = %.lr.ph115, %1042
  %.5111 = phi %struct.AP_info* [ %1013, %.lr.ph115 ], [ %1044, %1042 ]
  call void @unroll_loop(i32 136)
  %1016 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 9, i32 0
  %1017 = getelementptr [7 x i8], [7 x i8]* @.str.23, i32 0, i32 0
  %1018 = call i32 @memcmp(i8* %1016, i8* %1017, i64 6) #10
  %1019 = icmp eq i32 %1018, 0
  br i1 %1019, label %1040, label %1020

; <label>:1020:                                   ; preds = %1015
  %1021 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 2
  %1022 = load i32, i32* %1021, align 8
  %1023 = icmp ne i32 %1022, 0
  br i1 %1023, label %1024, label %1030

; <label>:1024:                                   ; preds = %1020
  %1025 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.5111, i32 0, i32 1
  %1026 = getelementptr inbounds [6 x i8], [6 x i8]* %1025, i32 0, i32 0
  %1027 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 4, i32 0
  %1028 = call i32 @memcmp(i8* %1027, i8* %1026, i64 6) #10
  %1029 = icmp ne i32 %1028, 0
  br i1 %1029, label %1030, label %1040

; <label>:1030:                                   ; preds = %1024, %1020
  %1031 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %1032 = load i32, i32* %1031, align 4
  %1033 = icmp ne i32 %1032, 0
  br i1 %1033, label %1034, label %1042

; <label>:1034:                                   ; preds = %1030
  %1035 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.5111, i32 0, i32 2
  %1036 = getelementptr inbounds [33 x i8], [33 x i8]* %1035, i32 0, i32 0
  %1037 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 3, i32 0
  %1038 = call i32 @strcmp(i8* %1037, i8* %1036) #10
  %1039 = icmp ne i32 %1038, 0
  br i1 %1039, label %1042, label %1040

; <label>:1040:                                   ; preds = %1034, %1024, %1015
  %1041 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.5111, i32 0, i32 12
  store i32 1, i32* %1041, align 8
  br label %1042

; <label>:1042:                                   ; preds = %1040, %1034, %1030
  %1043 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.5111, i32 0, i32 0
  %1044 = load %struct.AP_info*, %struct.AP_info** %1043, align 8
  %1045 = icmp ne %struct.AP_info* %1044, null
  br i1 %1045, label %1015, label %._crit_edge116

._crit_edge116:                                   ; preds = %1042
  br label %1046

; <label>:1046:                                   ; preds = %._crit_edge116, %1011
  %1047 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  %1048 = icmp ne %struct.AP_info* %1047, null
  br i1 %1048, label %.lr.ph109, label %.loopexit68

.lr.ph109:                                        ; preds = %1046
  br label %1049

; <label>:1049:                                   ; preds = %.lr.ph109, %1054
  %.6107 = phi %struct.AP_info* [ %1047, %.lr.ph109 ], [ %1056, %1054 ]
  call void @unroll_loop(i32 137)
  %1050 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.6107, i32 0, i32 12
  %1051 = load i32, i32* %1050, align 8
  %1052 = icmp ne i32 %1051, 0
  br i1 %1052, label %1053, label %1054

; <label>:1053:                                   ; preds = %1049
  %.6.lcssa40 = phi %struct.AP_info* [ %.6107, %1049 ]
  br label %1058

; <label>:1054:                                   ; preds = %1049
  %1055 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.6107, i32 0, i32 0
  %1056 = load %struct.AP_info*, %struct.AP_info** %1055, align 8
  %1057 = icmp ne %struct.AP_info* %1056, null
  br i1 %1057, label %1049, label %..loopexit68_crit_edge

..loopexit68_crit_edge:                           ; preds = %1054
  %split110 = phi %struct.AP_info* [ %1056, %1054 ]
  br label %.loopexit68

.loopexit68:                                      ; preds = %..loopexit68_crit_edge, %1046
  %.6.lcssa.ph = phi %struct.AP_info* [ %split110, %..loopexit68_crit_edge ], [ %1047, %1046 ]
  br label %1058

; <label>:1058:                                   ; preds = %.loopexit68, %1053
  %.6.lcssa = phi %struct.AP_info* [ %.6.lcssa40, %1053 ], [ %.6.lcssa.ph, %.loopexit68 ]
  %1059 = icmp eq %struct.AP_info* %.6.lcssa, null
  br i1 %1059, label %1060, label %1070

; <label>:1060:                                   ; preds = %1058
  %1061 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %1062 = load i32, i32* %1061, align 4
  %1063 = icmp ne i32 %1062, 0
  %1064 = zext i1 %1063 to i64
  %1065 = getelementptr [6 x i8], [6 x i8]* @.str.135, i32 0, i32 0
  %1066 = getelementptr [6 x i8], [6 x i8]* @.str.77, i32 0, i32 0
  %1067 = select i1 %1063, i8* %1065, i8* %1066
  %1068 = getelementptr [44 x i8], [44 x i8]* @.str.134, i32 0, i32 0
  %1069 = call i32 (i8*, ...) @printf(i8* %1068, i8* %1067)
  br label %1589

; <label>:1070:                                   ; preds = %1058
  %1071 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.6.lcssa, i32 0, i32 10
  %1072 = load i32, i32* %1071, align 8
  %1073 = icmp slt i32 %1072, 2
  br i1 %1073, label %1074, label %1084

; <label>:1074:                                   ; preds = %1070
  %1075 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.6.lcssa, i32 0, i32 10
  %1076 = load i32, i32* %1075, align 8
  switch i32 %1076, label %1080 [
    i32 0, label %1077
  ]

; <label>:1077:                                   ; preds = %1074
  %1078 = getelementptr [40 x i8], [40 x i8]* @.str.136, i32 0, i32 0
  %1079 = call i32 (i8*, ...) @printf(i8* %1078)
  br label %1083

; <label>:1080:                                   ; preds = %1074
  %1081 = getelementptr [42 x i8], [42 x i8]* @.str.137, i32 0, i32 0
  %1082 = call i32 (i8*, ...) @printf(i8* %1081)
  br label %1083

; <label>:1083:                                   ; preds = %1080, %1077
  br label %1589

; <label>:1084:                                   ; preds = %1070
  %1085 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %1086 = load i32, i32* %1085, align 4
  %1087 = icmp slt i32 0, %1086
  br i1 %1087, label %.lr.ph103, label %1121

.lr.ph103:                                        ; preds = %1084
  br label %1088

; <label>:1088:                                   ; preds = %.lr.ph103, %1116
  %indvars.iv105 = phi i64 [ 0, %.lr.ph103 ], [ %indvars.iv.next106, %1116 ]
  call void @unroll_loop(i32 138)
  %1089 = getelementptr inbounds [256 x [2 x i32]], [256 x [2 x i32]]* @mc_pipe, i64 0, i64 %indvars.iv105
  %1090 = getelementptr inbounds [2 x i32], [2 x i32]* %1089, i32 0, i32 0
  %1091 = call i32 @pipe(i32* %1090) #9
  %1092 = getelementptr inbounds [256 x [2 x i32]], [256 x [2 x i32]]* @cm_pipe, i64 0, i64 %indvars.iv105
  %1093 = getelementptr inbounds [2 x i32], [2 x i32]* %1092, i32 0, i32 0
  %1094 = call i32 @pipe(i32* %1093) #9
  %1095 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %1096 = load i32, i32* %1095, align 8
  %1097 = icmp sle i32 %1096, 1
  br i1 %1097, label %1098, label %1115

; <label>:1098:                                   ; preds = %1088
  %1099 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %1100 = load i32, i32* %1099, align 4
  %1101 = icmp sgt i32 %1100, 1
  br i1 %1101, label %1102, label %1115

; <label>:1102:                                   ; preds = %1098
  %1103 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %1104 = load i32, i32* %1103, align 8
  %1105 = icmp ne i32 %1104, 0
  br i1 %1105, label %1106, label %1115

; <label>:1106:                                   ; preds = %1102
  %1107 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 18
  %1108 = load i32, i32* %1107, align 4
  %1109 = icmp ne i32 %1108, 0
  br i1 %1109, label %1110, label %1115

; <label>:1110:                                   ; preds = %1106
  %1111 = getelementptr inbounds [256 x [2 x i32]], [256 x [2 x i32]]* @bf_pipe, i64 0, i64 %indvars.iv105
  %1112 = getelementptr inbounds [2 x i32], [2 x i32]* %1111, i32 0, i32 0
  %1113 = call i32 @pipe(i32* %1112) #9
  %1114 = getelementptr inbounds [256 x i32], [256 x i32]* @bf_nkeys, i64 0, i64 %indvars.iv105
  store i32 0, i32* %1114, align 4
  br label %1115

; <label>:1115:                                   ; preds = %1110, %1106, %1102, %1098, %1088
  br label %1116

; <label>:1116:                                   ; preds = %1115
  %indvars.iv.next106 = add nuw nsw i64 %indvars.iv105, 1
  %1117 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %1118 = load i32, i32* %1117, align 4
  %1119 = sext i32 %1118 to i64
  %1120 = icmp slt i64 %indvars.iv.next106, %1119
  br i1 %1120, label %1088, label %._crit_edge104

._crit_edge104:                                   ; preds = %1116
  br label %1121

; <label>:1121:                                   ; preds = %._crit_edge104, %1084
  store i64 0, i64* @nb_tried, align 8
  store i64 0, i64* @nb_kprev, align 8
  %1122 = call float @chrono(%struct.timeval* @t_begin, i32 1)
  %1123 = call float @chrono(%struct.timeval* @t_stats, i32 1)
  %1124 = call float @chrono(%struct.timeval* @t_kprev, i32 1)
  %1125 = call void (i32)* @signal(i32 28, void (i32)* @sighandler) #9
  %1126 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %1127 = load i32, i32* %1126, align 8
  %1128 = icmp eq i32 %1127, 1
  br i1 %1128, label %1129, label %1130

; <label>:1129:                                   ; preds = %1121
  br label %1140

; <label>:1130:                                   ; preds = %1121
  %1131 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %1132 = load i32, i32* %1131, align 8
  %1133 = icmp eq i32 %1132, 2
  br i1 %1133, label %1134, label %1135

; <label>:1134:                                   ; preds = %1130
  br label %1396

; <label>:1135:                                   ; preds = %1130
  %1136 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.6.lcssa, i32 0, i32 10
  %1137 = load i32, i32* %1136, align 8
  %1138 = icmp eq i32 %1137, 2
  br i1 %1138, label %1139, label %1391

; <label>:1139:                                   ; preds = %1135
  br label %1140

; <label>:1140:                                   ; preds = %1139, %1129
  %1141 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %1142 = load i32, i32* %1141, align 4
  %1143 = icmp eq i32 %1142, 0
  br i1 %1143, label %1144, label %1146

; <label>:1144:                                   ; preds = %1140
  %1145 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  store i32 13, i32* %1145, align 4
  br label %1146

; <label>:1146:                                   ; preds = %1144, %1140
  %1147 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %1148 = load i32, i32* %1147, align 8
  %1149 = add nsw i32 %.026.lcssa, %1148
  %1150 = icmp sgt i32 %1149, 4
  br i1 %1150, label %1151, label %1154

; <label>:1151:                                   ; preds = %1146
  %1152 = getelementptr [61 x i8], [61 x i8]* @.str.138, i32 0, i32 0
  %1153 = call i32 (i8*, ...) @printf(i8* %1152)
  br label %1589

; <label>:1154:                                   ; preds = %1146
  %1155 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %1156 = load i32, i32* %1155, align 8
  %1157 = icmp slt i32 0, %1156
  br i1 %1157, label %.lr.ph97, label %1173

.lr.ph97:                                         ; preds = %1154
  %1158 = sext i32 %.026.lcssa to i64
  br label %1159

; <label>:1159:                                   ; preds = %.lr.ph97, %1168
  %indvars.iv99 = phi i64 [ 0, %.lr.ph97 ], [ %indvars.iv.next100, %1168 ]
  call void @unroll_loop(i32 139)
  %1160 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %1161 = load i32, i32* %1160, align 4
  %1162 = sub nsw i32 %1161, 1
  %1163 = trunc i64 %indvars.iv99 to i32
  %1164 = sub nsw i32 %1162, %1163
  %1165 = add nsw i64 %1158, %indvars.iv99
  %1166 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 31
  %1167 = getelementptr inbounds [64 x i32], [64 x i32]* %1166, i64 0, i64 %1165
  store i32 %1164, i32* %1167, align 4
  br label %1168

; <label>:1168:                                   ; preds = %1159
  %indvars.iv.next100 = add nuw nsw i64 %indvars.iv99, 1
  %1169 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %1170 = load i32, i32* %1169, align 8
  %1171 = sext i32 %1170 to i64
  %1172 = icmp slt i64 %indvars.iv.next100, %1171
  br i1 %1172, label %1159, label %._crit_edge98

._crit_edge98:                                    ; preds = %1168
  br label %1173

; <label>:1173:                                   ; preds = %._crit_edge98, %1154
  %1174 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %1175 = load i32, i32* %1174, align 8
  %1176 = add nsw i32 %1175, %.026.lcssa
  %1177 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  store i32 %1176, i32* %1177, align 8
  %1178 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %1179 = load float, float* %1178, align 4
  %1180 = fcmp oeq float %1179, 0.000000e+00
  br i1 %1180, label %1181, label %1204

; <label>:1181:                                   ; preds = %1173
  %1182 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %1183 = load i32, i32* %1182, align 4
  %1184 = icmp ne i32 %1183, 0
  br i1 %1184, label %1185, label %1187

; <label>:1185:                                   ; preds = %1181
  %1186 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  store float 2.000000e+00, float* %1186, align 4
  br label %1203

; <label>:1187:                                   ; preds = %1181
  %1188 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 19
  %1189 = load i32, i32* %1188, align 8
  %1190 = icmp ne i32 %1189, 0
  br i1 %1190, label %1200, label %1191

; <label>:1191:                                   ; preds = %1187
  %1192 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %1193 = load i32, i32* %1192, align 4
  %1194 = icmp eq i32 %1193, 5
  br i1 %1194, label %1195, label %1197

; <label>:1195:                                   ; preds = %1191
  %1196 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  store float 5.000000e+00, float* %1196, align 4
  br label %1199

; <label>:1197:                                   ; preds = %1191
  %1198 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  store float 2.000000e+00, float* %1198, align 4
  br label %1199

; <label>:1199:                                   ; preds = %1197, %1195
  br label %1202

; <label>:1200:                                   ; preds = %1187
  %1201 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  store float 3.000000e+01, float* %1201, align 4
  br label %1202

; <label>:1202:                                   ; preds = %1200, %1199
  br label %1203

; <label>:1203:                                   ; preds = %1202, %1185
  br label %1204

; <label>:1204:                                   ; preds = %1203, %1173
  %1205 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %1205, i8 0, i64 131680, i1 false)
  %1206 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 20
  %1207 = load i32, i32* %1206, align 4
  %1208 = icmp ne i32 %1207, 0
  br i1 %1208, label %1209, label %1271

; <label>:1209:                                   ; preds = %1204
  %1210 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %1211 = load i32, i32* %1210, align 8
  %1212 = icmp ne i32 %1211, 0
  br i1 %1212, label %1216, label %1213

; <label>:1213:                                   ; preds = %1209
  %1214 = getelementptr [49 x i8], [49 x i8]* @.str.139, i32 0, i32 0
  %1215 = call i32 (i8*, ...) @printf(i8* %1214, i32 5000)
  br label %1216

; <label>:1216:                                   ; preds = %1213, %1209
  %1217 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.6.lcssa, i32 0, i32 9
  %1218 = load i64, i64* %1217, align 8
  %1219 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.6.lcssa, i32 0, i32 9
  %1220 = load i64, i64* %1219, align 8
  %1221 = srem i64 %1220, 5000
  %1222 = sub nsw i64 %1218, %1221
  %1223 = trunc i64 %1222 to i32
  %1224 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 32
  store i32 %1223, i32* %1224, align 4
  br label %1225

; <label>:1225:                                   ; preds = %1268, %1216
  %.112 = phi i32 [ 1, %1216 ], [ %.314, %1268 ]
  call void @unroll_loop(i32 140)
  %1226 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.6.lcssa, i32 0, i32 9
  %1227 = load i64, i64* %1226, align 8
  %1228 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 32
  %1229 = load i32, i32* %1228, align 4
  %1230 = sext i32 %1229 to i64
  %1231 = icmp sge i64 %1227, %1230
  br i1 %1231, label %1232, label %1263

; <label>:1232:                                   ; preds = %1225
  %1233 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %1234 = load i32, i32* %1233, align 8
  %1235 = icmp ne i32 %1234, 0
  br i1 %1235, label %1241, label %1236

; <label>:1236:                                   ; preds = %1232
  %1237 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.6.lcssa, i32 0, i32 9
  %1238 = load i64, i64* %1237, align 8
  %1239 = getelementptr [35 x i8], [35 x i8]* @.str.140, i32 0, i32 0
  %1240 = call i32 (i8*, ...) @printf(i8* %1239, i64 %1238)
  br label %1241

; <label>:1241:                                   ; preds = %1236, %1232
  %1242 = call i32 @crack_wep_ptw(%struct.AP_info* %.6.lcssa)
  %1243 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 41
  %1244 = load i32, i32* %1243, align 4
  %1245 = icmp eq i32 %1244, 1
  br i1 %1245, label %1246, label %1251

; <label>:1246:                                   ; preds = %1241
  %1247 = icmp eq i32 %1242, 1
  br i1 %1247, label %1248, label %1251

; <label>:1248:                                   ; preds = %1246
  %1249 = getelementptr [211 x i8], [211 x i8]* @.str.141, i32 0, i32 0
  %1250 = call i32 (i8*, ...) @printf(i8* %1249)
  br label %1251

; <label>:1251:                                   ; preds = %1248, %1246, %1241
  %.213 = phi i32 [ 0, %1248 ], [ %1242, %1246 ], [ %1242, %1241 ]
  %1252 = icmp ne i32 %.213, 0
  br i1 %1252, label %1253, label %1262

; <label>:1253:                                   ; preds = %1251
  %1254 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 32
  %1255 = load i32, i32* %1254, align 4
  %1256 = add nsw i32 %1255, 5000
  %1257 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 32
  store i32 %1256, i32* %1257, align 4
  %1258 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 32
  %1259 = load i32, i32* %1258, align 4
  %1260 = getelementptr [31 x i8], [31 x i8]* @.str.142, i32 0, i32 0
  %1261 = call i32 (i8*, ...) @printf(i8* %1260, i32 %1259)
  br label %1262

; <label>:1262:                                   ; preds = %1253, %1251
  br label %1263

; <label>:1263:                                   ; preds = %1262, %1225
  %.314 = phi i32 [ %.213, %1262 ], [ %.112, %1225 ]
  %1264 = icmp ne i32 %.314, 0
  br i1 %1264, label %1265, label %1267

; <label>:1265:                                   ; preds = %1263
  %1266 = call i32 @usleep(i32 10000)
  br label %1267

; <label>:1267:                                   ; preds = %1265, %1263
  br label %1268

; <label>:1268:                                   ; preds = %1267
  %1269 = icmp ne i32 %.314, 0
  br i1 %1269, label %1225, label %1270

; <label>:1270:                                   ; preds = %1268
  %.314.lcssa = phi i32 [ %.314, %1268 ]
  br label %1390

; <label>:1271:                                   ; preds = %1204
  %1272 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %1273 = load %struct._IO_FILE*, %struct._IO_FILE** %1272, align 8
  %1274 = icmp ne %struct._IO_FILE* %1273, null
  br i1 %1274, label %1275, label %1277

; <label>:1275:                                   ; preds = %1271
  %1276 = call i32 @crack_wep_dict()
  br label %1389

; <label>:1277:                                   ; preds = %1271
  %1278 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %1279 = load i32, i32* %1278, align 4
  %1280 = icmp slt i32 0, %1279
  br i1 %1280, label %.lr.ph91, label %1326

.lr.ph91:                                         ; preds = %1277
  br label %1281

; <label>:1281:                                   ; preds = %.lr.ph91, %1321
  %indvars.iv93 = phi i64 [ 0, %.lr.ph91 ], [ %indvars.iv.next94, %1321 ]
  call void @unroll_loop(i32 141)
  %1282 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 0
  %1283 = load i32, i32* %1282, align 8
  %1284 = icmp sle i32 %1283, 1
  br i1 %1284, label %1285, label %1309

; <label>:1285:                                   ; preds = %1281
  %1286 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %1287 = load i32, i32* %1286, align 4
  %1288 = icmp sgt i32 %1287, 1
  br i1 %1288, label %1289, label %1309

; <label>:1289:                                   ; preds = %1285
  %1290 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 17
  %1291 = load i32, i32* %1290, align 8
  %1292 = icmp ne i32 %1291, 0
  br i1 %1292, label %1293, label %1309

; <label>:1293:                                   ; preds = %1289
  %1294 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 18
  %1295 = load i32, i32* %1294, align 4
  %1296 = icmp ne i32 %1295, 0
  br i1 %1296, label %1297, label %1309

; <label>:1297:                                   ; preds = %1293
  %1298 = load i32, i32* @id, align 4
  %1299 = sext i32 %1298 to i64
  %1300 = getelementptr inbounds [128 x i64], [128 x i64]* @tid, i64 0, i64 %1299
  %1301 = inttoptr i64 %indvars.iv93 to i8*
  %1302 = call i32 @pthread_create(i64* %1300, %union.pthread_attr_t* null, i8* (i8*)* bitcast (i32 (i8*)* @inner_bruteforcer_thread to i8* (i8*)*), i8* %1301) #9
  %1303 = icmp ne i32 %1302, 0
  br i1 %1303, label %1304, label %1306

; <label>:1304:                                   ; preds = %1297
  %1305 = getelementptr [22 x i8], [22 x i8]* @.str.117, i32 0, i32 0
  call void @perror(i8* %1305)
  br label %1589

; <label>:1306:                                   ; preds = %1297
  %1307 = load i32, i32* @id, align 4
  %1308 = add nsw i32 %1307, 1
  store i32 %1308, i32* @id, align 4
  br label %1309

; <label>:1309:                                   ; preds = %1306, %1293, %1289, %1285, %1281
  %1310 = load i32, i32* @id, align 4
  %1311 = sext i32 %1310 to i64
  %1312 = getelementptr inbounds [128 x i64], [128 x i64]* @tid, i64 0, i64 %1311
  %1313 = inttoptr i64 %indvars.iv93 to i8*
  %1314 = call i32 @pthread_create(i64* %1312, %union.pthread_attr_t* null, i8* (i8*)* bitcast (i32 (i8*)* @crack_wep_thread to i8* (i8*)*), i8* %1313) #9
  %1315 = icmp ne i32 %1314, 0
  br i1 %1315, label %1316, label %1318

; <label>:1316:                                   ; preds = %1309
  %1317 = getelementptr [22 x i8], [22 x i8]* @.str.117, i32 0, i32 0
  call void @perror(i8* %1317)
  br label %1589

; <label>:1318:                                   ; preds = %1309
  %1319 = load i32, i32* @id, align 4
  %1320 = add nsw i32 %1319, 1
  store i32 %1320, i32* @id, align 4
  br label %1321

; <label>:1321:                                   ; preds = %1318
  %indvars.iv.next94 = add nuw nsw i64 %indvars.iv93, 1
  %1322 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %1323 = load i32, i32* %1322, align 4
  %1324 = sext i32 %1323 to i64
  %1325 = icmp slt i64 %indvars.iv.next94, %1324
  br i1 %1325, label %1281, label %._crit_edge92

._crit_edge92:                                    ; preds = %1321
  br label %1326

; <label>:1326:                                   ; preds = %._crit_edge92, %1277
  %1327 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 19
  %1328 = load i32, i32* %1327, align 8
  %1329 = icmp ne i32 %1328, 0
  br i1 %1329, label %1350, label %1330

; <label>:1330:                                   ; preds = %1326
  br label %1331

; <label>:1331:                                   ; preds = %1333, %1330
  %1332 = call i32 @do_wep_crack1(i32 0)
  br label %1333

; <label>:1333:                                   ; preds = %1331
  %1334 = icmp eq i32 %1332, 2
  br i1 %1334, label %1331, label %1335

; <label>:1335:                                   ; preds = %1333
  %.lcssa39 = phi i32 [ %1332, %1333 ]
  %1336 = icmp eq i32 %.lcssa39, 1
  br i1 %1336, label %1337, label %1349

; <label>:1337:                                   ; preds = %1335
  %1338 = getelementptr [461 x i8], [461 x i8]* @.str.143, i32 0, i32 0
  %1339 = call i32 (i8*, ...) @printf(i8* %1338)
  %1340 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 19
  %1341 = load i32, i32* %1340, align 8
  %1342 = icmp ne i32 %1341, 0
  br i1 %1342, label %1343, label %1346

; <label>:1343:                                   ; preds = %1337
  %1344 = getelementptr [50 x i8], [50 x i8]* @.str.144, i32 0, i32 0
  %1345 = call i32 (i8*, ...) @printf(i8* %1344)
  br label %1346

; <label>:1346:                                   ; preds = %1343, %1337
  %1347 = getelementptr [2 x i8], [2 x i8]* @.str.2, i32 0, i32 0
  %1348 = call i32 (i8*, ...) @printf(i8* %1347)
  br label %1349

; <label>:1349:                                   ; preds = %1346, %1335
  br label %1388

; <label>:1350:                                   ; preds = %1326
  %1351 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %1352 = load i32, i32* %1351, align 4
  %1353 = sub nsw i32 %1352, 3
  %1354 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %1355 = load i32, i32* %1354, align 4
  %1356 = sub nsw i32 %1355, 2
  %1357 = icmp slt i32 %1353, %1356
  br i1 %1357, label %.lr.ph87, label %.loopexit67

.lr.ph87:                                         ; preds = %1350
  br label %1358

; <label>:1358:                                   ; preds = %.lr.ph87, %1367
  %.1185 = phi i32 [ %1353, %.lr.ph87 ], [ %1368, %1367 ]
  call void @unroll_loop(i32 142)
  br label %1359

; <label>:1359:                                   ; preds = %1361, %1358
  call void @unroll_loop(i32 143)
  %1360 = call i32 @do_wep_crack2(i32 %.1185)
  br label %1361

; <label>:1361:                                   ; preds = %1359
  %1362 = icmp eq i32 %1360, 2
  br i1 %1362, label %1359, label %1363

; <label>:1363:                                   ; preds = %1361
  %.lcssa = phi i32 [ %1360, %1361 ]
  %1364 = icmp eq i32 %.lcssa, 0
  br i1 %1364, label %1365, label %1366

; <label>:1365:                                   ; preds = %1363
  %.lcssa.lcssa = phi i32 [ %.lcssa, %1363 ]
  br label %1373

; <label>:1366:                                   ; preds = %1363
  br label %1367

; <label>:1367:                                   ; preds = %1366
  %1368 = add nsw i32 %.1185, 1
  %1369 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %1370 = load i32, i32* %1369, align 4
  %1371 = sub nsw i32 %1370, 2
  %1372 = icmp slt i32 %1368, %1371
  br i1 %1372, label %1358, label %..loopexit67_crit_edge

..loopexit67_crit_edge:                           ; preds = %1367
  %split88 = phi i32 [ %.lcssa, %1367 ]
  br label %.loopexit67

.loopexit67:                                      ; preds = %..loopexit67_crit_edge, %1350
  %.516.ph = phi i32 [ %split88, %..loopexit67_crit_edge ], [ 1, %1350 ]
  br label %1373

; <label>:1373:                                   ; preds = %.loopexit67, %1365
  %.516 = phi i32 [ %.lcssa.lcssa, %1365 ], [ %.516.ph, %.loopexit67 ]
  %1374 = icmp eq i32 %.516, 1
  br i1 %1374, label %1375, label %1387

; <label>:1375:                                   ; preds = %1373
  %1376 = getelementptr [461 x i8], [461 x i8]* @.str.143, i32 0, i32 0
  %1377 = call i32 (i8*, ...) @printf(i8* %1376)
  %1378 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 19
  %1379 = load i32, i32* %1378, align 8
  %1380 = icmp ne i32 %1379, 0
  br i1 %1380, label %1381, label %1384

; <label>:1381:                                   ; preds = %1375
  %1382 = getelementptr [56 x i8], [56 x i8]* @.str.145, i32 0, i32 0
  %1383 = call i32 (i8*, ...) @printf(i8* %1382)
  br label %1384

; <label>:1384:                                   ; preds = %1381, %1375
  %1385 = getelementptr [2 x i8], [2 x i8]* @.str.2, i32 0, i32 0
  %1386 = call i32 (i8*, ...) @printf(i8* %1385)
  br label %1387

; <label>:1387:                                   ; preds = %1384, %1373
  br label %1388

; <label>:1388:                                   ; preds = %1387, %1349
  %.617 = phi i32 [ %.516, %1387 ], [ %.lcssa39, %1349 ]
  br label %1389

; <label>:1389:                                   ; preds = %1388, %1275
  %.718 = phi i32 [ %1276, %1275 ], [ %.617, %1388 ]
  br label %1390

; <label>:1390:                                   ; preds = %1389, %1270
  %.642 = phi %struct.AP_info* [ %.6.lcssa, %1270 ], [ %.6.lcssa, %1389 ]
  %.819 = phi i32 [ %.314.lcssa, %1270 ], [ %.718, %1389 ]
  br label %1391

; <label>:1391:                                   ; preds = %1390, %1135
  %.641 = phi %struct.AP_info* [ %.642, %1390 ], [ %.6.lcssa, %1135 ]
  %.920 = phi i32 [ %.819, %1390 ], [ 1, %1135 ]
  %1392 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.641, i32 0, i32 10
  %1393 = load i32, i32* %1392, align 8
  %1394 = icmp eq i32 %1393, 3
  br i1 %1394, label %1395, label %1588

; <label>:1395:                                   ; preds = %1391
  br label %1396

; <label>:1396:                                   ; preds = %1395, %1134
  %.1021 = phi i32 [ %.920, %1395 ], [ 1, %1134 ]
  %1397 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 22
  %1398 = load %struct._IO_FILE*, %struct._IO_FILE** %1397, align 8
  %1399 = icmp eq %struct._IO_FILE* %1398, null
  br i1 %1399, label %1400, label %1401

; <label>:1400:                                   ; preds = %1396
  br label %651

; <label>:1401:                                   ; preds = %1396
  %1402 = load %struct.AP_info*, %struct.AP_info** @ap_1st, align 8
  %1403 = icmp ne %struct.AP_info* %1402, null
  br i1 %1403, label %.lr.ph84, label %.loopexit66

.lr.ph84:                                         ; preds = %1401
  br label %1404

; <label>:1404:                                   ; preds = %.lr.ph84, %1414
  %.782 = phi %struct.AP_info* [ %1402, %.lr.ph84 ], [ %1416, %1414 ]
  call void @unroll_loop(i32 144)
  %1405 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.782, i32 0, i32 12
  %1406 = load i32, i32* %1405, align 8
  %1407 = icmp ne i32 %1406, 0
  br i1 %1407, label %1408, label %1414

; <label>:1408:                                   ; preds = %1404
  %1409 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.782, i32 0, i32 14
  %1410 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %1409, i32 0, i32 7
  %1411 = load i32, i32* %1410, align 8
  %1412 = icmp eq i32 %1411, 7
  br i1 %1412, label %1413, label %1414

; <label>:1413:                                   ; preds = %1408
  %.7.lcssa38 = phi %struct.AP_info* [ %.782, %1408 ]
  br label %1418

; <label>:1414:                                   ; preds = %1408, %1404
  %1415 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.782, i32 0, i32 0
  %1416 = load %struct.AP_info*, %struct.AP_info** %1415, align 8
  %1417 = icmp ne %struct.AP_info* %1416, null
  br i1 %1417, label %1404, label %..loopexit66_crit_edge

..loopexit66_crit_edge:                           ; preds = %1414
  %split = phi %struct.AP_info* [ %1416, %1414 ]
  br label %.loopexit66

.loopexit66:                                      ; preds = %..loopexit66_crit_edge, %1401
  %.7.lcssa.ph = phi %struct.AP_info* [ %split, %..loopexit66_crit_edge ], [ %1402, %1401 ]
  br label %1418

; <label>:1418:                                   ; preds = %.loopexit66, %1413
  %.7.lcssa = phi %struct.AP_info* [ %.7.lcssa38, %1413 ], [ %.7.lcssa.ph, %.loopexit66 ]
  %1419 = icmp eq %struct.AP_info* %.7.lcssa, null
  br i1 %1419, label %1420, label %1423

; <label>:1420:                                   ; preds = %1418
  %1421 = getelementptr [32 x i8], [32 x i8]* @.str.146, i32 0, i32 0
  %1422 = call i32 (i8*, ...) @printf(i8* %1421)
  br label %1589

; <label>:1423:                                   ; preds = %1418
  %1424 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.7.lcssa, i32 0, i32 2
  %1425 = getelementptr inbounds [33 x i8], [33 x i8]* %1424, i32 0, i32 0
  %1426 = getelementptr [32 x i8], [32 x i8]* @ZERO, i32 0, i32 0
  %1427 = call i32 @memcmp(i8* %1425, i8* %1426, i64 32) #10
  %1428 = icmp eq i32 %1427, 0
  br i1 %1428, label %1429, label %1436

; <label>:1429:                                   ; preds = %1423
  %1430 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %1431 = load i32, i32* %1430, align 4
  %1432 = icmp ne i32 %1431, 0
  br i1 %1432, label %1436, label %1433

; <label>:1433:                                   ; preds = %1429
  %1434 = getelementptr [38 x i8], [38 x i8]* @.str.147, i32 0, i32 0
  %1435 = call i32 (i8*, ...) @printf(i8* %1434)
  br label %1589

; <label>:1436:                                   ; preds = %1429, %1423
  %1437 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 1
  %1438 = load i32, i32* %1437, align 4
  %1439 = icmp ne i32 %1438, 0
  br i1 %1439, label %1440, label %1453

; <label>:1440:                                   ; preds = %1436
  %1441 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.7.lcssa, i32 0, i32 2
  %1442 = getelementptr inbounds [33 x i8], [33 x i8]* %1441, i64 0, i64 0
  %1443 = load i8, i8* %1442, align 2
  %1444 = sext i8 %1443 to i32
  %1445 = icmp eq i32 %1444, 0
  br i1 %1445, label %1446, label %1453

; <label>:1446:                                   ; preds = %1440
  %1447 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.7.lcssa, i32 0, i32 2
  %1448 = getelementptr inbounds [33 x i8], [33 x i8]* %1447, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 2 %1448, i8 0, i64 33, i1 false)
  %1449 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %.7.lcssa, i32 0, i32 2
  %1450 = getelementptr inbounds [33 x i8], [33 x i8]* %1449, i32 0, i32 0
  %1451 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 3, i32 0
  %1452 = call i8* @strncpy(i8* %1450, i8* %1451, i64 32) #9, !track !224
  br label %1453

; <label>:1453:                                   ; preds = %1446, %1440, %1436
  %1454 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %1455 = load i32, i32* %1454, align 4
  %1456 = icmp slt i32 0, %1455
  br i1 %1456, label %.lr.ph78, label %1503

.lr.ph78:                                         ; preds = %1453
  br label %1457

; <label>:1457:                                   ; preds = %.lr.ph78, %1498
  %indvars.iv80 = phi i64 [ 0, %.lr.ph78 ], [ %indvars.iv.next81, %1498 ]
  call void @unroll_loop(i32 145)
  %1458 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv80
  %1459 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1458, i32 0, i32 0
  store %struct.AP_info* %.7.lcssa, %struct.AP_info** %1459, align 8
  %1460 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv80
  %1461 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1460, i32 0, i32 1
  %1462 = trunc i64 %indvars.iv80 to i32
  store i32 %1462, i32* %1461, align 8
  %1463 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv80
  %1464 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1463, i32 0, i32 2
  store i32 17, i32* %1464, align 4
  %1465 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv80
  %1466 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1465, i32 0, i32 2
  %1467 = load i32, i32* %1466, align 4
  %1468 = mul nsw i32 %1467, 128
  %1469 = sext i32 %1468 to i64
  %1470 = call noalias i8* @malloc(i64 %1469) #9, !track !225
  %1471 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv80
  %1472 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1471, i32 0, i32 3
  store i8* %1470, i8** %1472, align 8
  %1473 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv80
  %1474 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1473, i32 0, i32 4
  store i32 0, i32* %1474, align 8
  %1475 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv80
  %1476 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1475, i32 0, i32 5
  store i32 0, i32* %1476, align 4
  %1477 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv80
  %1478 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1477, i32 0, i32 6
  %1479 = getelementptr inbounds [128 x i8], [128 x i8]* %1478, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %1479, i8 0, i64 128, i1 false)
  %1480 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv80
  %1481 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1480, i32 0, i32 7
  %1482 = call i32 @pthread_cond_init(%union.pthread_cond_t* %1481, %union.pthread_mutexattr_t* null) #9
  %1483 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv80
  %1484 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1483, i32 0, i32 8
  %1485 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %1484, %union.pthread_mutexattr_t* null) #9
  %1486 = load i32, i32* @id, align 4
  %1487 = sext i32 %1486 to i64
  %1488 = getelementptr inbounds [128 x i64], [128 x i64]* @tid, i64 0, i64 %1487
  %1489 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv80
  %1490 = bitcast %struct.WPA_data* %1489 to i8*
  %1491 = call i32 @pthread_create(i64* %1488, %union.pthread_attr_t* null, i8* (i8*)* bitcast (i32 (i8*)* @crack_wpa_thread to i8* (i8*)*), i8* %1490) #9
  %1492 = icmp ne i32 %1491, 0
  br i1 %1492, label %1493, label %1495

; <label>:1493:                                   ; preds = %1457
  %1494 = getelementptr [22 x i8], [22 x i8]* @.str.117, i32 0, i32 0
  call void @perror(i8* %1494)
  br label %1589

; <label>:1495:                                   ; preds = %1457
  %1496 = load i32, i32* @id, align 4
  %1497 = add nsw i32 %1496, 1
  store i32 %1497, i32* @id, align 4
  br label %1498

; <label>:1498:                                   ; preds = %1495
  %indvars.iv.next81 = add nuw nsw i64 %indvars.iv80, 1
  %1499 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %1500 = load i32, i32* %1499, align 4
  %1501 = sext i32 %1500 to i64
  %1502 = icmp slt i64 %indvars.iv.next81, %1501
  br i1 %1502, label %1457, label %._crit_edge79

._crit_edge79:                                    ; preds = %1498
  br label %1503

; <label>:1503:                                   ; preds = %._crit_edge79, %1453
  %1504 = call i32 @do_wpa_crack()
  store i32 1, i32* @wpa_wordlists_done, align 4
  %1505 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %1506 = load i32, i32* %1505, align 4
  %1507 = icmp slt i32 0, %1506
  br i1 %1507, label %.lr.ph75, label %1520

.lr.ph75:                                         ; preds = %1503
  br label %1508

; <label>:1508:                                   ; preds = %.lr.ph75, %1515
  %.131074 = phi i32 [ 0, %.lr.ph75 ], [ %1516, %1515 ]
  call void @unroll_loop(i32 146)
  %1509 = load i32, i32* @id, align 4
  %1510 = add nsw i32 %1509, -1
  store i32 %1510, i32* @id, align 4
  %1511 = sext i32 %1510 to i64
  %1512 = getelementptr inbounds [128 x i64], [128 x i64]* @tid, i64 0, i64 %1511
  %1513 = load i64, i64* %1512, align 8
  %1514 = call i32 @pthread_join(i64 %1513, i8** null)
  br label %1515

; <label>:1515:                                   ; preds = %1508
  %1516 = add nuw nsw i32 %.131074, 1
  %1517 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %1518 = load i32, i32* %1517, align 4
  %1519 = icmp slt i32 %1516, %1518
  br i1 %1519, label %1508, label %._crit_edge

._crit_edge:                                      ; preds = %1515
  br label %1520

; <label>:1520:                                   ; preds = %._crit_edge, %1503
  %1521 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %1522 = load i32, i32* %1521, align 4
  %1523 = icmp slt i32 0, %1522
  br i1 %1523, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %1520
  br label %1524

; <label>:1524:                                   ; preds = %.lr.ph, %1534
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %1534 ]
  call void @unroll_loop(i32 147)
  %1525 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %indvars.iv
  %1526 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1525, i32 0, i32 6
  %1527 = getelementptr inbounds [128 x i8], [128 x i8]* %1526, i64 0, i64 0
  %1528 = load i8, i8* %1527, align 8
  %1529 = sext i8 %1528 to i32
  %1530 = icmp ne i32 %1529, 0
  br i1 %1530, label %1531, label %1533

; <label>:1531:                                   ; preds = %1524
  %.14.lcssa37.wide = phi i64 [ %indvars.iv, %1524 ]
  %1532 = trunc i64 %.14.lcssa37.wide to i32
  br label %1540

; <label>:1533:                                   ; preds = %1524
  br label %1534

; <label>:1534:                                   ; preds = %1533
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %1535 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 5
  %1536 = load i32, i32* %1535, align 4
  %1537 = sext i32 %1536 to i64
  %1538 = icmp slt i64 %indvars.iv.next, %1537
  br i1 %1538, label %1524, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %1534
  %split.wide = phi i64 [ %indvars.iv.next, %1534 ]
  %split73 = phi i32 [ %1504, %1534 ]
  %1539 = trunc i64 %split.wide to i32
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %1520
  %.14.lcssa.ph = phi i32 [ %1539, %..loopexit_crit_edge ], [ 0, %1520 ]
  %.1122.ph = phi i32 [ %split73, %..loopexit_crit_edge ], [ %1504, %1520 ]
  br label %1540

; <label>:1540:                                   ; preds = %.loopexit, %1531
  %.14.lcssa = phi i32 [ %1532, %1531 ], [ %.14.lcssa.ph, %.loopexit ]
  %.1122 = phi i32 [ 0, %1531 ], [ %.1122.ph, %.loopexit ]
  %1541 = icmp eq i32 %.1122, 0
  br i1 %1541, label %1542, label %1582

; <label>:1542:                                   ; preds = %1540
  %1543 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %1544 = load i32, i32* %1543, align 8
  %1545 = icmp ne i32 %1544, 0
  br i1 %1545, label %1546, label %1553

; <label>:1546:                                   ; preds = %1542
  %1547 = sext i32 %.14.lcssa to i64
  %1548 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %1547
  %1549 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1548, i32 0, i32 6
  %1550 = getelementptr inbounds [128 x i8], [128 x i8]* %1549, i32 0, i32 0
  %1551 = getelementptr [19 x i8], [19 x i8]* @.str.148, i32 0, i32 0
  %1552 = call i32 (i8*, ...) @printf(i8* %1551, i8* %1550)
  br label %1599

; <label>:1553:                                   ; preds = %1542
  %1554 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %1555 = load i32, i32* %1554, align 4
  %1556 = icmp ne i32 %1555, 0
  br i1 %1556, label %1557, label %1560

; <label>:1557:                                   ; preds = %1553
  %1558 = getelementptr [8 x i8], [8 x i8]* @.str.62, i32 0, i32 0
  %1559 = call i32 (i8*, ...) @printf(i8* %1558)
  br label %1560

; <label>:1560:                                   ; preds = %1557, %1553
  %1561 = sext i32 %.14.lcssa to i64
  %1562 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %1561
  %1563 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1562, i32 0, i32 6
  %1564 = getelementptr inbounds [128 x i8], [128 x i8]* %1563, i32 0, i32 0
  %1565 = call i64 @strlen(i8* %1564) #10
  %1566 = trunc i64 %1565 to i32
  %1567 = sub nsw i32 65, %1566
  %1568 = sdiv i32 %1567, 2
  %1569 = sext i32 %.14.lcssa to i64
  %1570 = getelementptr inbounds [128 x %struct.WPA_data], [128 x %struct.WPA_data]* @wpa_data, i64 0, i64 %1569
  %1571 = getelementptr inbounds %struct.WPA_data, %struct.WPA_data* %1570, i32 0, i32 6
  %1572 = getelementptr inbounds [128 x i8], [128 x i8]* %1571, i32 0, i32 0
  %1573 = getelementptr [35 x i8], [35 x i8]* @.str.63, i32 0, i32 0
  %1574 = call i32 (i8*, ...) @printf(i8* %1573, i32 %1568, i8* %1572)
  %1575 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 27
  %1576 = load i32, i32* %1575, align 4
  %1577 = icmp ne i32 %1576, 0
  br i1 %1577, label %1578, label %1581

; <label>:1578:                                   ; preds = %1560
  %1579 = getelementptr [9 x i8], [9 x i8]* @.str.36, i32 0, i32 0
  %1580 = call i32 (i8*, ...) @printf(i8* %1579)
  br label %1581

; <label>:1581:                                   ; preds = %1578, %1560
  br label %1599

; <label>:1582:                                   ; preds = %1540
  %1583 = getelementptr [32 x i8], [32 x i8]* @.str.149, i32 0, i32 0
  %1584 = call i32 (i8*, ...) @printf(i8* %1583)
  br label %1585

; <label>:1585:                                   ; preds = %1582
  %1586 = getelementptr [2 x i8], [2 x i8]* @.str.2, i32 0, i32 0
  %1587 = call i32 (i8*, ...) @printf(i8* %1586)
  br label %1588

; <label>:1588:                                   ; preds = %1585, %1391
  %.1223 = phi i32 [ %.1122, %1585 ], [ %.920, %1391 ]
  br label %1589

; <label>:1589:                                   ; preds = %1588, %1493, %1433, %1420, %1316, %1304, %1151, %1083, %1060, %974, %765, %709, %670, %651
  %.1324 = phi i32 [ %.011, %651 ], [ 1, %974 ], [ 1, %1060 ], [ 1, %1083 ], [ 1, %1151 ], [ %.1021, %1420 ], [ %.1021, %1493 ], [ %.1223, %1588 ], [ %.1021, %1433 ], [ 1, %1304 ], [ 1, %1316 ], [ 1, %709 ], [ 1, %765 ], [ 1, %670 ]
  %1590 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %1591 = load i32, i32* %1590, align 8
  %1592 = icmp ne i32 %1591, 0
  br i1 %1592, label %1596, label %1593

; <label>:1593:                                   ; preds = %1589
  %1594 = getelementptr [2 x i8], [2 x i8]* @.str.2, i32 0, i32 0
  %1595 = call i32 (i8*, ...) @printf(i8* %1594)
  br label %1596

; <label>:1596:                                   ; preds = %1593, %1589
  %1597 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1598 = call i32 @fflush(%struct._IO_FILE* %1597)
  call void @clean_exit(i32 %.1324)
  call void @_exit(i32 %.1324) #12
  br label %UnifiedUnreachableBlock

; <label>:1599:                                   ; preds = %1581, %1546, %641, %590, %572, %561, %555, %533, %507, %480, %460, %438, %416, %398, %371, %337, %303, %147, %124, %105, %68, %63, %45, %40
  %.0 = phi i32 [ 1, %641 ], [ 0, %1546 ], [ 0, %1581 ], [ 1, %590 ], [ 1, %572 ], [ 1, %561 ], [ 1, %555 ], [ 1, %533 ], [ 1, %507 ], [ 1, %480 ], [ 1, %460 ], [ 1, %438 ], [ 1, %416 ], [ 1, %398 ], [ 1, %371 ], [ 1, %337 ], [ 1, %303 ], [ 1, %147 ], [ 1, %124 ], [ 1, %105 ], [ 1, %68 ], [ 0, %63 ], [ 1, %45 ], [ 1, %40 ]
  ret i32 %.0

UnifiedUnreachableBlock:                          ; preds = %1596, %625
  unreachable
}

; Function Attrs: nounwind
declare dso_local i32 @setsid() #2

; Function Attrs: nounwind
declare dso_local i64 @time(i64*) #2

; Function Attrs: nounwind
declare dso_local void @srand(i32) #2

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strcasecmp(i8*, i8*) #3

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #2

; Function Attrs: nounwind
declare dso_local i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) #2

; Function Attrs: nounwind
declare dso_local i32 @pthread_cond_init(%union.pthread_cond_t*, %union.pthread_mutexattr_t*) #2

; Function Attrs: nounwind
declare dso_local i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*) #2

declare dso_local i32 @scanf(i8*, ...) #1

; Function Attrs: nounwind
declare dso_local i32 @pipe(i32*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @crack_wep_ptw(%struct.AP_info*) #0 {
  %2 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 37
  store %struct.AP_info* %0, %struct.AP_info** %2, align 8
  %3 = call noalias i8* @malloc(i64 32768) #9
  %4 = bitcast i8* %3 to [256 x i32]*
  %5 = icmp eq [256 x i32]* %4, null
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %1
  br label %239

; <label>:7:                                      ; preds = %1
  br label %8

; <label>:8:                                      ; preds = %7, %14
  %indvars.iv28 = phi i64 [ 0, %7 ], [ %indvars.iv.next29, %14 ]
  br label %9

; <label>:9:                                      ; preds = %8, %12
  %indvars.iv24 = phi i64 [ 0, %8 ], [ %indvars.iv.next25, %12 ]
  %10 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 %indvars.iv28
  %11 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 0, i64 %indvars.iv24
  store i32 1, i32* %11, align 4
  br label %12

; <label>:12:                                     ; preds = %9
  %indvars.iv.next25 = add nuw nsw i64 %indvars.iv24, 1
  %exitcond26 = icmp ne i64 %indvars.iv.next25, 256
  br i1 %exitcond26, label %9, label %13

; <label>:13:                                     ; preds = %12
  br label %14

; <label>:14:                                     ; preds = %13
  %indvars.iv.next29 = add nuw nsw i64 %indvars.iv28, 1
  %exitcond30 = icmp ne i64 %indvars.iv.next29, 32
  br i1 %exitcond30, label %8, label %15

; <label>:15:                                     ; preds = %14
  br label %16

; <label>:16:                                     ; preds = %15, %49
  %indvars.iv20 = phi i64 [ 0, %15 ], [ %indvars.iv.next21, %49 ]
  br label %17

; <label>:17:                                     ; preds = %16, %47
  %indvars.iv17 = phi i64 [ 0, %16 ], [ %indvars.iv.next18, %47 ]
  call void @unroll_loop(i32 122)
  %18 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 15
  %19 = load i32, i32* %18, align 8
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %25

; <label>:21:                                     ; preds = %17
  %22 = icmp ult i64 %indvars.iv17, 32
  br i1 %22, label %43, label %23

; <label>:23:                                     ; preds = %21
  %24 = icmp uge i64 %indvars.iv17, 128
  br i1 %24, label %43, label %25

; <label>:25:                                     ; preds = %23, %17
  %26 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 14
  %27 = load i32, i32* %26, align 4
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %33

; <label>:29:                                     ; preds = %25
  %30 = icmp ult i64 %indvars.iv17, 48
  br i1 %30, label %43, label %31

; <label>:31:                                     ; preds = %29
  %32 = icmp uge i64 %indvars.iv17, 58
  br i1 %32, label %43, label %33

; <label>:33:                                     ; preds = %31, %25
  %34 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 16
  %35 = load i32, i32* %34, align 4
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %37, label %46

; <label>:37:                                     ; preds = %33
  %38 = icmp ugt i64 %indvars.iv17, 153
  br i1 %38, label %43, label %39

; <label>:39:                                     ; preds = %37
  %40 = trunc i64 %indvars.iv17 to i32
  %41 = and i32 %40, 15
  %42 = icmp sgt i32 %41, 9
  br i1 %42, label %43, label %46

; <label>:43:                                     ; preds = %39, %37, %31, %29, %23, %21
  %44 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 %indvars.iv20
  %45 = getelementptr inbounds [256 x i32], [256 x i32]* %44, i64 0, i64 %indvars.iv17
  store i32 0, i32* %45, align 4
  br label %46

; <label>:46:                                     ; preds = %43, %39, %33
  br label %47

; <label>:47:                                     ; preds = %46
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next18, 256
  br i1 %exitcond1, label %17, label %48

; <label>:48:                                     ; preds = %47
  br label %49

; <label>:49:                                     ; preds = %48
  %indvars.iv.next21 = add nuw nsw i64 %indvars.iv20, 1
  %exitcond22 = icmp ne i64 %indvars.iv.next21, 32
  br i1 %exitcond22, label %16, label %50

; <label>:50:                                     ; preds = %49
  br label %51

; <label>:51:                                     ; preds = %50, %86
  %indvars.iv11 = phi i64 [ 0, %50 ], [ %indvars.iv.next12, %86 ]
  br label %52

; <label>:52:                                     ; preds = %51, %84
  %indvars.iv = phi i64 [ 0, %51 ], [ %indvars.iv.next, %84 ]
  call void @unroll_loop(i32 123)
  %53 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 8
  %54 = getelementptr inbounds [64 x i32], [64 x i32]* %53, i64 0, i64 %indvars.iv11
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 1
  br i1 %56, label %57, label %67

; <label>:57:                                     ; preds = %52
  %58 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 7
  %59 = getelementptr inbounds [64 x i8], [64 x i8]* %58, i64 0, i64 %indvars.iv11
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = zext i32 %61 to i64
  %63 = icmp ne i64 %62, %indvars.iv
  br i1 %63, label %64, label %67

; <label>:64:                                     ; preds = %57
  %65 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 %indvars.iv11
  %66 = getelementptr inbounds [256 x i32], [256 x i32]* %65, i64 0, i64 %indvars.iv
  store i32 0, i32* %66, align 4
  br label %83

; <label>:67:                                     ; preds = %57, %52
  %68 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 8
  %69 = getelementptr inbounds [64 x i32], [64 x i32]* %68, i64 0, i64 %indvars.iv11
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, 1
  br i1 %71, label %72, label %82

; <label>:72:                                     ; preds = %67
  %73 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 7
  %74 = getelementptr inbounds [64 x i8], [64 x i8]* %73, i64 0, i64 %indvars.iv11
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = zext i32 %76 to i64
  %78 = icmp eq i64 %77, %indvars.iv
  br i1 %78, label %79, label %82

; <label>:79:                                     ; preds = %72
  %80 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 %indvars.iv11
  %81 = getelementptr inbounds [256 x i32], [256 x i32]* %80, i64 0, i64 %indvars.iv
  store i32 1, i32* %81, align 4
  br label %82

; <label>:82:                                     ; preds = %79, %72, %67
  br label %83

; <label>:83:                                     ; preds = %82, %64
  br label %84

; <label>:84:                                     ; preds = %83
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %52, label %85

; <label>:85:                                     ; preds = %84
  br label %86

; <label>:86:                                     ; preds = %85
  %indvars.iv.next12 = add nuw nsw i64 %indvars.iv11, 1
  %exitcond13 = icmp ne i64 %indvars.iv.next12, 32
  br i1 %exitcond13, label %51, label %87

; <label>:87:                                     ; preds = %86
  %88 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 8
  %89 = load i64, i64* %88, align 8
  %90 = icmp sgt i64 %89, 99
  br i1 %90, label %91, label %160

; <label>:91:                                     ; preds = %87
  %92 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 8
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 7
  store i64 %93, i64* %94, align 8
  %95 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %96 = load i32, i32* %95, align 4
  %97 = icmp ne i32 %96, 13
  br i1 %97, label %98, label %117

; <label>:98:                                     ; preds = %91
  %99 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 15
  %100 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %99, align 8
  %101 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %104 = load float, float* %103, align 4
  %105 = fmul float 1.000000e+06, %104
  %106 = fptosi float %105 to i32
  %107 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 39
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %110 = getelementptr [29 x i32], [29 x i32]* @PTW_DEFAULTBF, i32 0, i32 0
  %111 = call i32 @PTW_computeKey(%struct.PTW_attackstate* %100, i8* %109, i32 %102, i32 %106, i32* %110, [256 x i32]* %4, i32 %108)
  %112 = icmp eq i32 %111, 1
  br i1 %112, label %113, label %116

; <label>:113:                                    ; preds = %98
  %114 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %115 = load i32, i32* %114, align 4
  br label %116

; <label>:116:                                    ; preds = %113, %98
  %.01 = phi i32 [ %115, %113 ], [ 0, %98 ]
  br label %159

; <label>:117:                                    ; preds = %91
  %118 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 15
  %119 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %118, align 8
  %120 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 39
  %121 = load i32, i32* %120, align 4
  %122 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %123 = getelementptr [29 x i32], [29 x i32]* @PTW_DEFAULTBF, i32 0, i32 0
  %124 = call i32 @PTW_computeKey(%struct.PTW_attackstate* %119, i8* %122, i32 5, i32 1000, i32* %123, [256 x i32]* %4, i32 %121)
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %126, label %127

; <label>:126:                                    ; preds = %117
  br label %158

; <label>:127:                                    ; preds = %117
  %128 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 15
  %129 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %128, align 8
  %130 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %131 = load float, float* %130, align 4
  %132 = fmul float 1.000000e+06, %131
  %133 = fptosi float %132 to i32
  %134 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 39
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %137 = getelementptr [29 x i32], [29 x i32]* @PTW_DEFAULTBF, i32 0, i32 0
  %138 = call i32 @PTW_computeKey(%struct.PTW_attackstate* %129, i8* %136, i32 13, i32 %133, i32* %137, [256 x i32]* %4, i32 %135)
  %139 = icmp eq i32 %138, 1
  br i1 %139, label %140, label %141

; <label>:140:                                    ; preds = %127
  br label %157

; <label>:141:                                    ; preds = %127
  %142 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 15
  %143 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %142, align 8
  %144 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %145 = load float, float* %144, align 4
  %146 = fmul float 1.000000e+06, %145
  %147 = fdiv float %146, 3.000000e+00
  %148 = fptosi float %147 to i32
  %149 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 39
  %150 = load i32, i32* %149, align 4
  %151 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %152 = getelementptr [29 x i32], [29 x i32]* @PTW_DEFAULTBF, i32 0, i32 0
  %153 = call i32 @PTW_computeKey(%struct.PTW_attackstate* %143, i8* %151, i32 5, i32 %148, i32* %152, [256 x i32]* %4, i32 %150)
  %154 = icmp eq i32 %153, 1
  br i1 %154, label %155, label %156

; <label>:155:                                    ; preds = %141
  br label %156

; <label>:156:                                    ; preds = %155, %141
  %.1 = phi i32 [ 5, %155 ], [ 0, %141 ]
  br label %157

; <label>:157:                                    ; preds = %156, %140
  %.2 = phi i32 [ 13, %140 ], [ %.1, %156 ]
  br label %158

; <label>:158:                                    ; preds = %157, %126
  %.3 = phi i32 [ 5, %126 ], [ %.2, %157 ]
  br label %159

; <label>:159:                                    ; preds = %158, %116
  %.4 = phi i32 [ %.01, %116 ], [ %.3, %158 ]
  br label %160

; <label>:160:                                    ; preds = %159, %87
  %.5 = phi i32 [ %.4, %159 ], [ 0, %87 ]
  %161 = icmp ne i32 %.5, 0
  br i1 %161, label %233, label %162

; <label>:162:                                    ; preds = %160
  %163 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 9
  %164 = load i64, i64* %163, align 8
  %165 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 7
  store i64 %164, i64* %165, align 8
  %166 = getelementptr [29 x i32], [29 x i32]* @PTW_DEFAULTBF, i64 0, i64 10
  store i32 1, i32* %166, align 8
  %167 = getelementptr [29 x i32], [29 x i32]* @PTW_DEFAULTBF, i64 0, i64 11
  store i32 1, i32* %167, align 4
  %168 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %169 = load i32, i32* %168, align 4
  %170 = icmp ne i32 %169, 13
  br i1 %170, label %171, label %190

; <label>:171:                                    ; preds = %162
  %172 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 16
  %173 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %172, align 8
  %174 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %175 = load i32, i32* %174, align 4
  %176 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %177 = load float, float* %176, align 4
  %178 = fmul float 1.000000e+06, %177
  %179 = fptosi float %178 to i32
  %180 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 39
  %181 = load i32, i32* %180, align 4
  %182 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %183 = getelementptr [29 x i32], [29 x i32]* @PTW_DEFAULTBF, i32 0, i32 0
  %184 = call i32 @PTW_computeKey(%struct.PTW_attackstate* %173, i8* %182, i32 %175, i32 %179, i32* %183, [256 x i32]* %4, i32 %181)
  %185 = icmp eq i32 %184, 1
  br i1 %185, label %186, label %189

; <label>:186:                                    ; preds = %171
  %187 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 10
  %188 = load i32, i32* %187, align 4
  br label %189

; <label>:189:                                    ; preds = %186, %171
  %.6 = phi i32 [ %188, %186 ], [ %.5, %171 ]
  br label %232

; <label>:190:                                    ; preds = %162
  %191 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 16
  %192 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %191, align 8
  %193 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 39
  %194 = load i32, i32* %193, align 4
  %195 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %196 = getelementptr [29 x i32], [29 x i32]* @PTW_DEFAULTBF, i32 0, i32 0
  %197 = call i32 @PTW_computeKey(%struct.PTW_attackstate* %192, i8* %195, i32 5, i32 1000, i32* %196, [256 x i32]* %4, i32 %194)
  %198 = icmp eq i32 %197, 1
  br i1 %198, label %199, label %200

; <label>:199:                                    ; preds = %190
  br label %231

; <label>:200:                                    ; preds = %190
  %201 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 16
  %202 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %201, align 8
  %203 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %204 = load float, float* %203, align 4
  %205 = fmul float 1.000000e+06, %204
  %206 = fptosi float %205 to i32
  %207 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 39
  %208 = load i32, i32* %207, align 4
  %209 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %210 = getelementptr [29 x i32], [29 x i32]* @PTW_DEFAULTBF, i32 0, i32 0
  %211 = call i32 @PTW_computeKey(%struct.PTW_attackstate* %202, i8* %209, i32 13, i32 %206, i32* %210, [256 x i32]* %4, i32 %208)
  %212 = icmp eq i32 %211, 1
  br i1 %212, label %213, label %214

; <label>:213:                                    ; preds = %200
  br label %230

; <label>:214:                                    ; preds = %200
  %215 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 16
  %216 = load %struct.PTW_attackstate*, %struct.PTW_attackstate** %215, align 8
  %217 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 12
  %218 = load float, float* %217, align 4
  %219 = fmul float 1.000000e+06, %218
  %220 = fdiv float %219, 1.000000e+01
  %221 = fptosi float %220 to i32
  %222 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 39
  %223 = load i32, i32* %222, align 4
  %224 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  %225 = getelementptr [29 x i32], [29 x i32]* @PTW_DEFAULTBF, i32 0, i32 0
  %226 = call i32 @PTW_computeKey(%struct.PTW_attackstate* %216, i8* %224, i32 5, i32 %221, i32* %225, [256 x i32]* %4, i32 %223)
  %227 = icmp eq i32 %226, 1
  br i1 %227, label %228, label %229

; <label>:228:                                    ; preds = %214
  br label %229

; <label>:229:                                    ; preds = %228, %214
  %.7 = phi i32 [ 5, %228 ], [ %.5, %214 ]
  br label %230

; <label>:230:                                    ; preds = %229, %213
  %.8 = phi i32 [ 13, %213 ], [ %.7, %229 ]
  br label %231

; <label>:231:                                    ; preds = %230, %199
  %.9 = phi i32 [ 5, %199 ], [ %.8, %230 ]
  br label %232

; <label>:232:                                    ; preds = %231, %189
  %.10 = phi i32 [ %.6, %189 ], [ %.9, %231 ]
  br label %233

; <label>:233:                                    ; preds = %232, %160
  %.11 = phi i32 [ %.5, %160 ], [ %.10, %232 ]
  %234 = icmp ne i32 %.11, 0
  br i1 %234, label %236, label %235

; <label>:235:                                    ; preds = %233
  br label %239

; <label>:236:                                    ; preds = %233
  %237 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 29
  store i32 100, i32* %237, align 4
  %238 = getelementptr %struct.WEP_data, %struct.WEP_data* @wep, i32 0, i32 0, i32 0
  call void @key_found(i8* %238, i32 %.11, i32 -1)
  br label %239

; <label>:239:                                    ; preds = %236, %235, %6
  %.0 = phi i32 [ 1, %6 ], [ 0, %236 ], [ 1, %235 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @encrypt_wep(i8*, i32, i8*, i32) #0 {
  %5 = alloca %struct.rc4_key_st, align 4
  call void @RC4_set_key(%struct.rc4_key_st* %5, i32 %3, i8* %2)
  %6 = sext i32 %1 to i64
  call void @RC4(%struct.rc4_key_st* %5, i64 %6, i8* %0, i8* %0)
  ret i32 0
}

declare dso_local void @RC4_set_key(%struct.rc4_key_st*, i32, i8*) #1

declare dso_local void @RC4(%struct.rc4_key_st*, i64, i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @decrypt_wep(i8*, i32, i8*, i32) #0 {
  %5 = call i32 @encrypt_wep(i8* %0, i32 %1, i8* %2, i32 %3)
  %6 = sub nsw i32 %1, 4
  %7 = call i32 @check_crc_buf(i8* %0, i32 %6)
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @check_crc_buf(i8*, i32) #0 {
  %3 = call i64 @calc_crc(i8* %0, i32 %1)
  %4 = sext i32 %1 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 %4
  %6 = and i64 %3, 255
  %7 = getelementptr inbounds i8, i8* %5, i64 0
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  %10 = icmp eq i64 %6, %9
  br i1 %10, label %11, label %32

; <label>:11:                                     ; preds = %2
  %12 = lshr i64 %3, 8
  %13 = and i64 %12, 255
  %14 = getelementptr inbounds i8, i8* %5, i64 1
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i64
  %17 = icmp eq i64 %13, %16
  br i1 %17, label %18, label %32

; <label>:18:                                     ; preds = %11
  %19 = lshr i64 %3, 16
  %20 = and i64 %19, 255
  %21 = getelementptr inbounds i8, i8* %5, i64 2
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = icmp eq i64 %20, %23
  br i1 %24, label %25, label %32

; <label>:25:                                     ; preds = %18
  %26 = lshr i64 %3, 24
  %27 = and i64 %26, 255
  %28 = getelementptr inbounds i8, i8* %5, i64 3
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i64
  %31 = icmp eq i64 %27, %30
  br label %32

; <label>:32:                                     ; preds = %25, %18, %11, %2
  %33 = phi i1 [ false, %18 ], [ false, %11 ], [ false, %2 ], [ %31, %25 ]
  %34 = zext i1 %33 to i32
  ret i32 %34
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @calc_crc(i8*, i32) #0 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %.lr.ph, label %17

.lr.ph:                                           ; preds = %2
  br label %4

; <label>:4:                                      ; preds = %.lr.ph, %13
  %.05 = phi i8* [ %0, %.lr.ph ], [ %15, %13 ]
  %.014 = phi i32 [ %1, %.lr.ph ], [ %14, %13 ]
  %.023 = phi i64 [ 4294967295, %.lr.ph ], [ %12, %13 ]
  %5 = load i8, i8* %.05, align 1
  %6 = zext i8 %5 to i64
  %7 = xor i64 %.023, %6
  %8 = and i64 %7, 255
  %9 = getelementptr inbounds [256 x i64], [256 x i64]* @crc_tbl, i64 0, i64 %8
  %10 = load i64, i64* %9, align 8
  %11 = lshr i64 %.023, 8
  %12 = xor i64 %10, %11
  br label %13

; <label>:13:                                     ; preds = %4
  %14 = add nsw i32 %.014, -1
  %15 = getelementptr inbounds i8, i8* %.05, i32 1
  %16 = icmp sgt i32 %14, 0
  br i1 %16, label %4, label %._crit_edge

._crit_edge:                                      ; preds = %13
  %split = phi i64 [ %12, %13 ]
  br label %17

; <label>:17:                                     ; preds = %._crit_edge, %2
  %.02.lcssa = phi i64 [ %split, %._crit_edge ], [ 4294967295, %2 ]
  %18 = xor i64 %.02.lcssa, -1
  ret i64 %18
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @rc4_setup(%struct.rc4_key_st*, i8*, i32) #0 {
  %4 = getelementptr inbounds %struct.rc4_key_st, %struct.rc4_key_st* %0, i32 0, i32 0
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %struct.rc4_key_st, %struct.rc4_key_st* %0, i32 0, i32 1
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %struct.rc4_key_st, %struct.rc4_key_st* %0, i32 0, i32 2
  %7 = getelementptr inbounds [256 x i32], [256 x i32]* %6, i32 0, i32 0
  br label %8

; <label>:8:                                      ; preds = %3, %11
  %indvars.iv8 = phi i64 [ 0, %3 ], [ %indvars.iv.next9, %11 ]
  %9 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv8
  %10 = trunc i64 %indvars.iv8 to i32
  store i32 %10, i32* %9, align 4
  br label %11

; <label>:11:                                     ; preds = %8
  %indvars.iv.next9 = add nuw nsw i64 %indvars.iv8, 1
  %exitcond10 = icmp ne i64 %indvars.iv.next9, 256
  br i1 %exitcond10, label %8, label %12

; <label>:12:                                     ; preds = %11
  br label %13

; <label>:13:                                     ; preds = %12, %34
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %34 ]
  %.06 = phi i32 [ 0, %12 ], [ %.1, %34 ]
  %.015 = phi i32 [ 0, %12 ], [ %23, %34 ]
  %14 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %.015, %15
  %17 = sext i32 %.06 to i64
  %18 = getelementptr inbounds i8, i8* %1, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = add nsw i32 %16, %20
  %22 = trunc i32 %21 to i8
  %23 = zext i8 %22 to i32
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i32, i32* %7, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv
  store i32 %26, i32* %27, align 4
  %28 = sext i32 %23 to i64
  %29 = getelementptr inbounds i32, i32* %7, i64 %28
  store i32 %15, i32* %29, align 4
  %30 = add nsw i32 %.06, 1
  %31 = icmp sge i32 %30, %2
  br i1 %31, label %32, label %33

; <label>:32:                                     ; preds = %13
  br label %33

; <label>:33:                                     ; preds = %32, %13
  %.1 = phi i32 [ 0, %32 ], [ %30, %13 ]
  br label %34

; <label>:34:                                     ; preds = %33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %13, label %35

; <label>:35:                                     ; preds = %34
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @rc4_crypt(%struct.rc4_key_st*, i8*, i32) #0 {
  %4 = getelementptr inbounds %struct.rc4_key_st, %struct.rc4_key_st* %0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.rc4_key_st, %struct.rc4_key_st* %0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.rc4_key_st, %struct.rc4_key_st* %0, i32 0, i32 2
  %9 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i32 0, i32 0
  %10 = icmp slt i32 0, %2
  br i1 %10, label %.lr.ph, label %40

.lr.ph:                                           ; preds = %3
  %11 = zext i32 %2 to i64
  br label %12

; <label>:12:                                     ; preds = %.lr.ph, %39
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %39 ]
  %.05 = phi i32 [ %7, %.lr.ph ], [ %21, %39 ]
  %.014 = phi i32 [ %5, %.lr.ph ], [ %15, %39 ]
  %13 = add nsw i32 %.014, 1
  %14 = trunc i32 %13 to i8
  %15 = zext i8 %14 to i32
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i32, i32* %9, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %.05, %18
  %20 = trunc i32 %19 to i8
  %21 = zext i8 %20 to i32
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, i32* %9, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %15 to i64
  %26 = getelementptr inbounds i32, i32* %9, i64 %25
  store i32 %24, i32* %26, align 4
  %27 = sext i32 %21 to i64
  %28 = getelementptr inbounds i32, i32* %9, i64 %27
  store i32 %18, i32* %28, align 4
  %29 = add nsw i32 %18, %24
  %30 = trunc i32 %29 to i8
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds i32, i32* %9, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i8, i8* %1, i64 %indvars.iv
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = xor i32 %36, %33
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %34, align 1
  br label %39

; <label>:39:                                     ; preds = %12
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next, %11
  br i1 %exitcond1, label %12, label %._crit_edge

._crit_edge:                                      ; preds = %39
  %split = phi i32 [ %15, %39 ]
  %split6 = phi i32 [ %21, %39 ]
  br label %40

; <label>:40:                                     ; preds = %._crit_edge, %3
  %.01.lcssa = phi i32 [ %split, %._crit_edge ], [ %5, %3 ]
  %.0.lcssa = phi i32 [ %split6, %._crit_edge ], [ %7, %3 ]
  %41 = getelementptr inbounds %struct.rc4_key_st, %struct.rc4_key_st* %0, i32 0, i32 0
  store i32 %.01.lcssa, i32* %41, align 4
  %42 = getelementptr inbounds %struct.rc4_key_st, %struct.rc4_key_st* %0, i32 0, i32 1
  store i32 %.0.lcssa, i32* %42, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @calc_pmk(i8*, i8*, i8*) #0 {
  %4 = alloca [65 x i8], align 16, !track !226
  %5 = alloca [37 x i8], align 16, !track !227
  %6 = alloca %struct.SHAstate_st, align 4, !track !228
  %7 = alloca %struct.SHAstate_st, align 4, !track !229
  %8 = alloca %struct.SHAstate_st, align 4, !track !230
  %9 = getelementptr inbounds [37 x i8], [37 x i8]* %5, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %9, i8 0, i64 37, i1 false)
  %10 = getelementptr inbounds [37 x i8], [37 x i8]* %5, i32 0, i32 0
  %11 = call i64 @strlen(i8* %1) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 1 %1, i64 %11, i1 false), !track !231
  %12 = getelementptr inbounds [37 x i8], [37 x i8]* %5, i32 0, i32 0
  %13 = call i64 @strlen(i8* %12) #10
  %14 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %14, i8 0, i64 65, i1 false)
  %15 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i32 0, i32 0
  %16 = call i8* @strncpy(i8* %15, i8* %0, i64 64) #9, !track !232
  br label %17

; <label>:17:                                     ; preds = %3, %23
  %indvars.iv17 = phi i64 [ 0, %3 ], [ %indvars.iv.next18, %23 ]
  call void @unroll_loop(i32 148)
  %18 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i64 0, i64 %indvars.iv17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = xor i32 %20, 54
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %18, align 1
  br label %23

; <label>:23:                                     ; preds = %17
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %exitcond19 = icmp ne i64 %indvars.iv.next18, 64
  br i1 %exitcond19, label %17, label %24

; <label>:24:                                     ; preds = %23
  %25 = add i64 %13, 4
  %26 = call i32 @SHA1_Init(%struct.SHAstate_st* %6)
  %27 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i32 0, i32 0
  %28 = call i32 @SHA1_Update(%struct.SHAstate_st* %6, i8* %27, i64 64)
  br label %29

; <label>:29:                                     ; preds = %24, %35
  %indvars.iv13 = phi i64 [ 0, %24 ], [ %indvars.iv.next14, %35 ]
  call void @unroll_loop(i32 149)
  %30 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i64 0, i64 %indvars.iv13
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = xor i32 %32, 106
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %30, align 1
  br label %35

; <label>:35:                                     ; preds = %29
  %indvars.iv.next14 = add nuw nsw i64 %indvars.iv13, 1
  %exitcond15 = icmp ne i64 %indvars.iv.next14, 64
  br i1 %exitcond15, label %29, label %36

; <label>:36:                                     ; preds = %35
  %37 = trunc i64 %25 to i32
  %38 = call i32 @SHA1_Init(%struct.SHAstate_st* %7)
  %39 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i32 0, i32 0
  %40 = call i32 @SHA1_Update(%struct.SHAstate_st* %7, i8* %39, i64 64)
  %41 = sub nsw i32 %37, 1
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [37 x i8], [37 x i8]* %5, i64 0, i64 %42
  store i8 1, i8* %43, align 1
  %44 = call %struct.env_md_st* @EVP_sha1()
  %45 = call i64 @strlen(i8* %0) #10
  %46 = trunc i64 %45 to i32
  %47 = getelementptr inbounds [37 x i8], [37 x i8]* %5, i32 0, i32 0
  %48 = sext i32 %37 to i64
  %49 = call i8* @HMAC(%struct.env_md_st* %44, i8* %0, i32 %46, i8* %47, i64 %48, i8* %2, i32* null)
  %50 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %50, i8* align 1 %2, i64 20, i1 false), !track !233
  br label %51

; <label>:51:                                     ; preds = %36, %75
  %.210 = phi i32 [ 1, %36 ], [ %76, %75 ]
  call void @unroll_loop(i32 150)
  %52 = bitcast %struct.SHAstate_st* %8 to i8*
  %53 = bitcast %struct.SHAstate_st* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %52, i8* align 4 %53, i64 96, i1 false), !track !234
  %54 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i32 0, i32 0
  %55 = call i32 @SHA1_Update(%struct.SHAstate_st* %8, i8* %54, i64 20)
  %56 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i32 0, i32 0
  %57 = call i32 @SHA1_Final(i8* %56, %struct.SHAstate_st* %8)
  %58 = bitcast %struct.SHAstate_st* %8 to i8*
  %59 = bitcast %struct.SHAstate_st* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %58, i8* align 4 %59, i64 96, i1 false), !track !235
  %60 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i32 0, i32 0
  %61 = call i32 @SHA1_Update(%struct.SHAstate_st* %8, i8* %60, i64 20)
  %62 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i32 0, i32 0
  %63 = call i32 @SHA1_Final(i8* %62, %struct.SHAstate_st* %8)
  br label %64

; <label>:64:                                     ; preds = %51, %73
  %indvars.iv7 = phi i64 [ 0, %51 ], [ %indvars.iv.next8, %73 ]
  call void @unroll_loop(i32 151)
  %65 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i64 0, i64 %indvars.iv7
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i8, i8* %2, i64 %indvars.iv7
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = xor i32 %70, %67
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %68, align 1
  br label %73

; <label>:73:                                     ; preds = %64
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp ne i64 %indvars.iv.next8, 20
  br i1 %exitcond9, label %64, label %74

; <label>:74:                                     ; preds = %73
  br label %75

; <label>:75:                                     ; preds = %74
  %76 = add nuw nsw i32 %.210, 1
  %exitcond11 = icmp ne i32 %76, 4096
  br i1 %exitcond11, label %51, label %77

; <label>:77:                                     ; preds = %75
  %78 = sub nsw i32 %37, 1
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [37 x i8], [37 x i8]* %5, i64 0, i64 %79
  store i8 2, i8* %80, align 1
  %81 = call %struct.env_md_st* @EVP_sha1()
  %82 = call i64 @strlen(i8* %0) #10
  %83 = trunc i64 %82 to i32
  %84 = getelementptr inbounds [37 x i8], [37 x i8]* %5, i32 0, i32 0
  %85 = sext i32 %37 to i64
  %86 = getelementptr inbounds i8, i8* %2, i64 20
  %87 = call i8* @HMAC(%struct.env_md_st* %81, i8* %0, i32 %83, i8* %84, i64 %85, i8* %86, i32* null)
  %88 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i32 0, i32 0
  %89 = getelementptr inbounds i8, i8* %2, i64 20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %88, i8* align 1 %89, i64 20, i1 false), !track !236
  br label %90

; <label>:90:                                     ; preds = %77, %115
  %.34 = phi i32 [ 1, %77 ], [ %116, %115 ]
  call void @unroll_loop(i32 152)
  %91 = bitcast %struct.SHAstate_st* %8 to i8*
  %92 = bitcast %struct.SHAstate_st* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %91, i8* align 4 %92, i64 96, i1 false), !track !237
  %93 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i32 0, i32 0
  %94 = call i32 @SHA1_Update(%struct.SHAstate_st* %8, i8* %93, i64 20)
  %95 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i32 0, i32 0
  %96 = call i32 @SHA1_Final(i8* %95, %struct.SHAstate_st* %8)
  %97 = bitcast %struct.SHAstate_st* %8 to i8*
  %98 = bitcast %struct.SHAstate_st* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %98, i64 96, i1 false), !track !238
  %99 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i32 0, i32 0
  %100 = call i32 @SHA1_Update(%struct.SHAstate_st* %8, i8* %99, i64 20)
  %101 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i32 0, i32 0
  %102 = call i32 @SHA1_Final(i8* %101, %struct.SHAstate_st* %8)
  br label %103

; <label>:103:                                    ; preds = %90, %113
  %indvars.iv = phi i64 [ 0, %90 ], [ %indvars.iv.next, %113 ]
  call void @unroll_loop(i32 153)
  %104 = getelementptr inbounds [65 x i8], [65 x i8]* %4, i64 0, i64 %indvars.iv
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = add nuw nsw i64 %indvars.iv, 20
  %108 = getelementptr inbounds i8, i8* %2, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = xor i32 %110, %106
  %112 = trunc i32 %111 to i8
  store i8 %112, i8* %108, align 1
  br label %113

; <label>:113:                                    ; preds = %103
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 20
  br i1 %exitcond, label %103, label %114

; <label>:114:                                    ; preds = %113
  br label %115

; <label>:115:                                    ; preds = %114
  %116 = add nuw nsw i32 %.34, 1
  %exitcond5 = icmp ne i32 %116, 4096
  br i1 %exitcond5, label %90, label %117

; <label>:117:                                    ; preds = %115
  ret void
}

declare dso_local i32 @SHA1_Init(%struct.SHAstate_st*) #1

declare dso_local i32 @SHA1_Update(%struct.SHAstate_st*, i8*, i64) #1

declare dso_local i32 @SHA1_Final(i8*, %struct.SHAstate_st*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @calc_mic(%struct.AP_info*, i8*, i8*, i8*) #0 {
  %5 = alloca [100 x i8], align 16
  %6 = alloca %struct.hmac_ctx_st, align 8
  %7 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %8 = getelementptr [23 x i8], [23 x i8]* @.str.159, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %7, i8* align 1 %8, i64 23, i1 false)
  %9 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 14
  %10 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %9, i32 0, i32 0
  %11 = getelementptr inbounds [6 x i8], [6 x i8]* %10, i32 0, i32 0
  %12 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 1
  %13 = getelementptr inbounds [6 x i8], [6 x i8]* %12, i32 0, i32 0
  %14 = call i32 @memcmp(i8* %11, i8* %13, i64 6) #10
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %26

; <label>:16:                                     ; preds = %4
  %17 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %18 = getelementptr inbounds i8, i8* %17, i64 23
  %19 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 14
  %20 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %19, i32 0, i32 0
  %21 = getelementptr inbounds [6 x i8], [6 x i8]* %20, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 8 %21, i64 6, i1 false)
  %22 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %23 = getelementptr inbounds i8, i8* %22, i64 29
  %24 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 1
  %25 = getelementptr inbounds [6 x i8], [6 x i8]* %24, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 8 %25, i64 6, i1 false)
  br label %36

; <label>:26:                                     ; preds = %4
  %27 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %28 = getelementptr inbounds i8, i8* %27, i64 23
  %29 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 1
  %30 = getelementptr inbounds [6 x i8], [6 x i8]* %29, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 8 %30, i64 6, i1 false)
  %31 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %32 = getelementptr inbounds i8, i8* %31, i64 29
  %33 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 14
  %34 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %33, i32 0, i32 0
  %35 = getelementptr inbounds [6 x i8], [6 x i8]* %34, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 8 %35, i64 6, i1 false)
  br label %36

; <label>:36:                                     ; preds = %26, %16
  %37 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 14
  %38 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %37, i32 0, i32 1
  %39 = getelementptr inbounds [32 x i8], [32 x i8]* %38, i32 0, i32 0
  %40 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 14
  %41 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %40, i32 0, i32 2
  %42 = getelementptr inbounds [32 x i8], [32 x i8]* %41, i32 0, i32 0
  %43 = call i32 @memcmp(i8* %39, i8* %42, i64 32) #10
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %45, label %56

; <label>:45:                                     ; preds = %36
  %46 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %47 = getelementptr inbounds i8, i8* %46, i64 35
  %48 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 14
  %49 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %48, i32 0, i32 1
  %50 = getelementptr inbounds [32 x i8], [32 x i8]* %49, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 2 %50, i64 32, i1 false)
  %51 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %52 = getelementptr inbounds i8, i8* %51, i64 67
  %53 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 14
  %54 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %53, i32 0, i32 2
  %55 = getelementptr inbounds [32 x i8], [32 x i8]* %54, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 2 %55, i64 32, i1 false)
  br label %67

; <label>:56:                                     ; preds = %36
  %57 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %58 = getelementptr inbounds i8, i8* %57, i64 35
  %59 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 14
  %60 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %59, i32 0, i32 2
  %61 = getelementptr inbounds [32 x i8], [32 x i8]* %60, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 2 %61, i64 32, i1 false)
  %62 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %63 = getelementptr inbounds i8, i8* %62, i64 67
  %64 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 14
  %65 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %64, i32 0, i32 1
  %66 = getelementptr inbounds [32 x i8], [32 x i8]* %65, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 2 %66, i64 32, i1 false)
  br label %67

; <label>:67:                                     ; preds = %56, %45
  call void @HMAC_CTX_init(%struct.hmac_ctx_st* %6)
  %68 = call %struct.env_md_st* @EVP_sha1()
  %69 = call i32 @HMAC_Init_ex(%struct.hmac_ctx_st* %6, i8* %1, i32 32, %struct.env_md_st* %68, %struct.engine_st* null)
  br label %70

; <label>:70:                                     ; preds = %67, %79
  %indvars.iv = phi i64 [ 0, %67 ], [ %indvars.iv.next, %79 ]
  %.01 = phi i32 [ 0, %67 ], [ %80, %79 ]
  %71 = trunc i32 %.01 to i8
  %72 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i64 0, i64 99
  store i8 %71, i8* %72, align 1
  %73 = call i32 @HMAC_Init_ex(%struct.hmac_ctx_st* %6, i8* null, i32 0, %struct.env_md_st* null, %struct.engine_st* null)
  %74 = getelementptr inbounds [100 x i8], [100 x i8]* %5, i32 0, i32 0
  %75 = call i32 @HMAC_Update(%struct.hmac_ctx_st* %6, i8* %74, i64 100)
  %76 = mul nuw nsw i64 %indvars.iv, 20
  %77 = getelementptr inbounds i8, i8* %2, i64 %76
  %78 = call i32 @HMAC_Final(%struct.hmac_ctx_st* %6, i8* %77, i32* null)
  br label %79

; <label>:79:                                     ; preds = %70
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %80 = add nuw nsw i32 %.01, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 4
  br i1 %exitcond, label %70, label %81

; <label>:81:                                     ; preds = %79
  call void @HMAC_CTX_cleanup(%struct.hmac_ctx_st* %6)
  %82 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 14
  %83 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %82, i32 0, i32 6
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 1
  br i1 %85, label %86, label %96

; <label>:86:                                     ; preds = %81
  %87 = call %struct.env_md_st* @EVP_md5()
  %88 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 14
  %89 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %88, i32 0, i32 4
  %90 = getelementptr inbounds [256 x i8], [256 x i8]* %89, i32 0, i32 0
  %91 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 14
  %92 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %91, i32 0, i32 5
  %93 = load i32, i32* %92, align 8
  %94 = sext i32 %93 to i64
  %95 = call i8* @HMAC(%struct.env_md_st* %87, i8* %2, i32 16, i8* %90, i64 %94, i8* %3, i32* null)
  br label %106

; <label>:96:                                     ; preds = %81
  %97 = call %struct.env_md_st* @EVP_sha1()
  %98 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 14
  %99 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %98, i32 0, i32 4
  %100 = getelementptr inbounds [256 x i8], [256 x i8]* %99, i32 0, i32 0
  %101 = getelementptr inbounds %struct.AP_info, %struct.AP_info* %0, i32 0, i32 14
  %102 = getelementptr inbounds %struct.WPA_hdsk, %struct.WPA_hdsk* %101, i32 0, i32 5
  %103 = load i32, i32* %102, align 8
  %104 = sext i32 %103 to i64
  %105 = call i8* @HMAC(%struct.env_md_st* %97, i8* %2, i32 16, i8* %100, i64 %104, i8* %3, i32* null)
  br label %106

; <label>:106:                                    ; preds = %96, %86
  ret void
}

declare dso_local void @HMAC_CTX_init(%struct.hmac_ctx_st*) #1

declare dso_local i32 @HMAC_Init_ex(%struct.hmac_ctx_st*, i8*, i32, %struct.env_md_st*, %struct.engine_st*) #1

declare dso_local i32 @HMAC_Update(%struct.hmac_ctx_st*, i8*, i64) #1

declare dso_local i32 @HMAC_Final(%struct.hmac_ctx_st*, i8*, i32*) #1

declare dso_local void @HMAC_CTX_cleanup(%struct.hmac_ctx_st*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @calc_crc_plain(i8*, i32) #0 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %.lr.ph, label %17

.lr.ph:                                           ; preds = %2
  br label %4

; <label>:4:                                      ; preds = %.lr.ph, %13
  %.05 = phi i8* [ %0, %.lr.ph ], [ %15, %13 ]
  %.014 = phi i32 [ %1, %.lr.ph ], [ %14, %13 ]
  %.023 = phi i64 [ 0, %.lr.ph ], [ %12, %13 ]
  %5 = load i8, i8* %.05, align 1
  %6 = zext i8 %5 to i64
  %7 = xor i64 %.023, %6
  %8 = and i64 %7, 255
  %9 = getelementptr inbounds [256 x i64], [256 x i64]* @crc_tbl, i64 0, i64 %8
  %10 = load i64, i64* %9, align 8
  %11 = lshr i64 %.023, 8
  %12 = xor i64 %10, %11
  br label %13

; <label>:13:                                     ; preds = %4
  %14 = add nsw i32 %.014, -1
  %15 = getelementptr inbounds i8, i8* %.05, i32 1
  %16 = icmp sgt i32 %14, 0
  br i1 %16, label %4, label %._crit_edge

._crit_edge:                                      ; preds = %13
  %split = phi i64 [ %12, %13 ]
  br label %17

; <label>:17:                                     ; preds = %._crit_edge, %2
  %.02.lcssa = phi i64 [ %split, %._crit_edge ], [ 0, %2 ]
  ret i64 %.02.lcssa
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @add_crc32(i8*, i32) #0 {
  %3 = call i64 @calc_crc(i8* %0, i32 %1)
  %4 = and i64 %3, 255
  %5 = trunc i64 %4 to i8
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  store i8 %5, i8* %7, align 1
  %8 = lshr i64 %3, 8
  %9 = and i64 %8, 255
  %10 = trunc i64 %9 to i8
  %11 = add nsw i32 %1, 1
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  store i8 %10, i8* %13, align 1
  %14 = lshr i64 %3, 16
  %15 = and i64 %14, 255
  %16 = trunc i64 %15 to i8
  %17 = add nsw i32 %1, 2
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %0, i64 %18
  store i8 %16, i8* %19, align 1
  %20 = lshr i64 %3, 24
  %21 = and i64 %20, 255
  %22 = trunc i64 %21 to i8
  %23 = add nsw i32 %1, 3
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  store i8 %22, i8* %25, align 1
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @add_crc32_plain(i8*, i32) #0 {
  %3 = call i64 @calc_crc_plain(i8* %0, i32 %1)
  %4 = and i64 %3, 255
  %5 = trunc i64 %4 to i8
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  store i8 %5, i8* %7, align 1
  %8 = lshr i64 %3, 8
  %9 = and i64 %8, 255
  %10 = trunc i64 %9 to i8
  %11 = add nsw i32 %1, 1
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  store i8 %10, i8* %13, align 1
  %14 = lshr i64 %3, 16
  %15 = and i64 %14, 255
  %16 = trunc i64 %15 to i8
  %17 = add nsw i32 %1, 2
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %0, i64 %18
  store i8 %16, i8* %19, align 1
  %20 = lshr i64 %3, 24
  %21 = and i64 %20, 255
  %22 = trunc i64 %21 to i8
  %23 = add nsw i32 %1, 3
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  store i8 %22, i8* %25, align 1
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @calc_crc_buf(i8*, i32) #0 {
  %3 = call i64 @calc_crc(i8* %0, i32 %1)
  %4 = trunc i64 %3 to i32
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @get_da(i8*) #0 {
  %2 = getelementptr inbounds i8, i8* %0, i64 1
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = and i32 %4, 2
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %9

; <label>:7:                                      ; preds = %1
  %8 = getelementptr inbounds i8, i8* %0, i64 4
  br label %12

; <label>:9:                                      ; preds = %1
  %10 = getelementptr inbounds i8, i8* %0, i64 4
  %11 = getelementptr inbounds i8, i8* %10, i64 12
  br label %12

; <label>:12:                                     ; preds = %9, %7
  %.0 = phi i8* [ %8, %7 ], [ %11, %9 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @get_sa(i8*) #8 {
  %2 = getelementptr inbounds i8, i8* %0, i64 1
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = and i32 %4, 2
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %10

; <label>:7:                                      ; preds = %1
  %8 = getelementptr inbounds i8, i8* %0, i64 4
  %9 = getelementptr inbounds i8, i8* %8, i64 12
  br label %13

; <label>:10:                                     ; preds = %1
  %11 = getelementptr inbounds i8, i8* %0, i64 4
  %12 = getelementptr inbounds i8, i8* %11, i64 6
  br label %13

; <label>:13:                                     ; preds = %10, %7
  %.0 = phi i8* [ %9, %7 ], [ %12, %10 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @is_ipv6(i8*) #0 {
  %2 = getelementptr i8, i8* %0, i64 4
  %3 = getelementptr [3 x i8], [3 x i8]* @.str.1.160, i32 0, i32 0
  %4 = call i32 @memcmp(i8* %2, i8* %3, i64 2) #10
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %11, label %6

; <label>:6:                                      ; preds = %1
  %7 = getelementptr i8, i8* %0, i64 16
  %8 = getelementptr [3 x i8], [3 x i8]* @.str.1.160, i32 0, i32 0
  %9 = call i32 @memcmp(i8* %7, i8* %8, i64 2) #10
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %6, %1
  br label %13

; <label>:12:                                     ; preds = %6
  br label %13

; <label>:13:                                     ; preds = %12, %11
  %.0 = phi i32 [ 1, %11 ], [ 0, %12 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @is_dhcp_discover(i8*, i32) #0 {
  %3 = getelementptr i8, i8* %0, i64 4
  %4 = getelementptr [7 x i8], [7 x i8]* @.str.2.161, i32 0, i32 0
  %5 = call i32 @memcmp(i8* %3, i8* %4, i64 6) #10
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %12, label %7

; <label>:7:                                      ; preds = %2
  %8 = getelementptr i8, i8* %0, i64 16
  %9 = getelementptr [7 x i8], [7 x i8]* @.str.2.161, i32 0, i32 0
  %10 = call i32 @memcmp(i8* %8, i8* %9, i64 6) #10
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %17

; <label>:12:                                     ; preds = %7, %2
  %13 = icmp sge i32 %1, 328
  br i1 %13, label %14, label %17

; <label>:14:                                     ; preds = %12
  %15 = icmp sle i32 %1, 348
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %14
  br label %18

; <label>:17:                                     ; preds = %14, %12, %7
  br label %18

; <label>:18:                                     ; preds = %17, %16
  %.0 = phi i32 [ 1, %16 ], [ 0, %17 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @is_arp(i8*, i32) #0 {
  %3 = icmp ne i8* %0, null
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %2
  br label %5

; <label>:5:                                      ; preds = %4, %2
  %6 = icmp eq i32 %1, 36
  br i1 %6, label %9, label %7

; <label>:7:                                      ; preds = %5
  %8 = icmp eq i32 %1, 54
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %7, %5
  br label %11

; <label>:10:                                     ; preds = %7
  br label %11

; <label>:11:                                     ; preds = %10, %9
  %.0 = phi i32 [ 1, %9 ], [ 0, %10 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @is_qos_arp_tkip(i8*, i32) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 1
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = and i32 %5, 3
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %8, label %12

; <label>:8:                                      ; preds = %2
  %9 = icmp eq i32 %1, 82
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %8
  br label %26

; <label>:11:                                     ; preds = %8
  br label %12

; <label>:12:                                     ; preds = %11, %2
  %13 = getelementptr inbounds i8, i8* %0, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = and i32 %15, 3
  %17 = icmp eq i32 %16, 2
  br i1 %17, label %18, label %25

; <label>:18:                                     ; preds = %12
  %19 = icmp eq i32 %1, 82
  br i1 %19, label %23, label %20

; <label>:20:                                     ; preds = %18
  %21 = add nsw i32 82, 18
  %22 = icmp eq i32 %1, %21
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %20, %18
  br label %26

; <label>:24:                                     ; preds = %20
  br label %25

; <label>:25:                                     ; preds = %24, %12
  br label %26

; <label>:26:                                     ; preds = %25, %23, %10
  %.0 = phi i32 [ 1, %10 ], [ 1, %23 ], [ 0, %25 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @is_spantree(i8*) #0 {
  %2 = getelementptr i8, i8* %0, i64 4
  %3 = getelementptr [7 x i8], [7 x i8]* @.str.3.162, i32 0, i32 0
  %4 = call i32 @memcmp(i8* %2, i8* %3, i64 6) #10
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %11, label %6

; <label>:6:                                      ; preds = %1
  %7 = getelementptr i8, i8* %0, i64 16
  %8 = getelementptr [7 x i8], [7 x i8]* @.str.3.162, i32 0, i32 0
  %9 = call i32 @memcmp(i8* %7, i8* %8, i64 6) #10
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %6, %1
  br label %13

; <label>:12:                                     ; preds = %6
  br label %13

; <label>:13:                                     ; preds = %12, %11
  %.0 = phi i32 [ 1, %11 ], [ 0, %12 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @is_cdp_vtp(i8*) #0 {
  %2 = getelementptr i8, i8* %0, i64 4
  %3 = getelementptr [7 x i8], [7 x i8]* @.str.4.163, i32 0, i32 0
  %4 = call i32 @memcmp(i8* %2, i8* %3, i64 6) #10
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %11, label %6

; <label>:6:                                      ; preds = %1
  %7 = getelementptr i8, i8* %0, i64 16
  %8 = getelementptr [7 x i8], [7 x i8]* @.str.4.163, i32 0, i32 0
  %9 = call i32 @memcmp(i8* %7, i8* %8, i64 6) #10
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %6, %1
  br label %13

; <label>:12:                                     ; preds = %6
  br label %13

; <label>:13:                                     ; preds = %12, %11
  %.0 = phi i32 [ 1, %11 ], [ 0, %12 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @known_clear(i8*, i32*, i32*, i8*, i32) #0 {
  %6 = alloca i16, align 2, !track !239
  %7 = call i32 @is_arp(i8* %3, i32 %4)
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %43

; <label>:9:                                      ; preds = %5
  %10 = sext i32 8 to i64
  %11 = getelementptr [9 x i8], [9 x i8]* @.str.5.166, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %11, i64 %10, i1 false), !track !240
  %12 = sext i32 8 to i64
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  %14 = sext i32 6 to i64
  %15 = getelementptr [7 x i8], [7 x i8]* @.str.6.167, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %15, i64 %14, i1 false), !track !241
  %16 = sext i32 6 to i64
  %17 = getelementptr inbounds i8, i8* %13, i64 %16
  %18 = call i8* @get_da(i8* %3)
  %19 = getelementptr [7 x i8], [7 x i8]* @.str.2.161, i32 0, i32 0
  %20 = call i32 @memcmp(i8* %18, i8* %19, i64 6) #10
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

; <label>:22:                                     ; preds = %9
  %23 = sext i32 2 to i64
  %24 = getelementptr [3 x i8], [3 x i8]* @.str.7.168, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %24, i64 %23, i1 false), !track !242
  br label %28

; <label>:25:                                     ; preds = %9
  %26 = sext i32 2 to i64
  %27 = getelementptr [3 x i8], [3 x i8]* @.str.8.169, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %27, i64 %26, i1 false), !track !243
  br label %28

; <label>:28:                                     ; preds = %25, %22
  %29 = sext i32 2 to i64
  %30 = getelementptr inbounds i8, i8* %17, i64 %29
  %31 = call i8* @get_sa(i8* %3)
  %32 = sext i32 6 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %32, i1 false), !track !244
  %33 = sext i32 6 to i64
  %34 = getelementptr inbounds i8, i8* %30, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = ptrtoint i8* %0 to i64
  %37 = sub i64 %35, %36
  %38 = trunc i64 %37 to i32
  store i32 %38, i32* %1, align 4
  %39 = icmp ne i32* %2, null
  br i1 %39, label %40, label %42

; <label>:40:                                     ; preds = %28
  %41 = getelementptr inbounds i32, i32* %2, i64 0
  store i32 256, i32* %41, align 4
  br label %42

; <label>:42:                                     ; preds = %40, %28
  br label %124

; <label>:43:                                     ; preds = %5
  %44 = call i32 @is_spantree(i8* %3)
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %59

; <label>:46:                                     ; preds = %43
  %47 = sext i32 8 to i64
  %48 = getelementptr [9 x i8], [9 x i8]* @.str.9.170, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %48, i64 %47, i1 false), !track !245
  %49 = sext i32 8 to i64
  %50 = getelementptr inbounds i8, i8* %0, i64 %49
  %51 = ptrtoint i8* %50 to i64
  %52 = ptrtoint i8* %0 to i64
  %53 = sub i64 %51, %52
  %54 = trunc i64 %53 to i32
  store i32 %54, i32* %1, align 4
  %55 = icmp ne i32* %2, null
  br i1 %55, label %56, label %58

; <label>:56:                                     ; preds = %46
  %57 = getelementptr inbounds i32, i32* %2, i64 0
  store i32 256, i32* %57, align 4
  br label %58

; <label>:58:                                     ; preds = %56, %46
  br label %124

; <label>:59:                                     ; preds = %43
  %60 = call i32 @is_cdp_vtp(i8* %3)
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %75

; <label>:62:                                     ; preds = %59
  %63 = sext i32 7 to i64
  %64 = getelementptr [8 x i8], [8 x i8]* @.str.10.171, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %64, i64 %63, i1 false), !track !246
  %65 = sext i32 7 to i64
  %66 = getelementptr inbounds i8, i8* %0, i64 %65
  %67 = ptrtoint i8* %66 to i64
  %68 = ptrtoint i8* %0 to i64
  %69 = sub i64 %67, %68
  %70 = trunc i64 %69 to i32
  store i32 %70, i32* %1, align 4
  %71 = icmp ne i32* %2, null
  br i1 %71, label %72, label %74

; <label>:72:                                     ; preds = %62
  %73 = getelementptr inbounds i32, i32* %2, i64 0
  store i32 256, i32* %73, align 4
  br label %74

; <label>:74:                                     ; preds = %72, %62
  br label %124

; <label>:75:                                     ; preds = %59
  %76 = sub nsw i32 %4, 8
  %77 = trunc i32 %76 to i16
  %78 = call zeroext i16 @htons(i16 zeroext %77) #13
  store i16 %78, i16* %6, align 2
  %79 = sext i32 8 to i64
  %80 = getelementptr [9 x i8], [9 x i8]* @.str.11.172, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %80, i64 %79, i1 false), !track !247
  %81 = sext i32 8 to i64
  %82 = getelementptr inbounds i8, i8* %0, i64 %81
  %83 = sext i32 2 to i64
  %84 = getelementptr [3 x i8], [3 x i8]* @.str.12.173, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %82, i8* align 1 %84, i64 %83, i1 false), !track !248
  %85 = sext i32 2 to i64
  %86 = getelementptr inbounds i8, i8* %82, i64 %85
  %87 = bitcast i16* %6 to i8*
  %88 = sext i32 2 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %86, i8* align 2 %87, i64 %88, i1 false), !track !249
  %89 = sext i32 2 to i64
  %90 = getelementptr inbounds i8, i8* %86, i64 %89
  %91 = icmp ne i32* %2, null
  br i1 %91, label %97, label %92

; <label>:92:                                     ; preds = %75
  %93 = ptrtoint i8* %90 to i64
  %94 = ptrtoint i8* %0 to i64
  %95 = sub i64 %93, %94
  %96 = trunc i64 %95 to i32
  store i32 %96, i32* %1, align 4
  br label %124

; <label>:97:                                     ; preds = %75
  %98 = sext i32 2 to i64
  %99 = getelementptr [3 x i8], [3 x i8]* @.str.13.174, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %90, i8* align 1 %99, i64 %98, i1 false), !track !250
  %100 = sext i32 2 to i64
  %101 = getelementptr inbounds i8, i8* %90, i64 %100
  %102 = sext i32 2 to i64
  %103 = getelementptr [3 x i8], [3 x i8]* @.str.14.175, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %101, i8* align 1 %103, i64 %102, i1 false), !track !251
  %104 = sext i32 2 to i64
  %105 = getelementptr inbounds i8, i8* %101, i64 %104
  %106 = ptrtoint i8* %105 to i64
  %107 = ptrtoint i8* %0 to i64
  %108 = sub i64 %106, %107
  %109 = trunc i64 %108 to i32
  store i32 %109, i32* %1, align 4
  %110 = getelementptr i8, i8* %0, i64 32
  %111 = sext i32 %109 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 1 %0, i64 %111, i1 false), !track !252
  %112 = getelementptr i8, i8* %0, i64 32
  %113 = getelementptr i8, i8* %112, i64 14
  %114 = getelementptr [3 x i8], [3 x i8]* @.str.13.174, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %113, i8* align 1 %114, i64 2, i1 false), !track !253
  %115 = icmp ne i32* %2, null
  br i1 %115, label %116, label %117

; <label>:116:                                    ; preds = %97
  br label %121

; <label>:117:                                    ; preds = %97
  %118 = getelementptr [7 x i8], [7 x i8]* @.str.15.176, i32 0, i32 0
  %119 = getelementptr [9 x i8], [9 x i8]* @.str.16.177, i32 0, i32 0
  %120 = getelementptr [60 x i8], [60 x i8]* @__PRETTY_FUNCTION__.known_clear, i32 0, i32 0
  call void @__assert_fail(i8* %118, i8* %119, i32 588, i8* %120) #11
  unreachable

; <label>:121:                                    ; preds = %116
  %122 = getelementptr inbounds i32, i32* %2, i64 0
  store i32 220, i32* %122, align 4
  %123 = getelementptr inbounds i32, i32* %2, i64 1
  store i32 36, i32* %123, align 4
  br label %124

; <label>:124:                                    ; preds = %121, %92, %74, %58, %42
  %.0 = phi i32 [ 1, %42 ], [ 1, %58 ], [ 1, %74 ], [ 2, %121 ], [ 1, %92 ]
  ret i32 %.0
}

; Function Attrs: nounwind readnone
declare dso_local zeroext i16 @htons(i16 zeroext) #7

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #5

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @calc_ptk(%struct.WPA_ST_info*, i8*) #0 {
  %3 = alloca [100 x i8], align 16
  %4 = alloca [20 x i8], align 16
  %5 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i32 0, i32 0
  %6 = getelementptr [23 x i8], [23 x i8]* @.str.159, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %5, i8* align 1 %6, i64 23, i1 false)
  %7 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 1
  %8 = getelementptr inbounds [6 x i8], [6 x i8]* %7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 2
  %10 = getelementptr inbounds [6 x i8], [6 x i8]* %9, i32 0, i32 0
  %11 = call i32 @memcmp(i8* %8, i8* %10, i64 6) #10
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %22

; <label>:13:                                     ; preds = %2
  %14 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i32 0, i32 0
  %15 = getelementptr inbounds i8, i8* %14, i64 23
  %16 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 1
  %17 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 8 %17, i64 6, i1 false)
  %18 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i32 0, i32 0
  %19 = getelementptr inbounds i8, i8* %18, i64 29
  %20 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 2
  %21 = getelementptr inbounds [6 x i8], [6 x i8]* %20, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 2 %21, i64 6, i1 false)
  br label %31

; <label>:22:                                     ; preds = %2
  %23 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i32 0, i32 0
  %24 = getelementptr inbounds i8, i8* %23, i64 23
  %25 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 2
  %26 = getelementptr inbounds [6 x i8], [6 x i8]* %25, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 2 %26, i64 6, i1 false)
  %27 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i32 0, i32 0
  %28 = getelementptr inbounds i8, i8* %27, i64 29
  %29 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 1
  %30 = getelementptr inbounds [6 x i8], [6 x i8]* %29, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 8 %30, i64 6, i1 false)
  br label %31

; <label>:31:                                     ; preds = %22, %13
  %32 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 3
  %33 = getelementptr inbounds [32 x i8], [32 x i8]* %32, i32 0, i32 0
  %34 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 4
  %35 = getelementptr inbounds [32 x i8], [32 x i8]* %34, i32 0, i32 0
  %36 = call i32 @memcmp(i8* %33, i8* %35, i64 32) #10
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %47

; <label>:38:                                     ; preds = %31
  %39 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i32 0, i32 0
  %40 = getelementptr inbounds i8, i8* %39, i64 35
  %41 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 3
  %42 = getelementptr inbounds [32 x i8], [32 x i8]* %41, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 4 %42, i64 32, i1 false)
  %43 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i32 0, i32 0
  %44 = getelementptr inbounds i8, i8* %43, i64 67
  %45 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 4
  %46 = getelementptr inbounds [32 x i8], [32 x i8]* %45, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 4 %46, i64 32, i1 false)
  br label %56

; <label>:47:                                     ; preds = %31
  %48 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i32 0, i32 0
  %49 = getelementptr inbounds i8, i8* %48, i64 35
  %50 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 4
  %51 = getelementptr inbounds [32 x i8], [32 x i8]* %50, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 4 %51, i64 32, i1 false)
  %52 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i32 0, i32 0
  %53 = getelementptr inbounds i8, i8* %52, i64 67
  %54 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 3
  %55 = getelementptr inbounds [32 x i8], [32 x i8]* %54, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %53, i8* align 4 %55, i64 32, i1 false)
  br label %56

; <label>:56:                                     ; preds = %47, %38
  br label %57

; <label>:57:                                     ; preds = %56, %67
  %indvars.iv = phi i64 [ 0, %56 ], [ %indvars.iv.next, %67 ]
  %.01 = phi i32 [ 0, %56 ], [ %68, %67 ]
  %58 = trunc i32 %.01 to i8
  %59 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i64 0, i64 99
  store i8 %58, i8* %59, align 1
  %60 = call %struct.env_md_st* @EVP_sha1()
  %61 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i32 0, i32 0
  %62 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 7
  %63 = getelementptr inbounds [80 x i8], [80 x i8]* %62, i32 0, i32 0
  %64 = mul nuw nsw i64 %indvars.iv, 20
  %65 = getelementptr inbounds i8, i8* %63, i64 %64
  %66 = call i8* @HMAC(%struct.env_md_st* %60, i8* %1, i32 32, i8* %61, i64 100, i8* %65, i32* null)
  br label %67

; <label>:67:                                     ; preds = %57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %68 = add nuw nsw i32 %.01, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 4
  br i1 %exitcond, label %57, label %69

; <label>:69:                                     ; preds = %67
  %70 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 11
  %71 = load i32, i32* %70, align 8
  %72 = and i32 %71, 7
  %73 = icmp eq i32 %72, 1
  br i1 %73, label %74, label %85

; <label>:74:                                     ; preds = %69
  %75 = call %struct.env_md_st* @EVP_md5()
  %76 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 7
  %77 = getelementptr inbounds [80 x i8], [80 x i8]* %76, i32 0, i32 0
  %78 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 6
  %79 = getelementptr inbounds [256 x i8], [256 x i8]* %78, i32 0, i32 0
  %80 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 8
  %81 = load i32, i32* %80, align 8
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [20 x i8], [20 x i8]* %4, i32 0, i32 0
  %84 = call i8* @HMAC(%struct.env_md_st* %75, i8* %77, i32 16, i8* %79, i64 %82, i8* %83, i32* null)
  br label %96

; <label>:85:                                     ; preds = %69
  %86 = call %struct.env_md_st* @EVP_sha1()
  %87 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 7
  %88 = getelementptr inbounds [80 x i8], [80 x i8]* %87, i32 0, i32 0
  %89 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 6
  %90 = getelementptr inbounds [256 x i8], [256 x i8]* %89, i32 0, i32 0
  %91 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 8
  %92 = load i32, i32* %91, align 8
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [20 x i8], [20 x i8]* %4, i32 0, i32 0
  %95 = call i8* @HMAC(%struct.env_md_st* %86, i8* %88, i32 16, i8* %90, i64 %93, i8* %94, i32* null)
  br label %96

; <label>:96:                                     ; preds = %85, %74
  %97 = getelementptr inbounds [20 x i8], [20 x i8]* %4, i32 0, i32 0
  %98 = getelementptr inbounds %struct.WPA_ST_info, %struct.WPA_ST_info* %0, i32 0, i32 5
  %99 = getelementptr inbounds [20 x i8], [20 x i8]* %98, i32 0, i32 0
  %100 = call i32 @memcmp(i8* %97, i8* %99, i64 16) #10
  %101 = icmp eq i32 %100, 0
  %102 = zext i1 %101 to i32
  ret i32 %102
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @init_michael(%struct.Michael*, i8*) #0 {
  %3 = getelementptr inbounds i8, i8* %1, i64 0
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = shl i32 %5, 0
  %7 = getelementptr inbounds i8, i8* %1, i64 1
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = shl i32 %9, 8
  %11 = or i32 %6, %10
  %12 = getelementptr inbounds i8, i8* %1, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = shl i32 %14, 16
  %16 = or i32 %11, %15
  %17 = getelementptr inbounds i8, i8* %1, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = shl i32 %19, 24
  %21 = or i32 %16, %20
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds i8, i8* %1, i64 4
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = shl i32 %26, 0
  %28 = getelementptr inbounds i8, i8* %1, i64 5
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = shl i32 %30, 8
  %32 = or i32 %27, %31
  %33 = getelementptr inbounds i8, i8* %1, i64 6
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl i32 %35, 16
  %37 = or i32 %32, %36
  %38 = getelementptr inbounds i8, i8* %1, i64 7
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl i32 %40, 24
  %42 = or i32 %37, %41
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 1
  store i64 %43, i64* %44, align 8
  %45 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  store i64 %49, i64* %50, align 8
  %51 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 4
  store i64 0, i64* %51, align 8
  %52 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 5
  store i64 0, i64* %52, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @michael_append_byte(%struct.Michael*, i8 zeroext) #0 {
  %3 = zext i8 %1 to i32
  %4 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 4
  %5 = load i64, i64* %4, align 8
  %6 = mul i64 8, %5
  %7 = trunc i64 %6 to i32
  %8 = shl i32 %3, %7
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 5
  %11 = load i64, i64* %10, align 8
  %12 = or i64 %11, %9
  store i64 %12, i64* %10, align 8
  %13 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 4
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %14, 1
  store i64 %15, i64* %13, align 8
  %16 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 4
  %17 = load i64, i64* %16, align 8
  %18 = icmp uge i64 %17, 4
  br i1 %18, label %19, label %92

; <label>:19:                                     ; preds = %2
  %20 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 5
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = xor i64 %23, %21
  store i64 %24, i64* %22, align 8
  %25 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = shl i64 %26, 17
  %28 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %29 = load i64, i64* %28, align 8
  %30 = lshr i64 %29, 15
  %31 = and i64 %30, 131071
  %32 = or i64 %27, %31
  %33 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %34 = load i64, i64* %33, align 8
  %35 = xor i64 %34, %32
  store i64 %35, i64* %33, align 8
  %36 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, %37
  store i64 %40, i64* %38, align 8
  %41 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %42 = load i64, i64* %41, align 8
  %43 = and i64 %42, 4278255360
  %44 = lshr i64 %43, 8
  %45 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %46 = load i64, i64* %45, align 8
  %47 = and i64 %46, 16711935
  %48 = shl i64 %47, 8
  %49 = or i64 %44, %48
  %50 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %51 = load i64, i64* %50, align 8
  %52 = xor i64 %51, %49
  store i64 %52, i64* %50, align 8
  %53 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %56 = load i64, i64* %55, align 8
  %57 = add i64 %56, %54
  store i64 %57, i64* %55, align 8
  %58 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %59 = load i64, i64* %58, align 8
  %60 = shl i64 %59, 3
  %61 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %62 = load i64, i64* %61, align 8
  %63 = lshr i64 %62, 29
  %64 = and i64 %63, 7
  %65 = or i64 %60, %64
  %66 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %67 = load i64, i64* %66, align 8
  %68 = xor i64 %67, %65
  store i64 %68, i64* %66, align 8
  %69 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %72 = load i64, i64* %71, align 8
  %73 = add i64 %72, %70
  store i64 %73, i64* %71, align 8
  %74 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %75 = load i64, i64* %74, align 8
  %76 = shl i64 %75, 30
  %77 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %78 = load i64, i64* %77, align 8
  %79 = lshr i64 %78, 2
  %80 = and i64 %79, 1073741823
  %81 = or i64 %76, %80
  %82 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %83 = load i64, i64* %82, align 8
  %84 = xor i64 %83, %81
  store i64 %84, i64* %82, align 8
  %85 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %86 = load i64, i64* %85, align 8
  %87 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %88 = load i64, i64* %87, align 8
  %89 = add i64 %88, %86
  store i64 %89, i64* %87, align 8
  %90 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 5
  store i64 0, i64* %90, align 8
  %91 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 4
  store i64 0, i64* %91, align 8
  br label %92

; <label>:92:                                     ; preds = %19, %2
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @michael_remove_byte(%struct.Michael*, i8*) #0 {
  %3 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 4
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %99

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds i8, i8* %1, i64 0
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = shl i32 %9, 0
  %11 = getelementptr inbounds i8, i8* %1, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = shl i32 %13, 8
  %15 = or i32 %10, %14
  %16 = getelementptr inbounds i8, i8* %1, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = shl i32 %18, 16
  %20 = or i32 %15, %19
  %21 = getelementptr inbounds i8, i8* %1, i64 3
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = shl i32 %23, 24
  %25 = or i32 %20, %24
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 5
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 4
  store i64 4, i64* %28, align 8
  %29 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %32, %30
  store i64 %33, i64* %31, align 8
  %34 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %35 = load i64, i64* %34, align 8
  %36 = shl i64 %35, 30
  %37 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %38 = load i64, i64* %37, align 8
  %39 = lshr i64 %38, 2
  %40 = and i64 %39, 1073741823
  %41 = or i64 %36, %40
  %42 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %43 = load i64, i64* %42, align 8
  %44 = xor i64 %43, %41
  store i64 %44, i64* %42, align 8
  %45 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %48 = load i64, i64* %47, align 8
  %49 = sub i64 %48, %46
  store i64 %49, i64* %47, align 8
  %50 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %51 = load i64, i64* %50, align 8
  %52 = shl i64 %51, 3
  %53 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %54 = load i64, i64* %53, align 8
  %55 = lshr i64 %54, 29
  %56 = and i64 %55, 7
  %57 = or i64 %52, %56
  %58 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %59 = load i64, i64* %58, align 8
  %60 = xor i64 %59, %57
  store i64 %60, i64* %58, align 8
  %61 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %64 = load i64, i64* %63, align 8
  %65 = sub i64 %64, %62
  store i64 %65, i64* %63, align 8
  %66 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %67 = load i64, i64* %66, align 8
  %68 = and i64 %67, 4278255360
  %69 = lshr i64 %68, 8
  %70 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %71 = load i64, i64* %70, align 8
  %72 = and i64 %71, 16711935
  %73 = shl i64 %72, 8
  %74 = or i64 %69, %73
  %75 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %76 = load i64, i64* %75, align 8
  %77 = xor i64 %76, %74
  store i64 %77, i64* %75, align 8
  %78 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %81 = load i64, i64* %80, align 8
  %82 = sub i64 %81, %79
  store i64 %82, i64* %80, align 8
  %83 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %84 = load i64, i64* %83, align 8
  %85 = shl i64 %84, 17
  %86 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %87 = load i64, i64* %86, align 8
  %88 = lshr i64 %87, 15
  %89 = and i64 %88, 131071
  %90 = or i64 %85, %89
  %91 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %92 = load i64, i64* %91, align 8
  %93 = xor i64 %92, %90
  store i64 %93, i64* %91, align 8
  %94 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 5
  %95 = load i64, i64* %94, align 8
  %96 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %97 = load i64, i64* %96, align 8
  %98 = xor i64 %97, %95
  store i64 %98, i64* %96, align 8
  br label %99

; <label>:99:                                     ; preds = %6, %2
  %100 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 4
  %101 = load i64, i64* %100, align 8
  %102 = add i64 %101, -1
  store i64 %102, i64* %100, align 8
  %103 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 4
  %104 = load i64, i64* %103, align 8
  %105 = mul i64 8, %104
  %106 = trunc i64 %105 to i32
  %107 = shl i32 255, %106
  %108 = xor i32 %107, -1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 5
  %111 = load i64, i64* %110, align 8
  %112 = and i64 %111, %109
  store i64 %112, i64* %110, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @michael_append(%struct.Michael*, i8*, i32) #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %.lr.ph, label %11

.lr.ph:                                           ; preds = %3
  br label %5

; <label>:5:                                      ; preds = %.lr.ph, %5
  %.03 = phi i32 [ %2, %.lr.ph ], [ %9, %5 ]
  %.012 = phi i8* [ %1, %.lr.ph ], [ %6, %5 ]
  %6 = getelementptr inbounds i8, i8* %.012, i32 1
  %7 = load i8, i8* %.012, align 1
  %8 = call i32 @michael_append_byte(%struct.Michael* %0, i8 zeroext %7)
  %9 = add nsw i32 %.03, -1
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %5, label %._crit_edge

._crit_edge:                                      ; preds = %5
  br label %11

; <label>:11:                                     ; preds = %._crit_edge, %3
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @michael_remove(%struct.Michael*, i8*, i32) #0 {
  %4 = icmp sge i32 %2, 4
  br i1 %4, label %.lr.ph, label %11

.lr.ph:                                           ; preds = %3
  %5 = sext i32 %2 to i64
  br label %6

; <label>:6:                                      ; preds = %.lr.ph, %6
  %indvars.iv = phi i64 [ %5, %.lr.ph ], [ %indvars.iv.next, %6 ]
  %7 = getelementptr inbounds i8, i8* %1, i64 %indvars.iv
  %8 = getelementptr inbounds i8, i8* %7, i64 -4
  %9 = call i32 @michael_remove_byte(%struct.Michael* %0, i8* %8)
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %10 = icmp sge i64 %indvars.iv.next, 4
  br i1 %10, label %6, label %._crit_edge

._crit_edge:                                      ; preds = %6
  br label %11

; <label>:11:                                     ; preds = %._crit_edge, %3
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @michael_finalize(%struct.Michael*) #0 {
  %2 = call i32 @michael_append_byte(%struct.Michael* %0, i8 zeroext 90)
  %3 = call i32 @michael_append_byte(%struct.Michael* %0, i8 zeroext 0)
  %4 = call i32 @michael_append_byte(%struct.Michael* %0, i8 zeroext 0)
  %5 = call i32 @michael_append_byte(%struct.Michael* %0, i8 zeroext 0)
  %6 = call i32 @michael_append_byte(%struct.Michael* %0, i8 zeroext 0)
  %7 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = icmp ne i64 %8, 0
  br i1 %9, label %.lr.ph, label %14

.lr.ph:                                           ; preds = %1
  br label %10

; <label>:10:                                     ; preds = %.lr.ph, %10
  %11 = call i32 @michael_append_byte(%struct.Michael* %0, i8 zeroext 0)
  %12 = load i64, i64* %7, align 8
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %10, label %._crit_edge

._crit_edge:                                      ; preds = %10
  br label %14

; <label>:14:                                     ; preds = %._crit_edge, %1
  %15 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = lshr i64 %16, 0
  %18 = and i64 %17, 255
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %20, i64 0, i64 0
  store i8 %19, i8* %21, align 8
  %22 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 8
  %25 = and i64 %24, 255
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %27, i64 0, i64 1
  store i8 %26, i8* %28, align 1
  %29 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = lshr i64 %30, 16
  %32 = and i64 %31, 255
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %34, i64 0, i64 2
  store i8 %33, i8* %35, align 2
  %36 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %37 = load i64, i64* %36, align 8
  %38 = lshr i64 %37, 24
  %39 = and i64 %38, 255
  %40 = trunc i64 %39 to i8
  %41 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %41, i64 0, i64 3
  store i8 %40, i8* %42, align 1
  %43 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %44 = load i64, i64* %43, align 8
  %45 = lshr i64 %44, 0
  %46 = and i64 %45, 255
  %47 = trunc i64 %46 to i8
  %48 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %48, i64 0, i64 4
  store i8 %47, i8* %49, align 4
  %50 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %51 = load i64, i64* %50, align 8
  %52 = lshr i64 %51, 8
  %53 = and i64 %52, 255
  %54 = trunc i64 %53 to i8
  %55 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %55, i64 0, i64 5
  store i8 %54, i8* %56, align 1
  %57 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %58 = load i64, i64* %57, align 8
  %59 = lshr i64 %58, 16
  %60 = and i64 %59, 255
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %63 = getelementptr inbounds [8 x i8], [8 x i8]* %62, i64 0, i64 6
  store i8 %61, i8* %63, align 2
  %64 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %65 = load i64, i64* %64, align 8
  %66 = lshr i64 %65, 24
  %67 = and i64 %66, 255
  %68 = trunc i64 %67 to i8
  %69 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %69, i64 0, i64 7
  store i8 %68, i8* %70, align 1
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @michael_finalize_zero(%struct.Michael*) #0 {
  %2 = call i32 @michael_append_byte(%struct.Michael* %0, i8 zeroext 0)
  %3 = call i32 @michael_append_byte(%struct.Michael* %0, i8 zeroext 0)
  %4 = call i32 @michael_append_byte(%struct.Michael* %0, i8 zeroext 0)
  %5 = call i32 @michael_append_byte(%struct.Michael* %0, i8 zeroext 0)
  %6 = call i32 @michael_append_byte(%struct.Michael* %0, i8 zeroext 0)
  %7 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = icmp ne i64 %8, 0
  br i1 %9, label %.lr.ph, label %14

.lr.ph:                                           ; preds = %1
  br label %10

; <label>:10:                                     ; preds = %.lr.ph, %10
  %11 = call i32 @michael_append_byte(%struct.Michael* %0, i8 zeroext 0)
  %12 = load i64, i64* %7, align 8
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %10, label %._crit_edge

._crit_edge:                                      ; preds = %10
  br label %14

; <label>:14:                                     ; preds = %._crit_edge, %1
  %15 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = lshr i64 %16, 0
  %18 = and i64 %17, 255
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %20, i64 0, i64 0
  store i8 %19, i8* %21, align 8
  %22 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 8
  %25 = and i64 %24, 255
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %27, i64 0, i64 1
  store i8 %26, i8* %28, align 1
  %29 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = lshr i64 %30, 16
  %32 = and i64 %31, 255
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %34, i64 0, i64 2
  store i8 %33, i8* %35, align 2
  %36 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 2
  %37 = load i64, i64* %36, align 8
  %38 = lshr i64 %37, 24
  %39 = and i64 %38, 255
  %40 = trunc i64 %39 to i8
  %41 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %41, i64 0, i64 3
  store i8 %40, i8* %42, align 1
  %43 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %44 = load i64, i64* %43, align 8
  %45 = lshr i64 %44, 0
  %46 = and i64 %45, 255
  %47 = trunc i64 %46 to i8
  %48 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %48, i64 0, i64 4
  store i8 %47, i8* %49, align 4
  %50 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %51 = load i64, i64* %50, align 8
  %52 = lshr i64 %51, 8
  %53 = and i64 %52, 255
  %54 = trunc i64 %53 to i8
  %55 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %55, i64 0, i64 5
  store i8 %54, i8* %56, align 1
  %57 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %58 = load i64, i64* %57, align 8
  %59 = lshr i64 %58, 16
  %60 = and i64 %59, 255
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %63 = getelementptr inbounds [8 x i8], [8 x i8]* %62, i64 0, i64 6
  store i8 %61, i8* %63, align 2
  %64 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 3
  %65 = load i64, i64* %64, align 8
  %66 = lshr i64 %65, 24
  %67 = and i64 %66, 255
  %68 = trunc i64 %67 to i8
  %69 = getelementptr inbounds %struct.Michael, %struct.Michael* %0, i32 0, i32 6
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %69, i64 0, i64 7
  store i8 %68, i8* %70, align 1
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @michael_test(i8*, i8*, i32, i8*) #0 {
  %5 = alloca %struct.Michael, align 8
  %6 = alloca %struct.Michael, align 8
  %7 = alloca %struct.Michael, align 8
  %8 = alloca %struct.Michael, align 8
  %9 = getelementptr [9 x i8], [9 x i8]* @.str.17.178, i32 0, i32 0
  %10 = call i32 @init_michael(%struct.Michael* %5, i8* %9)
  %11 = getelementptr [9 x i8], [9 x i8]* @.str.17.178, i32 0, i32 0
  %12 = call i32 @init_michael(%struct.Michael* %6, i8* %11)
  %13 = getelementptr [9 x i8], [9 x i8]* @.str.17.178, i32 0, i32 0
  %14 = call i32 @init_michael(%struct.Michael* %7, i8* %13)
  %15 = call i32 @michael_append_byte(%struct.Michael* %5, i8 zeroext 2)
  %16 = call i32 @michael_append_byte(%struct.Michael* %6, i8 zeroext 1)
  %17 = call i32 @michael_append_byte(%struct.Michael* %7, i8 zeroext 3)
  %18 = call i32 @michael_finalize(%struct.Michael* %5)
  %19 = call i32 @michael_finalize_zero(%struct.Michael* %6)
  %20 = call i32 @michael_finalize(%struct.Michael* %7)
  %21 = getelementptr [8 x i8], [8 x i8]* @.str.18.179, i32 0, i32 0
  %22 = call i32 (i8*, ...) @printf(i8* %21)
  br label %23

; <label>:23:                                     ; preds = %4, %30
  %indvars.iv7 = phi i64 [ 0, %4 ], [ %indvars.iv.next8, %30 ]
  %24 = getelementptr inbounds %struct.Michael, %struct.Michael* %5, i32 0, i32 6
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %24, i64 0, i64 %indvars.iv7
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = getelementptr [6 x i8], [6 x i8]* @.str.19.180, i32 0, i32 0
  %29 = call i32 (i8*, ...) @printf(i8* %28, i32 %27)
  br label %30

; <label>:30:                                     ; preds = %23
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp ne i64 %indvars.iv.next8, 8
  br i1 %exitcond9, label %23, label %31

; <label>:31:                                     ; preds = %30
  %32 = getelementptr [2 x i8], [2 x i8]* @.str.20.181, i32 0, i32 0
  %33 = call i32 (i8*, ...) @printf(i8* %32)
  %34 = getelementptr [8 x i8], [8 x i8]* @.str.21.182, i32 0, i32 0
  %35 = call i32 (i8*, ...) @printf(i8* %34)
  br label %36

; <label>:36:                                     ; preds = %31, %43
  %indvars.iv3 = phi i64 [ 0, %31 ], [ %indvars.iv.next4, %43 ]
  %37 = getelementptr inbounds %struct.Michael, %struct.Michael* %6, i32 0, i32 6
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %37, i64 0, i64 %indvars.iv3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr [6 x i8], [6 x i8]* @.str.19.180, i32 0, i32 0
  %42 = call i32 (i8*, ...) @printf(i8* %41, i32 %40)
  br label %43

; <label>:43:                                     ; preds = %36
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1
  %exitcond5 = icmp ne i64 %indvars.iv.next4, 8
  br i1 %exitcond5, label %36, label %44

; <label>:44:                                     ; preds = %43
  %45 = getelementptr [2 x i8], [2 x i8]* @.str.20.181, i32 0, i32 0
  %46 = call i32 (i8*, ...) @printf(i8* %45)
  %47 = getelementptr [8 x i8], [8 x i8]* @.str.22.183, i32 0, i32 0
  %48 = call i32 (i8*, ...) @printf(i8* %47)
  br label %49

; <label>:49:                                     ; preds = %44, %56
  %indvars.iv = phi i64 [ 0, %44 ], [ %indvars.iv.next, %56 ]
  %50 = getelementptr inbounds %struct.Michael, %struct.Michael* %7, i32 0, i32 6
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %50, i64 0, i64 %indvars.iv
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = getelementptr [6 x i8], [6 x i8]* @.str.19.180, i32 0, i32 0
  %55 = call i32 (i8*, ...) @printf(i8* %54, i32 %53)
  br label %56

; <label>:56:                                     ; preds = %49
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 8
  br i1 %exitcond, label %49, label %57

; <label>:57:                                     ; preds = %56
  %58 = getelementptr [2 x i8], [2 x i8]* @.str.20.181, i32 0, i32 0
  %59 = call i32 (i8*, ...) @printf(i8* %58)
  %60 = call i32 @init_michael(%struct.Michael* %8, i8* %0)
  %61 = call i32 @michael_append(%struct.Michael* %8, i8* %1, i32 %2)
  %62 = call i32 @michael_finalize(%struct.Michael* %8)
  %63 = getelementptr inbounds %struct.Michael, %struct.Michael* %8, i32 0, i32 6
  %64 = getelementptr inbounds [8 x i8], [8 x i8]* %63, i32 0, i32 0
  %65 = call i32 @memcmp(i8* %64, i8* %3, i64 8) #10
  %66 = icmp eq i32 %65, 0
  %67 = zext i1 %66 to i32
  ret i32 %67
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @calc_tkip_mic_key(i8*, i32, i8*) #0 {
  %4 = alloca [6 x i8], align 1
  %5 = alloca [6 x i8], align 1
  %6 = alloca [6 x i8], align 1
  %7 = alloca [4 x i8], align 1
  %8 = alloca [4096 x i8], align 16
  %9 = alloca %struct.Michael, align 8
  %10 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %10, i8 0, i64 4096, i1 false)
  %11 = getelementptr inbounds i8, i8* %0, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = and i32 %13, 3
  %15 = icmp ne i32 %14, 3
  %16 = zext i1 %15 to i64
  %17 = select i1 %15, i32 24, i32 30
  %18 = icmp slt i32 %1, %17
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %3
  br label %185

; <label>:20:                                     ; preds = %3
  %21 = getelementptr inbounds i8, i8* %0, i64 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = and i32 %23, 128
  %25 = icmp eq i32 %24, 128
  br i1 %25, label %26, label %28

; <label>:26:                                     ; preds = %20
  %27 = add nsw i32 %17, 2
  br label %28

; <label>:28:                                     ; preds = %26, %20
  %.02 = phi i32 [ %27, %26 ], [ %17, %20 ]
  %.01 = phi i32 [ 1, %26 ], [ 0, %20 ]
  %29 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 0, i64 4, i1 false)
  %30 = icmp ne i32 %.01, 0
  br i1 %30, label %31, label %40

; <label>:31:                                     ; preds = %28
  %32 = sub nsw i32 %.02, 2
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %0, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = and i32 %36, 15
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 0
  store i8 %38, i8* %39, align 1
  br label %40

; <label>:40:                                     ; preds = %31, %28
  %41 = getelementptr inbounds i8, i8* %0, i64 1
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = and i32 %43, 3
  switch i32 %44, label %66 [
    i32 0, label %45
    i32 1, label %52
    i32 2, label %59
  ]

; <label>:45:                                     ; preds = %40
  %46 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %47 = getelementptr inbounds i8, i8* %0, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %47, i64 6, i1 false)
  %48 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %49 = getelementptr inbounds i8, i8* %0, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %48, i8* align 1 %49, i64 6, i1 false)
  %50 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %51 = getelementptr inbounds i8, i8* %0, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %51, i64 6, i1 false)
  br label %73

; <label>:52:                                     ; preds = %40
  %53 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %54 = getelementptr inbounds i8, i8* %0, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %53, i8* align 1 %54, i64 6, i1 false)
  %55 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %56 = getelementptr inbounds i8, i8* %0, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %55, i8* align 1 %56, i64 6, i1 false)
  %57 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %58 = getelementptr inbounds i8, i8* %0, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %58, i64 6, i1 false)
  br label %73

; <label>:59:                                     ; preds = %40
  %60 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %61 = getelementptr inbounds i8, i8* %0, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 %61, i64 6, i1 false)
  %62 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %63 = getelementptr inbounds i8, i8* %0, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 1 %63, i64 6, i1 false)
  %64 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %65 = getelementptr inbounds i8, i8* %0, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %64, i8* align 1 %65, i64 6, i1 false)
  br label %73

; <label>:66:                                     ; preds = %40
  %67 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %68 = getelementptr inbounds i8, i8* %0, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %68, i64 6, i1 false)
  %69 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %70 = getelementptr inbounds i8, i8* %0, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %69, i8* align 1 %70, i64 6, i1 false)
  %71 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %72 = getelementptr inbounds i8, i8* %0, i64 24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %71, i8* align 1 %72, i64 6, i1 false)
  br label %73

; <label>:73:                                     ; preds = %66, %59, %52, %45
  %74 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i32 0, i32 0
  %75 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %75, i64 6, i1 false)
  %76 = getelementptr inbounds i8, i8* %74, i64 6
  %77 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 6, i1 false)
  %78 = getelementptr inbounds i8, i8* %76, i64 6
  %79 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %79, i64 4, i1 false)
  %80 = getelementptr inbounds i8, i8* %78, i64 4
  %81 = sext i32 %.02 to i64
  %82 = getelementptr inbounds i8, i8* %0, i64 %81
  %83 = sub nsw i32 %1, %.02
  %84 = sub nsw i32 %83, 8
  %85 = sext i32 %84 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %80, i8* align 1 %82, i64 %85, i1 false)
  %86 = sub nsw i32 %1, %.02
  %87 = sub nsw i32 %86, 8
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %80, i64 %88
  %90 = getelementptr [2 x i8], [2 x i8]* @.str.23.184, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %90, i64 1, i1 false)
  %91 = getelementptr inbounds i8, i8* %89, i64 1
  %92 = getelementptr [32 x i8], [32 x i8]* @ZERO.185, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %91, i8* align 16 %92, i64 4, i1 false)
  %93 = getelementptr inbounds i8, i8* %91, i64 4
  %94 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i32 0, i32 0
  %95 = ptrtoint i8* %93 to i64
  %96 = ptrtoint i8* %94 to i64
  %97 = sub i64 %95, %96
  %98 = srem i64 %97, 4
  %99 = icmp sgt i64 %98, 0
  br i1 %99, label %100, label %108

; <label>:100:                                    ; preds = %73
  %101 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i32 0, i32 0
  %102 = ptrtoint i8* %93 to i64
  %103 = ptrtoint i8* %101 to i64
  %104 = sub i64 %102, %103
  %105 = srem i64 %104, 4
  %106 = sub nsw i64 4, %105
  %107 = getelementptr [32 x i8], [32 x i8]* @ZERO.185, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %93, i8* align 16 %107, i64 %106, i1 false)
  br label %108

; <label>:108:                                    ; preds = %100, %73
  %109 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i32 0, i32 0
  %110 = ptrtoint i8* %93 to i64
  %111 = ptrtoint i8* %109 to i64
  %112 = sub i64 %110, %111
  %113 = srem i64 %112, 4
  %114 = sub nsw i64 4, %113
  %115 = getelementptr inbounds i8, i8* %93, i64 %114
  %116 = sext i32 %1 to i64
  %117 = getelementptr inbounds i8, i8* %0, i64 %116
  %118 = getelementptr inbounds i8, i8* %117, i64 -8
  %119 = call i32 @init_michael(%struct.Michael* %9, i8* %118)
  %120 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i32 0, i32 0
  %121 = getelementptr inbounds [4096 x i8], [4096 x i8]* %8, i32 0, i32 0
  %122 = ptrtoint i8* %115 to i64
  %123 = ptrtoint i8* %121 to i64
  %124 = sub i64 %122, %123
  %125 = trunc i64 %124 to i32
  %126 = call i32 @michael_remove(%struct.Michael* %9, i8* %120, i32 %125)
  %127 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 2
  %128 = load i64, i64* %127, align 8
  %129 = lshr i64 %128, 0
  %130 = and i64 %129, 255
  %131 = trunc i64 %130 to i8
  %132 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 6
  %133 = getelementptr inbounds [8 x i8], [8 x i8]* %132, i64 0, i64 0
  store i8 %131, i8* %133, align 8
  %134 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 2
  %135 = load i64, i64* %134, align 8
  %136 = lshr i64 %135, 8
  %137 = and i64 %136, 255
  %138 = trunc i64 %137 to i8
  %139 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 6
  %140 = getelementptr inbounds [8 x i8], [8 x i8]* %139, i64 0, i64 1
  store i8 %138, i8* %140, align 1
  %141 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 2
  %142 = load i64, i64* %141, align 8
  %143 = lshr i64 %142, 16
  %144 = and i64 %143, 255
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 6
  %147 = getelementptr inbounds [8 x i8], [8 x i8]* %146, i64 0, i64 2
  store i8 %145, i8* %147, align 2
  %148 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 2
  %149 = load i64, i64* %148, align 8
  %150 = lshr i64 %149, 24
  %151 = and i64 %150, 255
  %152 = trunc i64 %151 to i8
  %153 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 6
  %154 = getelementptr inbounds [8 x i8], [8 x i8]* %153, i64 0, i64 3
  store i8 %152, i8* %154, align 1
  %155 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 3
  %156 = load i64, i64* %155, align 8
  %157 = lshr i64 %156, 0
  %158 = and i64 %157, 255
  %159 = trunc i64 %158 to i8
  %160 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 6
  %161 = getelementptr inbounds [8 x i8], [8 x i8]* %160, i64 0, i64 4
  store i8 %159, i8* %161, align 4
  %162 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 3
  %163 = load i64, i64* %162, align 8
  %164 = lshr i64 %163, 8
  %165 = and i64 %164, 255
  %166 = trunc i64 %165 to i8
  %167 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 6
  %168 = getelementptr inbounds [8 x i8], [8 x i8]* %167, i64 0, i64 5
  store i8 %166, i8* %168, align 1
  %169 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 3
  %170 = load i64, i64* %169, align 8
  %171 = lshr i64 %170, 16
  %172 = and i64 %171, 255
  %173 = trunc i64 %172 to i8
  %174 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 6
  %175 = getelementptr inbounds [8 x i8], [8 x i8]* %174, i64 0, i64 6
  store i8 %173, i8* %175, align 2
  %176 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 3
  %177 = load i64, i64* %176, align 8
  %178 = lshr i64 %177, 24
  %179 = and i64 %178, 255
  %180 = trunc i64 %179 to i8
  %181 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 6
  %182 = getelementptr inbounds [8 x i8], [8 x i8]* %181, i64 0, i64 7
  store i8 %180, i8* %182, align 1
  %183 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 6
  %184 = getelementptr inbounds [8 x i8], [8 x i8]* %183, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 8 %184, i64 8, i1 false)
  br label %185

; <label>:185:                                    ; preds = %108, %19
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @calc_tkip_mic(i8*, i32, i8*, i8*) #0 {
  %5 = alloca [6 x i8], align 1
  %6 = alloca [6 x i8], align 1
  %7 = alloca [6 x i8], align 1
  %8 = alloca [4 x i8], align 1
  %9 = alloca %struct.Michael, align 8
  %10 = getelementptr inbounds i8, i8* %0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = and i32 %12, 3
  %14 = icmp ne i32 %13, 3
  %15 = zext i1 %14 to i64
  %16 = select i1 %14, i32 24, i32 30
  %17 = icmp slt i32 %1, %16
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %4
  br label %94

; <label>:19:                                     ; preds = %4
  %20 = getelementptr inbounds i8, i8* %0, i64 0
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = and i32 %22, 128
  %24 = icmp eq i32 %23, 128
  br i1 %24, label %25, label %27

; <label>:25:                                     ; preds = %19
  %26 = add nsw i32 %16, 2
  br label %27

; <label>:27:                                     ; preds = %25, %19
  %.03 = phi i32 [ %26, %25 ], [ %16, %19 ]
  %.01 = phi i32 [ 1, %25 ], [ 0, %19 ]
  %28 = getelementptr inbounds i8, i8* %0, i64 1
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = and i32 %30, 3
  switch i32 %31, label %53 [
    i32 0, label %32
    i32 1, label %39
    i32 2, label %46
  ]

; <label>:32:                                     ; preds = %27
  %33 = getelementptr inbounds [6 x i8], [6 x i8]* %7, i32 0, i32 0
  %34 = getelementptr inbounds i8, i8* %0, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %34, i64 6, i1 false)
  %35 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %36 = getelementptr inbounds i8, i8* %0, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 %36, i64 6, i1 false)
  %37 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %38 = getelementptr inbounds i8, i8* %0, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %38, i64 6, i1 false)
  br label %60

; <label>:39:                                     ; preds = %27
  %40 = getelementptr inbounds [6 x i8], [6 x i8]* %7, i32 0, i32 0
  %41 = getelementptr inbounds i8, i8* %0, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %41, i64 6, i1 false)
  %42 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %43 = getelementptr inbounds i8, i8* %0, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %43, i64 6, i1 false)
  %44 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %45 = getelementptr inbounds i8, i8* %0, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %45, i64 6, i1 false)
  br label %60

; <label>:46:                                     ; preds = %27
  %47 = getelementptr inbounds [6 x i8], [6 x i8]* %7, i32 0, i32 0
  %48 = getelementptr inbounds i8, i8* %0, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 1 %48, i64 6, i1 false)
  %49 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %50 = getelementptr inbounds i8, i8* %0, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 1 %50, i64 6, i1 false)
  %51 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %52 = getelementptr inbounds i8, i8* %0, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %52, i64 6, i1 false)
  br label %60

; <label>:53:                                     ; preds = %27
  %54 = getelementptr inbounds [6 x i8], [6 x i8]* %7, i32 0, i32 0
  %55 = getelementptr inbounds i8, i8* %0, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %55, i64 6, i1 false)
  %56 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %57 = getelementptr inbounds i8, i8* %0, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 %57, i64 6, i1 false)
  %58 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %59 = getelementptr inbounds i8, i8* %0, i64 24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %59, i64 6, i1 false)
  br label %60

; <label>:60:                                     ; preds = %53, %46, %39, %32
  %.02 = phi i32 [ 0, %53 ], [ 48, %46 ], [ 56, %39 ], [ 0, %32 ]
  %61 = icmp ne i32 %.02, 48
  br i1 %61, label %62, label %65

; <label>:62:                                     ; preds = %60
  %63 = icmp ne i32 %.02, 56
  br i1 %63, label %64, label %65

; <label>:64:                                     ; preds = %62
  br label %94

; <label>:65:                                     ; preds = %62, %60
  %66 = sext i32 %.02 to i64
  %67 = getelementptr inbounds i8, i8* %2, i64 %66
  %68 = call i32 @init_michael(%struct.Michael* %9, i8* %67)
  %69 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %70 = call i32 @michael_append(%struct.Michael* %9, i8* %69, i32 6)
  %71 = getelementptr inbounds [6 x i8], [6 x i8]* %5, i32 0, i32 0
  %72 = call i32 @michael_append(%struct.Michael* %9, i8* %71, i32 6)
  %73 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 1 %73, i8 0, i64 4, i1 false)
  %74 = icmp ne i32 %.01, 0
  br i1 %74, label %75, label %84

; <label>:75:                                     ; preds = %65
  %76 = sub nsw i32 %.03, 2
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %0, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = and i32 %80, 15
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 0
  store i8 %82, i8* %83, align 1
  br label %84

; <label>:84:                                     ; preds = %75, %65
  %85 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i32 0, i32 0
  %86 = call i32 @michael_append(%struct.Michael* %9, i8* %85, i32 4)
  %87 = sext i32 %.03 to i64
  %88 = getelementptr inbounds i8, i8* %0, i64 %87
  %89 = sub nsw i32 %1, %.03
  %90 = call i32 @michael_append(%struct.Michael* %9, i8* %88, i32 %89)
  %91 = call i32 @michael_finalize(%struct.Michael* %9)
  %92 = getelementptr inbounds %struct.Michael, %struct.Michael* %9, i32 0, i32 6
  %93 = getelementptr inbounds [8 x i8], [8 x i8]* %92, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 8 %93, i64 8, i1 false)
  br label %94

; <label>:94:                                     ; preds = %84, %64, %18
  %.0 = phi i32 [ 0, %18 ], [ 1, %64 ], [ 0, %84 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @calc_tkip_ppk(i8*, i32, i8*, i8*) #0 {
  %5 = alloca [6 x i16], align 2
  %6 = icmp ne i32 %1, 0
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %4
  br label %8

; <label>:8:                                      ; preds = %7, %4
  %9 = getelementptr inbounds i8, i8* %0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = and i32 %11, 3
  %13 = icmp ne i32 %12, 3
  %14 = zext i1 %13 to i64
  %15 = select i1 %13, i32 24, i32 30
  %16 = getelementptr inbounds i8, i8* %0, i64 0
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = and i32 %18, 240
  %20 = ashr i32 %19, 4
  %21 = shl i32 %20, 4
  %22 = icmp eq i32 %21, 128
  br i1 %22, label %23, label %25

; <label>:23:                                     ; preds = %8
  %24 = add nsw i32 %15, 2
  br label %25

; <label>:25:                                     ; preds = %23, %8
  %.0 = phi i32 [ %24, %23 ], [ %15, %8 ]
  %26 = add nsw i32 %.0, 2
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = sext i32 %.0 to i64
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = and i32 %33, 255
  %35 = shl i32 %34, 8
  %36 = add nsw i32 %.0, 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nsw i32 %.0, 5
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = shl i32 %45, 8
  %47 = or i32 %40, %46
  %48 = add nsw i32 %.0, 6
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = shl i32 %52, 16
  %54 = or i32 %47, %53
  %55 = add nsw i32 %.0, 7
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = shl i32 %59, 24
  %61 = or i32 %54, %60
  %62 = and i32 %61, 65535
  %63 = trunc i32 %62 to i16
  %64 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 0
  store i16 %63, i16* %64, align 2
  %65 = lshr i32 %61, 16
  %66 = and i32 %65, 65535
  %67 = trunc i32 %66 to i16
  %68 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 1
  store i16 %67, i16* %68, align 2
  %69 = getelementptr inbounds i8, i8* %0, i64 10
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = getelementptr inbounds i8, i8* %0, i64 11
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = and i32 %74, 255
  %76 = shl i32 %75, 8
  %77 = xor i32 %71, %76
  %78 = trunc i32 %77 to i16
  %79 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 2
  store i16 %78, i16* %79, align 2
  %80 = getelementptr inbounds i8, i8* %0, i64 12
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = getelementptr inbounds i8, i8* %0, i64 13
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = and i32 %85, 255
  %87 = shl i32 %86, 8
  %88 = xor i32 %82, %87
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 3
  store i16 %89, i16* %90, align 2
  %91 = getelementptr inbounds i8, i8* %0, i64 14
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = getelementptr inbounds i8, i8* %0, i64 15
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = and i32 %96, 255
  %98 = shl i32 %97, 8
  %99 = xor i32 %93, %98
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 4
  store i16 %100, i16* %101, align 2
  br label %102

; <label>:102:                                    ; preds = %25, %419
  %.013 = phi i32 [ 0, %25 ], [ %420, %419 ]
  %103 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 4
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = and i32 %.013, 1
  %107 = add nsw i32 %106, 0
  %108 = mul nsw i32 2, %107
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %2, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = and i32 %.013, 1
  %114 = add nsw i32 %113, 0
  %115 = mul nsw i32 2, %114
  %116 = add nsw i32 %115, 1
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %2, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = and i32 %120, 255
  %122 = shl i32 %121, 8
  %123 = xor i32 %112, %122
  %124 = xor i32 %105, %123
  %125 = and i32 %124, 255
  %126 = sext i32 %125 to i64
  %127 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 0
  %128 = getelementptr inbounds [256 x i16], [256 x i16]* %127, i64 0, i64 %126
  %129 = load i16, i16* %128, align 2
  %130 = sext i16 %129 to i32
  %131 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 4
  %132 = load i16, i16* %131, align 2
  %133 = zext i16 %132 to i32
  %134 = and i32 %.013, 1
  %135 = add nsw i32 %134, 0
  %136 = mul nsw i32 2, %135
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i8, i8* %2, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = and i32 %.013, 1
  %142 = add nsw i32 %141, 0
  %143 = mul nsw i32 2, %142
  %144 = add nsw i32 %143, 1
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i8, i8* %2, i64 %145
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = and i32 %148, 255
  %150 = shl i32 %149, 8
  %151 = xor i32 %140, %150
  %152 = xor i32 %133, %151
  %153 = ashr i32 %152, 8
  %154 = and i32 %153, 255
  %155 = sext i32 %154 to i64
  %156 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 1
  %157 = getelementptr inbounds [256 x i16], [256 x i16]* %156, i64 0, i64 %155
  %158 = load i16, i16* %157, align 2
  %159 = sext i16 %158 to i32
  %160 = xor i32 %130, %159
  %161 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 0
  %162 = load i16, i16* %161, align 2
  %163 = zext i16 %162 to i32
  %164 = add nsw i32 %163, %160
  %165 = trunc i32 %164 to i16
  store i16 %165, i16* %161, align 2
  %166 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 0
  %167 = load i16, i16* %166, align 2
  %168 = zext i16 %167 to i32
  %169 = and i32 %.013, 1
  %170 = add nsw i32 %169, 2
  %171 = mul nsw i32 2, %170
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %2, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = and i32 %.013, 1
  %177 = add nsw i32 %176, 2
  %178 = mul nsw i32 2, %177
  %179 = add nsw i32 %178, 1
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds i8, i8* %2, i64 %180
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = and i32 %183, 255
  %185 = shl i32 %184, 8
  %186 = xor i32 %175, %185
  %187 = xor i32 %168, %186
  %188 = and i32 %187, 255
  %189 = sext i32 %188 to i64
  %190 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 0
  %191 = getelementptr inbounds [256 x i16], [256 x i16]* %190, i64 0, i64 %189
  %192 = load i16, i16* %191, align 2
  %193 = sext i16 %192 to i32
  %194 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 0
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = and i32 %.013, 1
  %198 = add nsw i32 %197, 2
  %199 = mul nsw i32 2, %198
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds i8, i8* %2, i64 %200
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i32
  %204 = and i32 %.013, 1
  %205 = add nsw i32 %204, 2
  %206 = mul nsw i32 2, %205
  %207 = add nsw i32 %206, 1
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i8, i8* %2, i64 %208
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i32
  %212 = and i32 %211, 255
  %213 = shl i32 %212, 8
  %214 = xor i32 %203, %213
  %215 = xor i32 %196, %214
  %216 = ashr i32 %215, 8
  %217 = and i32 %216, 255
  %218 = sext i32 %217 to i64
  %219 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 1
  %220 = getelementptr inbounds [256 x i16], [256 x i16]* %219, i64 0, i64 %218
  %221 = load i16, i16* %220, align 2
  %222 = sext i16 %221 to i32
  %223 = xor i32 %193, %222
  %224 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 1
  %225 = load i16, i16* %224, align 2
  %226 = zext i16 %225 to i32
  %227 = add nsw i32 %226, %223
  %228 = trunc i32 %227 to i16
  store i16 %228, i16* %224, align 2
  %229 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 1
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = and i32 %.013, 1
  %233 = add nsw i32 %232, 4
  %234 = mul nsw i32 2, %233
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds i8, i8* %2, i64 %235
  %237 = load i8, i8* %236, align 1
  %238 = zext i8 %237 to i32
  %239 = and i32 %.013, 1
  %240 = add nsw i32 %239, 4
  %241 = mul nsw i32 2, %240
  %242 = add nsw i32 %241, 1
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds i8, i8* %2, i64 %243
  %245 = load i8, i8* %244, align 1
  %246 = zext i8 %245 to i32
  %247 = and i32 %246, 255
  %248 = shl i32 %247, 8
  %249 = xor i32 %238, %248
  %250 = xor i32 %231, %249
  %251 = and i32 %250, 255
  %252 = sext i32 %251 to i64
  %253 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 0
  %254 = getelementptr inbounds [256 x i16], [256 x i16]* %253, i64 0, i64 %252
  %255 = load i16, i16* %254, align 2
  %256 = sext i16 %255 to i32
  %257 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 1
  %258 = load i16, i16* %257, align 2
  %259 = zext i16 %258 to i32
  %260 = and i32 %.013, 1
  %261 = add nsw i32 %260, 4
  %262 = mul nsw i32 2, %261
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i8, i8* %2, i64 %263
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i32
  %267 = and i32 %.013, 1
  %268 = add nsw i32 %267, 4
  %269 = mul nsw i32 2, %268
  %270 = add nsw i32 %269, 1
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds i8, i8* %2, i64 %271
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i32
  %275 = and i32 %274, 255
  %276 = shl i32 %275, 8
  %277 = xor i32 %266, %276
  %278 = xor i32 %259, %277
  %279 = ashr i32 %278, 8
  %280 = and i32 %279, 255
  %281 = sext i32 %280 to i64
  %282 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 1
  %283 = getelementptr inbounds [256 x i16], [256 x i16]* %282, i64 0, i64 %281
  %284 = load i16, i16* %283, align 2
  %285 = sext i16 %284 to i32
  %286 = xor i32 %256, %285
  %287 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 2
  %288 = load i16, i16* %287, align 2
  %289 = zext i16 %288 to i32
  %290 = add nsw i32 %289, %286
  %291 = trunc i32 %290 to i16
  store i16 %291, i16* %287, align 2
  %292 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 2
  %293 = load i16, i16* %292, align 2
  %294 = zext i16 %293 to i32
  %295 = and i32 %.013, 1
  %296 = add nsw i32 %295, 6
  %297 = mul nsw i32 2, %296
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds i8, i8* %2, i64 %298
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i32
  %302 = and i32 %.013, 1
  %303 = add nsw i32 %302, 6
  %304 = mul nsw i32 2, %303
  %305 = add nsw i32 %304, 1
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i8, i8* %2, i64 %306
  %308 = load i8, i8* %307, align 1
  %309 = zext i8 %308 to i32
  %310 = and i32 %309, 255
  %311 = shl i32 %310, 8
  %312 = xor i32 %301, %311
  %313 = xor i32 %294, %312
  %314 = and i32 %313, 255
  %315 = sext i32 %314 to i64
  %316 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 0
  %317 = getelementptr inbounds [256 x i16], [256 x i16]* %316, i64 0, i64 %315
  %318 = load i16, i16* %317, align 2
  %319 = sext i16 %318 to i32
  %320 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 2
  %321 = load i16, i16* %320, align 2
  %322 = zext i16 %321 to i32
  %323 = and i32 %.013, 1
  %324 = add nsw i32 %323, 6
  %325 = mul nsw i32 2, %324
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds i8, i8* %2, i64 %326
  %328 = load i8, i8* %327, align 1
  %329 = zext i8 %328 to i32
  %330 = and i32 %.013, 1
  %331 = add nsw i32 %330, 6
  %332 = mul nsw i32 2, %331
  %333 = add nsw i32 %332, 1
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds i8, i8* %2, i64 %334
  %336 = load i8, i8* %335, align 1
  %337 = zext i8 %336 to i32
  %338 = and i32 %337, 255
  %339 = shl i32 %338, 8
  %340 = xor i32 %329, %339
  %341 = xor i32 %322, %340
  %342 = ashr i32 %341, 8
  %343 = and i32 %342, 255
  %344 = sext i32 %343 to i64
  %345 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 1
  %346 = getelementptr inbounds [256 x i16], [256 x i16]* %345, i64 0, i64 %344
  %347 = load i16, i16* %346, align 2
  %348 = sext i16 %347 to i32
  %349 = xor i32 %319, %348
  %350 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 3
  %351 = load i16, i16* %350, align 2
  %352 = zext i16 %351 to i32
  %353 = add nsw i32 %352, %349
  %354 = trunc i32 %353 to i16
  store i16 %354, i16* %350, align 2
  %355 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 3
  %356 = load i16, i16* %355, align 2
  %357 = zext i16 %356 to i32
  %358 = and i32 %.013, 1
  %359 = add nsw i32 %358, 0
  %360 = mul nsw i32 2, %359
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds i8, i8* %2, i64 %361
  %363 = load i8, i8* %362, align 1
  %364 = zext i8 %363 to i32
  %365 = and i32 %.013, 1
  %366 = add nsw i32 %365, 0
  %367 = mul nsw i32 2, %366
  %368 = add nsw i32 %367, 1
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds i8, i8* %2, i64 %369
  %371 = load i8, i8* %370, align 1
  %372 = zext i8 %371 to i32
  %373 = and i32 %372, 255
  %374 = shl i32 %373, 8
  %375 = xor i32 %364, %374
  %376 = xor i32 %357, %375
  %377 = and i32 %376, 255
  %378 = sext i32 %377 to i64
  %379 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 0
  %380 = getelementptr inbounds [256 x i16], [256 x i16]* %379, i64 0, i64 %378
  %381 = load i16, i16* %380, align 2
  %382 = sext i16 %381 to i32
  %383 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 3
  %384 = load i16, i16* %383, align 2
  %385 = zext i16 %384 to i32
  %386 = and i32 %.013, 1
  %387 = add nsw i32 %386, 0
  %388 = mul nsw i32 2, %387
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds i8, i8* %2, i64 %389
  %391 = load i8, i8* %390, align 1
  %392 = zext i8 %391 to i32
  %393 = and i32 %.013, 1
  %394 = add nsw i32 %393, 0
  %395 = mul nsw i32 2, %394
  %396 = add nsw i32 %395, 1
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds i8, i8* %2, i64 %397
  %399 = load i8, i8* %398, align 1
  %400 = zext i8 %399 to i32
  %401 = and i32 %400, 255
  %402 = shl i32 %401, 8
  %403 = xor i32 %392, %402
  %404 = xor i32 %385, %403
  %405 = ashr i32 %404, 8
  %406 = and i32 %405, 255
  %407 = sext i32 %406 to i64
  %408 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 1
  %409 = getelementptr inbounds [256 x i16], [256 x i16]* %408, i64 0, i64 %407
  %410 = load i16, i16* %409, align 2
  %411 = sext i16 %410 to i32
  %412 = xor i32 %382, %411
  %413 = add nsw i32 %412, %.013
  %414 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 4
  %415 = load i16, i16* %414, align 2
  %416 = zext i16 %415 to i32
  %417 = add nsw i32 %416, %413
  %418 = trunc i32 %417 to i16
  store i16 %418, i16* %414, align 2
  br label %419

; <label>:419:                                    ; preds = %102
  %420 = add nuw nsw i32 %.013, 1
  %exitcond4 = icmp ne i32 %420, 8
  br i1 %exitcond4, label %102, label %421

; <label>:421:                                    ; preds = %419
  %422 = zext i8 %29 to i32
  %423 = xor i32 %422, %35
  %424 = trunc i32 %423 to i16
  %425 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 4
  %426 = load i16, i16* %425, align 2
  %427 = zext i16 %426 to i32
  %428 = zext i16 %424 to i32
  %429 = add nsw i32 %427, %428
  %430 = trunc i32 %429 to i16
  %431 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 5
  store i16 %430, i16* %431, align 2
  %432 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 5
  %433 = load i16, i16* %432, align 2
  %434 = zext i16 %433 to i32
  %435 = getelementptr inbounds i8, i8* %2, i64 0
  %436 = load i8, i8* %435, align 1
  %437 = zext i8 %436 to i32
  %438 = getelementptr inbounds i8, i8* %2, i64 1
  %439 = load i8, i8* %438, align 1
  %440 = zext i8 %439 to i32
  %441 = and i32 %440, 255
  %442 = shl i32 %441, 8
  %443 = xor i32 %437, %442
  %444 = xor i32 %434, %443
  %445 = and i32 %444, 255
  %446 = sext i32 %445 to i64
  %447 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 0
  %448 = getelementptr inbounds [256 x i16], [256 x i16]* %447, i64 0, i64 %446
  %449 = load i16, i16* %448, align 2
  %450 = sext i16 %449 to i32
  %451 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 5
  %452 = load i16, i16* %451, align 2
  %453 = zext i16 %452 to i32
  %454 = getelementptr inbounds i8, i8* %2, i64 0
  %455 = load i8, i8* %454, align 1
  %456 = zext i8 %455 to i32
  %457 = getelementptr inbounds i8, i8* %2, i64 1
  %458 = load i8, i8* %457, align 1
  %459 = zext i8 %458 to i32
  %460 = and i32 %459, 255
  %461 = shl i32 %460, 8
  %462 = xor i32 %456, %461
  %463 = xor i32 %453, %462
  %464 = ashr i32 %463, 8
  %465 = and i32 %464, 255
  %466 = sext i32 %465 to i64
  %467 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 1
  %468 = getelementptr inbounds [256 x i16], [256 x i16]* %467, i64 0, i64 %466
  %469 = load i16, i16* %468, align 2
  %470 = sext i16 %469 to i32
  %471 = xor i32 %450, %470
  %472 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 0
  %473 = load i16, i16* %472, align 2
  %474 = zext i16 %473 to i32
  %475 = add nsw i32 %474, %471
  %476 = trunc i32 %475 to i16
  store i16 %476, i16* %472, align 2
  %477 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 0
  %478 = load i16, i16* %477, align 2
  %479 = zext i16 %478 to i32
  %480 = getelementptr inbounds i8, i8* %2, i64 2
  %481 = load i8, i8* %480, align 1
  %482 = zext i8 %481 to i32
  %483 = getelementptr inbounds i8, i8* %2, i64 3
  %484 = load i8, i8* %483, align 1
  %485 = zext i8 %484 to i32
  %486 = and i32 %485, 255
  %487 = shl i32 %486, 8
  %488 = xor i32 %482, %487
  %489 = xor i32 %479, %488
  %490 = and i32 %489, 255
  %491 = sext i32 %490 to i64
  %492 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 0
  %493 = getelementptr inbounds [256 x i16], [256 x i16]* %492, i64 0, i64 %491
  %494 = load i16, i16* %493, align 2
  %495 = sext i16 %494 to i32
  %496 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 0
  %497 = load i16, i16* %496, align 2
  %498 = zext i16 %497 to i32
  %499 = getelementptr inbounds i8, i8* %2, i64 2
  %500 = load i8, i8* %499, align 1
  %501 = zext i8 %500 to i32
  %502 = getelementptr inbounds i8, i8* %2, i64 3
  %503 = load i8, i8* %502, align 1
  %504 = zext i8 %503 to i32
  %505 = and i32 %504, 255
  %506 = shl i32 %505, 8
  %507 = xor i32 %501, %506
  %508 = xor i32 %498, %507
  %509 = ashr i32 %508, 8
  %510 = and i32 %509, 255
  %511 = sext i32 %510 to i64
  %512 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 1
  %513 = getelementptr inbounds [256 x i16], [256 x i16]* %512, i64 0, i64 %511
  %514 = load i16, i16* %513, align 2
  %515 = sext i16 %514 to i32
  %516 = xor i32 %495, %515
  %517 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 1
  %518 = load i16, i16* %517, align 2
  %519 = zext i16 %518 to i32
  %520 = add nsw i32 %519, %516
  %521 = trunc i32 %520 to i16
  store i16 %521, i16* %517, align 2
  %522 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 1
  %523 = load i16, i16* %522, align 2
  %524 = zext i16 %523 to i32
  %525 = getelementptr inbounds i8, i8* %2, i64 4
  %526 = load i8, i8* %525, align 1
  %527 = zext i8 %526 to i32
  %528 = getelementptr inbounds i8, i8* %2, i64 5
  %529 = load i8, i8* %528, align 1
  %530 = zext i8 %529 to i32
  %531 = and i32 %530, 255
  %532 = shl i32 %531, 8
  %533 = xor i32 %527, %532
  %534 = xor i32 %524, %533
  %535 = and i32 %534, 255
  %536 = sext i32 %535 to i64
  %537 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 0
  %538 = getelementptr inbounds [256 x i16], [256 x i16]* %537, i64 0, i64 %536
  %539 = load i16, i16* %538, align 2
  %540 = sext i16 %539 to i32
  %541 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 1
  %542 = load i16, i16* %541, align 2
  %543 = zext i16 %542 to i32
  %544 = getelementptr inbounds i8, i8* %2, i64 4
  %545 = load i8, i8* %544, align 1
  %546 = zext i8 %545 to i32
  %547 = getelementptr inbounds i8, i8* %2, i64 5
  %548 = load i8, i8* %547, align 1
  %549 = zext i8 %548 to i32
  %550 = and i32 %549, 255
  %551 = shl i32 %550, 8
  %552 = xor i32 %546, %551
  %553 = xor i32 %543, %552
  %554 = ashr i32 %553, 8
  %555 = and i32 %554, 255
  %556 = sext i32 %555 to i64
  %557 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 1
  %558 = getelementptr inbounds [256 x i16], [256 x i16]* %557, i64 0, i64 %556
  %559 = load i16, i16* %558, align 2
  %560 = sext i16 %559 to i32
  %561 = xor i32 %540, %560
  %562 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 2
  %563 = load i16, i16* %562, align 2
  %564 = zext i16 %563 to i32
  %565 = add nsw i32 %564, %561
  %566 = trunc i32 %565 to i16
  store i16 %566, i16* %562, align 2
  %567 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 2
  %568 = load i16, i16* %567, align 2
  %569 = zext i16 %568 to i32
  %570 = getelementptr inbounds i8, i8* %2, i64 6
  %571 = load i8, i8* %570, align 1
  %572 = zext i8 %571 to i32
  %573 = getelementptr inbounds i8, i8* %2, i64 7
  %574 = load i8, i8* %573, align 1
  %575 = zext i8 %574 to i32
  %576 = and i32 %575, 255
  %577 = shl i32 %576, 8
  %578 = xor i32 %572, %577
  %579 = xor i32 %569, %578
  %580 = and i32 %579, 255
  %581 = sext i32 %580 to i64
  %582 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 0
  %583 = getelementptr inbounds [256 x i16], [256 x i16]* %582, i64 0, i64 %581
  %584 = load i16, i16* %583, align 2
  %585 = sext i16 %584 to i32
  %586 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 2
  %587 = load i16, i16* %586, align 2
  %588 = zext i16 %587 to i32
  %589 = getelementptr inbounds i8, i8* %2, i64 6
  %590 = load i8, i8* %589, align 1
  %591 = zext i8 %590 to i32
  %592 = getelementptr inbounds i8, i8* %2, i64 7
  %593 = load i8, i8* %592, align 1
  %594 = zext i8 %593 to i32
  %595 = and i32 %594, 255
  %596 = shl i32 %595, 8
  %597 = xor i32 %591, %596
  %598 = xor i32 %588, %597
  %599 = ashr i32 %598, 8
  %600 = and i32 %599, 255
  %601 = sext i32 %600 to i64
  %602 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 1
  %603 = getelementptr inbounds [256 x i16], [256 x i16]* %602, i64 0, i64 %601
  %604 = load i16, i16* %603, align 2
  %605 = sext i16 %604 to i32
  %606 = xor i32 %585, %605
  %607 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 3
  %608 = load i16, i16* %607, align 2
  %609 = zext i16 %608 to i32
  %610 = add nsw i32 %609, %606
  %611 = trunc i32 %610 to i16
  store i16 %611, i16* %607, align 2
  %612 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 3
  %613 = load i16, i16* %612, align 2
  %614 = zext i16 %613 to i32
  %615 = getelementptr inbounds i8, i8* %2, i64 8
  %616 = load i8, i8* %615, align 1
  %617 = zext i8 %616 to i32
  %618 = getelementptr inbounds i8, i8* %2, i64 9
  %619 = load i8, i8* %618, align 1
  %620 = zext i8 %619 to i32
  %621 = and i32 %620, 255
  %622 = shl i32 %621, 8
  %623 = xor i32 %617, %622
  %624 = xor i32 %614, %623
  %625 = and i32 %624, 255
  %626 = sext i32 %625 to i64
  %627 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 0
  %628 = getelementptr inbounds [256 x i16], [256 x i16]* %627, i64 0, i64 %626
  %629 = load i16, i16* %628, align 2
  %630 = sext i16 %629 to i32
  %631 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 3
  %632 = load i16, i16* %631, align 2
  %633 = zext i16 %632 to i32
  %634 = getelementptr inbounds i8, i8* %2, i64 8
  %635 = load i8, i8* %634, align 1
  %636 = zext i8 %635 to i32
  %637 = getelementptr inbounds i8, i8* %2, i64 9
  %638 = load i8, i8* %637, align 1
  %639 = zext i8 %638 to i32
  %640 = and i32 %639, 255
  %641 = shl i32 %640, 8
  %642 = xor i32 %636, %641
  %643 = xor i32 %633, %642
  %644 = ashr i32 %643, 8
  %645 = and i32 %644, 255
  %646 = sext i32 %645 to i64
  %647 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 1
  %648 = getelementptr inbounds [256 x i16], [256 x i16]* %647, i64 0, i64 %646
  %649 = load i16, i16* %648, align 2
  %650 = sext i16 %649 to i32
  %651 = xor i32 %630, %650
  %652 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 4
  %653 = load i16, i16* %652, align 2
  %654 = zext i16 %653 to i32
  %655 = add nsw i32 %654, %651
  %656 = trunc i32 %655 to i16
  store i16 %656, i16* %652, align 2
  %657 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 4
  %658 = load i16, i16* %657, align 2
  %659 = zext i16 %658 to i32
  %660 = getelementptr inbounds i8, i8* %2, i64 10
  %661 = load i8, i8* %660, align 1
  %662 = zext i8 %661 to i32
  %663 = getelementptr inbounds i8, i8* %2, i64 11
  %664 = load i8, i8* %663, align 1
  %665 = zext i8 %664 to i32
  %666 = and i32 %665, 255
  %667 = shl i32 %666, 8
  %668 = xor i32 %662, %667
  %669 = xor i32 %659, %668
  %670 = and i32 %669, 255
  %671 = sext i32 %670 to i64
  %672 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 0
  %673 = getelementptr inbounds [256 x i16], [256 x i16]* %672, i64 0, i64 %671
  %674 = load i16, i16* %673, align 2
  %675 = sext i16 %674 to i32
  %676 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 4
  %677 = load i16, i16* %676, align 2
  %678 = zext i16 %677 to i32
  %679 = getelementptr inbounds i8, i8* %2, i64 10
  %680 = load i8, i8* %679, align 1
  %681 = zext i8 %680 to i32
  %682 = getelementptr inbounds i8, i8* %2, i64 11
  %683 = load i8, i8* %682, align 1
  %684 = zext i8 %683 to i32
  %685 = and i32 %684, 255
  %686 = shl i32 %685, 8
  %687 = xor i32 %681, %686
  %688 = xor i32 %678, %687
  %689 = ashr i32 %688, 8
  %690 = and i32 %689, 255
  %691 = sext i32 %690 to i64
  %692 = getelementptr [2 x [256 x i16]], [2 x [256 x i16]]* @TkipSbox, i64 0, i64 1
  %693 = getelementptr inbounds [256 x i16], [256 x i16]* %692, i64 0, i64 %691
  %694 = load i16, i16* %693, align 2
  %695 = sext i16 %694 to i32
  %696 = xor i32 %675, %695
  %697 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 5
  %698 = load i16, i16* %697, align 2
  %699 = zext i16 %698 to i32
  %700 = add nsw i32 %699, %696
  %701 = trunc i32 %700 to i16
  store i16 %701, i16* %697, align 2
  %702 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 5
  %703 = load i16, i16* %702, align 2
  %704 = zext i16 %703 to i32
  %705 = getelementptr inbounds i8, i8* %2, i64 12
  %706 = load i8, i8* %705, align 1
  %707 = zext i8 %706 to i32
  %708 = getelementptr inbounds i8, i8* %2, i64 13
  %709 = load i8, i8* %708, align 1
  %710 = zext i8 %709 to i32
  %711 = and i32 %710, 255
  %712 = shl i32 %711, 8
  %713 = xor i32 %707, %712
  %714 = xor i32 %704, %713
  %715 = ashr i32 %714, 1
  %716 = and i32 %715, 32767
  %717 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 5
  %718 = load i16, i16* %717, align 2
  %719 = zext i16 %718 to i32
  %720 = getelementptr inbounds i8, i8* %2, i64 12
  %721 = load i8, i8* %720, align 1
  %722 = zext i8 %721 to i32
  %723 = getelementptr inbounds i8, i8* %2, i64 13
  %724 = load i8, i8* %723, align 1
  %725 = zext i8 %724 to i32
  %726 = and i32 %725, 255
  %727 = shl i32 %726, 8
  %728 = xor i32 %722, %727
  %729 = xor i32 %719, %728
  %730 = and i32 %729, 1
  %731 = shl i32 %730, 15
  %732 = xor i32 %716, %731
  %733 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 0
  %734 = load i16, i16* %733, align 2
  %735 = zext i16 %734 to i32
  %736 = add nsw i32 %735, %732
  %737 = trunc i32 %736 to i16
  store i16 %737, i16* %733, align 2
  %738 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 0
  %739 = load i16, i16* %738, align 2
  %740 = zext i16 %739 to i32
  %741 = getelementptr inbounds i8, i8* %2, i64 14
  %742 = load i8, i8* %741, align 1
  %743 = zext i8 %742 to i32
  %744 = getelementptr inbounds i8, i8* %2, i64 15
  %745 = load i8, i8* %744, align 1
  %746 = zext i8 %745 to i32
  %747 = and i32 %746, 255
  %748 = shl i32 %747, 8
  %749 = xor i32 %743, %748
  %750 = xor i32 %740, %749
  %751 = ashr i32 %750, 1
  %752 = and i32 %751, 32767
  %753 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 0
  %754 = load i16, i16* %753, align 2
  %755 = zext i16 %754 to i32
  %756 = getelementptr inbounds i8, i8* %2, i64 14
  %757 = load i8, i8* %756, align 1
  %758 = zext i8 %757 to i32
  %759 = getelementptr inbounds i8, i8* %2, i64 15
  %760 = load i8, i8* %759, align 1
  %761 = zext i8 %760 to i32
  %762 = and i32 %761, 255
  %763 = shl i32 %762, 8
  %764 = xor i32 %758, %763
  %765 = xor i32 %755, %764
  %766 = and i32 %765, 1
  %767 = shl i32 %766, 15
  %768 = xor i32 %752, %767
  %769 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 1
  %770 = load i16, i16* %769, align 2
  %771 = zext i16 %770 to i32
  %772 = add nsw i32 %771, %768
  %773 = trunc i32 %772 to i16
  store i16 %773, i16* %769, align 2
  %774 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 1
  %775 = load i16, i16* %774, align 2
  %776 = zext i16 %775 to i32
  %777 = ashr i32 %776, 1
  %778 = and i32 %777, 32767
  %779 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 1
  %780 = load i16, i16* %779, align 2
  %781 = zext i16 %780 to i32
  %782 = and i32 %781, 1
  %783 = shl i32 %782, 15
  %784 = xor i32 %778, %783
  %785 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 2
  %786 = load i16, i16* %785, align 2
  %787 = zext i16 %786 to i32
  %788 = add nsw i32 %787, %784
  %789 = trunc i32 %788 to i16
  store i16 %789, i16* %785, align 2
  %790 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 2
  %791 = load i16, i16* %790, align 2
  %792 = zext i16 %791 to i32
  %793 = ashr i32 %792, 1
  %794 = and i32 %793, 32767
  %795 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 2
  %796 = load i16, i16* %795, align 2
  %797 = zext i16 %796 to i32
  %798 = and i32 %797, 1
  %799 = shl i32 %798, 15
  %800 = xor i32 %794, %799
  %801 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 3
  %802 = load i16, i16* %801, align 2
  %803 = zext i16 %802 to i32
  %804 = add nsw i32 %803, %800
  %805 = trunc i32 %804 to i16
  store i16 %805, i16* %801, align 2
  %806 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 3
  %807 = load i16, i16* %806, align 2
  %808 = zext i16 %807 to i32
  %809 = ashr i32 %808, 1
  %810 = and i32 %809, 32767
  %811 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 3
  %812 = load i16, i16* %811, align 2
  %813 = zext i16 %812 to i32
  %814 = and i32 %813, 1
  %815 = shl i32 %814, 15
  %816 = xor i32 %810, %815
  %817 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 4
  %818 = load i16, i16* %817, align 2
  %819 = zext i16 %818 to i32
  %820 = add nsw i32 %819, %816
  %821 = trunc i32 %820 to i16
  store i16 %821, i16* %817, align 2
  %822 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 4
  %823 = load i16, i16* %822, align 2
  %824 = zext i16 %823 to i32
  %825 = ashr i32 %824, 1
  %826 = and i32 %825, 32767
  %827 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 4
  %828 = load i16, i16* %827, align 2
  %829 = zext i16 %828 to i32
  %830 = and i32 %829, 1
  %831 = shl i32 %830, 15
  %832 = xor i32 %826, %831
  %833 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 5
  %834 = load i16, i16* %833, align 2
  %835 = zext i16 %834 to i32
  %836 = add nsw i32 %835, %832
  %837 = trunc i32 %836 to i16
  store i16 %837, i16* %833, align 2
  %838 = zext i16 %424 to i32
  %839 = ashr i32 %838, 8
  %840 = and i32 %839, 255
  %841 = trunc i32 %840 to i8
  %842 = getelementptr inbounds i8, i8* %3, i64 0
  store i8 %841, i8* %842, align 1
  %843 = zext i16 %424 to i32
  %844 = ashr i32 %843, 8
  %845 = and i32 %844, 255
  %846 = or i32 %845, 32
  %847 = and i32 %846, 127
  %848 = trunc i32 %847 to i8
  %849 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 %848, i8* %849, align 1
  %850 = zext i16 %424 to i32
  %851 = and i32 %850, 255
  %852 = trunc i32 %851 to i8
  %853 = getelementptr inbounds i8, i8* %3, i64 2
  store i8 %852, i8* %853, align 1
  %854 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 5
  %855 = load i16, i16* %854, align 2
  %856 = zext i16 %855 to i32
  %857 = getelementptr inbounds i8, i8* %2, i64 0
  %858 = load i8, i8* %857, align 1
  %859 = zext i8 %858 to i32
  %860 = getelementptr inbounds i8, i8* %2, i64 1
  %861 = load i8, i8* %860, align 1
  %862 = zext i8 %861 to i32
  %863 = and i32 %862, 255
  %864 = shl i32 %863, 8
  %865 = xor i32 %859, %864
  %866 = xor i32 %856, %865
  %867 = ashr i32 %866, 1
  %868 = and i32 %867, 255
  %869 = trunc i32 %868 to i8
  %870 = getelementptr inbounds i8, i8* %3, i64 3
  store i8 %869, i8* %870, align 1
  br label %871

; <label>:871:                                    ; preds = %421, %889
  %indvars.iv = phi i64 [ 0, %421 ], [ %indvars.iv.next, %889 ]
  %872 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 %indvars.iv
  %873 = load i16, i16* %872, align 2
  %874 = zext i16 %873 to i32
  %875 = and i32 %874, 255
  %876 = trunc i32 %875 to i8
  %877 = mul nuw nsw i64 2, %indvars.iv
  %878 = add nuw nsw i64 4, %877
  %879 = getelementptr inbounds i8, i8* %3, i64 %878
  store i8 %876, i8* %879, align 1
  %880 = getelementptr inbounds [6 x i16], [6 x i16]* %5, i64 0, i64 %indvars.iv
  %881 = load i16, i16* %880, align 2
  %882 = zext i16 %881 to i32
  %883 = ashr i32 %882, 8
  %884 = and i32 %883, 255
  %885 = trunc i32 %884 to i8
  %886 = mul nuw nsw i64 2, %indvars.iv
  %887 = add nuw nsw i64 5, %886
  %888 = getelementptr inbounds i8, i8* %3, i64 %887
  store i8 %885, i8* %888, align 1
  br label %889

; <label>:889:                                    ; preds = %871
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 6
  br i1 %exitcond, label %871, label %890

; <label>:890:                                    ; preds = %889
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @decrypt_tkip(i8*, i32, i8*) #0 {
  %4 = alloca [16 x i8], align 16
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = and i32 %7, 3
  %9 = icmp ne i32 %8, 3
  %10 = zext i1 %9 to i64
  %11 = select i1 %9, i32 24, i32 30
  %12 = getelementptr inbounds i8, i8* %0, i64 0
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = and i32 %14, 240
  %16 = ashr i32 %15, 4
  %17 = shl i32 %16, 4
  %18 = icmp eq i32 %17, 128
  br i1 %18, label %19, label %21

; <label>:19:                                     ; preds = %3
  %20 = add nsw i32 %11, 2
  br label %21

; <label>:21:                                     ; preds = %19, %3
  %.0 = phi i32 [ %20, %19 ], [ %11, %3 ]
  %22 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i32 0, i32 0
  %23 = call i32 @calc_tkip_ppk(i8* %0, i32 %1, i8* %2, i8* %22)
  %24 = sext i32 %.0 to i64
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = getelementptr inbounds i8, i8* %25, i64 8
  %27 = sub nsw i32 %1, %.0
  %28 = sub nsw i32 %27, 8
  %29 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i32 0, i32 0
  %30 = call i32 @decrypt_wep(i8* %26, i32 %28, i8* %29, i32 16)
  ret i32 %30
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @decrypt_ccmp(i8*, i32, i8*) #0 {
  %4 = alloca [16 x i8], align 16
  %5 = alloca [16 x i8], align 16
  %6 = alloca [16 x i8], align 16
  %7 = alloca [6 x i8], align 1
  %8 = alloca [32 x i8], align 16
  %9 = alloca %struct.aes_key_st, align 4
  %10 = getelementptr inbounds i8, i8* %0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = and i32 %12, 3
  %14 = icmp eq i32 %13, 3
  %15 = zext i1 %14 to i32
  %16 = mul nsw i32 6, %15
  %17 = add nsw i32 24, %16
  %18 = add nsw i32 %17, 7
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds [6 x i8], [6 x i8]* %7, i64 0, i64 0
  store i8 %21, i8* %22, align 1
  %23 = add nsw i32 %17, 6
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = getelementptr inbounds [6 x i8], [6 x i8]* %7, i64 0, i64 1
  store i8 %26, i8* %27, align 1
  %28 = add nsw i32 %17, 5
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds [6 x i8], [6 x i8]* %7, i64 0, i64 2
  store i8 %31, i8* %32, align 1
  %33 = add nsw i32 %17, 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds [6 x i8], [6 x i8]* %7, i64 0, i64 3
  store i8 %36, i8* %37, align 1
  %38 = add nsw i32 %17, 1
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [6 x i8], [6 x i8]* %7, i64 0, i64 4
  store i8 %41, i8* %42, align 1
  %43 = add nsw i32 %17, 0
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %0, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = getelementptr inbounds [6 x i8], [6 x i8]* %7, i64 0, i64 5
  store i8 %46, i8* %47, align 1
  %48 = sub nsw i32 %1, %17
  %49 = sub nsw i32 %48, 8
  %50 = sub nsw i32 %49, 8
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 0
  store i8 89, i8* %51, align 16
  %52 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 1
  store i8 0, i8* %52, align 1
  %53 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i32 0, i32 0
  %54 = getelementptr inbounds i8, i8* %53, i64 2
  %55 = getelementptr inbounds i8, i8* %0, i64 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %55, i64 6, i1 false)
  %56 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i32 0, i32 0
  %57 = getelementptr inbounds i8, i8* %56, i64 8
  %58 = getelementptr inbounds [6 x i8], [6 x i8]* %7, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %58, i64 6, i1 false)
  %59 = ashr i32 %50, 8
  %60 = and i32 %59, 255
  %61 = trunc i32 %60 to i8
  %62 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 14
  store i8 %61, i8* %62, align 2
  %63 = and i32 %50, 255
  %64 = trunc i32 %63 to i8
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 15
  store i8 %64, i8* %65, align 1
  %66 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %66, i8 0, i64 32, i1 false)
  %67 = mul nsw i32 6, %15
  %68 = add nsw i32 22, %67
  %69 = trunc i32 %68 to i8
  %70 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 1
  store i8 %69, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %0, i64 0
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = and i32 %73, 143
  %75 = trunc i32 %74 to i8
  %76 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 2
  store i8 %75, i8* %76, align 2
  %77 = getelementptr inbounds i8, i8* %0, i64 1
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = and i32 %79, 199
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 3
  store i8 %81, i8* %82, align 1
  %83 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i32 0, i32 0
  %84 = getelementptr inbounds i8, i8* %83, i64 4
  %85 = getelementptr inbounds i8, i8* %0, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %85, i64 18, i1 false)
  %86 = getelementptr inbounds i8, i8* %0, i64 22
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = and i32 %88, 15
  %90 = trunc i32 %89 to i8
  %91 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 22
  store i8 %90, i8* %91, align 2
  %92 = icmp ne i32 %15, 0
  br i1 %92, label %93, label %97

; <label>:93:                                     ; preds = %3
  %94 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i32 0, i32 0
  %95 = getelementptr inbounds i8, i8* %94, i64 24
  %96 = getelementptr inbounds i8, i8* %0, i64 24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %95, i8* align 1 %96, i64 6, i1 false)
  br label %97

; <label>:97:                                     ; preds = %93, %3
  %98 = call i32 @AES_set_encrypt_key(i8* %2, i32 128, %struct.aes_key_st* %9)
  %99 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i32 0, i32 0
  %100 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @AES_encrypt(i8* %99, i8* %100, %struct.aes_key_st* %9)
  %101 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  %102 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i32 0, i32 0
  call void @XOR(i8* %101, i8* %102, i32 16)
  %103 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  %104 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @AES_encrypt(i8* %103, i8* %104, %struct.aes_key_st* %9)
  %105 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  %106 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i32 0, i32 0
  %107 = getelementptr inbounds i8, i8* %106, i64 16
  call void @XOR(i8* %105, i8* %107, i32 16)
  %108 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  %109 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @AES_encrypt(i8* %108, i8* %109, %struct.aes_key_st* %9)
  %110 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 0
  %111 = load i8, i8* %110, align 16
  %112 = zext i8 %111 to i32
  %113 = and i32 %112, 7
  %114 = trunc i32 %113 to i8
  store i8 %114, i8* %110, align 16
  %115 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 15
  store i8 0, i8* %115, align 1
  %116 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 14
  store i8 0, i8* %116, align 2
  %117 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i32 0, i32 0
  %118 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i32 0, i32 0
  call void @AES_encrypt(i8* %117, i8* %118, %struct.aes_key_st* %9)
  %119 = sext i32 %1 to i64
  %120 = getelementptr inbounds i8, i8* %0, i64 %119
  %121 = getelementptr inbounds i8, i8* %120, i64 -8
  %122 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i32 0, i32 0
  call void @XOR(i8* %121, i8* %122, i32 8)
  %123 = add nsw i32 %50, 16
  %124 = sub nsw i32 %123, 1
  %125 = sdiv i32 %124, 16
  %126 = srem i32 %50, 16
  %127 = add nsw i32 %17, 8
  %128 = icmp sle i32 1, %125
  br i1 %128, label %.lr.ph, label %158

.lr.ph:                                           ; preds = %97
  br label %129

; <label>:129:                                    ; preds = %.lr.ph, %155
  %.03 = phi i32 [ %127, %.lr.ph ], [ %154, %155 ]
  %.012 = phi i32 [ 1, %.lr.ph ], [ %156, %155 ]
  %130 = icmp sgt i32 %126, 0
  br i1 %130, label %131, label %134

; <label>:131:                                    ; preds = %129
  %132 = icmp eq i32 %.012, %125
  br i1 %132, label %133, label %134

; <label>:133:                                    ; preds = %131
  br label %135

; <label>:134:                                    ; preds = %131, %129
  br label %135

; <label>:135:                                    ; preds = %134, %133
  %136 = phi i32 [ %126, %133 ], [ 16, %134 ]
  %137 = ashr i32 %.012, 8
  %138 = and i32 %137, 255
  %139 = trunc i32 %138 to i8
  %140 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 14
  store i8 %139, i8* %140, align 2
  %141 = and i32 %.012, 255
  %142 = trunc i32 %141 to i8
  %143 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 15
  store i8 %142, i8* %143, align 1
  %144 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i32 0, i32 0
  %145 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i32 0, i32 0
  call void @AES_encrypt(i8* %144, i8* %145, %struct.aes_key_st* %9)
  %146 = sext i32 %.03 to i64
  %147 = getelementptr inbounds i8, i8* %0, i64 %146
  %148 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i32 0, i32 0
  call void @XOR(i8* %147, i8* %148, i32 %136)
  %149 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  %150 = sext i32 %.03 to i64
  %151 = getelementptr inbounds i8, i8* %0, i64 %150
  call void @XOR(i8* %149, i8* %151, i32 %136)
  %152 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  call void @AES_encrypt(i8* %152, i8* %153, %struct.aes_key_st* %9)
  %154 = add nsw i32 %.03, %136
  br label %155

; <label>:155:                                    ; preds = %135
  %156 = add nuw nsw i32 %.012, 1
  %157 = icmp sle i32 %156, %125
  br i1 %157, label %129, label %._crit_edge

._crit_edge:                                      ; preds = %155
  %split = phi i32 [ %154, %155 ]
  br label %158

; <label>:158:                                    ; preds = %._crit_edge, %97
  %.0.lcssa = phi i32 [ %split, %._crit_edge ], [ %127, %97 ]
  %159 = sext i32 %.0.lcssa to i64
  %160 = getelementptr inbounds i8, i8* %0, i64 %159
  %161 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i32 0, i32 0
  %162 = call i32 @memcmp(i8* %160, i8* %161, i64 8) #10
  %163 = icmp eq i32 %162, 0
  %164 = zext i1 %163 to i32
  ret i32 %164
}

declare dso_local i32 @AES_set_encrypt_key(i8*, i32, %struct.aes_key_st*) #1

declare dso_local void @AES_encrypt(i8*, i8*, %struct.aes_key_st*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @XOR(i8*, i8*, i32) #0 {
  %4 = icmp slt i32 0, %2
  br i1 %4, label %.lr.ph, label %16

.lr.ph:                                           ; preds = %3
  %5 = zext i32 %2 to i64
  br label %6

; <label>:6:                                      ; preds = %.lr.ph, %15
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %15 ]
  %7 = getelementptr inbounds i8, i8* %1, i64 %indvars.iv
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = xor i32 %12, %9
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %10, align 1
  br label %15

; <label>:15:                                     ; preds = %6
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next, %5
  br i1 %exitcond1, label %6, label %._crit_edge

._crit_edge:                                      ; preds = %15
  br label %16

; <label>:16:                                     ; preds = %._crit_edge, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_ram_size() #0 {
  %1 = alloca [256 x i8], align 16
  %2 = alloca i32, align 4
  store i32 0, i32* %2, align 4
  %3 = getelementptr [14 x i8], [14 x i8]* @.str.186, i32 0, i32 0
  %4 = getelementptr [2 x i8], [2 x i8]* @.str.1.187, i32 0, i32 0
  %5 = call %struct._IO_FILE* @fopen64(i8* %3, i8* %4)
  %6 = icmp ne %struct._IO_FILE* %5, null
  br i1 %6, label %9, label %7

; <label>:7:                                      ; preds = %0
  %8 = getelementptr [12 x i8], [12 x i8]* @.str.2.188, i32 0, i32 0
  call void @perror(i8* %8)
  br label %30

; <label>:9:                                      ; preds = %0
  %10 = getelementptr inbounds [256 x i8], [256 x i8]* %1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %10, i8 0, i64 256, i1 false)
  br label %11

; <label>:11:                                     ; preds = %27, %9
  %.01 = phi i32 [ -1, %9 ], [ %.1, %27 ]
  %12 = getelementptr inbounds [256 x i8], [256 x i8]* %1, i32 0, i32 0
  %13 = getelementptr [6 x i8], [6 x i8]* @.str.3.189, i32 0, i32 0
  %14 = call i32 (%struct._IO_FILE*, i8*, ...) @__isoc99_fscanf(%struct._IO_FILE* %5, i8* %13, i8* %12, i32* %2)
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %11
  %17 = icmp eq i32 %.01, -1
  br label %18

; <label>:18:                                     ; preds = %16, %11
  %19 = phi i1 [ false, %11 ], [ %17, %16 ]
  br i1 %19, label %20, label %28

; <label>:20:                                     ; preds = %18
  %21 = getelementptr inbounds [256 x i8], [256 x i8]* %1, i32 0, i32 0
  %22 = getelementptr [9 x i8], [9 x i8]* @.str.4.190, i32 0, i32 0
  %23 = call i32 @strncmp(i8* %21, i8* %22, i64 8) #10
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %27, label %25

; <label>:25:                                     ; preds = %20
  %26 = load i32, i32* %2, align 4
  br label %27

; <label>:27:                                     ; preds = %25, %20
  %.1 = phi i32 [ %.01, %20 ], [ %26, %25 ]
  br label %11

; <label>:28:                                     ; preds = %18
  %.01.lcssa = phi i32 [ %.01, %18 ]
  %29 = call i32 @fclose(%struct._IO_FILE* %5)
  br label %30

; <label>:30:                                     ; preds = %28, %7
  %.0 = phi i32 [ %.01.lcssa, %28 ], [ -1, %7 ]
  ret i32 %.0
}

declare dso_local i32 @__isoc99_fscanf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @getVersion(i8*, i32, i32, i32, i32, i32, i32) #8 {
  %8 = call noalias i8* @calloc(i64 1, i64 20) #9
  %9 = call i64 @strlen(i8* %0) #10
  %10 = add i64 %9, 200
  %11 = trunc i64 %10 to i32
  %12 = sext i32 %11 to i64
  %13 = call noalias i8* @calloc(i64 1, i64 %12) #9
  %14 = sext i32 %11 to i64
  %15 = getelementptr [9 x i8], [9 x i8]* @.str.5.193, i32 0, i32 0
  %16 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %13, i64 %14, i8* %15, i8* %0, i32 %1, i32 %2) #9
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %25

; <label>:18:                                     ; preds = %7
  %19 = getelementptr [4 x i8], [4 x i8]* @.str.6.194, i32 0, i32 0
  %20 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %8, i64 20, i8* %19, i32 %3) #9
  %21 = sext i32 %11 to i64
  %22 = call i64 @strlen(i8* %13) #10
  %23 = sub i64 %21, %22
  %24 = call i8* @strncat(i8* %13, i8* %8, i64 %23) #9
  call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 0, i64 20, i1 false)
  br label %25

; <label>:25:                                     ; preds = %18, %7
  %26 = icmp sgt i32 %6, 0
  br i1 %26, label %27, label %34

; <label>:27:                                     ; preds = %25
  %28 = getelementptr [6 x i8], [6 x i8]* @.str.7.195, i32 0, i32 0
  %29 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %8, i64 20, i8* %28, i32 %6) #9
  %30 = sext i32 %11 to i64
  %31 = call i64 @strlen(i8* %13) #10
  %32 = sub i64 %30, %31
  %33 = call i8* @strncat(i8* %13, i8* %8, i64 %32) #9
  call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 0, i64 20, i1 false)
  br label %44

; <label>:34:                                     ; preds = %25
  %35 = icmp sgt i32 %5, 0
  br i1 %35, label %36, label %43

; <label>:36:                                     ; preds = %34
  %37 = getelementptr [8 x i8], [8 x i8]* @.str.8.196, i32 0, i32 0
  %38 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %8, i64 20, i8* %37, i32 %5) #9
  %39 = sext i32 %11 to i64
  %40 = call i64 @strlen(i8* %13) #10
  %41 = sub i64 %39, %40
  %42 = call i8* @strncat(i8* %13, i8* %8, i64 %41) #9
  call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 0, i64 20, i1 false)
  br label %43

; <label>:43:                                     ; preds = %36, %34
  br label %44

; <label>:44:                                     ; preds = %43, %27
  %45 = icmp sgt i32 %4, 0
  br i1 %45, label %46, label %53

; <label>:46:                                     ; preds = %44
  %47 = getelementptr [5 x i8], [5 x i8]* @.str.9.197, i32 0, i32 0
  %48 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %8, i64 20, i8* %47, i32 %4) #9
  %49 = sext i32 %11 to i64
  %50 = call i64 @strlen(i8* %13) #10
  %51 = sub i64 %49, %50
  %52 = call i8* @strncat(i8* %13, i8* %8, i64 %51) #9
  call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 0, i64 20, i1 false)
  br label %53

; <label>:53:                                     ; preds = %46, %44
  call void @free(i8* %8) #9
  %54 = call i64 @strlen(i8* %13) #10
  %55 = add i64 %54, 1
  %56 = call i8* @realloc(i8* %13, i64 %55) #9, !track !254
  ret i8* %56
}

; Function Attrs: nounwind
declare dso_local i8* @strncat(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_nb_cpus() #0 {
  %1 = getelementptr [14 x i8], [14 x i8]* @.str.10.200, i32 0, i32 0
  %2 = getelementptr [2 x i8], [2 x i8]* @.str.1.187, i32 0, i32 0
  %3 = call %struct._IO_FILE* @fopen64(i8* %1, i8* %2)
  %4 = icmp ne %struct._IO_FILE* %3, null
  br i1 %4, label %5, label %26

; <label>:5:                                      ; preds = %0
  %6 = call noalias i8* @calloc(i64 1, i64 81) #9
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %24

; <label>:8:                                      ; preds = %5
  %9 = call i8* @fgets(i8* %6, i32 80, %struct._IO_FILE* %3)
  %10 = icmp ne i8* %9, null
  br i1 %10, label %.lr.ph, label %22

.lr.ph:                                           ; preds = %8
  br label %11

; <label>:11:                                     ; preds = %.lr.ph, %19
  %.01 = phi i32 [ -2, %.lr.ph ], [ %.1, %19 ]
  %12 = getelementptr [10 x i8], [10 x i8]* @.str.11.201, i32 0, i32 0
  %13 = call i8* @strstr(i8* %6, i8* %12) #10
  %14 = icmp eq i8* %13, %6
  br i1 %14, label %15, label %19

; <label>:15:                                     ; preds = %11
  %16 = call i8* @strchr(i8* %6, i32 58) #10
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  %18 = call i32 @atoi(i8* %17) #10
  br label %19

; <label>:19:                                     ; preds = %15, %11
  %.1 = phi i32 [ %18, %15 ], [ %.01, %11 ]
  %20 = call i8* @fgets(i8* %6, i32 80, %struct._IO_FILE* %3)
  %21 = icmp ne i8* %20, null
  br i1 %21, label %11, label %._crit_edge

._crit_edge:                                      ; preds = %19
  %split = phi i32 [ %.1, %19 ]
  br label %22

; <label>:22:                                     ; preds = %._crit_edge, %8
  %.0.lcssa = phi i32 [ %split, %._crit_edge ], [ -2, %8 ]
  %23 = add nsw i32 %.0.lcssa, 1
  call void @free(i8* %6) #9
  br label %24

; <label>:24:                                     ; preds = %22, %5
  %.2 = phi i32 [ %23, %22 ], [ -1, %5 ]
  %25 = call i32 @fclose(%struct._IO_FILE* %3)
  br label %26

; <label>:26:                                     ; preds = %24, %0
  %.3 = phi i32 [ %.2, %24 ], [ -1, %0 ]
  %27 = icmp eq i32 %.3, -1
  br i1 %27, label %28, label %34

; <label>:28:                                     ; preds = %26
  %29 = call i64 @sysconf(i32 84) #9
  %30 = trunc i64 %29 to i32
  %31 = icmp slt i32 %30, 1
  br i1 %31, label %32, label %33

; <label>:32:                                     ; preds = %28
  br label %33

; <label>:33:                                     ; preds = %32, %28
  %.4 = phi i32 [ -1, %32 ], [ %30, %28 ]
  br label %34

; <label>:34:                                     ; preds = %33, %26
  %.5 = phi i32 [ %.4, %33 ], [ %.3, %26 ]
  ret i32 %.5
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strstr(i8*, i8*) #3

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #3

; Function Attrs: nounwind
declare dso_local i64 @sysconf(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @maccmp(i8*, i8*) #0 {
  %3 = icmp eq i8* %0, null
  br i1 %3, label %6, label %4

; <label>:4:                                      ; preds = %2
  %5 = icmp eq i8* %1, null
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %4, %2
  br label %23

; <label>:7:                                      ; preds = %4
  br label %8

; <label>:8:                                      ; preds = %7, %20
  %indvars.iv = phi i64 [ 0, %7 ], [ %indvars.iv.next, %20 ]
  %9 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = call i32 @toupper(i32 %11) #10
  %13 = getelementptr inbounds i8, i8* %1, i64 %indvars.iv
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = call i32 @toupper(i32 %15) #10
  %17 = icmp ne i32 %12, %16
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %8
  br label %23

; <label>:19:                                     ; preds = %8
  br label %20

; <label>:20:                                     ; preds = %19
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %21 = icmp ult i64 %indvars.iv.next, 6
  br i1 %21, label %8, label %22

; <label>:22:                                     ; preds = %20
  br label %23

; <label>:23:                                     ; preds = %22, %18, %6
  %.0 = phi i32 [ -1, %6 ], [ -1, %18 ], [ 0, %22 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @mac2string(i8*) #0 {
  %2 = call noalias i8* @malloc(i64 18) #9
  %3 = load i8, i8* %0, align 1
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = getelementptr inbounds i8, i8* %0, i64 2
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds i8, i8* %0, i64 3
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds i8, i8* %0, i64 4
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %0, i64 5
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr [30 x i8], [30 x i8]* @.str.12.202, i32 0, i32 0
  %21 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %2, i64 18, i8* %20, i32 %4, i32 %7, i32 %10, i32 %13, i32 %16, i32 %19) #9
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @hexCharToInt(i8 zeroext) #0 {
  %2 = load i32, i32* @hexCharToInt.table_created, align 4
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %46

; <label>:4:                                      ; preds = %1
  br label %5

; <label>:5:                                      ; preds = %4, %43
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %43 ]
  %.01 = phi i32 [ 0, %4 ], [ %44, %43 ]
  %6 = trunc i32 %.01 to i8
  %7 = zext i8 %6 to i32
  switch i32 %7, label %40 [
    i32 48, label %8
    i32 49, label %10
    i32 50, label %12
    i32 51, label %14
    i32 52, label %16
    i32 53, label %18
    i32 54, label %20
    i32 55, label %22
    i32 56, label %24
    i32 57, label %26
    i32 65, label %28
    i32 97, label %28
    i32 66, label %30
    i32 98, label %30
    i32 67, label %32
    i32 99, label %32
    i32 68, label %34
    i32 100, label %34
    i32 69, label %36
    i32 101, label %36
    i32 70, label %38
    i32 102, label %38
  ]

; <label>:8:                                      ; preds = %5
  %9 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 0, i32* %9, align 4
  br label %42

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 1, i32* %11, align 4
  br label %42

; <label>:12:                                     ; preds = %5
  %13 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 2, i32* %13, align 4
  br label %42

; <label>:14:                                     ; preds = %5
  %15 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 3, i32* %15, align 4
  br label %42

; <label>:16:                                     ; preds = %5
  %17 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 4, i32* %17, align 4
  br label %42

; <label>:18:                                     ; preds = %5
  %19 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 5, i32* %19, align 4
  br label %42

; <label>:20:                                     ; preds = %5
  %21 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 6, i32* %21, align 4
  br label %42

; <label>:22:                                     ; preds = %5
  %23 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 7, i32* %23, align 4
  br label %42

; <label>:24:                                     ; preds = %5
  %25 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 8, i32* %25, align 4
  br label %42

; <label>:26:                                     ; preds = %5
  %27 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 9, i32* %27, align 4
  br label %42

; <label>:28:                                     ; preds = %5, %5
  %29 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 10, i32* %29, align 4
  br label %42

; <label>:30:                                     ; preds = %5, %5
  %31 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 11, i32* %31, align 4
  br label %42

; <label>:32:                                     ; preds = %5, %5
  %33 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 12, i32* %33, align 4
  br label %42

; <label>:34:                                     ; preds = %5, %5
  %35 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 13, i32* %35, align 4
  br label %42

; <label>:36:                                     ; preds = %5, %5
  %37 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 14, i32* %37, align 4
  br label %42

; <label>:38:                                     ; preds = %5, %5
  %39 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 15, i32* %39, align 4
  br label %42

; <label>:40:                                     ; preds = %5
  %41 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %indvars.iv
  store i32 -1, i32* %41, align 4
  br label %42

; <label>:42:                                     ; preds = %40, %38, %36, %34, %32, %30, %28, %26, %24, %22, %20, %18, %16, %14, %12, %10, %8
  br label %43

; <label>:43:                                     ; preds = %42
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %44 = add nuw nsw i32 %.01, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %5, label %45

; <label>:45:                                     ; preds = %43
  store i32 1, i32* @hexCharToInt.table_created, align 4
  br label %46

; <label>:46:                                     ; preds = %45, %1
  %47 = zext i8 %0 to i64
  %48 = getelementptr inbounds [256 x i32], [256 x i32]* @hexCharToInt.table, i64 0, i64 %47
  %49 = load i32, i32* %48, align 4
  ret i32 %49
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @hexStringToHex(i8*, i32, i8*) #0 {
  %4 = icmp slt i32 %1, 1
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %57

; <label>:6:                                      ; preds = %3
  %7 = icmp slt i32 0, %1
  br i1 %7, label %.lr.ph, label %55

.lr.ph:                                           ; preds = %6
  br label %8

; <label>:8:                                      ; preds = %.lr.ph, %51
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %51 ]
  %.018 = phi i8* [ %0, %.lr.ph ], [ %.1, %51 ]
  %.027 = phi i32 [ %1, %.lr.ph ], [ %.13, %51 ]
  %9 = getelementptr inbounds i8, i8* %.018, i64 %indvars.iv
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i32
  %12 = icmp eq i32 %11, 45
  br i1 %12, label %28, label %13

; <label>:13:                                     ; preds = %8
  %14 = getelementptr inbounds i8, i8* %.018, i64 %indvars.iv
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp eq i32 %16, 58
  br i1 %17, label %28, label %18

; <label>:18:                                     ; preds = %13
  %19 = getelementptr inbounds i8, i8* %.018, i64 %indvars.iv
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp eq i32 %21, 95
  br i1 %22, label %28, label %23

; <label>:23:                                     ; preds = %18
  %24 = getelementptr inbounds i8, i8* %.018, i64 %indvars.iv
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %26, 32
  br i1 %27, label %28, label %31

; <label>:28:                                     ; preds = %23, %18, %13, %8
  %29 = getelementptr inbounds i8, i8* %.018, i32 1
  %30 = add nsw i32 %.027, -1
  br label %31

; <label>:31:                                     ; preds = %28, %23
  %.13 = phi i32 [ %30, %28 ], [ %.027, %23 ]
  %.1 = phi i8* [ %29, %28 ], [ %.018, %23 ]
  %32 = getelementptr inbounds i8, i8* %.1, i64 %indvars.iv
  %33 = load i8, i8* %32, align 1
  %34 = call i32 @hexCharToInt(i8 zeroext %33)
  %35 = add nuw nsw i64 %indvars.iv, 1
  %36 = getelementptr inbounds i8, i8* %.1, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = call i32 @hexCharToInt(i8 zeroext %37)
  %39 = icmp slt i32 %34, 0
  br i1 %39, label %42, label %40

; <label>:40:                                     ; preds = %31
  %41 = icmp sgt i32 %34, 15
  br i1 %41, label %42, label %43

; <label>:42:                                     ; preds = %40, %31
  br label %57

; <label>:43:                                     ; preds = %40
  %44 = shl i32 %34, 4
  %45 = add nsw i32 %44, %38
  %46 = and i32 %45, 255
  %47 = trunc i32 %46 to i8
  %48 = trunc i64 %indvars.iv to i32
  %.udiv = udiv i32 %48, 2
  %49 = sext i32 %.udiv to i64
  %50 = getelementptr inbounds i8, i8* %2, i64 %49
  store i8 %47, i8* %50, align 1
  br label %51

; <label>:51:                                     ; preds = %43
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2
  %52 = sext i32 %.13 to i64
  %53 = icmp slt i64 %indvars.iv.next, %52
  br i1 %53, label %8, label %._crit_edge

._crit_edge:                                      ; preds = %51
  %split.wide = phi i64 [ %indvars.iv.next, %51 ]
  %54 = trunc i64 %split.wide to i32
  br label %55

; <label>:55:                                     ; preds = %._crit_edge, %6
  %.04.lcssa = phi i32 [ %54, %._crit_edge ], [ 0, %6 ]
  %56 = sdiv i32 %.04.lcssa, 2
  br label %57

; <label>:57:                                     ; preds = %55, %42, %5
  %.0 = phi i32 [ 1, %5 ], [ -1, %42 ], [ %56, %55 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @getmac(i8*, i32, i8*) #0 {
  %4 = alloca [3 x i8], align 1, !track !255
  %5 = alloca i32, align 4, !track !256
  %6 = icmp eq i8* %0, null
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %3
  br label %84

; <label>:8:                                      ; preds = %3
  %9 = call i64 @strlen(i8* %0) #10
  %10 = trunc i64 %9 to i32
  %11 = icmp slt i32 %10, 12
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %8
  br label %84

; <label>:13:                                     ; preds = %8
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 6, i1 false)
  %14 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 2
  store i8 0, i8* %14, align 1
  %15 = load i8, i8* %0, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %.lr.ph, label %74

.lr.ph:                                           ; preds = %13
  br label %18

; <label>:18:                                     ; preds = %.lr.ph, %67
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %67 ]
  %.025 = phi i32 [ 0, %.lr.ph ], [ %.1, %67 ]
  call void @unroll_loop(i32 154)
  %19 = sext i32 %.025 to i64
  %20 = getelementptr inbounds i8, i8* %0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 0
  store i8 %21, i8* %22, align 1
  %23 = add nsw i32 %.025, 1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 1
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i32 0, i32 0
  %29 = getelementptr [3 x i8], [3 x i8]* @.str.13.207, i32 0, i32 0
  %30 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %28, i8* %29, i32* %5) #9
  %31 = icmp ne i32 %30, 1
  br i1 %31, label %32, label %37

; <label>:32:                                     ; preds = %18
  %33 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i32 0, i32 0
  %34 = call i64 @strlen(i8* %33) #10
  %35 = icmp eq i64 %34, 2
  br i1 %35, label %36, label %37

; <label>:36:                                     ; preds = %32
  br label %84

; <label>:37:                                     ; preds = %32, %18
  %38 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = call i32 @hexCharToInt(i8 zeroext %39)
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %42, label %43

; <label>:42:                                     ; preds = %37
  br label %84

; <label>:43:                                     ; preds = %37
  %44 = load i32, i32* %5, align 4
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds i8, i8* %2, i64 %indvars.iv
  store i8 %45, i8* %46, align 1
  %47 = add nsw i32 %.025, 2
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %0, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = sext i8 %50 to i32
  %52 = icmp eq i32 %51, 58
  br i1 %52, label %65, label %53

; <label>:53:                                     ; preds = %43
  %54 = sext i32 %47 to i64
  %55 = getelementptr inbounds i8, i8* %0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %57, 45
  br i1 %58, label %65, label %59

; <label>:59:                                     ; preds = %53
  %60 = sext i32 %47 to i64
  %61 = getelementptr inbounds i8, i8* %0, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = icmp eq i32 %63, 95
  br i1 %64, label %65, label %67

; <label>:65:                                     ; preds = %59, %53, %43
  %66 = add nsw i32 %47, 1
  br label %67

; <label>:67:                                     ; preds = %65, %59
  %.1 = phi i32 [ %66, %65 ], [ %47, %59 ]
  %68 = sext i32 %.1 to i64
  %69 = getelementptr inbounds i8, i8* %0, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = sext i8 %70 to i32
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %18, label %._crit_edge

._crit_edge:                                      ; preds = %67
  %split.wide = phi i64 [ %indvars.iv.next, %67 ]
  %73 = trunc i64 %split.wide to i32
  br label %74

; <label>:74:                                     ; preds = %._crit_edge, %13
  %.01.lcssa = phi i32 [ %73, %._crit_edge ], [ 0, %13 ]
  %75 = icmp ne i32 %1, 0
  br i1 %75, label %76, label %78

; <label>:76:                                     ; preds = %74
  %77 = icmp ne i32 %.01.lcssa, 6
  br i1 %77, label %82, label %78

; <label>:78:                                     ; preds = %76, %74
  %79 = icmp ne i32 %1, 0
  br i1 %79, label %83, label %80

; <label>:80:                                     ; preds = %78
  %81 = icmp sgt i32 %.01.lcssa, 6
  br i1 %81, label %82, label %83

; <label>:82:                                     ; preds = %80, %76
  br label %84

; <label>:83:                                     ; preds = %80, %78
  br label %84

; <label>:84:                                     ; preds = %83, %82, %42, %36, %12, %7
  %.0 = phi i32 [ 1, %7 ], [ 1, %12 ], [ 1, %36 ], [ 1, %42 ], [ 1, %82 ], [ 0, %83 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare dso_local i32 @__isoc99_sscanf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @readLine(i8*, i32) #0 {
  %3 = sext i32 %1 to i64
  br label %4

; <label>:4:                                      ; preds = %32, %2
  %indvars.iv = phi i64 [ %indvars.iv.next, %32 ], [ -1, %2 ]
  %5 = call i32 @getchar()
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %4
  br label %8

; <label>:8:                                      ; preds = %7, %4
  %.01 = phi i32 [ 0, %7 ], [ %5, %4 ]
  %9 = trunc i32 %.01 to i8
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %10 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv.next
  store i8 %9, i8* %10, align 1
  %11 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv.next
  %12 = load i8, i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = icmp eq i32 %13, 10
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %8
  %.lcssa.wide = phi i64 [ %indvars.iv.next, %8 ]
  %16 = trunc i64 %.lcssa.wide to i32
  br label %36

; <label>:17:                                     ; preds = %8
  %18 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv.next
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp eq i32 %20, 13
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %17
  %.lcssa2.wide = phi i64 [ %indvars.iv.next, %17 ]
  %23 = trunc i64 %.lcssa2.wide to i32
  br label %36

; <label>:24:                                     ; preds = %17
  %25 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv.next
  %26 = load i8, i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %31

; <label>:29:                                     ; preds = %24
  %.lcssa3.wide = phi i64 [ %indvars.iv.next, %24 ]
  %30 = trunc i64 %.lcssa3.wide to i32
  br label %36

; <label>:31:                                     ; preds = %24
  br label %32

; <label>:32:                                     ; preds = %31
  %33 = add nuw nsw i64 %indvars.iv.next, 1
  %34 = icmp slt i64 %33, %3
  br i1 %34, label %4, label %.loopexit

.loopexit:                                        ; preds = %32
  %.lcssa4.ph.wide = phi i64 [ %indvars.iv.next, %32 ]
  %35 = trunc i64 %.lcssa4.ph.wide to i32
  br label %36

; <label>:36:                                     ; preds = %.loopexit, %29, %22, %15
  %.lcssa4 = phi i32 [ %30, %29 ], [ %23, %22 ], [ %16, %15 ], [ %35, %.loopexit ]
  ret i32 %.lcssa4
}

declare dso_local i32 @getchar() #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @hexToInt(i8*, i32) #0 {
  %3 = icmp slt i32 0, %1
  br i1 %3, label %.lr.ph9, label %.loopexit

.lr.ph9:                                          ; preds = %2
  %4 = sext i32 %1 to i64
  br label %5

; <label>:5:                                      ; preds = %.lr.ph9, %20
  %indvars.iv11 = phi i64 [ 0, %.lr.ph9 ], [ %indvars.iv.next12, %20 ]
  %6 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv11
  %7 = load i8, i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp ne i32 %8, 48
  %10 = trunc i64 %indvars.iv11 to i32
  br i1 %9, label %19, label %11

; <label>:11:                                     ; preds = %5
  %12 = icmp eq i64 %indvars.iv11, 1
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %11
  %14 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv11
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = call i32 @toupper(i32 %16) #10
  %18 = icmp ne i32 %17, 88
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %13, %5
  %.02.lcssa4 = phi i32 [ %10, %13 ], [ %10, %5 ]
  br label %23

; <label>:20:                                     ; preds = %13, %11
  %indvars.iv.next12 = add nuw nsw i64 %indvars.iv11, 1
  %21 = icmp slt i64 %indvars.iv.next12, %4
  br i1 %21, label %5, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %20
  %split10.wide = phi i64 [ %indvars.iv.next12, %20 ]
  %22 = trunc i64 %split10.wide to i32
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %2
  %.02.lcssa.ph = phi i32 [ %22, %..loopexit_crit_edge ], [ 0, %2 ]
  br label %23

; <label>:23:                                     ; preds = %.loopexit, %19
  %.02.lcssa = phi i32 [ %.02.lcssa4, %19 ], [ %.02.lcssa.ph, %.loopexit ]
  %24 = icmp slt i32 %.02.lcssa, %1
  br i1 %24, label %.lr.ph, label %37

.lr.ph:                                           ; preds = %23
  %25 = zext i32 %.02.lcssa to i64
  %26 = sext i32 %1 to i64
  br label %27

; <label>:27:                                     ; preds = %.lr.ph, %33
  %indvars.iv = phi i64 [ %25, %.lr.ph ], [ %indvars.iv.next, %33 ]
  %.016 = phi i32 [ 0, %.lr.ph ], [ %35, %33 ]
  %28 = getelementptr inbounds i8, i8* %0, i64 %indvars.iv
  %29 = load i8, i8* %28, align 1
  %30 = call i32 @hexCharToInt(i8 zeroext %29)
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %33

; <label>:32:                                     ; preds = %27
  br label %38

; <label>:33:                                     ; preds = %27
  %34 = mul nsw i32 %.016, 16
  %35 = add nsw i32 %34, %30
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %36 = icmp slt i64 %indvars.iv.next, %26
  br i1 %36, label %27, label %._crit_edge

._crit_edge:                                      ; preds = %33
  %split = phi i32 [ %35, %33 ]
  br label %37

; <label>:37:                                     ; preds = %._crit_edge, %23
  %.01.lcssa = phi i32 [ %split, %._crit_edge ], [ 0, %23 ]
  br label %38

; <label>:38:                                     ; preds = %37, %32
  %.0 = phi i32 [ -1, %32 ], [ %.01.lcssa, %37 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8** @uniqueiv_init() #8 {
  %1 = call noalias i8* @malloc(i64 2048) #9, !track !257
  %2 = bitcast i8* %1 to i8**
  %3 = icmp eq i8** %2, null
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %0
  br label %10

; <label>:5:                                      ; preds = %0
  br label %6

; <label>:6:                                      ; preds = %5, %8
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %8 ]
  call void @unroll_loop(i32 155)
  %7 = getelementptr inbounds i8*, i8** %2, i64 %indvars.iv
  store i8* null, i8** %7, align 8
  br label %8

; <label>:8:                                      ; preds = %6
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %6, label %9

; <label>:9:                                      ; preds = %8
  br label %10

; <label>:10:                                     ; preds = %9, %4
  %.0 = phi i8** [ null, %4 ], [ %2, %9 ]
  ret i8** %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @uniqueiv_mark(i8**, i8*) #0 {
  %3 = icmp eq i8** %0, null
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %2
  br label %68

; <label>:5:                                      ; preds = %2
  %6 = getelementptr inbounds i8, i8* %1, i64 2
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = getelementptr inbounds i8*, i8** %0, i64 %8
  %10 = load i8*, i8** %9, align 8
  %11 = bitcast i8* %10 to i8**
  %12 = icmp eq i8** %11, null
  br i1 %12, label %13, label %32

; <label>:13:                                     ; preds = %5
  %14 = call noalias i8* @malloc(i64 2048) #9, !track !258
  %15 = bitcast i8* %14 to i8**
  %16 = icmp eq i8** %15, null
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %13
  br label %68

; <label>:18:                                     ; preds = %13
  br label %19

; <label>:19:                                     ; preds = %18, %22
  %.015 = phi i16 [ 0, %18 ], [ %23, %22 ]
  call void @unroll_loop(i32 156)
  %20 = sext i16 %.015 to i64
  %21 = getelementptr inbounds i8*, i8** %15, i64 %20
  store i8* null, i8** %21, align 8
  br label %22

; <label>:22:                                     ; preds = %19
  %23 = add i16 %.015, 1
  %24 = sext i16 %23 to i32
  %25 = icmp slt i32 %24, 256
  br i1 %25, label %19, label %26

; <label>:26:                                     ; preds = %22
  %27 = bitcast i8** %15 to i8*
  %28 = getelementptr inbounds i8, i8* %1, i64 2
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds i8*, i8** %0, i64 %30
  store i8* %27, i8** %31, align 8
  br label %32

; <label>:32:                                     ; preds = %26, %5
  %.03 = phi i8** [ %15, %26 ], [ %11, %5 ]
  %33 = getelementptr inbounds i8, i8* %1, i64 1
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i64
  %36 = getelementptr inbounds i8*, i8** %.03, i64 %35
  %37 = load i8*, i8** %36, align 8
  %38 = icmp eq i8* %37, null
  br i1 %38, label %39, label %52

; <label>:39:                                     ; preds = %32
  %40 = call noalias i8* @malloc(i64 32) #9, !track !259
  %41 = icmp eq i8** %.03, null
  br i1 %41, label %42, label %43

; <label>:42:                                     ; preds = %39
  br label %68

; <label>:43:                                     ; preds = %39
  br label %44

; <label>:44:                                     ; preds = %43, %46
  %indvars.iv = phi i64 [ 0, %43 ], [ %indvars.iv.next, %46 ]
  call void @unroll_loop(i32 157)
  %45 = getelementptr inbounds i8, i8* %40, i64 %indvars.iv
  store i8 0, i8* %45, align 1
  br label %46

; <label>:46:                                     ; preds = %44
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 32
  br i1 %exitcond, label %44, label %47

; <label>:47:                                     ; preds = %46
  %48 = getelementptr inbounds i8, i8* %1, i64 1
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i64
  %51 = getelementptr inbounds i8*, i8** %.03, i64 %50
  store i8* %40, i8** %51, align 8
  br label %52

; <label>:52:                                     ; preds = %47, %32
  %.02 = phi i8* [ %40, %47 ], [ %37, %32 ]
  %53 = getelementptr inbounds i8, i8* %1, i64 0
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = and i32 %55, 7
  %57 = shl i32 1, %56
  %58 = getelementptr inbounds i8, i8* %1, i64 0
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = ashr i32 %60, 3
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %.02, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = or i32 %65, %57
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %63, align 1
  br label %68

; <label>:68:                                     ; preds = %52, %42, %17, %4
  %.0 = phi i32 [ 0, %4 ], [ 1, %17 ], [ 1, %42 ], [ 0, %52 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @uniqueiv_check(i8**, i8*) #0 {
  %3 = icmp eq i8** %0, null
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %2
  br label %40

; <label>:5:                                      ; preds = %2
  %6 = getelementptr inbounds i8, i8* %1, i64 2
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = getelementptr inbounds i8*, i8** %0, i64 %8
  %10 = load i8*, i8** %9, align 8
  %11 = bitcast i8* %10 to i8**
  %12 = icmp eq i8** %11, null
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %5
  br label %40

; <label>:14:                                     ; preds = %5
  %15 = getelementptr inbounds i8, i8* %1, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds i8*, i8** %11, i64 %17
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %14
  br label %40

; <label>:22:                                     ; preds = %14
  %23 = getelementptr inbounds i8, i8* %1, i64 0
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = ashr i32 %25, 3
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %19, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = getelementptr inbounds i8, i8* %1, i64 0
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = and i32 %33, 7
  %35 = shl i32 1, %34
  %36 = and i32 %30, %35
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %39

; <label>:38:                                     ; preds = %22
  br label %40

; <label>:39:                                     ; preds = %22
  br label %40

; <label>:40:                                     ; preds = %39, %38, %21, %13, %4
  %.0 = phi i32 [ 0, %4 ], [ 0, %13 ], [ 0, %21 ], [ 0, %38 ], [ 1, %39 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @uniqueiv_wipe(i8**) #0 {
  %2 = icmp eq i8** %0, null
  br i1 %2, label %3, label %4

; <label>:3:                                      ; preds = %1
  br label %24

; <label>:4:                                      ; preds = %1
  br label %5

; <label>:5:                                      ; preds = %4, %21
  %indvars.iv4 = phi i64 [ 0, %4 ], [ %indvars.iv.next5, %21 ]
  call void @unroll_loop(i32 158)
  %6 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv4
  %7 = load i8*, i8** %6, align 8
  %8 = bitcast i8* %7 to i8**
  %9 = icmp ne i8** %8, null
  br i1 %9, label %10, label %20

; <label>:10:                                     ; preds = %5
  br label %11

; <label>:11:                                     ; preds = %10, %17
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %17 ]
  call void @unroll_loop(i32 159)
  %12 = getelementptr inbounds i8*, i8** %8, i64 %indvars.iv
  %13 = load i8*, i8** %12, align 8
  %14 = icmp ne i8* %13, null
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %11
  call void @free(i8* %13) #9
  br label %16

; <label>:16:                                     ; preds = %15, %11
  br label %17

; <label>:17:                                     ; preds = %16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %11, label %18

; <label>:18:                                     ; preds = %17
  %19 = bitcast i8** %8 to i8*
  call void @free(i8* %19) #9
  br label %20

; <label>:20:                                     ; preds = %18, %5
  br label %21

; <label>:21:                                     ; preds = %20
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp ne i64 %indvars.iv.next5, 256
  br i1 %exitcond6, label %5, label %22

; <label>:22:                                     ; preds = %21
  %23 = bitcast i8** %0 to i8*
  call void @free(i8* %23) #9
  br label %24

; <label>:24:                                     ; preds = %22, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @data_init() #0 {
  %1 = call noalias i8* @calloc(i64 50331648, i64 1) #9
  ret i8* %1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @data_check(i8*, i8*, i8*) #0 {
  %4 = icmp ne i8* %0, null
  br i1 %4, label %5, label %61

; <label>:5:                                      ; preds = %3
  %6 = getelementptr inbounds i8, i8* %1, i64 0
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = mul nsw i32 %8, 256
  %10 = getelementptr inbounds i8, i8* %1, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = add nsw i32 %9, %12
  %14 = mul nsw i32 %13, 256
  %15 = getelementptr inbounds i8, i8* %1, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = add nsw i32 %14, %17
  %19 = mul nsw i32 %18, 3
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %38

; <label>:25:                                     ; preds = %5
  %26 = sext i32 %19 to i64
  %27 = getelementptr inbounds i8, i8* %0, i64 %26
  store i8 1, i8* %27, align 1
  %28 = getelementptr inbounds i8, i8* %2, i64 0
  %29 = load i8, i8* %28, align 1
  %30 = sext i32 %19 to i64
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8 %29, i8* %32, align 1
  %33 = getelementptr inbounds i8, i8* %2, i64 1
  %34 = load i8, i8* %33, align 1
  %35 = sext i32 %19 to i64
  %36 = getelementptr inbounds i8, i8* %0, i64 %35
  %37 = getelementptr inbounds i8, i8* %36, i64 2
  store i8 %34, i8* %37, align 1
  br label %60

; <label>:38:                                     ; preds = %5
  %39 = sext i32 %19 to i64
  %40 = getelementptr inbounds i8, i8* %0, i64 %39
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds i8, i8* %2, i64 0
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = icmp ne i32 %43, %46
  br i1 %47, label %58, label %48

; <label>:48:                                     ; preds = %38
  %49 = sext i32 %19 to i64
  %50 = getelementptr inbounds i8, i8* %0, i64 %49
  %51 = getelementptr inbounds i8, i8* %50, i64 2
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = getelementptr inbounds i8, i8* %2, i64 1
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = icmp ne i32 %53, %56
  br i1 %57, label %58, label %59

; <label>:58:                                     ; preds = %48, %38
  br label %59

; <label>:59:                                     ; preds = %58, %48
  %.0 = phi i32 [ 1, %58 ], [ 0, %48 ]
  br label %60

; <label>:60:                                     ; preds = %59, %25
  %.1 = phi i32 [ 0, %25 ], [ %.0, %59 ]
  br label %61

; <label>:61:                                     ; preds = %60, %3
  %.2 = phi i32 [ %.1, %60 ], [ 0, %3 ]
  ret i32 %.2
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @data_wipe(i8*) #0 {
  %2 = icmp ne i8* %0, null
  br i1 %2, label %3, label %4

; <label>:3:                                      ; preds = %1
  call void @free(i8* %0) #9
  br label %4

; <label>:4:                                      ; preds = %3, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @PTW_computeKey(%struct.PTW_attackstate*, i8*, i32, i32, i32*, [256 x i32]*, i32) #0 {
  %8 = alloca [29 x i32], align 16, !track !260
  %9 = alloca [29 x double], align 16, !track !261
  %10 = alloca [29 x double], align 16, !track !262
  %11 = alloca [29 x %struct.doublesorthelper], align 16, !track !263
  %12 = alloca [32 x i8], align 16, !track !264
  %13 = alloca [32 x i8], align 16, !track !265
  %14 = sext i32 %2 to i64
  %15 = mul i64 2048, %14
  %16 = alloca i8, i64 %15, align 16, !track !266
  %17 = bitcast i8* %16 to [256 x %struct.PTW_tableentry]*
  store i32 0, i32* @tried, align 4
  %18 = icmp eq [256 x %struct.PTW_tableentry]* %17, null
  br i1 %18, label %19, label %22

; <label>:19:                                     ; preds = %7
  %20 = getelementptr [27 x i8], [27 x i8]* @.str.222, i32 0, i32 0
  %21 = call i32 (i8*, ...) @printf(i8* %20)
  call void @exit(i32 -1) #11
  br label %UnifiedUnreachableBlock

; <label>:22:                                     ; preds = %7
  %23 = and i32 %6, 1
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %110, label %25

; <label>:25:                                     ; preds = %22
  %26 = icmp slt i32 0, %2
  br i1 %26, label %.lr.ph45, label %101

.lr.ph45:                                         ; preds = %25
  %27 = zext i32 %2 to i64
  br label %28

; <label>:28:                                     ; preds = %.lr.ph45, %100
  %indvars.iv47 = phi i64 [ 0, %.lr.ph45 ], [ %indvars.iv.next48, %100 ]
  call void @unroll_loop(i32 160)
  %29 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %17, i64 %indvars.iv47
  %30 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %29, i64 0, i64 0
  %31 = bitcast %struct.PTW_tableentry* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %31, i8 0, i64 2048, i1 false)
  br label %32

; <label>:32:                                     ; preds = %28, %37
  %indvars.iv32 = phi i64 [ 0, %28 ], [ %indvars.iv.next33, %37 ]
  %.0131 = phi i32 [ 0, %28 ], [ %38, %37 ]
  call void @unroll_loop(i32 161)
  %33 = trunc i32 %.0131 to i8
  %34 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %17, i64 %indvars.iv47
  %35 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %34, i64 0, i64 %indvars.iv32
  %36 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %35, i32 0, i32 1
  store i8 %33, i8* %36, align 4
  br label %37

; <label>:37:                                     ; preds = %32
  %indvars.iv.next33 = add nuw nsw i64 %indvars.iv32, 1
  %38 = add nuw nsw i32 %.0131, 1
  %exitcond34 = icmp ne i64 %indvars.iv.next33, 256
  br i1 %exitcond34, label %32, label %39

; <label>:39:                                     ; preds = %37
  %40 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 0
  %41 = load i32, i32* %40, align 8
  %42 = icmp slt i32 0, %41
  br i1 %42, label %.lr.ph37, label %76

.lr.ph37:                                         ; preds = %39
  br label %43

; <label>:43:                                     ; preds = %.lr.ph37, %72
  %indvars.iv39 = phi i64 [ 0, %.lr.ph37 ], [ %indvars.iv.next40, %72 ]
  call void @unroll_loop(i32 162)
  %44 = getelementptr inbounds [32 x i8], [32 x i8]* %12, i32 0, i32 0
  %45 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 5
  %46 = load %struct.PTW_session*, %struct.PTW_session** %45, align 8
  %47 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %46, i64 %indvars.iv39
  %48 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %47, i32 0, i32 0
  %49 = getelementptr inbounds [3 x i8], [3 x i8]* %48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %44, i8* align 4 %49, i64 3, i1 false), !track !267
  %50 = add nuw nsw i64 %indvars.iv47, 3
  %51 = getelementptr inbounds [32 x i8], [32 x i8]* %12, i32 0, i32 0
  %52 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 5
  %53 = load %struct.PTW_session*, %struct.PTW_session** %52, align 8
  %54 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %53, i64 %indvars.iv39
  %55 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %54, i32 0, i32 1
  %56 = getelementptr inbounds [32 x i8], [32 x i8]* %55, i32 0, i32 0
  %57 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i32 0, i32 0
  %58 = trunc i64 %50 to i32
  call void @guesskeybytes(i32 %58, i8* %51, i8* %56, i8* %57, i32 1)
  %59 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 5
  %60 = load %struct.PTW_session*, %struct.PTW_session** %59, align 8
  %61 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %60, i64 %indvars.iv39
  %62 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %61, i32 0, i32 2
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %17, i64 %indvars.iv47
  %65 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 0
  %66 = load i8, i8* %65, align 16
  %67 = zext i8 %66 to i64
  %68 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %64, i64 0, i64 %67
  %69 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %68, i32 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = add nsw i32 %70, %63
  store i32 %71, i32* %69, align 4
  br label %72

; <label>:72:                                     ; preds = %43
  %indvars.iv.next40 = add nuw nsw i64 %indvars.iv39, 1
  %73 = load i32, i32* %40, align 8
  %74 = sext i32 %73 to i64
  %75 = icmp slt i64 %indvars.iv.next40, %74
  br i1 %75, label %43, label %._crit_edge38

._crit_edge38:                                    ; preds = %72
  br label %76

; <label>:76:                                     ; preds = %._crit_edge38, %39
  %77 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %17, i64 %indvars.iv47
  %78 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %77, i64 0, i64 0
  %79 = bitcast %struct.PTW_tableentry* %78 to i8*
  call void @qsort(i8* %79, i64 256, i64 8, i32 (i8*, i8*)* @compare)
  br label %80

; <label>:80:                                     ; preds = %80, %76
  %indvars.iv41 = phi i64 [ %indvars.iv.next42, %80 ], [ 0, %76 ]
  call void @unroll_loop(i32 163)
  %81 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 %indvars.iv47
  %82 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %17, i64 %indvars.iv47
  %83 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %82, i64 0, i64 %indvars.iv41
  %84 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %83, i32 0, i32 1
  %85 = load i8, i8* %84, align 4
  %86 = zext i8 %85 to i64
  %87 = getelementptr inbounds [256 x i32], [256 x i32]* %81, i64 0, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = icmp ne i32 %88, 0
  %90 = xor i1 %89, true
  %indvars.iv.next42 = add nuw i64 %indvars.iv41, 1
  br i1 %90, label %80, label %91

; <label>:91:                                     ; preds = %80
  %.2.lcssa.wide = phi i64 [ %indvars.iv41, %80 ]
  %92 = trunc i64 %.2.lcssa.wide to i32
  %93 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %17, i64 %indvars.iv47
  %94 = sext i32 %92 to i64
  %95 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %93, i64 0, i64 %94
  %96 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %95, i32 0, i32 1
  %97 = load i8, i8* %96, align 4
  %98 = add nuw nsw i64 %indvars.iv47, 3
  %99 = getelementptr inbounds [32 x i8], [32 x i8]* %12, i64 0, i64 %98
  store i8 %97, i8* %99, align 1
  br label %100

; <label>:100:                                    ; preds = %91
  %indvars.iv.next48 = add nuw nsw i64 %indvars.iv47, 1
  %exitcond3 = icmp ne i64 %indvars.iv.next48, %27
  br i1 %exitcond3, label %28, label %._crit_edge46

._crit_edge46:                                    ; preds = %100
  br label %101

; <label>:101:                                    ; preds = %._crit_edge46, %25
  %102 = getelementptr inbounds [32 x i8], [32 x i8]* %12, i64 0, i64 3
  %103 = call i32 @correct(%struct.PTW_attackstate* %0, i8* %102, i32 %2)
  %104 = icmp ne i32 %103, 0
  br i1 %104, label %105, label %109

; <label>:105:                                    ; preds = %101
  %106 = getelementptr inbounds [32 x i8], [32 x i8]* %12, i64 0, i64 3
  %107 = sext i32 %2 to i64
  %108 = mul i64 %107, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %106, i64 %108, i1 false), !track !268
  br label %258

; <label>:109:                                    ; preds = %101
  br label %110

; <label>:110:                                    ; preds = %109, %22
  %111 = and i32 %6, 2
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %257, label %113

; <label>:113:                                    ; preds = %110
  %114 = bitcast [256 x %struct.PTW_tableentry]* %17 to i8*
  %115 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 4
  %116 = getelementptr inbounds [29 x [256 x %struct.PTW_tableentry]], [29 x [256 x %struct.PTW_tableentry]]* %115, i32 0, i32 0
  %117 = bitcast [256 x %struct.PTW_tableentry]* %116 to i8*
  %118 = sext i32 %2 to i64
  %119 = mul i64 2048, %118
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %114, i8* align 8 %117, i64 %119, i1 false), !track !269
  %120 = sdiv i32 %3, 10
  %121 = mul nsw i32 %120, 2
  %122 = sdiv i32 %3, 10
  %123 = mul nsw i32 %122, 1
  %124 = sub nsw i32 %3, %121
  %125 = sub nsw i32 %124, %123
  %126 = icmp slt i32 0, %2
  br i1 %126, label %.lr.ph25, label %134

.lr.ph25:                                         ; preds = %113
  %127 = zext i32 %2 to i64
  br label %128

; <label>:128:                                    ; preds = %.lr.ph25, %133
  %indvars.iv27 = phi i64 [ 0, %.lr.ph25 ], [ %indvars.iv.next28, %133 ]
  call void @unroll_loop(i32 164)
  %129 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %17, i64 %indvars.iv27
  %130 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %129, i64 0, i64 0
  %131 = bitcast %struct.PTW_tableentry* %130 to i8*
  call void @qsort(i8* %131, i64 256, i64 8, i32 (i8*, i8*)* @compare)
  %132 = getelementptr inbounds [29 x i32], [29 x i32]* %8, i64 0, i64 %indvars.iv27
  store i32 0, i32* %132, align 4
  br label %133

; <label>:133:                                    ; preds = %128
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %exitcond2 = icmp ne i64 %indvars.iv.next28, %127
  br i1 %exitcond2, label %128, label %._crit_edge26

._crit_edge26:                                    ; preds = %133
  br label %134

; <label>:134:                                    ; preds = %._crit_edge26, %113
  %135 = sext i32 %2 to i64
  %136 = mul i64 3060, %135
  %137 = alloca i8, i64 %136, align 16, !track !270
  %138 = bitcast i8* %137 to [255 x %struct.sorthelper]*
  %139 = icmp eq [255 x %struct.sorthelper]* %138, null
  br i1 %139, label %140, label %143

; <label>:140:                                    ; preds = %134
  %141 = getelementptr [27 x i8], [27 x i8]* @.str.222, i32 0, i32 0
  %142 = call i32 (i8*, ...) @printf(i8* %141)
  call void @exit(i32 -1) #11
  br label %UnifiedUnreachableBlock

; <label>:143:                                    ; preds = %134
  %144 = icmp slt i32 0, %2
  br i1 %144, label %.lr.ph17, label %177

.lr.ph17:                                         ; preds = %143
  %145 = zext i32 %2 to i64
  br label %146

; <label>:146:                                    ; preds = %.lr.ph17, %176
  %indvars.iv19 = phi i64 [ 0, %.lr.ph17 ], [ %indvars.iv.next20, %176 ]
  br label %147

; <label>:147:                                    ; preds = %146, %174
  %indvars.iv12 = phi i64 [ 1, %146 ], [ %indvars.iv.next13, %174 ]
  call void @unroll_loop(i32 165)
  %148 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %17, i64 %indvars.iv19
  %149 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %148, i64 0, i64 0
  %150 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %149, i32 0, i32 0
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %17, i64 %indvars.iv19
  %153 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %152, i64 0, i64 %indvars.iv12
  %154 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %153, i32 0, i32 0
  %155 = load i32, i32* %154, align 4
  %156 = sub nsw i32 %151, %155
  %157 = getelementptr inbounds [255 x %struct.sorthelper], [255 x %struct.sorthelper]* %138, i64 %indvars.iv19
  %158 = sub nuw nsw i64 %indvars.iv12, 1
  %159 = getelementptr inbounds [255 x %struct.sorthelper], [255 x %struct.sorthelper]* %157, i64 0, i64 %158
  %160 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %159, i32 0, i32 2
  store i32 %156, i32* %160, align 4
  %161 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %17, i64 %indvars.iv19
  %162 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %161, i64 0, i64 %indvars.iv12
  %163 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %162, i32 0, i32 1
  %164 = load i8, i8* %163, align 4
  %165 = getelementptr inbounds [255 x %struct.sorthelper], [255 x %struct.sorthelper]* %138, i64 %indvars.iv19
  %166 = sub nuw nsw i64 %indvars.iv12, 1
  %167 = getelementptr inbounds [255 x %struct.sorthelper], [255 x %struct.sorthelper]* %165, i64 0, i64 %166
  %168 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %167, i32 0, i32 1
  store i8 %164, i8* %168, align 4
  %169 = getelementptr inbounds [255 x %struct.sorthelper], [255 x %struct.sorthelper]* %138, i64 %indvars.iv19
  %170 = sub nuw nsw i64 %indvars.iv12, 1
  %171 = getelementptr inbounds [255 x %struct.sorthelper], [255 x %struct.sorthelper]* %169, i64 0, i64 %170
  %172 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %171, i32 0, i32 0
  %173 = trunc i64 %indvars.iv19 to i32
  store i32 %173, i32* %172, align 4
  br label %174

; <label>:174:                                    ; preds = %147
  %indvars.iv.next13 = add nuw nsw i64 %indvars.iv12, 1
  %exitcond14 = icmp ne i64 %indvars.iv.next13, 256
  br i1 %exitcond14, label %147, label %175

; <label>:175:                                    ; preds = %174
  br label %176

; <label>:176:                                    ; preds = %175
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next20, %145
  br i1 %exitcond1, label %146, label %._crit_edge18

._crit_edge18:                                    ; preds = %176
  br label %177

; <label>:177:                                    ; preds = %._crit_edge18, %143
  %178 = bitcast [255 x %struct.sorthelper]* %138 to i8*
  %179 = mul nsw i32 255, %2
  %180 = sext i32 %179 to i64
  call void @qsort(i8* %178, i64 %180, i64 12, i32 (i8*, i8*)* @comparesorthelper)
  %181 = bitcast [255 x %struct.sorthelper]* %138 to %struct.sorthelper*
  %182 = getelementptr inbounds [29 x i32], [29 x i32]* %8, i32 0, i32 0
  %183 = call i32 @doComputation(%struct.PTW_attackstate* %0, i8* %1, i32 %2, [256 x %struct.PTW_tableentry]* %17, %struct.sorthelper* %181, i32* %182, i32 %125, i32* %4, [256 x i32]* %5)
  %184 = icmp ne i32 %183, 0
  br i1 %184, label %185, label %186

; <label>:185:                                    ; preds = %177
  br label %258

; <label>:186:                                    ; preds = %177
  %187 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 4
  %188 = getelementptr inbounds [29 x [256 x %struct.PTW_tableentry]], [29 x [256 x %struct.PTW_tableentry]]* %187, i32 0, i32 0
  %189 = getelementptr inbounds [29 x double], [29 x double]* %9, i32 0, i32 0
  %190 = getelementptr inbounds [29 x double], [29 x double]* %10, i32 0, i32 0
  call void @getdrv([256 x %struct.PTW_tableentry]* %188, i32 %2, double* %189, double* %190)
  %191 = sub nsw i32 %2, 1
  %192 = icmp slt i32 0, %191
  br i1 %192, label %.lr.ph, label %206

.lr.ph:                                           ; preds = %186
  %193 = add i32 %2, -1
  %wide.trip.count = zext i32 %193 to i64
  br label %194

; <label>:194:                                    ; preds = %.lr.ph, %205
  %indvars.iv9 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next10, %205 ]
  call void @unroll_loop(i32 166)
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1
  %195 = getelementptr inbounds [29 x %struct.doublesorthelper], [29 x %struct.doublesorthelper]* %11, i64 0, i64 %indvars.iv9
  %196 = getelementptr inbounds %struct.doublesorthelper, %struct.doublesorthelper* %195, i32 0, i32 0
  %197 = trunc i64 %indvars.iv.next10 to i32
  store i32 %197, i32* %196, align 16
  %198 = getelementptr inbounds [29 x double], [29 x double]* %9, i64 0, i64 %indvars.iv.next10
  %199 = load double, double* %198, align 8
  %200 = getelementptr inbounds [29 x double], [29 x double]* %10, i64 0, i64 %indvars.iv.next10
  %201 = load double, double* %200, align 8
  %202 = fsub double %199, %201
  %203 = getelementptr inbounds [29 x %struct.doublesorthelper], [29 x %struct.doublesorthelper]* %11, i64 0, i64 %indvars.iv9
  %204 = getelementptr inbounds %struct.doublesorthelper, %struct.doublesorthelper* %203, i32 0, i32 1
  store double %202, double* %204, align 8
  br label %205

; <label>:205:                                    ; preds = %194
  %exitcond = icmp ne i64 %indvars.iv.next10, %wide.trip.count
  br i1 %exitcond, label %194, label %._crit_edge

._crit_edge:                                      ; preds = %205
  br label %206

; <label>:206:                                    ; preds = %._crit_edge, %186
  %207 = getelementptr inbounds [29 x %struct.doublesorthelper], [29 x %struct.doublesorthelper]* %11, i32 0, i32 0
  %208 = bitcast %struct.doublesorthelper* %207 to i8*
  %209 = sub nsw i32 %2, 1
  %210 = sext i32 %209 to i64
  call void @qsort(i8* %208, i64 %210, i64 16, i32 (i8*, i8*)* @comparedoublesorthelper)
  br label %211

; <label>:211:                                    ; preds = %211, %206
  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %211 ], [ 0, %206 ]
  call void @unroll_loop(i32 167)
  %212 = getelementptr inbounds [29 x %struct.doublesorthelper], [29 x %struct.doublesorthelper]* %11, i64 0, i64 %indvars.iv6
  %213 = getelementptr inbounds %struct.doublesorthelper, %struct.doublesorthelper* %212, i32 0, i32 0
  %214 = load i32, i32* %213, align 16
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds i32, i32* %4, i64 %215
  %217 = load i32, i32* %216, align 4
  %218 = icmp eq i32 %217, 1
  %indvars.iv.next7 = add nuw i64 %indvars.iv6, 1
  br i1 %218, label %211, label %219

; <label>:219:                                    ; preds = %211
  %.4.lcssa.wide = phi i64 [ %indvars.iv6, %211 ]
  %220 = trunc i64 %.4.lcssa.wide to i32
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds [29 x %struct.doublesorthelper], [29 x %struct.doublesorthelper]* %11, i64 0, i64 %221
  %223 = getelementptr inbounds %struct.doublesorthelper, %struct.doublesorthelper* %222, i32 0, i32 0
  %224 = load i32, i32* %223, align 16
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds [29 x i32], [29 x i32]* %8, i64 0, i64 %225
  store i32 1, i32* %226, align 4
  %227 = bitcast [255 x %struct.sorthelper]* %138 to %struct.sorthelper*
  %228 = getelementptr inbounds [29 x i32], [29 x i32]* %8, i32 0, i32 0
  %229 = call i32 @doComputation(%struct.PTW_attackstate* %0, i8* %1, i32 %2, [256 x %struct.PTW_tableentry]* %17, %struct.sorthelper* %227, i32* %228, i32 %121, i32* %4, [256 x i32]* %5)
  %230 = icmp ne i32 %229, 0
  br i1 %230, label %231, label %232

; <label>:231:                                    ; preds = %219
  br label %258

; <label>:232:                                    ; preds = %219
  %233 = add i32 %220, 1
  %234 = sext i32 %233 to i64
  br label %235

; <label>:235:                                    ; preds = %235, %232
  %indvars.iv = phi i64 [ %indvars.iv.next, %235 ], [ %234, %232 ]
  call void @unroll_loop(i32 168)
  %236 = getelementptr inbounds [29 x %struct.doublesorthelper], [29 x %struct.doublesorthelper]* %11, i64 0, i64 %indvars.iv
  %237 = getelementptr inbounds %struct.doublesorthelper, %struct.doublesorthelper* %236, i32 0, i32 0
  %238 = load i32, i32* %237, align 16
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i32, i32* %4, i64 %239
  %241 = load i32, i32* %240, align 4
  %242 = icmp eq i32 %241, 1
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %242, label %235, label %243

; <label>:243:                                    ; preds = %235
  %.5.lcssa.wide = phi i64 [ %indvars.iv, %235 ]
  %244 = trunc i64 %.5.lcssa.wide to i32
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds [29 x %struct.doublesorthelper], [29 x %struct.doublesorthelper]* %11, i64 0, i64 %245
  %247 = getelementptr inbounds %struct.doublesorthelper, %struct.doublesorthelper* %246, i32 0, i32 0
  %248 = load i32, i32* %247, align 16
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds [29 x i32], [29 x i32]* %8, i64 0, i64 %249
  store i32 1, i32* %250, align 4
  %251 = bitcast [255 x %struct.sorthelper]* %138 to %struct.sorthelper*
  %252 = getelementptr inbounds [29 x i32], [29 x i32]* %8, i32 0, i32 0
  %253 = call i32 @doComputation(%struct.PTW_attackstate* %0, i8* %1, i32 %2, [256 x %struct.PTW_tableentry]* %17, %struct.sorthelper* %251, i32* %252, i32 %123, i32* %4, [256 x i32]* %5)
  %254 = icmp ne i32 %253, 0
  br i1 %254, label %255, label %256

; <label>:255:                                    ; preds = %243
  br label %258

; <label>:256:                                    ; preds = %243
  br label %257

; <label>:257:                                    ; preds = %256, %110
  br label %258

; <label>:258:                                    ; preds = %257, %255, %231, %185, %105
  %.0 = phi i32 [ 0, %257 ], [ 1, %185 ], [ 1, %231 ], [ 1, %255 ], [ 1, %105 ]
  ret i32 %.0

UnifiedUnreachableBlock:                          ; preds = %140, %19
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define internal void @guesskeybytes(i32, i8*, i8*, i8*, i32) #0 {
  %6 = alloca [256 x i8], align 16, !track !271
  %7 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i32 0, i32 0
  %8 = getelementptr [256 x i8], [256 x i8]* @rc4initial, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %7, i8* align 16 %8, i64 256, i1 false), !track !272
  %9 = icmp slt i32 0, %0
  br i1 %9, label %.lr.ph13, label %31

.lr.ph13:                                         ; preds = %5
  %10 = zext i32 %0 to i64
  br label %11

; <label>:11:                                     ; preds = %.lr.ph13, %30
  %indvars.iv15 = phi i64 [ 0, %.lr.ph13 ], [ %indvars.iv.next16, %30 ]
  %.0410 = phi i8 [ 0, %.lr.ph13 ], [ %21, %30 ]
  call void @unroll_loop(i32 169)
  %12 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %indvars.iv15
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds i8, i8* %1, i64 %indvars.iv15
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = add nsw i32 %14, %17
  %19 = zext i8 %.0410 to i32
  %20 = add nsw i32 %19, %18
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %indvars.iv15
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %21 to i64
  %25 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %indvars.iv15
  store i8 %26, i8* %27, align 1
  %28 = zext i8 %21 to i64
  %29 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %28
  store i8 %23, i8* %29, align 1
  br label %30

; <label>:30:                                     ; preds = %11
  %indvars.iv.next16 = add nuw nsw i64 %indvars.iv15, 1
  %exitcond = icmp ne i64 %indvars.iv.next16, %10
  br i1 %exitcond, label %11, label %._crit_edge14

._crit_edge14:                                    ; preds = %30
  %split = phi i8 [ %21, %30 ]
  br label %31

; <label>:31:                                     ; preds = %._crit_edge14, %5
  %.04.lcssa = phi i8 [ %split, %._crit_edge14 ], [ 0, %5 ]
  %32 = icmp slt i32 0, %4
  br i1 %32, label %.lr.ph, label %66

.lr.ph:                                           ; preds = %31
  %33 = sext i32 %0 to i64
  %34 = zext i32 %4 to i64
  br label %35

; <label>:35:                                     ; preds = %.lr.ph, %65
  %indvars.iv8 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next9, %65 ]
  %indvars.iv = phi i64 [ %33, %.lr.ph ], [ %indvars.iv.next, %65 ]
  %.07 = phi i8 [ 0, %.lr.ph ], [ %57, %65 ]
  call void @unroll_loop(i32 170)
  %36 = sub nsw i64 %indvars.iv, 1
  %37 = getelementptr inbounds i8, i8* %2, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = trunc i64 %indvars.iv to i32
  %41 = sub nsw i32 %40, %39
  %42 = trunc i32 %41 to i8
  br label %43

; <label>:43:                                     ; preds = %43, %35
  %.01 = phi i8 [ 0, %35 ], [ %50, %43 ]
  call void @unroll_loop(i32 171)
  %44 = zext i8 %42 to i32
  %45 = zext i8 %.01 to i64
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = icmp ne i32 %44, %48
  %50 = add i8 %.01, 1
  br i1 %49, label %43, label %51

; <label>:51:                                     ; preds = %43
  %.01.lcssa = phi i8 [ %.01, %43 ]
  %52 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %indvars.iv
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = zext i8 %.07 to i32
  %56 = add nsw i32 %55, %54
  %57 = trunc i32 %56 to i8
  %58 = zext i8 %.04.lcssa to i32
  %59 = zext i8 %57 to i32
  %60 = add nsw i32 %58, %59
  %61 = zext i8 %.01.lcssa to i32
  %62 = sub nsw i32 %61, %60
  %63 = trunc i32 %62 to i8
  %64 = getelementptr inbounds i8, i8* %3, i64 %indvars.iv8
  store i8 %63, i8* %64, align 1
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  br label %65

; <label>:65:                                     ; preds = %51
  %indvars.iv.next9 = add nuw nsw i64 %indvars.iv8, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next9, %34
  br i1 %exitcond1, label %35, label %._crit_edge

._crit_edge:                                      ; preds = %65
  br label %66

; <label>:66:                                     ; preds = %._crit_edge, %31
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compare(i8*, i8*) #0 {
  %3 = bitcast i8* %0 to %struct.PTW_tableentry*
  %4 = bitcast i8* %1 to %struct.PTW_tableentry*
  %5 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %3, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %4, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp sgt i32 %6, %8
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %2
  br label %19

; <label>:11:                                     ; preds = %2
  %12 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %3, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %4, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %13, %15
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %11
  br label %19

; <label>:18:                                     ; preds = %11
  br label %19

; <label>:19:                                     ; preds = %18, %17, %10
  %.0 = phi i32 [ -1, %10 ], [ 0, %17 ], [ 1, %18 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @correct(%struct.PTW_attackstate*, i8*, i32) #0 {
  %4 = alloca [32 x i8], align 16, !track !273
  %5 = alloca %struct.rc4state, align 1, !track !274
  %6 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %7, 3
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %3
  br label %50

; <label>:10:                                     ; preds = %3
  %11 = load i32, i32* @tried, align 4
  %12 = add nsw i32 %11, 1
  store i32 %12, i32* @tried, align 4
  %13 = call i32 @rand() #9
  %14 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = sub nsw i32 %15, 10
  %17 = srem i32 %13, %16
  %18 = add nsw i32 %17, 10
  %19 = sext i32 %17 to i64
  %20 = sext i32 %18 to i64
  br label %21

; <label>:21:                                     ; preds = %10, %47
  %indvars.iv5 = phi i64 [ %19, %10 ], [ %indvars.iv.next6, %47 ]
  call void @unroll_loop(i32 172)
  %22 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 3
  %23 = sext i32 %2 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %22, i8* align 1 %1, i64 %23, i1 false), !track !275
  %24 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %25 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 3
  %26 = getelementptr inbounds [10000 x %struct.PTW_session], [10000 x %struct.PTW_session]* %25, i64 0, i64 %indvars.iv5
  %27 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %26, i32 0, i32 0
  %28 = getelementptr inbounds [3 x i8], [3 x i8]* %27, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %24, i8* align 8 %28, i64 3, i1 false), !track !276
  %29 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %30 = add nsw i32 %2, 3
  call void @rc4init(i8* %29, i32 %30, %struct.rc4state* %5)
  br label %31

; <label>:31:                                     ; preds = %21, %44
  %indvars.iv = phi i64 [ 0, %21 ], [ %indvars.iv.next, %44 ]
  call void @unroll_loop(i32 173)
  %32 = call zeroext i8 @rc4update(%struct.rc4state* %5)
  %33 = zext i8 %32 to i32
  %34 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 3
  %35 = getelementptr inbounds [10000 x %struct.PTW_session], [10000 x %struct.PTW_session]* %34, i64 0, i64 %indvars.iv5
  %36 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %35, i32 0, i32 1
  %37 = getelementptr inbounds [32 x i8], [32 x i8]* %36, i64 0, i64 %indvars.iv
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = xor i32 %33, %39
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %43

; <label>:42:                                     ; preds = %31
  br label %50

; <label>:43:                                     ; preds = %31
  br label %44

; <label>:44:                                     ; preds = %43
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %45 = icmp ult i64 %indvars.iv.next, 6
  br i1 %45, label %31, label %46

; <label>:46:                                     ; preds = %44
  br label %47

; <label>:47:                                     ; preds = %46
  %indvars.iv.next6 = add nsw i64 %indvars.iv5, 1
  %48 = icmp slt i64 %indvars.iv.next6, %20
  br i1 %48, label %21, label %49

; <label>:49:                                     ; preds = %47
  br label %50

; <label>:50:                                     ; preds = %49, %42, %9
  %.0 = phi i32 [ 0, %9 ], [ 0, %42 ], [ 1, %49 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @comparesorthelper(i8*, i8*) #0 {
  %3 = bitcast i8* %0 to %struct.sorthelper*
  %4 = bitcast i8* %1 to %struct.sorthelper*
  %5 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %3, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %4, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp sgt i32 %6, %8
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %2
  br label %19

; <label>:11:                                     ; preds = %2
  %12 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %3, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %4, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %13, %15
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %11
  br label %19

; <label>:18:                                     ; preds = %11
  br label %19

; <label>:19:                                     ; preds = %18, %17, %10
  %.0 = phi i32 [ 1, %10 ], [ 0, %17 ], [ -1, %18 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @doComputation(%struct.PTW_attackstate*, i8*, i32, [256 x %struct.PTW_tableentry]*, %struct.sorthelper*, i32*, i32, i32*, [256 x i32]*) #0 {
  %10 = alloca [29 x i32], align 16, !track !277
  %11 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %12 = load i32, i32* %11, align 8
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %18, label %14

; <label>:14:                                     ; preds = %9
  %15 = bitcast [256 x %struct.PTW_tableentry]* %3 to i8*
  %16 = sext i32 %2 to i64
  %17 = mul i64 2048, %16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([29 x [256 x %struct.PTW_tableentry]]* @keytable to i8*), i8* align 4 %15, i64 %17, i1 false), !track !278
  br label %18

; <label>:18:                                     ; preds = %14, %9
  %19 = icmp slt i32 0, %2
  br i1 %19, label %.lr.ph19, label %32

.lr.ph19:                                         ; preds = %18
  %20 = zext i32 %2 to i64
  br label %21

; <label>:21:                                     ; preds = %.lr.ph19, %31
  %indvars.iv21 = phi i64 [ 0, %.lr.ph19 ], [ %indvars.iv.next22, %31 ]
  call void @unroll_loop(i32 174)
  %22 = getelementptr inbounds i32, i32* %5, i64 %indvars.iv21
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %28

; <label>:25:                                     ; preds = %21
  %26 = getelementptr inbounds [29 x i32], [29 x i32]* %10, i64 0, i64 %indvars.iv21
  %27 = trunc i64 %indvars.iv21 to i32
  store i32 %27, i32* %26, align 4
  br label %30

; <label>:28:                                     ; preds = %21
  %29 = getelementptr inbounds [29 x i32], [29 x i32]* %10, i64 0, i64 %indvars.iv21
  store i32 1, i32* %29, align 4
  br label %30

; <label>:30:                                     ; preds = %28, %25
  br label %31

; <label>:31:                                     ; preds = %30
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
  %exitcond = icmp ne i64 %indvars.iv.next22, %20
  br i1 %exitcond, label %21, label %._crit_edge20

._crit_edge20:                                    ; preds = %31
  br label %32

; <label>:32:                                     ; preds = %._crit_edge20, %18
  store i32 %6, i32* @max_tries, align 4
  %33 = icmp slt i32 0, %6
  br i1 %33, label %.lr.ph16, label %.loopexit

.lr.ph16:                                         ; preds = %32
  %34 = zext i32 %2 to i64
  br label %35

; <label>:35:                                     ; preds = %.lr.ph16, %123
  %.0114 = phi i32 [ 0, %.lr.ph16 ], [ %99, %123 ]
  %.0213 = phi i32 [ -1, %.lr.ph16 ], [ %94, %123 ]
  %.1612 = phi i32 [ 0, %.lr.ph16 ], [ %113, %123 ]
  call void @unroll_loop(i32 175)
  %36 = trunc i32 %.0114 to i8
  %37 = getelementptr inbounds [29 x i32], [29 x i32]* %10, i32 0, i32 0
  %38 = call i32 @doRound([256 x %struct.PTW_tableentry]* %3, i32 0, i32 %.0213, i8 zeroext %36, i32* %37, i8* %1, i32 %2, %struct.PTW_attackstate* %0, i8 zeroext 0, i32* %5, i32* %7, [256 x i32]* %8)
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %51

; <label>:40:                                     ; preds = %35
  %41 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %42 = load i32, i32* %41, align 8
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %50, label %44

; <label>:44:                                     ; preds = %40
  %45 = sub nsw i32 %2, 1
  %46 = getelementptr inbounds [29 x i32], [29 x i32]* %10, i32 0, i32 0
  %47 = load i32, i32* @tried, align 4
  %48 = getelementptr [29 x [256 x %struct.PTW_tableentry]], [29 x [256 x %struct.PTW_tableentry]]* @keytable, i32 0, i32 0
  %49 = getelementptr [29 x i32], [29 x i32]* @depth, i32 0, i32 0
  call void @show_wep_stats(i32 %45, i32 1, [256 x %struct.PTW_tableentry]* %48, i32* %46, i32* %49, i32 %47)
  br label %50

; <label>:50:                                     ; preds = %44, %40
  br label %136

; <label>:51:                                     ; preds = %35
  %52 = sext i32 %.1612 to i64
  br label %53

; <label>:53:                                     ; preds = %75, %51
  %indvars.iv = phi i64 [ %indvars.iv.next, %75 ], [ %52, %51 ]
  call void @unroll_loop(i32 176)
  %54 = mul nsw i32 %2, 255
  %55 = sext i32 %54 to i64
  %56 = icmp slt i64 %indvars.iv, %55
  br i1 %56, label %57, label %75

; <label>:57:                                     ; preds = %53
  %58 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %4, i64 %indvars.iv
  %59 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %58, i32 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, i32* %5, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 1
  br i1 %64, label %73, label %65

; <label>:65:                                     ; preds = %57
  %66 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %4, i64 %indvars.iv
  %67 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %66, i32 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i32, i32* %7, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, 1
  br label %73

; <label>:73:                                     ; preds = %65, %57
  %74 = phi i1 [ true, %57 ], [ %72, %65 ]
  br label %75

; <label>:75:                                     ; preds = %73, %53
  %76 = phi i1 [ false, %53 ], [ %74, %73 ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %76, label %53, label %77

; <label>:77:                                     ; preds = %75
  %.27.lcssa.wide = phi i64 [ %indvars.iv, %75 ]
  %78 = trunc i64 %.27.lcssa.wide to i32
  %79 = mul nsw i32 %2, 255
  %80 = icmp sge i32 %78, %79
  br i1 %80, label %81, label %82

; <label>:81:                                     ; preds = %77
  br label %125

; <label>:82:                                     ; preds = %77
  %83 = sext i32 %78 to i64
  %84 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %4, i64 %83
  %85 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %84, i32 0, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [29 x i32], [29 x i32]* %10, i64 0, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %88, align 4
  %91 = sext i32 %78 to i64
  %92 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %4, i64 %91
  %93 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %92, i32 0, i32 0
  %94 = load i32, i32* %93, align 4
  %95 = sext i32 %78 to i64
  %96 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %4, i64 %95
  %97 = getelementptr inbounds %struct.sorthelper, %struct.sorthelper* %96, i32 0, i32 1
  %98 = load i8, i8* %97, align 4
  %99 = zext i8 %98 to i32
  %100 = icmp slt i32 0, %2
  br i1 %100, label %.lr.ph, label %112

.lr.ph:                                           ; preds = %82
  br label %101

; <label>:101:                                    ; preds = %.lr.ph, %111
  %indvars.iv10 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next11, %111 ]
  %.19 = phi i32 [ 1, %.lr.ph ], [ %.2, %111 ]
  call void @unroll_loop(i32 177)
  %102 = getelementptr inbounds [29 x i32], [29 x i32]* %10, i64 0, i64 %indvars.iv10
  %103 = load i32, i32* %102, align 4
  %104 = mul nsw i32 %.19, %103
  %105 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv10
  %106 = load i32, i32* %105, align 4
  %107 = icmp eq i32 %106, 1
  br i1 %107, label %108, label %110

; <label>:108:                                    ; preds = %101
  %109 = mul nsw i32 %104, 256
  br label %110

; <label>:110:                                    ; preds = %108, %101
  %.2 = phi i32 [ %109, %108 ], [ %104, %101 ]
  br label %111

; <label>:111:                                    ; preds = %110
  %indvars.iv.next11 = add nuw nsw i64 %indvars.iv10, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next11, %34
  br i1 %exitcond1, label %101, label %._crit_edge

._crit_edge:                                      ; preds = %111
  %split = phi i32 [ %.2, %111 ]
  br label %112

; <label>:112:                                    ; preds = %._crit_edge, %82
  %.1.lcssa = phi i32 [ %split, %._crit_edge ], [ 1, %82 ]
  %113 = add nsw i32 %78, 1
  %114 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %115 = load i32, i32* %114, align 8
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %123, label %117

; <label>:117:                                    ; preds = %112
  %118 = sub nsw i32 %2, 1
  %119 = getelementptr inbounds [29 x i32], [29 x i32]* %10, i32 0, i32 0
  %120 = load i32, i32* @tried, align 4
  %121 = getelementptr [29 x [256 x %struct.PTW_tableentry]], [29 x [256 x %struct.PTW_tableentry]]* @keytable, i32 0, i32 0
  %122 = getelementptr [29 x i32], [29 x i32]* @depth, i32 0, i32 0
  call void @show_wep_stats(i32 %118, i32 0, [256 x %struct.PTW_tableentry]* %121, i32* %119, i32* %122, i32 %120)
  br label %123

; <label>:123:                                    ; preds = %117, %112
  %124 = icmp slt i32 %.1.lcssa, %6
  br i1 %124, label %35, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %123
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %32
  br label %125

; <label>:125:                                    ; preds = %.loopexit, %81
  %126 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %127 = load i32, i32* %126, align 8
  %128 = icmp ne i32 %127, 0
  br i1 %128, label %135, label %129

; <label>:129:                                    ; preds = %125
  %130 = sub nsw i32 %2, 1
  %131 = getelementptr inbounds [29 x i32], [29 x i32]* %10, i32 0, i32 0
  %132 = load i32, i32* @tried, align 4
  %133 = getelementptr [29 x [256 x %struct.PTW_tableentry]], [29 x [256 x %struct.PTW_tableentry]]* @keytable, i32 0, i32 0
  %134 = getelementptr [29 x i32], [29 x i32]* @depth, i32 0, i32 0
  call void @show_wep_stats(i32 %130, i32 1, [256 x %struct.PTW_tableentry]* %133, i32* %131, i32* %134, i32 %132)
  br label %135

; <label>:135:                                    ; preds = %129, %125
  br label %136

; <label>:136:                                    ; preds = %135, %50
  %.0 = phi i32 [ 1, %50 ], [ 0, %135 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @getdrv([256 x %struct.PTW_tableentry]*, i32, double*, double*) #0 {
  br label %5

; <label>:5:                                      ; preds = %4, %11
  %indvars.iv22 = phi i64 [ 0, %4 ], [ %indvars.iv.next23, %11 ]
  %.0421 = phi i32 [ 0, %4 ], [ %10, %11 ]
  call void @unroll_loop(i32 178)
  %6 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %0, i64 0
  %7 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %6, i64 0, i64 %indvars.iv22
  %8 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %7, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %.0421, %9
  br label %11

; <label>:11:                                     ; preds = %5
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 1
  %exitcond24 = icmp ne i64 %indvars.iv.next23, 256
  br i1 %exitcond24, label %5, label %12

; <label>:12:                                     ; preds = %11
  %.04.lcssa = phi i32 [ %10, %11 ]
  %13 = sdiv i32 %.04.lcssa, 256
  %14 = sitofp i32 %13 to double
  %15 = icmp slt i32 0, %1
  br i1 %15, label %.lr.ph, label %87

.lr.ph:                                           ; preds = %12
  %16 = zext i32 %1 to i64
  br label %17

; <label>:17:                                     ; preds = %.lr.ph, %86
  %indvars.iv17 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next18, %86 ]
  call void @unroll_loop(i32 179)
  %18 = getelementptr inbounds [13 x double], [13 x double]* @eval, i64 0, i64 %indvars.iv17
  %19 = load double, double* %18, align 8
  %20 = getelementptr inbounds [13 x double], [13 x double]* @eval, i64 0, i64 %indvars.iv17
  %21 = load double, double* %20, align 8
  %22 = fsub double 1.000000e+00, %21
  %23 = getelementptr inbounds double, double* %2, i64 %indvars.iv17
  store double 0.000000e+00, double* %23, align 8
  %24 = getelementptr inbounds double, double* %3, i64 %indvars.iv17
  store double 0.000000e+00, double* %24, align 8
  br label %25

; <label>:25:                                     ; preds = %17, %41
  %indvars.iv = phi i64 [ 0, %17 ], [ %indvars.iv.next, %41 ]
  %.011 = phi double [ 0.000000e+00, %17 ], [ %.1, %41 ]
  %.0110 = phi double [ 0.000000e+00, %17 ], [ %.12, %41 ]
  call void @unroll_loop(i32 180)
  %26 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %0, i64 %indvars.iv17
  %27 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %26, i64 0, i64 %indvars.iv
  %28 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %27, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = sitofp i32 %29 to double
  %31 = fcmp ogt double %30, %.0110
  br i1 %31, label %32, label %40

; <label>:32:                                     ; preds = %25
  %33 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %0, i64 %indvars.iv17
  %34 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %33, i64 0, i64 %indvars.iv
  %35 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %34, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = sitofp i32 %36 to double
  %38 = trunc i64 %indvars.iv to i32
  %39 = sitofp i32 %38 to double
  br label %40

; <label>:40:                                     ; preds = %32, %25
  %.12 = phi double [ %37, %32 ], [ %.0110, %25 ]
  %.1 = phi double [ %39, %32 ], [ %.011, %25 ]
  br label %41

; <label>:41:                                     ; preds = %40
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %25, label %42

; <label>:42:                                     ; preds = %41
  %.0.lcssa = phi double [ %.1, %41 ]
  %43 = sitofp i32 %.04.lcssa to double
  %44 = sitofp i32 %.04.lcssa to double
  %45 = fmul double %19, %43
  %46 = fdiv double %22, 2.550000e+02
  %47 = fmul double %46, %44
  br label %48

; <label>:48:                                     ; preds = %42, %84
  %indvars.iv13 = phi i64 [ 0, %42 ], [ %indvars.iv.next14, %84 ]
  call void @unroll_loop(i32 181)
  %49 = trunc i64 %indvars.iv13 to i32
  %50 = sitofp i32 %49 to double
  %51 = fcmp oeq double %50, %.0.lcssa
  br i1 %51, label %52, label %60

; <label>:52:                                     ; preds = %48
  %53 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %0, i64 %indvars.iv17
  %54 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %53, i64 0, i64 %indvars.iv13
  %55 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %54, i32 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = sitofp i32 %56 to double
  %58 = fdiv double %57, %45
  %59 = fsub double 1.000000e+00, %58
  br label %68

; <label>:60:                                     ; preds = %48
  %61 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %0, i64 %indvars.iv17
  %62 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %61, i64 0, i64 %indvars.iv13
  %63 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %62, i32 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = sitofp i32 %64 to double
  %66 = fdiv double %65, %47
  %67 = fsub double 1.000000e+00, %66
  br label %68

; <label>:68:                                     ; preds = %60, %52
  %.03 = phi double [ %59, %52 ], [ %67, %60 ]
  %69 = fmul double %.03, %.03
  %70 = getelementptr inbounds double, double* %3, i64 %indvars.iv17
  %71 = load double, double* %70, align 8
  %72 = fadd double %71, %69
  store double %72, double* %70, align 8
  %73 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %0, i64 %indvars.iv17
  %74 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %73, i64 0, i64 %indvars.iv13
  %75 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %74, i32 0, i32 0
  %76 = load i32, i32* %75, align 4
  %77 = sitofp i32 %76 to double
  %78 = fdiv double %77, %14
  %79 = fsub double 1.000000e+00, %78
  %80 = fmul double %79, %79
  %81 = getelementptr inbounds double, double* %2, i64 %indvars.iv17
  %82 = load double, double* %81, align 8
  %83 = fadd double %82, %80
  store double %83, double* %81, align 8
  br label %84

; <label>:84:                                     ; preds = %68
  %indvars.iv.next14 = add nuw nsw i64 %indvars.iv13, 1
  %exitcond15 = icmp ne i64 %indvars.iv.next14, 256
  br i1 %exitcond15, label %48, label %85

; <label>:85:                                     ; preds = %84
  br label %86

; <label>:86:                                     ; preds = %85
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %exitcond1 = icmp ne i64 %indvars.iv.next18, %16
  br i1 %exitcond1, label %17, label %._crit_edge

._crit_edge:                                      ; preds = %86
  br label %87

; <label>:87:                                     ; preds = %._crit_edge, %12
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @comparedoublesorthelper(i8*, i8*) #0 {
  %3 = bitcast i8* %0 to %struct.doublesorthelper*
  %4 = bitcast i8* %1 to %struct.doublesorthelper*
  %5 = getelementptr inbounds %struct.doublesorthelper, %struct.doublesorthelper* %3, i32 0, i32 1
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct.doublesorthelper, %struct.doublesorthelper* %4, i32 0, i32 1
  %8 = load double, double* %7, align 8
  %9 = fcmp ogt double %6, %8
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %2
  br label %19

; <label>:11:                                     ; preds = %2
  %12 = getelementptr inbounds %struct.doublesorthelper, %struct.doublesorthelper* %3, i32 0, i32 1
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds %struct.doublesorthelper, %struct.doublesorthelper* %4, i32 0, i32 1
  %15 = load double, double* %14, align 8
  %16 = fcmp oeq double %13, %15
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %11
  br label %19

; <label>:18:                                     ; preds = %11
  br label %19

; <label>:19:                                     ; preds = %18, %17, %10
  %.0 = phi i32 [ 1, %10 ], [ 0, %17 ], [ -1, %18 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @doRound([256 x %struct.PTW_tableentry]*, i32, i32, i8 zeroext, i32*, i8*, i32, %struct.PTW_attackstate*, i8 zeroext, i32*, i32*, [256 x i32]*) #0 {
  %13 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %14 = load i32, i32* %13, align 8
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %23, label %16

; <label>:16:                                     ; preds = %12
  %17 = icmp slt i32 %1, 4
  br i1 %17, label %18, label %23

; <label>:18:                                     ; preds = %16
  %19 = sub nsw i32 %6, 1
  %20 = load i32, i32* @tried, align 4
  %21 = getelementptr [29 x [256 x %struct.PTW_tableentry]], [29 x [256 x %struct.PTW_tableentry]]* @keytable, i32 0, i32 0
  %22 = getelementptr [29 x i32], [29 x i32]* @depth, i32 0, i32 0
  call void @show_wep_stats(i32 %19, i32 0, [256 x %struct.PTW_tableentry]* %21, i32* %4, i32* %22, i32 %20)
  br label %23

; <label>:23:                                     ; preds = %18, %16, %12
  %24 = icmp sgt i32 %1, 0
  br i1 %24, label %25, label %39

; <label>:25:                                     ; preds = %23
  %26 = sub nsw i32 %1, 1
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds [256 x i32], [256 x i32]* %11, i64 %27
  %29 = sub nsw i32 %1, 1
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %5, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i64
  %34 = getelementptr inbounds [256 x i32], [256 x i32]* %28, i64 0, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %38, label %37

; <label>:37:                                     ; preds = %25
  br label %166

; <label>:38:                                     ; preds = %25
  br label %39

; <label>:39:                                     ; preds = %38, %23
  %40 = icmp eq i32 %1, %6
  br i1 %40, label %41, label %43

; <label>:41:                                     ; preds = %39
  %42 = call i32 @correct(%struct.PTW_attackstate* %7, i8* %5, i32 %6)
  br label %166

; <label>:43:                                     ; preds = %39
  %44 = sext i32 %1 to i64
  %45 = getelementptr inbounds i32, i32* %10, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %65

; <label>:48:                                     ; preds = %43
  br label %49

; <label>:49:                                     ; preds = %48, %61
  %.023 = phi i32 [ 0, %48 ], [ %62, %61 ]
  call void @unroll_loop(i32 182)
  %50 = trunc i32 %.023 to i8
  %51 = sext i32 %1 to i64
  %52 = getelementptr inbounds i8, i8* %5, i64 %51
  store i8 %50, i8* %52, align 1
  %53 = add nsw i32 %1, 1
  %54 = zext i8 %8 to i32
  %55 = add nuw nsw i32 %54, %.023
  %56 = trunc i32 %55 to i8
  %57 = call i32 @doRound([256 x %struct.PTW_tableentry]* %0, i32 %53, i32 %2, i8 zeroext %3, i32* %4, i8* %5, i32 %6, %struct.PTW_attackstate* %7, i8 zeroext %56, i32* %9, i32* %10, [256 x i32]* %11)
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %60

; <label>:59:                                     ; preds = %49
  br label %166

; <label>:60:                                     ; preds = %49
  br label %61

; <label>:61:                                     ; preds = %60
  %62 = add nuw nsw i32 %.023, 1
  %63 = icmp ult i32 %62, 256
  br i1 %63, label %49, label %64

; <label>:64:                                     ; preds = %61
  br label %166

; <label>:65:                                     ; preds = %43
  %66 = icmp eq i32 %1, %2
  br i1 %66, label %67, label %76

; <label>:67:                                     ; preds = %65
  %68 = zext i8 %3 to i32
  %69 = zext i8 %8 to i32
  %70 = sub nsw i32 %68, %69
  %71 = trunc i32 %70 to i8
  %72 = sext i32 %1 to i64
  %73 = getelementptr inbounds i8, i8* %5, i64 %72
  store i8 %71, i8* %73, align 1
  %74 = add nsw i32 %1, 1
  %75 = call i32 @doRound([256 x %struct.PTW_tableentry]* %0, i32 %74, i32 %2, i8 zeroext %3, i32* %4, i8* %5, i32 %6, %struct.PTW_attackstate* %7, i8 zeroext %3, i32* %9, i32* %10, [256 x i32]* %11)
  br label %166

; <label>:76:                                     ; preds = %65
  %77 = sext i32 %1 to i64
  %78 = getelementptr inbounds i32, i32* %9, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = icmp eq i32 %79, 1
  br i1 %80, label %81, label %119

; <label>:81:                                     ; preds = %76
  %82 = add nsw i32 3, %1
  %83 = trunc i32 %82 to i8
  %84 = sub nsw i32 %1, 1
  %85 = icmp sge i32 %84, 1
  br i1 %85, label %.lr.ph, label %118

.lr.ph:                                           ; preds = %81
  %86 = add i32 %1, -1
  %87 = sext i32 %86 to i64
  br label %88

; <label>:88:                                     ; preds = %.lr.ph, %116
  %indvars.iv = phi i64 [ %87, %.lr.ph ], [ %indvars.iv.next, %116 ]
  %.015 = phi i8 [ %83, %.lr.ph ], [ %97, %116 ]
  call void @unroll_loop(i32 183)
  %89 = getelementptr inbounds i8, i8* %5, i64 %indvars.iv
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = add nsw i32 3, %91
  %93 = trunc i64 %indvars.iv to i32
  %94 = add nsw i32 %92, %93
  %95 = zext i8 %.015 to i32
  %96 = add nsw i32 %95, %94
  %97 = trunc i32 %96 to i8
  %98 = zext i8 %97 to i32
  %99 = sub nsw i32 256, %98
  %100 = trunc i32 %99 to i8
  %101 = sext i32 %1 to i64
  %102 = getelementptr inbounds i8, i8* %5, i64 %101
  store i8 %100, i8* %102, align 1
  %103 = add nsw i32 %1, 1
  %104 = zext i8 %97 to i32
  %105 = sub nsw i32 256, %104
  %106 = zext i8 %8 to i32
  %107 = add nsw i32 %105, %106
  %108 = srem i32 %107, 256
  %109 = trunc i32 %108 to i8
  %110 = call i32 @doRound([256 x %struct.PTW_tableentry]* %0, i32 %103, i32 %2, i8 zeroext %3, i32* %4, i8* %5, i32 %6, %struct.PTW_attackstate* %7, i8 zeroext %109, i32* %9, i32* %10, [256 x i32]* %11)
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %112, label %115

; <label>:112:                                    ; preds = %88
  %113 = getelementptr [36 x i8], [36 x i8]* @.str.1.223, i32 0, i32 0
  %114 = call i32 (i8*, ...) @printf(i8* %113, i32 %1)
  br label %166

; <label>:115:                                    ; preds = %88
  br label %116

; <label>:116:                                    ; preds = %115
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %117 = icmp sge i64 %indvars.iv.next, 1
  br i1 %117, label %88, label %._crit_edge

._crit_edge:                                      ; preds = %116
  br label %118

; <label>:118:                                    ; preds = %._crit_edge, %81
  br label %166

; <label>:119:                                    ; preds = %76
  %120 = sext i32 %1 to i64
  %121 = getelementptr inbounds i32, i32* %4, i64 %120
  %122 = load i32, i32* %121, align 4
  %123 = icmp slt i32 0, %122
  br i1 %123, label %.lr.ph8, label %165

.lr.ph8:                                          ; preds = %119
  br label %124

; <label>:124:                                    ; preds = %.lr.ph8, %161
  %indvars.iv10 = phi i64 [ 0, %.lr.ph8 ], [ %indvars.iv.next11, %161 ]
  call void @unroll_loop(i32 184)
  %125 = sext i32 %1 to i64
  %126 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %0, i64 %125
  %127 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %126, i64 0, i64 %indvars.iv10
  %128 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %127, i32 0, i32 1
  %129 = load i8, i8* %128, align 4
  %130 = zext i8 %129 to i32
  %131 = zext i8 %8 to i32
  %132 = sub nsw i32 %130, %131
  %133 = trunc i32 %132 to i8
  %134 = sext i32 %1 to i64
  %135 = getelementptr inbounds i8, i8* %5, i64 %134
  store i8 %133, i8* %135, align 1
  %136 = getelementptr %struct.options, %struct.options* @opt, i32 0, i32 6
  %137 = load i32, i32* %136, align 8
  %138 = icmp ne i32 %137, 0
  br i1 %138, label %150, label %139

; <label>:139:                                    ; preds = %124
  %140 = sext i32 %1 to i64
  %141 = getelementptr inbounds [29 x i32], [29 x i32]* @depth, i64 0, i64 %140
  %142 = trunc i64 %indvars.iv10 to i32
  store i32 %142, i32* %141, align 4
  %143 = sext i32 %1 to i64
  %144 = getelementptr inbounds i8, i8* %5, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = sext i32 %1 to i64
  %147 = getelementptr inbounds [29 x [256 x %struct.PTW_tableentry]], [29 x [256 x %struct.PTW_tableentry]]* @keytable, i64 0, i64 %146
  %148 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %147, i64 0, i64 %indvars.iv10
  %149 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %148, i32 0, i32 1
  store i8 %145, i8* %149, align 4
  br label %150

; <label>:150:                                    ; preds = %139, %124
  %151 = add nsw i32 %1, 1
  %152 = sext i32 %1 to i64
  %153 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %0, i64 %152
  %154 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %153, i64 0, i64 %indvars.iv10
  %155 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %154, i32 0, i32 1
  %156 = load i8, i8* %155, align 4
  %157 = call i32 @doRound([256 x %struct.PTW_tableentry]* %0, i32 %151, i32 %2, i8 zeroext %3, i32* %4, i8* %5, i32 %6, %struct.PTW_attackstate* %7, i8 zeroext %156, i32* %9, i32* %10, [256 x i32]* %11)
  %158 = icmp ne i32 %157, 0
  br i1 %158, label %159, label %160

; <label>:159:                                    ; preds = %150
  br label %166

; <label>:160:                                    ; preds = %150
  br label %161

; <label>:161:                                    ; preds = %160
  %indvars.iv.next11 = add nuw nsw i64 %indvars.iv10, 1
  %162 = load i32, i32* %121, align 4
  %163 = sext i32 %162 to i64
  %164 = icmp slt i64 %indvars.iv.next11, %163
  br i1 %164, label %124, label %._crit_edge9

._crit_edge9:                                     ; preds = %161
  br label %165

; <label>:165:                                    ; preds = %._crit_edge9, %119
  br label %166

; <label>:166:                                    ; preds = %165, %159, %118, %112, %67, %64, %59, %41, %37
  %.0 = phi i32 [ %42, %41 ], [ 1, %59 ], [ 0, %64 ], [ %75, %67 ], [ 1, %112 ], [ 0, %118 ], [ 1, %159 ], [ 0, %165 ], [ 0, %37 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare dso_local i32 @rand() #2

; Function Attrs: noinline nounwind uwtable
define internal void @rc4init(i8*, i32, %struct.rc4state*) #0 {
  %4 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %2, i32 0, i32 2
  %5 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i32 0, i32 0
  %6 = getelementptr [256 x i8], [256 x i8]* @rc4initial, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 16 %6, i64 256, i1 false), !track !279
  br label %7

; <label>:7:                                      ; preds = %3, %34
  %indvars.iv = phi i64 [ 0, %3 ], [ %indvars.iv.next, %34 ]
  %.03 = phi i8 [ 0, %3 ], [ %21, %34 ]
  call void @unroll_loop(i32 185)
  %8 = zext i8 %.03 to i32
  %9 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %2, i32 0, i32 2
  %10 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %indvars.iv
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = add nsw i32 %8, %12
  %14 = trunc i64 %indvars.iv to i32
  %15 = srem i32 %14, %1
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = add nsw i32 %13, %19
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %2, i32 0, i32 2
  %23 = getelementptr inbounds [256 x i8], [256 x i8]* %22, i64 0, i64 %indvars.iv
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %2, i32 0, i32 2
  %26 = zext i8 %21 to i64
  %27 = getelementptr inbounds [256 x i8], [256 x i8]* %25, i64 0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %2, i32 0, i32 2
  %30 = getelementptr inbounds [256 x i8], [256 x i8]* %29, i64 0, i64 %indvars.iv
  store i8 %28, i8* %30, align 1
  %31 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %2, i32 0, i32 2
  %32 = zext i8 %21 to i64
  %33 = getelementptr inbounds [256 x i8], [256 x i8]* %31, i64 0, i64 %32
  store i8 %24, i8* %33, align 1
  br label %34

; <label>:34:                                     ; preds = %7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %7, label %35

; <label>:35:                                     ; preds = %34
  %36 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %2, i32 0, i32 0
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %2, i32 0, i32 1
  store i8 0, i8* %37, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @rc4update(%struct.rc4state*) #0 {
  %2 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 0
  %3 = load i8, i8* %2, align 1
  %4 = add i8 %3, 1
  store i8 %4, i8* %2, align 1
  %5 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 2
  %6 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 1
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = add nsw i32 %14, %11
  %16 = trunc i32 %15 to i8
  store i8 %16, i8* %12, align 1
  %17 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 2
  %18 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i64
  %21 = getelementptr inbounds [256 x i8], [256 x i8]* %17, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 2
  %24 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 1
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i64
  %27 = getelementptr inbounds [256 x i8], [256 x i8]* %23, i64 0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 2
  %30 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i64
  %33 = getelementptr inbounds [256 x i8], [256 x i8]* %29, i64 0, i64 %32
  store i8 %28, i8* %33, align 1
  %34 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 2
  %35 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* %34, i64 0, i64 %37
  store i8 %22, i8* %38, align 1
  %39 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 2
  %40 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds [256 x i8], [256 x i8]* %39, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 2
  %47 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 1
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds [256 x i8], [256 x i8]* %46, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add nsw i32 %45, %52
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds %struct.rc4state, %struct.rc4state* %0, i32 0, i32 2
  %56 = zext i8 %54 to i64
  %57 = getelementptr inbounds [256 x i8], [256 x i8]* %55, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  ret i8 %58
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @PTW_addsession(%struct.PTW_attackstate*, i8*, i8*, i32*, i32) #0 {
  %6 = alloca [29 x i8], align 16, !track !280
  %7 = getelementptr inbounds i8, i8* %1, i64 0
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = shl i32 %9, 16
  %11 = getelementptr inbounds i8, i8* %1, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = shl i32 %13, 8
  %15 = or i32 %10, %14
  %16 = getelementptr inbounds i8, i8* %1, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = or i32 %15, %18
  %20 = sdiv i32 %19, 8
  %21 = srem i32 %19, 8
  %22 = shl i32 1, %21
  %23 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 1
  %24 = sext i32 %20 to i64
  %25 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* %23, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = and i32 %27, %22
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %144

; <label>:30:                                     ; preds = %5
  %31 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 1
  %32 = sext i32 %20 to i64
  %33 = getelementptr inbounds [2097152 x i8], [2097152 x i8]* %31, i64 0, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = or i32 %35, %22
  %37 = trunc i32 %36 to i8
  store i8 %37, i8* %33, align 1
  %38 = icmp slt i32 0, %4
  br i1 %38, label %.lr.ph, label %121

.lr.ph:                                           ; preds = %30
  %39 = sext i32 %4 to i64
  br label %40

; <label>:40:                                     ; preds = %.lr.ph, %119
  %indvars.iv5 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next6, %119 ]
  call void @unroll_loop(i32 186)
  %41 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %41, align 8
  %44 = mul nuw nsw i64 32, %indvars.iv5
  %45 = getelementptr inbounds i8, i8* %2, i64 %44
  %46 = getelementptr inbounds [29 x i8], [29 x i8]* %6, i32 0, i32 0
  call void @guesskeybytes(i32 3, i8* %1, i8* %45, i8* %46, i32 29)
  br label %47

; <label>:47:                                     ; preds = %40, %59
  %indvars.iv = phi i64 [ 0, %40 ], [ %indvars.iv.next, %59 ]
  call void @unroll_loop(i32 187)
  %48 = getelementptr inbounds i32, i32* %3, i64 %indvars.iv5
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 4
  %51 = getelementptr inbounds [29 x [256 x %struct.PTW_tableentry]], [29 x [256 x %struct.PTW_tableentry]]* %50, i64 0, i64 %indvars.iv
  %52 = getelementptr inbounds [29 x i8], [29 x i8]* %6, i64 0, i64 %indvars.iv
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %51, i64 0, i64 %54
  %56 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %55, i32 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = add nsw i32 %57, %49
  store i32 %58, i32* %56, align 8
  br label %59

; <label>:59:                                     ; preds = %47
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 29
  br i1 %exitcond, label %47, label %60

; <label>:60:                                     ; preds = %59
  %61 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 6
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 0
  %64 = load i32, i32* %63, align 8
  %65 = icmp slt i32 %62, %64
  br i1 %65, label %66, label %88

; <label>:66:                                     ; preds = %60
  %67 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 6
  %68 = load i32, i32* %67, align 8
  %69 = shl i32 %68, 1
  %70 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 6
  store i32 %69, i32* %70, align 8
  %71 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 5
  %72 = load %struct.PTW_session*, %struct.PTW_session** %71, align 8
  %73 = bitcast %struct.PTW_session* %72 to i8*
  %74 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 6
  %75 = load i32, i32* %74, align 8
  %76 = sext i32 %75 to i64
  %77 = mul i64 %76, 40
  %78 = call i8* @realloc(i8* %73, i64 %77) #9, !track !281
  %79 = bitcast i8* %78 to %struct.PTW_session*
  %80 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 5
  store %struct.PTW_session* %79, %struct.PTW_session** %80, align 8
  %81 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 5
  %82 = load %struct.PTW_session*, %struct.PTW_session** %81, align 8
  %83 = icmp eq %struct.PTW_session* %82, null
  br i1 %83, label %84, label %87

; <label>:84:                                     ; preds = %66
  %85 = getelementptr [27 x i8], [27 x i8]* @.str.222, i32 0, i32 0
  %86 = call i32 (i8*, ...) @printf(i8* %85)
  call void @exit(i32 -1) #11
  unreachable

; <label>:87:                                     ; preds = %66
  br label %88

; <label>:88:                                     ; preds = %87, %60
  %89 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 5
  %90 = load %struct.PTW_session*, %struct.PTW_session** %89, align 8
  %91 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 0
  %92 = load i32, i32* %91, align 8
  %93 = sub nsw i32 %92, 1
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %90, i64 %94
  %96 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %95, i32 0, i32 0
  %97 = getelementptr inbounds [3 x i8], [3 x i8]* %96, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 1 %1, i64 3, i1 false), !track !282
  %98 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 5
  %99 = load %struct.PTW_session*, %struct.PTW_session** %98, align 8
  %100 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 0
  %101 = load i32, i32* %100, align 8
  %102 = sub nsw i32 %101, 1
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %99, i64 %103
  %105 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %104, i32 0, i32 1
  %106 = getelementptr inbounds [32 x i8], [32 x i8]* %105, i32 0, i32 0
  %107 = mul nuw nsw i64 32, %indvars.iv5
  %108 = getelementptr inbounds i8, i8* %2, i64 %107
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %106, i8* align 1 %108, i64 32, i1 false), !track !283
  %109 = getelementptr inbounds i32, i32* %3, i64 %indvars.iv5
  %110 = load i32, i32* %109, align 4
  %111 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 5
  %112 = load %struct.PTW_session*, %struct.PTW_session** %111, align 8
  %113 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 0
  %114 = load i32, i32* %113, align 8
  %115 = sub nsw i32 %114, 1
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %112, i64 %116
  %118 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %117, i32 0, i32 2
  store i32 %110, i32* %118, align 4
  br label %119

; <label>:119:                                    ; preds = %88
  %indvars.iv.next6 = add nuw nsw i64 %indvars.iv5, 1
  %120 = icmp slt i64 %indvars.iv.next6, %39
  br i1 %120, label %40, label %._crit_edge

._crit_edge:                                      ; preds = %119
  br label %121

; <label>:121:                                    ; preds = %._crit_edge, %30
  %122 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 2
  %123 = load i32, i32* %122, align 4
  %124 = icmp slt i32 %123, 10000
  br i1 %124, label %125, label %143

; <label>:125:                                    ; preds = %121
  %126 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 3
  %127 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 2
  %128 = load i32, i32* %127, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds [10000 x %struct.PTW_session], [10000 x %struct.PTW_session]* %126, i64 0, i64 %129
  %131 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %130, i32 0, i32 0
  %132 = getelementptr inbounds [3 x i8], [3 x i8]* %131, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %132, i8* align 1 %1, i64 3, i1 false), !track !284
  %133 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 3
  %134 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 2
  %135 = load i32, i32* %134, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds [10000 x %struct.PTW_session], [10000 x %struct.PTW_session]* %133, i64 0, i64 %136
  %138 = getelementptr inbounds %struct.PTW_session, %struct.PTW_session* %137, i32 0, i32 1
  %139 = getelementptr inbounds [32 x i8], [32 x i8]* %138, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %139, i8* align 1 %2, i64 32, i1 false), !track !285
  %140 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 2
  %141 = load i32, i32* %140, align 4
  %142 = add nsw i32 %141, 1
  store i32 %142, i32* %140, align 4
  br label %143

; <label>:143:                                    ; preds = %125, %121
  br label %145

; <label>:144:                                    ; preds = %5
  br label %145

; <label>:145:                                    ; preds = %144, %143
  %.0 = phi i32 [ 1, %143 ], [ 0, %144 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.PTW_attackstate* @PTW_newattackstate() #8 {
  %1 = call noalias i8* @malloc(i64 2556568) #9, !track !286
  %2 = bitcast i8* %1 to %struct.PTW_attackstate*
  %3 = icmp eq %struct.PTW_attackstate* %2, null
  br i1 %3, label %4, label %5

; <label>:4:                                      ; preds = %0
  br label %30

; <label>:5:                                      ; preds = %0
  %6 = bitcast %struct.PTW_attackstate* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 2556568, i1 false)
  br label %7

; <label>:7:                                      ; preds = %5, %17
  %indvars.iv5 = phi i64 [ 0, %5 ], [ %indvars.iv.next6, %17 ]
  br label %8

; <label>:8:                                      ; preds = %7, %14
  %indvars.iv = phi i64 [ 0, %7 ], [ %indvars.iv.next, %14 ]
  %.023 = phi i32 [ 0, %7 ], [ %15, %14 ]
  call void @unroll_loop(i32 188)
  %9 = trunc i32 %.023 to i8
  %10 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %2, i32 0, i32 4
  %11 = getelementptr inbounds [29 x [256 x %struct.PTW_tableentry]], [29 x [256 x %struct.PTW_tableentry]]* %10, i64 0, i64 %indvars.iv5
  %12 = getelementptr inbounds [256 x %struct.PTW_tableentry], [256 x %struct.PTW_tableentry]* %11, i64 0, i64 %indvars.iv
  %13 = getelementptr inbounds %struct.PTW_tableentry, %struct.PTW_tableentry* %12, i32 0, i32 1
  store i8 %9, i8* %13, align 4
  br label %14

; <label>:14:                                     ; preds = %8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %15 = add nuw nsw i32 %.023, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %8, label %16

; <label>:16:                                     ; preds = %14
  br label %17

; <label>:17:                                     ; preds = %16
  %indvars.iv.next6 = add nuw nsw i64 %indvars.iv5, 1
  %exitcond7 = icmp ne i64 %indvars.iv.next6, 29
  br i1 %exitcond7, label %7, label %18

; <label>:18:                                     ; preds = %17
  %19 = call noalias i8* @malloc(i64 163840) #9, !track !287
  %20 = bitcast i8* %19 to %struct.PTW_session*
  %21 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %2, i32 0, i32 5
  store %struct.PTW_session* %20, %struct.PTW_session** %21, align 8
  %22 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %2, i32 0, i32 6
  store i32 4096, i32* %22, align 8
  %23 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %2, i32 0, i32 5
  %24 = load %struct.PTW_session*, %struct.PTW_session** %23, align 8
  %25 = icmp eq %struct.PTW_session* %24, null
  br i1 %25, label %26, label %29

; <label>:26:                                     ; preds = %18
  %27 = getelementptr [27 x i8], [27 x i8]* @.str.222, i32 0, i32 0
  %28 = call i32 (i8*, ...) @printf(i8* %27)
  call void @exit(i32 -1) #11
  unreachable

; <label>:29:                                     ; preds = %18
  br label %30

; <label>:30:                                     ; preds = %29, %4
  %.0 = phi %struct.PTW_attackstate* [ null, %4 ], [ %2, %29 ]
  ret %struct.PTW_attackstate* %.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @PTW_freeattackstate(%struct.PTW_attackstate*) #0 {
  %2 = getelementptr inbounds %struct.PTW_attackstate, %struct.PTW_attackstate* %0, i32 0, i32 5
  %3 = load %struct.PTW_session*, %struct.PTW_session** %2, align 8
  %4 = bitcast %struct.PTW_session* %3 to i8*
  call void @free(i8* %4) #9
  %5 = bitcast %struct.PTW_attackstate* %0 to i8*
  call void @free(i8* %5) #9
  ret void
}

declare void @unroll_loop(i32)

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "track_func"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }
attributes #11 = { noreturn nounwind }
attributes #12 = { noreturn }
attributes #13 = { nounwind readnone }

!llvm.ident = !{!12, !12, !12, !12, !12}
!llvm.module.flags = !{!13}

!0 = !{i64 54}
!1 = !{i64 129}
!2 = !{i64 1}
!3 = !{i64 41}
!4 = !{i64 2}
!5 = !{i64 11}
!6 = !{i64 40}
!7 = !{i64 46}
!8 = !{i64 128}
!9 = !{i64 12}
!10 = !{i64 127}
!11 = !{i64 35}
!12 = !{!"clang version 7.0.0 (tags/RELEASE_700/final)"}
!13 = !{i32 1, !"wchar_size", i32 4}
!14 = !{i64 125}
!15 = !{i64 124}
!16 = !{i64 123}
!17 = !{i64 122}
!18 = !{i64 121}
!19 = !{i64 4}
!20 = !{i64 33}
!21 = !{i64 120}
!22 = !{i64 31}
!23 = !{i64 119}
!24 = !{i64 8}
!25 = !{i64 118}
!26 = !{i64 117}
!27 = !{i64 116}
!28 = !{i64 130}
!29 = !{i64 114}
!30 = !{i64 113}
!31 = !{i64 112}
!32 = !{i64 111}
!33 = !{i64 110}
!34 = !{i64 109}
!35 = !{i64 108}
!36 = !{i64 107}
!37 = !{i64 106}
!38 = !{i64 105}
!39 = !{i64 104}
!40 = !{i64 149}
!41 = !{i64 148}
!42 = !{i64 145}
!43 = !{i64 159}
!44 = !{i64 103}
!45 = !{i64 102}
!46 = !{i64 144}
!47 = !{i64 158}
!48 = !{i64 139}
!49 = !{i64 138}
!50 = !{i64 67}
!51 = !{i64 137}
!52 = !{i64 136}
!53 = !{i64 63}
!54 = !{i64 135}
!55 = !{i64 134}
!56 = !{i64 48}
!57 = !{i64 133}
!58 = !{i64 132}
!59 = !{i64 131}
!60 = !{i64 74}
!61 = !{i64 72}
!62 = !{i64 71}
!63 = !{i64 70}
!64 = !{i64 73}
!65 = !{i64 32}
!66 = !{i64 28}
!67 = !{i64 61}
!68 = !{i64 69}
!69 = !{i64 53}
!70 = !{i64 19}
!71 = !{i64 44}
!72 = !{i64 9}
!73 = !{i64 15}
!74 = !{i64 59}
!75 = !{i64 3}
!76 = !{i64 157}
!77 = !{i64 156}
!78 = !{i64 155}
!79 = !{i64 154}
!80 = !{i64 153}
!81 = !{i64 152}
!82 = !{i64 151}
!83 = !{i64 150}
!84 = !{i64 43}
!85 = !{i64 97}
!86 = !{i64 96}
!87 = !{i64 87}
!88 = !{i64 95}
!89 = !{i64 94}
!90 = !{i64 93}
!91 = !{i64 92}
!92 = !{i64 91}
!93 = !{i64 90}
!94 = !{i64 89}
!95 = !{i64 88}
!96 = !{i64 101}
!97 = !{i64 86}
!98 = !{i64 147}
!99 = !{i64 146}
!100 = !{i64 85}
!101 = !{i64 84}
!102 = !{i64 83}
!103 = !{i64 82}
!104 = !{i64 81}
!105 = !{i64 80}
!106 = !{i64 79}
!107 = !{i64 78}
!108 = !{i64 77}
!109 = !{i64 76}
!110 = !{i64 75}
!111 = !{i64 143}
!112 = !{i64 252}
!113 = !{i64 251}
!114 = !{i64 250}
!115 = !{i64 7}
!116 = !{i64 100}
!117 = !{i64 68}
!118 = !{i64 99}
!119 = !{i64 21}
!120 = !{i64 45}
!121 = !{i64 10}
!122 = !{i64 14}
!123 = !{i64 98}
!124 = !{i64 5}
!125 = !{i64 249}
!126 = !{i64 248}
!127 = !{i64 247}
!128 = !{i64 246}
!129 = !{i64 245}
!130 = !{i64 244}
!131 = !{i64 243}
!132 = !{i64 242}
!133 = !{i64 241}
!134 = !{i64 240}
!135 = !{i64 239}
!136 = !{i64 238}
!137 = !{i64 174}
!138 = !{i64 253}
!139 = !{i64 236}
!140 = !{i64 235}
!141 = !{i64 234}
!142 = !{i64 233}
!143 = !{i64 232}
!144 = !{i64 231}
!145 = !{i64 230}
!146 = !{i64 229}
!147 = !{i64 228}
!148 = !{i64 227}
!149 = !{i64 226}
!150 = !{i64 225}
!151 = !{i64 224}
!152 = !{i64 223}
!153 = !{i64 269}
!154 = !{i64 284}
!155 = !{i64 283}
!156 = !{i64 282}
!157 = !{i64 281}
!158 = !{i64 280}
!159 = !{i64 22}
!160 = !{i64 6}
!161 = !{i64 29}
!162 = !{i64 52}
!163 = !{i64 279}
!164 = !{i64 278}
!165 = !{i64 277}
!166 = !{i64 276}
!167 = !{i64 275}
!168 = !{i64 66}
!169 = !{i64 17}
!170 = !{i64 115}
!171 = !{i64 142}
!172 = !{i64 141}
!173 = !{i64 126}
!174 = !{i64 140}
!175 = !{i64 274}
!176 = !{i64 273}
!177 = !{i64 272}
!178 = !{i64 271}
!179 = !{i64 270}
!180 = !{i64 285}
!181 = !{i64 268}
!182 = !{i64 267}
!183 = !{i64 266}
!184 = !{i64 39}
!185 = !{i64 265}
!186 = !{i64 62}
!187 = !{i64 55}
!188 = !{i64 264}
!189 = !{i64 263}
!190 = !{i64 262}
!191 = !{i64 261}
!192 = !{i64 260}
!193 = !{i64 259}
!194 = !{i64 258}
!195 = !{i64 257}
!196 = !{i64 256}
!197 = !{i64 255}
!198 = !{i64 254}
!199 = !{i64 237}
!200 = !{i64 189}
!201 = !{i64 188}
!202 = !{i64 37}
!203 = !{i64 187}
!204 = !{i64 20}
!205 = !{i64 58}
!206 = !{i64 18}
!207 = !{i64 186}
!208 = !{i64 185}
!209 = !{i64 184}
!210 = !{i64 183}
!211 = !{i64 182}
!212 = !{i64 181}
!213 = !{i64 16}
!214 = !{i64 180}
!215 = !{i64 27}
!216 = !{i64 24}
!217 = !{i64 38}
!218 = !{!"1"}
!219 = !{i64 179}
!220 = !{i64 178}
!221 = !{i64 177}
!222 = !{i64 176}
!223 = !{i64 175}
!224 = !{i64 190}
!225 = !{i64 173}
!226 = !{i64 36}
!227 = !{i64 172}
!228 = !{i64 171}
!229 = !{i64 170}
!230 = !{i64 169}
!231 = !{i64 168}
!232 = !{i64 167}
!233 = !{i64 166}
!234 = !{i64 165}
!235 = !{i64 164}
!236 = !{i64 163}
!237 = !{i64 162}
!238 = !{i64 161}
!239 = !{i64 160}
!240 = !{i64 206}
!241 = !{i64 221}
!242 = !{i64 220}
!243 = !{i64 219}
!244 = !{i64 218}
!245 = !{i64 217}
!246 = !{i64 216}
!247 = !{i64 215}
!248 = !{i64 214}
!249 = !{i64 213}
!250 = !{i64 212}
!251 = !{i64 211}
!252 = !{i64 210}
!253 = !{i64 209}
!254 = !{i64 208}
!255 = !{i64 65}
!256 = !{i64 64}
!257 = !{i64 207}
!258 = !{i64 222}
!259 = !{i64 205}
!260 = !{i64 42}
!261 = !{i64 51}
!262 = !{i64 50}
!263 = !{i64 26}
!264 = !{i64 60}
!265 = !{i64 49}
!266 = !{i64 23}
!267 = !{i64 204}
!268 = !{i64 203}
!269 = !{i64 202}
!270 = !{i64 25}
!271 = !{i64 30}
!272 = !{i64 201}
!273 = !{i64 47}
!274 = !{i64 13}
!275 = !{i64 200}
!276 = !{i64 199}
!277 = !{i64 34}
!278 = !{i64 198}
!279 = !{i64 197}
!280 = !{i64 57}
!281 = !{i64 196}
!282 = !{i64 195}
!283 = !{i64 194}
!284 = !{i64 193}
!285 = !{i64 192}
!286 = !{i64 56}
!287 = !{i64 191}
