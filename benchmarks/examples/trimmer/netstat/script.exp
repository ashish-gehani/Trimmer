#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Mon Dec  7 21:16:20 2020
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn make -f Makefile_netstat
match_max 100000
expect -exact "cd netstat-1.60 && \\\r
sed -i 's/CC	= gcc//g' ./Makefile && \\\r
CC=wllvm make && \\\r
extract-bc netstat && \\\r
opt -mem2reg -loops -lcssa -loop-simplify -loop-rotate -indvars netstat.bc -o netstat.bc && \\\r
mv netstat.bc ../ \r
make\[1\]: Entering directory '/OCCAM-Benchmarks/examples/trimmer/netstat/netstat-1.60'\r
Configuring the Linux net-tools (NET-3 Base Utilities)...\r
\r
*\r
*\r
*              Internationalization\r
*\r
* The net-tools package has currently been translated to French,\r
* German and Brazilian Portugese.  Other translations are, of\r
* course, welcome.  Answer `n' here if you have no support for\r
* internationalization on your system.\r
*\r
Does your system support GNU gettext? (I18N) \[y\] "
send -- "y\r"
expect -exact "y\r
*\r
*\r
*             Protocol Families.\r
* \r
UNIX protocol family (HAVE_AFUNIX) \[y\] "
send -- "y\r"
expect -exact "y\r
INET (TCP/IP) protocol family (HAVE_AFINET) \[y\] "
send -- "y\r"
expect -exact "y\r
INET6 (IPv6) protocol family (HAVE_AFINET6) \[y\] "
send -- "y\r"
expect -exact "y\r
Novell IPX/SPX protocol family (HAVE_AFIPX) \[y\] "
send -- "y\r"
expect -exact "y\r
Appletalk DDP protocol family (HAVE_AFATALK) \[y\] "
send -- "y\r"
expect -exact "y\r
AX25 (packet radio) protocol family (HAVE_AFAX25) \[y\] "
send -- "y\r"
expect -exact "y\r
NET/ROM (packet radio) protocol family (HAVE_AFNETROM) \[y\] "
send -- "y\r"
expect -exact "y\r
Rose (packet radio) protocol family (HAVE_AFROSE) \[y\] "
send -- "y\r"
expect -exact "y\r
X.25 (CCITT) protocol family (HAVE_AFX25) \[y\] "
send -- "y\r"
expect -exact "y\r
Econet protocol family (HAVE_AFECONET) \[y\] "
send -- "y\r"
expect -exact "y\r
DECnet protocol family (HAVE_AFDECnet) \[n\] "
send -- "n\r"
expect -exact "n\r
Ash protocol family (HAVE_AFASH) \[y\] "
send -- "y\r"
expect -exact "y\r
*\r
*\r
*            Device Hardware types.\r
*\r
Ethernet (generic) support (HAVE_HWETHER) \[y\] "
send -- "y\r"
expect -exact "y\r
ARCnet support (HAVE_HWARC) \[y\] "
send -- "y\r"
expect -exact "y\r
SLIP (serial line) support (HAVE_HWSLIP) \[y\] "
send -- "y\r"
expect -exact "y\r
PPP (serial line) support (HAVE_HWPPP) \[y\] "
send -- "y\r"
expect -exact "y\r
IPIP Tunnel support (HAVE_HWTUNNEL) \[y\] "
send -- "y\r"
expect -exact "y\r
STRIP (Metricom radio) support (HAVE_HWSTRIP) \[n\] "
send -- "n\r"
expect -exact "n\r
Token ring (generic) support (HAVE_HWTR) \[n\] "
send -- "n\r"
expect -exact "n\r
AX25 (packet radio) support (HAVE_HWAX25) \[y\] "
send -- "y\r"
expect -exact "y\r
Rose (packet radio) support (HAVE_HWROSE) \[y\] "
send -- "y\r"
expect -exact "y\r
NET/ROM (packet radio) support (HAVE_HWNETROM) \[y\] "
send -- "y\r"
expect -exact "y\r
X.25 (generic) support (HAVE_HWX25) \[y\] "
send -- "y\r"
expect -exact "y\r
DLCI/FRAD (frame relay) support (HAVE_HWFR) \[y\] "
send -- "y\r"
expect -exact "y\r
SIT (IPv6-in-IPv4) support (HAVE_HWSIT) \[n\] "
send -- "n\r"
expect -exact "n\r
FDDI (generic) support (HAVE_HWFDDI) \[n\] "
send -- "n\r"
expect -exact "n\r
HIPPI (generic) support (HAVE_HWHIPPI) \[n\] "
send -- "n\r"
expect -exact "n\r
Ash hardware support (HAVE_HWASH) \[n\] "
send -- "n\r"
expect -exact "n\r
(Cisco)-HDLC/LAPB support (HAVE_HWHDLCLAPB) \[n\] "
send -- "n\r"
expect -exact "n\r
IrDA support (HAVE_HWIRDA) \[y\] "
send -- "y\r"
expect -exact "y\r
Econet hardware support (HAVE_HWEC) \[n\] "
send -- "n\r"
expect -exact "n\r
*\r
*\r
*           Other Features.\r
*\r
IP Masquerading support (HAVE_FW_MASQUERADE) \[n\] "
send -- "n\r"
expect -exact "n\r
Build iptunnel and ipmaddr (HAVE_IP_TOOLS) \[n\] "
send -- "n\r"
expect -exact "n\r
Build mii-tool (HAVE_MII) \[n\] "
send -- "n\r"
expect eof
