  ---------------- ** inter-constprop ** ----------------
.str
addGlobal : size 6 at address 1
storing : size 6 at address 1 [6 x i8] c"hello\00"
.str.1
addGlobal : size 14 at address 8
storing : size 14 at address 8 [14 x i8] c"branchPruned\0A\00"
.str.2
addGlobal : size 5 at address 23
storing : size 5 at address 23 [5 x i8] c"test\00"
.str.3
addGlobal : size 3 at address 29
storing : size 3 at address 29 [3 x i8] c"-a\00"
.str.4
addGlobal : size 3 at address 33
storing : size 3 at address 33 [3 x i8] c"-b\00"
.str.5
addGlobal : size 3 at address 37
storing : size 3 at address 37 [3 x i8] c"-s\00"
.str.6
addGlobal : size 5 at address 41
storing : size 5 at address 41 [5 x i8] c"abs:\00"
optarg
addGlobal : size 8 at address 47
optind
addGlobal : size 4 at address 56
.str.7
addGlobal : size 4 at address 61
storing : size 4 at address 61 [4 x i8] c"%d\0A\00"
  %1 = alloca [5 x i8*], align 16 is the inst  in BB %0 main 
allocaInst : size 40 at address 66
  %2 = alloca %struct.Config, align 8 is the inst  in BB %0 main 
allocaInst : size 16 at address 107
  %3 = bitcast [5 x i8*]* %1 to i8* is the inst  in BB %0 main 
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 40, i32 16, i1 false) is the inst  in BB %0 main 
  %4 = bitcast i8* %3 to [5 x i8*]* is the inst  in BB %0 main 
  %5 = getelementptr [5 x i8*], [5 x i8*]* %4, i32 0, i32 0 is the inst  in BB %0 main 
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i8** %5 is the inst  in BB %0 main 
  <badref> = getelementptr inbounds [5 x i8], [5 x i8]* @.str.2, i32 0, i32 0 is the inst 
storing val 23 66 8
  %6 = getelementptr [5 x i8*], [5 x i8*]* %4, i32 0, i32 1 is the inst  in BB %0 main 
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8** %6 is the inst  in BB %0 main 
  <badref> = getelementptr inbounds [3 x i8], [3 x i8]* @.str.3, i32 0, i32 0 is the inst 
storing val 29 74 8
  %7 = getelementptr [5 x i8*], [5 x i8*]* %4, i32 0, i32 2 is the inst  in BB %0 main 
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8** %7 is the inst  in BB %0 main 
  <badref> = getelementptr inbounds [3 x i8], [3 x i8]* @.str.4, i32 0, i32 0 is the inst 
storing val 33 82 8
  %8 = getelementptr [5 x i8*], [5 x i8*]* %4, i32 0, i32 3 is the inst  in BB %0 main 
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8** %8 is the inst  in BB %0 main 
  <badref> = getelementptr inbounds [3 x i8], [3 x i8]* @.str.5, i32 0, i32 0 is the inst 
storing val 37 90 8
  %9 = getelementptr [5 x i8*], [5 x i8*]* %4, i32 0, i32 4 is the inst  in BB %0 main 
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8** %9 is the inst  in BB %0 main 
  <badref> = getelementptr inbounds [6 x i8], [6 x i8]* @.str, i32 0, i32 0 is the inst 
storing val 1 98 8
  %10 = bitcast %struct.Config* %2 to i8* is the inst  in BB %0 main 
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 16, i32 8, i1 false) is the inst  in BB %0 main 
  %11 = getelementptr inbounds [5 x i8*], [5 x i8*]* %1, i32 0, i32 0 is the inst  in BB %0 main 
  %12 = call i32 @getopt(i32 5, i8** %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0)) #5 is the inst  in BB %0 main 
  <badref> = getelementptr inbounds [5 x i8], [5 x i8]* @.str.6, i32 0, i32 0 is the inst 
test
-a
-b
-s
hello
test
-a
-b
-s
hello
getopt returned a
replaced with i32 97
  %13 = trunc i32 97 to i8 is the inst  in BB %0 main 
replaced with i8 97
  %14 = sext i8 97 to i32 is the inst  in BB %0 main 
replaced with i32 97
  %15 = icmp ne i32 97, -1 is the inst  in BB %0 main 
replaced with i1 true
  br i1 true, label %.lr.ph.preheader, label %._crit_edge is the inst  in BB %0 main 
folded to single successor %.lr.ph.preheader
cloning
  br label %.lr.ph is the inst  in BB %.lr.ph.preheader main 
folded to single successor %.lr.ph
cloning
running test
29
succeeded in peeling
  br label %.lr.ph.peel.begin is the inst  in BB %.lr.ph.preheader main_clone 
folded to single successor %.lr.ph.peel.begin
cloning
  br label %.lr.ph.peel is the inst  in BB %.lr.ph.peel.begin main_clone 
folded to single successor %.lr.ph.peel
cloning
  %16 = sext i8 97 to i32 is the inst  in BB %.lr.ph.peel main_clone 
replaced with i32 97
  switch i32 97, label %33 [
    i32 97, label %31
    i32 98, label %29
    i32 115, label %17
  ] is the inst  in BB %.lr.ph.peel main_clone 
folded to single successor %31
cloning
  %32 = getelementptr inbounds %struct.Config, %struct.Config* %2, i32 0, i32 0 is the inst  in BB %31 main_clone 
  store i8 1, i8* %32, align 8 is the inst  in BB %31 main_clone 
storing val 1 107 1
  br label %33 is the inst  in BB %31 main_clone 
folded to single successor %33
cloning
  %34 = call i32 @getopt(i32 5, i8** %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0)) #5 is the inst  in BB %33 main_clone 
test
-a
-b
-s
hello
test
-a
-b
-s
hello
getopt returned b
replaced with i32 98
  %35 = trunc i32 98 to i8 is the inst  in BB %33 main_clone 
replaced with i8 98
  %36 = sext i8 98 to i32 is the inst  in BB %33 main_clone 
replaced with i32 98
  %37 = icmp ne i32 98, -1 is the inst  in BB %33 main_clone 
replaced with i1 true
  br i1 true, label %.lr.ph.peel.next, label %._crit_edge.loopexit is the inst  in BB %33 main_clone 
folded to single successor %.lr.ph.peel.next
cloning
  br label %.lr.ph.peel2 is the inst  in BB %.lr.ph.peel.next main_clone 
folded to single successor %.lr.ph.peel2
cloning
  %38 = sext i8 98 to i32 is the inst  in BB %.lr.ph.peel2 main_clone 
replaced with i32 98
  switch i32 98, label %55 [
    i32 97, label %53
    i32 98, label %51
    i32 115, label %39
  ] is the inst  in BB %.lr.ph.peel2 main_clone 
folded to single successor %51
cloning
  %52 = getelementptr inbounds %struct.Config, %struct.Config* %2, i32 0, i32 1 is the inst  in BB %51 main_clone 
  store i8 1, i8* %52, align 1 is the inst  in BB %51 main_clone 
storing val 1 108 1
  br label %55 is the inst  in BB %51 main_clone 
folded to single successor %55
cloning
  %56 = call i32 @getopt(i32 5, i8** %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0)) #5 is the inst  in BB %55 main_clone 
test
-a
-b
-s
hello
test
-a
-b
-s
hello
getopt returned s
replaced with i32 115
optarg is hello
created new string at 1000001
  %57 = trunc i32 115 to i8 is the inst  in BB %55 main_clone 
replaced with i8 115
  %58 = sext i8 115 to i32 is the inst  in BB %55 main_clone 
replaced with i32 115
  %59 = icmp ne i32 115, -1 is the inst  in BB %55 main_clone 
replaced with i1 true
  br i1 true, label %.lr.ph.peel.next1, label %._crit_edge.loopexit is the inst  in BB %55 main_clone 
folded to single successor %.lr.ph.peel.next1
cloning
  br label %.lr.ph.peel4 is the inst  in BB %.lr.ph.peel.next1 main_clone 
folded to single successor %.lr.ph.peel4
cloning
  %60 = sext i8 115 to i32 is the inst  in BB %.lr.ph.peel4 main_clone 
replaced with i32 115
  switch i32 115, label %77 [
    i32 97, label %75
    i32 98, label %73
    i32 115, label %61
  ] is the inst  in BB %.lr.ph.peel4 main_clone 
folded to single successor %61
cloning
  %62 = getelementptr inbounds %struct.Config, %struct.Config* %2, i32 0, i32 2 is the inst  in BB %61 main_clone 
  store i8 1, i8* %62, align 2 is the inst  in BB %61 main_clone 
storing val 1 109 1
  %63 = load i8*, i8** @optarg, align 8 is the inst  in BB %61 main_clone 
  %64 = call i64 @strlen(i8* %63) #6 is the inst  in BB %61 main_clone 
baseStringData : hello
replaced with i64 5
  %66 = mul i64 1, 5 is the inst  in BB %61 main_clone 
replaced with i64 5
  %67 = call noalias i8* @malloc(i64 5) #5 is the inst  in BB %61 main_clone 
mallocInst : size 5 at address 1000102
  %68 = getelementptr inbounds %struct.Config, %struct.Config* %2, i32 0, i32 3 is the inst  in BB %61 main_clone 
  store i8* %67, i8** %68, align 8 is the inst  in BB %61 main_clone 
storing val 1000102 115 8
  %69 = getelementptr inbounds %struct.Config, %struct.Config* %2, i32 0, i32 3 is the inst  in BB %61 main_clone 
  %70 = load i8*, i8** %69, align 8 is the inst  in BB %61 main_clone 
  %71 = load i8*, i8** @optarg, align 8 is the inst  in BB %61 main_clone 
  %72 = load i8*, i8** @optarg, align 8 is the inst  in BB %61 main_clone 
  %73 = call i64 @strlen(i8* %72) #6 is the inst  in BB %61 main_clone 
baseStringData : hello
replaced with i64 5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %70, i8* %71, i64 5, i32 1, i1 false) is the inst  in BB %61 main_clone 
memcpy : from hello
  br label %79 is the inst  in BB %61 main_clone 
folded to single successor %79
cloning
  %80 = call i32 @getopt(i32 5, i8** %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0)) #5 is the inst  in BB %79 main_clone 
test
-a
-b
-s
hello
test
-a
-b
-s
hello
getopt returned ÿ
replaced with i32 -1
  %81 = trunc i32 -1 to i8 is the inst  in BB %79 main_clone 
replaced with i8 -1
  %82 = sext i8 -1 to i32 is the inst  in BB %79 main_clone 
replaced with i32 -1
  %83 = icmp ne i32 -1, -1 is the inst  in BB %79 main_clone 
replaced with i1 false
  br i1 false, label %.lr.ph.peel.next3, label %._crit_edge.loopexit is the inst  in BB %79 main_clone 
folded to single successor %._crit_edge.loopexit
cloning
marking test at level 1 as passed
15
test passed : peeling loop
succeeded in peeling
folded to single successor %.lr.ph.peel.begin
cloning
  br label %.lr.ph.peel is the inst  in BB %.lr.ph.peel.begin main 
folded to single successor %.lr.ph.peel
cloning
  %16 = sext i8 97 to i32 is the inst  in BB %.lr.ph.peel main 
replaced with i32 97
  switch i32 97, label %33 [
    i32 97, label %31
    i32 98, label %29
    i32 115, label %17
  ] is the inst  in BB %.lr.ph.peel main 
folded to single successor %31
cloning
  %32 = getelementptr inbounds %struct.Config, %struct.Config* %2, i32 0, i32 0 is the inst  in BB %31 main 
  store i8 1, i8* %32, align 8 is the inst  in BB %31 main 
storing val 1 107 1
  br label %33 is the inst  in BB %31 main 
folded to single successor %33
cloning
  %34 = call i32 @getopt(i32 5, i8** %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0)) #5 is the inst  in BB %33 main 
test
-a
-b
-s
hello
test
-a
-b
-s
hello
getopt returned b
replaced with i32 98
  %35 = trunc i32 98 to i8 is the inst  in BB %33 main 
replaced with i8 98
  %36 = sext i8 98 to i32 is the inst  in BB %33 main 
replaced with i32 98
  %37 = icmp ne i32 98, -1 is the inst  in BB %33 main 
replaced with i1 true
  br i1 true, label %.lr.ph.peel.next, label %._crit_edge.loopexit is the inst  in BB %33 main 
folded to single successor %.lr.ph.peel.next
cloning
  br label %.lr.ph.peel2 is the inst  in BB %.lr.ph.peel.next main 
folded to single successor %.lr.ph.peel2
cloning
  %38 = sext i8 98 to i32 is the inst  in BB %.lr.ph.peel2 main 
replaced with i32 98
  switch i32 98, label %55 [
    i32 97, label %53
    i32 98, label %51
    i32 115, label %39
  ] is the inst  in BB %.lr.ph.peel2 main 
folded to single successor %51
cloning
  %52 = getelementptr inbounds %struct.Config, %struct.Config* %2, i32 0, i32 1 is the inst  in BB %51 main 
  store i8 1, i8* %52, align 1 is the inst  in BB %51 main 
storing val 1 108 1
  br label %55 is the inst  in BB %51 main 
folded to single successor %55
cloning
  %56 = call i32 @getopt(i32 5, i8** %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0)) #5 is the inst  in BB %55 main 
test
-a
-b
-s
hello
test
-a
-b
-s
hello
getopt returned s
replaced with i32 115
optarg is hello
created new string at 1000001
  %57 = trunc i32 115 to i8 is the inst  in BB %55 main 
replaced with i8 115
  %58 = sext i8 115 to i32 is the inst  in BB %55 main 
replaced with i32 115
  %59 = icmp ne i32 115, -1 is the inst  in BB %55 main 
replaced with i1 true
  br i1 true, label %.lr.ph.peel.next1, label %._crit_edge.loopexit is the inst  in BB %55 main 
folded to single successor %.lr.ph.peel.next1
cloning
  br label %.lr.ph.peel4 is the inst  in BB %.lr.ph.peel.next1 main 
folded to single successor %.lr.ph.peel4
cloning
  %60 = sext i8 115 to i32 is the inst  in BB %.lr.ph.peel4 main 
replaced with i32 115
  switch i32 115, label %77 [
    i32 97, label %75
    i32 98, label %73
    i32 115, label %61
  ] is the inst  in BB %.lr.ph.peel4 main 
folded to single successor %61
cloning
  %62 = getelementptr inbounds %struct.Config, %struct.Config* %2, i32 0, i32 2 is the inst  in BB %61 main 
  store i8 1, i8* %62, align 2 is the inst  in BB %61 main 
storing val 1 109 1
  %63 = load i8*, i8** @optarg, align 8 is the inst  in BB %61 main 
  %64 = call i64 @strlen(i8* %63) #6 is the inst  in BB %61 main 
baseStringData : hello
replaced with i64 5
  %66 = mul i64 1, 5 is the inst  in BB %61 main 
replaced with i64 5
  %67 = call noalias i8* @malloc(i64 5) #5 is the inst  in BB %61 main 
mallocInst : size 5 at address 1000102
  %68 = getelementptr inbounds %struct.Config, %struct.Config* %2, i32 0, i32 3 is the inst  in BB %61 main 
  store i8* %67, i8** %68, align 8 is the inst  in BB %61 main 
storing val 1000102 115 8
  %69 = getelementptr inbounds %struct.Config, %struct.Config* %2, i32 0, i32 3 is the inst  in BB %61 main 
  %70 = load i8*, i8** %69, align 8 is the inst  in BB %61 main 
  %71 = load i8*, i8** @optarg, align 8 is the inst  in BB %61 main 
  %72 = load i8*, i8** @optarg, align 8 is the inst  in BB %61 main 
  %73 = call i64 @strlen(i8* %72) #6 is the inst  in BB %61 main 
baseStringData : hello
replaced with i64 5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %70, i8* %71, i64 5, i32 1, i1 false) is the inst  in BB %61 main 
memcpy : from hello
  br label %79 is the inst  in BB %61 main 
folded to single successor %79
cloning
  %80 = call i32 @getopt(i32 5, i8** %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0)) #5 is the inst  in BB %79 main 
test
-a
-b
-s
hello
test
-a
-b
-s
hello
getopt returned ÿ
replaced with i32 -1
  %81 = trunc i32 -1 to i8 is the inst  in BB %79 main 
replaced with i8 -1
  %82 = sext i8 -1 to i32 is the inst  in BB %79 main 
replaced with i32 -1
  %83 = icmp ne i32 -1, -1 is the inst  in BB %79 main 
replaced with i1 false
  br i1 false, label %.lr.ph.peel.next3, label %._crit_edge.loopexit is the inst  in BB %79 main 
folded to single successor %._crit_edge.loopexit
cloning
  br label %._crit_edge is the inst  in BB %._crit_edge.loopexit main 
folded to single successor %._crit_edge
cloning
  %481 = bitcast %struct.Config* %2 to { i64, i8* }* is the inst  in BB %._crit_edge main 
  %482 = getelementptr inbounds { i64, i8* }, { i64, i8* }* %481, i32 0, i32 0 is the inst  in BB %._crit_edge main 
  %483 = load i64, i64* %482, align 8 is the inst  in BB %._crit_edge main 
replaced with i64 65793
  %484 = getelementptr inbounds { i64, i8* }, { i64, i8* }* %481, i32 0, i32 1 is the inst  in BB %._crit_edge main 
  %485 = load i8*, i8** %484, align 8 is the inst  in BB %._crit_edge main 
  call void @branchPruned(i64 65793, i8* %485) is the inst  in BB %._crit_edge main 
attempting to copy Register for i64 65793
replaced with i64 65793
replaced with constantInt
attempting to copy Register for   %485 = load i8*, i8** %484, align 8
Register from Register
  %3 = alloca %struct.Config, align 8 is the inst  in BB %2 branchPruned_clone 
allocaInst : size 16 at address 124
  %4 = bitcast %struct.Config* %3 to { i64, i8* }* is the inst  in BB %2 branchPruned_clone 
  %5 = getelementptr inbounds { i64, i8* }, { i64, i8* }* %4, i32 0, i32 0 is the inst  in BB %2 branchPruned_clone 
  store i64 65793, i64* %5, align 8 is the inst  in BB %2 branchPruned_clone 
storing val 65793 124 8
  %6 = getelementptr inbounds { i64, i8* }, { i64, i8* }* %4, i32 0, i32 1 is the inst  in BB %2 branchPruned_clone 
  store i8* %1, i8** %6, align 8 is the inst  in BB %2 branchPruned_clone 
storing val 1000102 132 8
  %7 = getelementptr inbounds %struct.Config, %struct.Config* %3, i32 0, i32 0 is the inst  in BB %2 branchPruned_clone 
  %8 = load i8, i8* %7, align 8 is the inst  in BB %2 branchPruned_clone 
replaced with i8 1
  %9 = sext i8 1 to i32 is the inst  in BB %2 branchPruned_clone 
replaced with i32 1
  %10 = icmp eq i32 1, 1 is the inst  in BB %2 branchPruned_clone 
replaced with i1 true
  br i1 true, label %11, label %28 is the inst  in BB %2 branchPruned_clone 
folded to single successor %11
cloning
  %12 = getelementptr inbounds %struct.Config, %struct.Config* %3, i32 0, i32 1 is the inst  in BB %11 branchPruned_clone 
  %13 = load i8, i8* %12, align 1 is the inst  in BB %11 branchPruned_clone 
replaced with i8 1
  %14 = sext i8 1 to i32 is the inst  in BB %11 branchPruned_clone 
replaced with i32 1
  %15 = icmp eq i32 1, 1 is the inst  in BB %11 branchPruned_clone 
replaced with i1 true
  br i1 true, label %16, label %28 is the inst  in BB %11 branchPruned_clone 
folded to single successor %16
cloning
  %17 = getelementptr inbounds %struct.Config, %struct.Config* %3, i32 0, i32 2 is the inst  in BB %16 branchPruned_clone 
  %18 = load i8, i8* %17, align 2 is the inst  in BB %16 branchPruned_clone 
replaced with i8 1
  %19 = sext i8 1 to i32 is the inst  in BB %16 branchPruned_clone 
replaced with i32 1
  %20 = icmp eq i32 1, 1 is the inst  in BB %16 branchPruned_clone 
replaced with i1 true
  br i1 true, label %21, label %28 is the inst  in BB %16 branchPruned_clone 
folded to single successor %21
cloning
  %22 = getelementptr inbounds %struct.Config, %struct.Config* %3, i32 0, i32 3 is the inst  in BB %21 branchPruned_clone 
  %23 = load i8*, i8** %22, align 8 is the inst  in BB %21 branchPruned_clone 
  %24 = call i32 @strcmp(i8* %23, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0)) #5 is the inst  in BB %21 branchPruned_clone 
baseStringData : hello
baseStringData : hello
replaced with i32 0
  %27 = icmp ne i32 0, 0 is the inst  in BB %21 branchPruned_clone 
replaced with i1 false
  br i1 false, label %30, label %28 is the inst  in BB %21 branchPruned_clone 
folded to single successor %28
cloning
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0)) is the inst  in BB %28 branchPruned_clone 
  br label %30 is the inst  in BB %28 branchPruned_clone 
folded to single successor %30
cloning
  ret void is the inst  in BB %30 branchPruned_clone 
  %486 = load i32, i32* @optind, align 4 is the inst  in BB %._crit_edge main 
replaced with i32 5
  %487 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i32 5) is the inst  in BB %._crit_edge main 
  ret i32 0 is the inst  in BB %._crit_edge main 
Test passed
running test 29
