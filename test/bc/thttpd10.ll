; ModuleID = 'thttpd10.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.ClientData = type { i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.throttletab = type { i8*, i64, i64, i64, i64, i32 }
%struct.pollfd = type { i32, i16, i16 }
%struct.connecttab = type { i32, i32, %struct.httpd_conn*, [10 x i32], i32, i64, i64, i64, i64, %struct.TimerStruct*, %struct.TimerStruct*, i64, i64, i64, i64 }
%struct.httpd_conn = type { i32, %struct.httpd_server*, %union.httpd_sockaddr, i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8*, i8*, i32, i32, i32, i32, i64, i64, i32, i32, %struct.stat, i32, i8* }
%struct.httpd_server = type { i8*, i8*, i16, i8*, i32, i32, i8*, i8*, i32, i8*, i32, i32, i32, %struct._IO_FILE*, i32, i32, i32, i8*, i8*, i32 }
%union.httpd_sockaddr = type { %struct.sockaddr_storage }
%struct.sockaddr_storage = type { i16, i64, [112 x i8] }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timeval, %struct.timeval, %struct.timeval, [3 x i64] }
%struct.timeval = type { i64, i64 }
%struct.TimerStruct = type { void (i8*, %struct.timeval*)*, %union.ClientData, i64, i32, %struct.timeval, %struct.TimerStruct*, %struct.TimerStruct*, i32 }
%struct.MapStruct = type { i64, i64, i64, i64, i32, i64, i8*, i32, i32, %struct.MapStruct* }
%struct.mime_entry = type { i8*, i64, i8*, i64 }
%struct.iovec = type { i8*, i64 }
%struct.addrinfo = type { i32, i32, i32, i32, i32, %struct.sockaddr*, i8*, %struct.addrinfo* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.timezone = type { i32, i32 }
%struct.passwd = type { i8*, i8*, i32, i32, i8*, i8*, i8* }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }

@terminate = global i32 0, align 4
@stats_time = common global i64 0, align 8
@start_time = common global i64 0, align 8
@stats_connections = common global i64 0, align 8
@stats_bytes = common global i64 0, align 8
@stats_simultaneous = common global i32 0, align 4
@httpd_err400title = global i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.3, i64 0, i64 0), align 8
@.str.10.3 = private unnamed_addr constant [12 x i8] c"Bad Request\00", align 1
@httpd_err400form = global i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.11.6, i64 0, i64 0), align 8
@.str.11.6 = private unnamed_addr constant [69 x i8] c"Your request has bad syntax or is inherently impossible to satisfy.\0A\00", align 1
@httpd_err408title = global i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12.9, i64 0, i64 0), align 8
@.str.12.9 = private unnamed_addr constant [16 x i8] c"Request Timeout\00", align 1
@httpd_err408form = global i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.13.12, i64 0, i64 0), align 8
@.str.13.12 = private unnamed_addr constant [54 x i8] c"No request appeared within a reasonable time period.\0A\00", align 1
@httpd_err503title = global i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.14.15, i64 0, i64 0), align 8
@.str.14.15 = private unnamed_addr constant [31 x i8] c"Service Temporarily Overloaded\00", align 1
@httpd_err503form = global i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.15.18, i64 0, i64 0), align 8
@.str.15.18 = private unnamed_addr constant [79 x i8] c"The requested URL '%.80s' is temporarily overloaded.  Please try again later.\0A\00", align 1
@JunkClientData = common global %union.ClientData zeroinitializer, align 8
@.str = private unnamed_addr constant [33 x i8] c"!error: negative number of bytes\00", align 1
@argv0 = internal unnamed_addr global i8* null, align 8
@debug = internal unnamed_addr global i1 false
@port = internal unnamed_addr global i16 0, align 2
@dir = internal unnamed_addr global i8* null, align 8
@data_dir = internal unnamed_addr global i8* null, align 8
@do_chroot = internal unnamed_addr global i1 false
@no_log = internal unnamed_addr global i1 false
@no_symlink_check = internal unnamed_addr global i1 false
@do_vhost = internal unnamed_addr global i1 false
@do_global_passwd = internal unnamed_addr global i1 false
@cgi_pattern = internal unnamed_addr global i8* null, align 8
@cgi_limit = internal unnamed_addr global i32 0, align 4
@url_pattern = internal unnamed_addr global i8* null, align 8
@no_empty_referrers = internal unnamed_addr global i1 false
@local_pattern = internal unnamed_addr global i8* null, align 8
@throttlefile = internal unnamed_addr global i8* null, align 8
@hostname = internal unnamed_addr global i8* null, align 8
@logfile = internal unnamed_addr global i8* null, align 8
@pidfile = internal unnamed_addr global i8* null, align 8
@.str.48 = private unnamed_addr constant [7 x i8] c"nobody\00", align 1
@user = internal unnamed_addr global i8* null, align 8
@.str.49 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@charset = internal unnamed_addr global i8* null, align 8
@p3p = internal unnamed_addr global i8* null, align 8
@max_age = internal unnamed_addr global i32 0, align 4
@.str.75 = private unnamed_addr constant [11 x i8] c"configFile\00", align 1
@.str.80 = private unnamed_addr constant [24 x i8] c"name = %s, value = %s \0A\00", align 1
@.str.81 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.107 = private unnamed_addr constant [37 x i8] c"%s: no value required for %s option\0A\00", align 1
@.str.82 = private unnamed_addr constant [5 x i8] c"port\00", align 1
@.str.108 = private unnamed_addr constant [34 x i8] c"%s: value required for %s option\0A\00", align 1
@.str.83 = private unnamed_addr constant [12 x i8] c"port = %d \0A\00", align 1
@.str.109 = private unnamed_addr constant [31 x i8] c"out of memory copying a string\00", align 1
@.str.110 = private unnamed_addr constant [36 x i8] c"%s: out of memory copying a string\0A\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"chroot\00", align 1
@.str.85 = private unnamed_addr constant [9 x i8] c"nochroot\00", align 1
@.str.86 = private unnamed_addr constant [9 x i8] c"data_dir\00", align 1
@.str.87 = private unnamed_addr constant [15 x i8] c"nosymlinkcheck\00", align 1
@.str.88 = private unnamed_addr constant [13 x i8] c"symlinkcheck\00", align 1
@.str.89 = private unnamed_addr constant [5 x i8] c"user\00", align 1
@.str.90 = private unnamed_addr constant [7 x i8] c"cgipat\00", align 1
@.str.91 = private unnamed_addr constant [9 x i8] c"cgilimit\00", align 1
@.str.92 = private unnamed_addr constant [7 x i8] c"urlpat\00", align 1
@.str.93 = private unnamed_addr constant [16 x i8] c"noemptyreferers\00", align 1
@.str.94 = private unnamed_addr constant [17 x i8] c"noemptyreferrers\00", align 1
@.str.95 = private unnamed_addr constant [9 x i8] c"localpat\00", align 1
@.str.96 = private unnamed_addr constant [10 x i8] c"throttles\00", align 1
@.str.97 = private unnamed_addr constant [5 x i8] c"host\00", align 1
@.str.98 = private unnamed_addr constant [8 x i8] c"logfile\00", align 1
@.str.99 = private unnamed_addr constant [6 x i8] c"vhost\00", align 1
@.str.100 = private unnamed_addr constant [8 x i8] c"novhost\00", align 1
@.str.101 = private unnamed_addr constant [13 x i8] c"globalpasswd\00", align 1
@.str.102 = private unnamed_addr constant [15 x i8] c"noglobalpasswd\00", align 1
@.str.103 = private unnamed_addr constant [8 x i8] c"pidfile\00", align 1
@.str.104 = private unnamed_addr constant [8 x i8] c"charset\00", align 1
@.str.105 = private unnamed_addr constant [4 x i8] c"p3p\00", align 1
@.str.106 = private unnamed_addr constant [8 x i8] c"max_age\00", align 1
@.str.57 = private unnamed_addr constant [5 x i8] c"-nor\00", align 1
@.str.60 = private unnamed_addr constant [5 x i8] c"-nos\00", align 1
@.str.67 = private unnamed_addr constant [5 x i8] c"-nov\00", align 1
@.str.69 = private unnamed_addr constant [5 x i8] c"-nog\00", align 1
@.str.111 = private unnamed_addr constant [219 x i8] c"usage:  %s [-C configfile] [-p port] [-d dir] [-r|-nor] [-dd data_dir] [-s|-nos] [-v|-nov] [-g|-nog] [-u user] [-c cgipat] [-t throttles] [-h host] [-l logfile] [-i pidfile] [-T charset] [-P P3P] [-M maxage] [-V] [-D]\0A\00", align 1
@.str.113 = private unnamed_addr constant [26 x i8] c"getaddrinfo %.80s - %.80s\00", align 1
@.str.114 = private unnamed_addr constant [25 x i8] c"%s: getaddrinfo %s - %s\0A\00", align 1
@.str.115 = private unnamed_addr constant [39 x i8] c"%.80s - sockaddr too small (%lu < %lu)\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"can't find any valid address\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"%s: can't find any valid address\0A\00", align 1
@numthrottles = internal unnamed_addr global i32 0, align 4
@maxthrottles = internal unnamed_addr global i32 0, align 4
@throttles = internal unnamed_addr global %struct.throttletab* null, align 8
@.str.9 = private unnamed_addr constant [11 x i8] c"%.80s - %m\00", align 1
@.str.116 = private unnamed_addr constant [20 x i8] c" %4900[^ \09] %ld-%ld\00", align 1
@.str.117 = private unnamed_addr constant [16 x i8] c" %4900[^ \09] %ld\00", align 1
@.str.118 = private unnamed_addr constant [33 x i8] c"unparsable line in %.80s - %.80s\00", align 1
@.str.119 = private unnamed_addr constant [38 x i8] c"%s: unparsable line in %.80s - %.80s\0A\00", align 1
@.str.121 = private unnamed_addr constant [39 x i8] c"out of memory allocating a throttletab\00", align 1
@.str.122 = private unnamed_addr constant [44 x i8] c"%s: out of memory allocating a throttletab\0A\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"unknown user - '%.80s'\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"%s: unknown user - '%s'\0A\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@stdout = external global %struct._IO_FILE*, align 8
@.str.10 = private unnamed_addr constant [67 x i8] c"logfile is not an absolute path, you may not be able to re-open it\00", align 1
@.str.11 = private unnamed_addr constant [72 x i8] c"%s: logfile is not an absolute path, you may not be able to re-open it\0A\00", align 1
@.str.12 = private unnamed_addr constant [20 x i8] c"fchown logfile - %m\00", align 1
@.str.13 = private unnamed_addr constant [15 x i8] c"fchown logfile\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"chdir - %m\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"chdir\00", align 1
@stdin = external global %struct._IO_FILE*, align 8
@.str.17 = private unnamed_addr constant [12 x i8] c"daemon - %m\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@nfiles = internal unnamed_addr global i32 0, align 4
@nwatches = internal unnamed_addr global i64 0, align 8
@fd_rw = internal unnamed_addr global i32* null, align 8
@fd_data = internal unnamed_addr global i8** null, align 8
@pollfds = internal unnamed_addr global %struct.pollfd* null, align 8
@poll_fdidx = internal unnamed_addr global i32* null, align 8
@poll_rfdidx = internal unnamed_addr global i32* null, align 8
@max_connects = internal unnamed_addr global i32 0, align 4
@.str.20 = private unnamed_addr constant [31 x i8] c"fdwatch initialization failure\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"chroot - %m\00", align 1
@.str.23 = private unnamed_addr constant [74 x i8] c"logfile is not within the chroot tree, you will not be able to re-open it\00", align 1
@.str.24 = private unnamed_addr constant [79 x i8] c"%s: logfile is not within the chroot tree, you will not be able to re-open it\0A\00", align 1
@.str.25 = private unnamed_addr constant [18 x i8] c"chroot chdir - %m\00", align 1
@.str.26 = private unnamed_addr constant [13 x i8] c"chroot chdir\00", align 1
@.str.27 = private unnamed_addr constant [20 x i8] c"data_dir chdir - %m\00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"data_dir chdir\00", align 1
@.str.43 = private unnamed_addr constant [39 x i8] c"up %ld seconds, stats for %ld seconds:\00", align 1
@httpd_conn_count = internal unnamed_addr global i32 0, align 4
@.str.44 = private unnamed_addr constant [104 x i8] c"  thttpd - %ld connections (%g/sec), %d max simultaneous, %lld bytes (%g/sec), %d httpd_conns allocated\00", align 1
@str_alloc_count = internal unnamed_addr global i32 0, align 4
@str_alloc_size = internal unnamed_addr global i64 0, align 8
@.str.58 = private unnamed_addr constant [60 x i8] c"  libhttpd - %d strings allocated, %lu bytes (%g bytes/str)\00", align 1
@alloc_count = internal unnamed_addr global i32 0, align 4
@map_count = internal unnamed_addr global i32 0, align 4
@mapped_bytes = internal unnamed_addr global i64 0, align 8
@free_count = internal unnamed_addr global i32 0, align 4
@hash_size = internal unnamed_addr global i32 0, align 4
@expire_age = internal unnamed_addr global i64 600, align 8
@.str.8.574 = private unnamed_addr constant [92 x i8] c"  map cache - %d allocated, %d active (%lld bytes), %d free; hash size: %d; expire age: %ld\00", align 1
@.str.9.575 = private unnamed_addr constant [25 x i8] c"map counts don't add up!\00", align 1
@.str.3.552 = private unnamed_addr constant [29 x i8] c"  fdwatch - %ld %ss (%g/sec)\00", align 1
@.str.4.553 = private unnamed_addr constant [5 x i8] c"poll\00", align 1
@alloc_count.581 = internal unnamed_addr global i32 0, align 4
@active_count = internal unnamed_addr global i32 0, align 4
@free_count.580 = internal unnamed_addr global i32 0, align 4
@.str.596 = private unnamed_addr constant [44 x i8] c"  timers - %d allocated, %d active, %d free\00", align 1
@.str.1.597 = private unnamed_addr constant [27 x i8] c"timer counts don't add up!\00", align 1
@connects = internal unnamed_addr global %struct.connecttab* null, align 8
@.str.538 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.539 = private unnamed_addr constant [14 x i8] c"/%.100s%.200s\00", align 1
@.str.540 = private unnamed_addr constant [7 x i8] c"%.200s\00", align 1
@.str.541 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@.str.542 = private unnamed_addr constant [18 x i8] c"%d/%b/%Y:%H:%M:%S\00", align 1
@.str.543 = private unnamed_addr constant [10 x i8] c"%s %c%04d\00", align 1
@httpd_ntoa.str = internal global [200 x i8] zeroinitializer, align 16
@.str.57.59 = private unnamed_addr constant [8 x i8] c"::ffff:\00", align 1
@switch.table = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.128, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21.129, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22.130, i64 0, i64 0)]
@.str.20.128 = private unnamed_addr constant [4 x i8] c"GET\00", align 1
@.str.21.129 = private unnamed_addr constant [5 x i8] c"HEAD\00", align 1
@.str.22.130 = private unnamed_addr constant [5 x i8] c"POST\00", align 1
@.str.23.131 = private unnamed_addr constant [8 x i8] c"UNKNOWN\00", align 1
@.str.544 = private unnamed_addr constant [65 x i8] c"%.80s - %.80s [%s] \22%.80s %.300s %.80s\22 %d %s \22%.200s\22 \22%.200s\22\0A\00", align 1
@.str.545 = private unnamed_addr constant [59 x i8] c"%.80s - %.80s \22%.80s %.200s %.80s\22 %d %s \22%.200s\22 \22%.200s\22\00", align 1
@hash_mask = internal unnamed_addr global i32 0, align 4
@hash_table = internal unnamed_addr global %struct.MapStruct** null, align 8
@maps = internal unnamed_addr global %struct.MapStruct* null, align 8
@.str.6.566 = private unnamed_addr constant [32 x i8] c"mmc_unmap failed to find entry!\00", align 1
@.str.7.567 = private unnamed_addr constant [43 x i8] c"mmc_unmap found zero or negative refcount!\00", align 1
@hs = internal unnamed_addr global %struct.httpd_server* null, align 8
@.str.1.539 = private unnamed_addr constant [38 x i8] c"bad fd (%d) passed to fdwatch_del_fd!\00", align 1
@.str.6.540 = private unnamed_addr constant [29 x i8] c"bad idx (%d) in poll_del_fd!\00", align 1
@npoll_fds = internal unnamed_addr global i32 0, align 4
@free_maps = internal unnamed_addr global %struct.MapStruct* null, align 8
@.str.11.561 = private unnamed_addr constant [12 x i8] c"munmap - %m\00", align 1
@timers = internal unnamed_addr global [67 x %struct.TimerStruct*] zeroinitializer, align 16
@free_timers = internal unnamed_addr global %struct.TimerStruct* null, align 8
@.str.41 = private unnamed_addr constant [25 x i8] c"exiting due to signal %d\00", align 1
@.str.42 = private unnamed_addr constant [16 x i8] c"child wait - %m\00", align 1
@got_hup = internal global i32 0, align 4
@num_connects = internal unnamed_addr global i32 0, align 4
@.str.40 = private unnamed_addr constant [8 x i8] c"exiting\00", align 1
@got_usr1 = internal global i32 0, align 4
@watchdog_flag = internal global i32 0, align 4
@.str.45 = private unnamed_addr constant [5 x i8] c"/tmp\00", align 1
@.str.50 = private unnamed_addr constant [41 x i8] c"out of memory allocating an httpd_server\00", align 1
@.str.1.51 = private unnamed_addr constant [31 x i8] c"out of memory copying hostname\00", align 1
@httpd_initialize.ghnbuf = internal global [256 x i8] zeroinitializer, align 16
@.str.3.52 = private unnamed_addr constant [3 x i8] c"|/\00", align 1
@.str.2.53 = private unnamed_addr constant [34 x i8] c"out of memory copying cgi_pattern\00", align 1
@.str.4.54 = private unnamed_addr constant [26 x i8] c"out of memory copying cwd\00", align 1
@.str.5.55 = private unnamed_addr constant [34 x i8] c"out of memory copying url_pattern\00", align 1
@.str.6.56 = private unnamed_addr constant [36 x i8] c"out of memory copying local_pattern\00", align 1
@.str.59 = private unnamed_addr constant [41 x i8] c"unknown sockaddr family on listen socket\00", align 1
@.str.60.60 = private unnamed_addr constant [18 x i8] c"socket %.80s - %m\00", align 1
@.str.61 = private unnamed_addr constant [29 x i8] c"setsockopt SO_REUSEADDR - %m\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c"bind %.80s - %m\00", align 1
@.str.63 = private unnamed_addr constant [19 x i8] c"fcntl F_GETFL - %m\00", align 1
@.str.64 = private unnamed_addr constant [20 x i8] c"fcntl O_NDELAY - %m\00", align 1
@.str.65 = private unnamed_addr constant [12 x i8] c"listen - %m\00", align 1
@enc_tab = internal global [3 x %struct.mime_entry] [%struct.mime_entry { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.101.61, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.102.62, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.103.63, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.104.64, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.105.65, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.106.66, i32 0, i32 0), i64 0 }], align 16
@.str.101.61 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@.str.102.62 = private unnamed_addr constant [9 x i8] c"compress\00", align 1
@.str.103.63 = private unnamed_addr constant [3 x i8] c"gz\00", align 1
@.str.104.64 = private unnamed_addr constant [5 x i8] c"gzip\00", align 1
@.str.105.65 = private unnamed_addr constant [3 x i8] c"uu\00", align 1
@.str.106.66 = private unnamed_addr constant [11 x i8] c"x-uuencode\00", align 1
@typ_tab = internal global [193 x %struct.mime_entry] [%struct.mime_entry { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.107.67, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.108.68, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.109.69, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.110.70, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.111.71, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.112.72, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.113.73, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.114.74, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.115.75, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.116.76, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.117.77, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.118.78, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.119.79, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.118.78, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.120.80, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.118.78, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.121.81, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.122.82, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.123.83, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.124.84, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.125.85, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.124.84, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.126.86, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.127.87, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.128.88, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.129.89, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.130.90, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.131.91, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.132.92, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.108.68, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.133.93, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.134.94, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.135.95, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.136.96, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.137, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.138, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.139, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.140, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.141, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.142, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.143, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.144, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.145, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.146, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.147, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.148, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.149, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.150, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.151, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.152, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.153, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.152, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.154, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.155, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.156, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.155, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.157, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.108.68, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.158, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.108.68, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.159, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.160, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.161, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.162, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.163, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.108.68, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.164, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.165, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.166, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.152, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.167, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.116.76, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.168, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.169, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.170, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.108.68, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.171, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.172, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.173, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.152, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.174, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.175, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.175, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.177, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.175, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.178, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.175, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.179, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.175, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.180, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.181, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.182, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.183, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.184, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.185, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.186, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.187, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.188, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.66, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.189, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.66, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.190, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.191, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.192, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.193, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.194, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.195, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.196, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.195, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.197, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.198, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.199, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.200, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.201, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.202, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.203, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.202, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.204, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.202, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.205, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.202, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.206, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.207, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.208, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.209, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.210, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.211, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.212, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.213, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.214, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.215, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.216, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.108.68, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.217, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.218, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.219, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.108.68, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.220, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.221, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.222, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.223, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.224, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.225, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.226, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.227, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.228, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.229, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.230, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.209, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.231, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.209, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.232, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.233, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.234, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.235, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.236, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.225, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.237, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.238, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.239, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.240, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.241, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.242, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.243, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.242, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.244, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.245, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.246, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.247, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.248, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.247, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.249, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.247, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.250, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.242, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.251, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.252, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.253, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.229, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.254, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.240, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.255, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.256, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.257, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.136.96, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.258, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.108.68, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.259, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.260, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.261, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.262, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.263, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.264, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.265, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.266, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.267, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.268, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.269, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.270, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.271, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.272, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.273, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.274, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.275, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.276, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.277, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.278, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.279, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.280, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.281, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.282, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.283, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.116.76, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.284, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.238, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.285, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.286, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.287, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.288, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.289, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.290, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.291, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.292, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.293, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.294, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.295, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.288, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.296, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.297, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.298, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.299, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.300, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.301, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.302, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.303, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.304, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.305, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.306, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.307, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.308, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.307, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.309, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.310, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.311, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.312, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.313, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.229, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.314, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.315, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.316, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.317, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.318, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.317, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.319, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.317, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.320, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.317, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.321, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.322, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.323, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.322, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.324, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.127.87, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.325, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.108.68, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.326, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.327, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.328, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.329, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.330, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.331, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.332, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.333, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.334, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.335, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.336, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.337, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.338, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.339, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.340, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.341, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.342, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.343, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.344, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.343, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.345, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.346, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.347, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.348, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.349, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.350, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.351, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.352, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.353, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.354, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.355, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.356, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.357, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.358, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.359, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.297, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.360, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.361, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.362, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.363, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.364, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.365, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.366, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.367, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.368, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.367, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.369, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.370, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.371, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.370, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.372, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.297, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.373, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.374, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.375, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.376, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.377, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.122.82, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.378, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.379, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.380, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.381, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.382, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.383, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.384, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.385, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.386, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.387, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.388, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.389, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.390, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.391, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.392, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.393, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.394, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.395, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.396, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.397, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.398, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.399, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.400, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.401, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.402, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.403, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.404, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.405, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.406, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.407, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.408, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.409, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.410, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.411, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.412, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.413, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.414, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.383, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.415, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.329, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.416, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.417, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.418, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.419, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.420, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.421, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.422, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.421, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.423, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.424, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.425, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.162, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.426, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.427, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.428, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.162, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.429, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.430, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.431, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.432, i32 0, i32 0), i64 0 }, %struct.mime_entry { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.433, i32 0, i32 0), i64 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.434, i32 0, i32 0), i64 0 }], align 16
@.str.107.67 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.108.68 = private unnamed_addr constant [25 x i8] c"application/octet-stream\00", align 1
@.str.109.69 = private unnamed_addr constant [4 x i8] c"aab\00", align 1
@.str.110.70 = private unnamed_addr constant [29 x i8] c"application/x-authorware-bin\00", align 1
@.str.111.71 = private unnamed_addr constant [4 x i8] c"aam\00", align 1
@.str.112.72 = private unnamed_addr constant [29 x i8] c"application/x-authorware-map\00", align 1
@.str.113.73 = private unnamed_addr constant [4 x i8] c"aas\00", align 1
@.str.114.74 = private unnamed_addr constant [29 x i8] c"application/x-authorware-seg\00", align 1
@.str.115.75 = private unnamed_addr constant [3 x i8] c"ai\00", align 1
@.str.116.76 = private unnamed_addr constant [23 x i8] c"application/postscript\00", align 1
@.str.117.77 = private unnamed_addr constant [4 x i8] c"aif\00", align 1
@.str.118.78 = private unnamed_addr constant [13 x i8] c"audio/x-aiff\00", align 1
@.str.119.79 = private unnamed_addr constant [5 x i8] c"aifc\00", align 1
@.str.120.80 = private unnamed_addr constant [5 x i8] c"aiff\00", align 1
@.str.121.81 = private unnamed_addr constant [4 x i8] c"asc\00", align 1
@.str.122.82 = private unnamed_addr constant [23 x i8] c"text/plain; charset=%s\00", align 1
@.str.123.83 = private unnamed_addr constant [4 x i8] c"asf\00", align 1
@.str.124.84 = private unnamed_addr constant [15 x i8] c"video/x-ms-asf\00", align 1
@.str.125.85 = private unnamed_addr constant [4 x i8] c"asx\00", align 1
@.str.126.86 = private unnamed_addr constant [3 x i8] c"au\00", align 1
@.str.127.87 = private unnamed_addr constant [12 x i8] c"audio/basic\00", align 1
@.str.128.88 = private unnamed_addr constant [4 x i8] c"avi\00", align 1
@.str.129.89 = private unnamed_addr constant [16 x i8] c"video/x-msvideo\00", align 1
@.str.130.90 = private unnamed_addr constant [6 x i8] c"bcpio\00", align 1
@.str.131.91 = private unnamed_addr constant [20 x i8] c"application/x-bcpio\00", align 1
@.str.132.92 = private unnamed_addr constant [4 x i8] c"bin\00", align 1
@.str.133.93 = private unnamed_addr constant [4 x i8] c"bmp\00", align 1
@.str.134.94 = private unnamed_addr constant [10 x i8] c"image/bmp\00", align 1
@.str.135.95 = private unnamed_addr constant [4 x i8] c"cdf\00", align 1
@.str.136.96 = private unnamed_addr constant [21 x i8] c"application/x-netcdf\00", align 1
@.str.137 = private unnamed_addr constant [6 x i8] c"class\00", align 1
@.str.138 = private unnamed_addr constant [22 x i8] c"application/x-java-vm\00", align 1
@.str.139 = private unnamed_addr constant [5 x i8] c"cpio\00", align 1
@.str.140 = private unnamed_addr constant [19 x i8] c"application/x-cpio\00", align 1
@.str.141 = private unnamed_addr constant [4 x i8] c"cpt\00", align 1
@.str.142 = private unnamed_addr constant [27 x i8] c"application/mac-compactpro\00", align 1
@.str.143 = private unnamed_addr constant [4 x i8] c"crl\00", align 1
@.str.144 = private unnamed_addr constant [24 x i8] c"application/x-pkcs7-crl\00", align 1
@.str.145 = private unnamed_addr constant [4 x i8] c"crt\00", align 1
@.str.146 = private unnamed_addr constant [27 x i8] c"application/x-x509-ca-cert\00", align 1
@.str.147 = private unnamed_addr constant [4 x i8] c"csh\00", align 1
@.str.148 = private unnamed_addr constant [18 x i8] c"application/x-csh\00", align 1
@.str.149 = private unnamed_addr constant [4 x i8] c"css\00", align 1
@.str.150 = private unnamed_addr constant [21 x i8] c"text/css; charset=%s\00", align 1
@.str.151 = private unnamed_addr constant [4 x i8] c"dcr\00", align 1
@.str.152 = private unnamed_addr constant [23 x i8] c"application/x-director\00", align 1
@.str.153 = private unnamed_addr constant [4 x i8] c"dir\00", align 1
@.str.154 = private unnamed_addr constant [4 x i8] c"djv\00", align 1
@.str.155 = private unnamed_addr constant [15 x i8] c"image/vnd.djvu\00", align 1
@.str.156 = private unnamed_addr constant [5 x i8] c"djvu\00", align 1
@.str.157 = private unnamed_addr constant [4 x i8] c"dll\00", align 1
@.str.158 = private unnamed_addr constant [4 x i8] c"dms\00", align 1
@.str.159 = private unnamed_addr constant [4 x i8] c"doc\00", align 1
@.str.160 = private unnamed_addr constant [19 x i8] c"application/msword\00", align 1
@.str.161 = private unnamed_addr constant [4 x i8] c"dtd\00", align 1
@.str.162 = private unnamed_addr constant [21 x i8] c"text/xml; charset=%s\00", align 1
@.str.163 = private unnamed_addr constant [5 x i8] c"dump\00", align 1
@.str.164 = private unnamed_addr constant [4 x i8] c"dvi\00", align 1
@.str.165 = private unnamed_addr constant [18 x i8] c"application/x-dvi\00", align 1
@.str.166 = private unnamed_addr constant [4 x i8] c"dxr\00", align 1
@.str.167 = private unnamed_addr constant [4 x i8] c"eps\00", align 1
@.str.168 = private unnamed_addr constant [4 x i8] c"etx\00", align 1
@.str.169 = private unnamed_addr constant [14 x i8] c"text/x-setext\00", align 1
@.str.170 = private unnamed_addr constant [4 x i8] c"exe\00", align 1
@.str.171 = private unnamed_addr constant [3 x i8] c"ez\00", align 1
@.str.172 = private unnamed_addr constant [25 x i8] c"application/andrew-inset\00", align 1
@.str.173 = private unnamed_addr constant [4 x i8] c"fgd\00", align 1
@.str.174 = private unnamed_addr constant [3 x i8] c"fh\00", align 1
@.str.175 = private unnamed_addr constant [17 x i8] c"image/x-freehand\00", align 1
@.str.176 = private unnamed_addr constant [4 x i8] c"fh4\00", align 1
@.str.177 = private unnamed_addr constant [4 x i8] c"fh5\00", align 1
@.str.178 = private unnamed_addr constant [4 x i8] c"fh7\00", align 1
@.str.179 = private unnamed_addr constant [4 x i8] c"fhc\00", align 1
@.str.180 = private unnamed_addr constant [4 x i8] c"gif\00", align 1
@.str.181 = private unnamed_addr constant [10 x i8] c"image/gif\00", align 1
@.str.182 = private unnamed_addr constant [5 x i8] c"gtar\00", align 1
@.str.183 = private unnamed_addr constant [19 x i8] c"application/x-gtar\00", align 1
@.str.184 = private unnamed_addr constant [4 x i8] c"hdf\00", align 1
@.str.185 = private unnamed_addr constant [18 x i8] c"application/x-hdf\00", align 1
@.str.186 = private unnamed_addr constant [4 x i8] c"hqx\00", align 1
@.str.187 = private unnamed_addr constant [25 x i8] c"application/mac-binhex40\00", align 1
@.str.188 = private unnamed_addr constant [4 x i8] c"htm\00", align 1
@.str.66 = private unnamed_addr constant [22 x i8] c"text/html; charset=%s\00", align 1
@.str.189 = private unnamed_addr constant [5 x i8] c"html\00", align 1
@.str.190 = private unnamed_addr constant [4 x i8] c"ice\00", align 1
@.str.191 = private unnamed_addr constant [24 x i8] c"x-conference/x-cooltalk\00", align 1
@.str.192 = private unnamed_addr constant [4 x i8] c"ief\00", align 1
@.str.193 = private unnamed_addr constant [10 x i8] c"image/ief\00", align 1
@.str.194 = private unnamed_addr constant [5 x i8] c"iges\00", align 1
@.str.195 = private unnamed_addr constant [11 x i8] c"model/iges\00", align 1
@.str.196 = private unnamed_addr constant [4 x i8] c"igs\00", align 1
@.str.197 = private unnamed_addr constant [3 x i8] c"iv\00", align 1
@.str.198 = private unnamed_addr constant [23 x i8] c"application/x-inventor\00", align 1
@.str.199 = private unnamed_addr constant [4 x i8] c"jar\00", align 1
@.str.200 = private unnamed_addr constant [27 x i8] c"application/x-java-archive\00", align 1
@.str.201 = private unnamed_addr constant [5 x i8] c"jfif\00", align 1
@.str.202 = private unnamed_addr constant [11 x i8] c"image/jpeg\00", align 1
@.str.203 = private unnamed_addr constant [4 x i8] c"jpe\00", align 1
@.str.204 = private unnamed_addr constant [5 x i8] c"jpeg\00", align 1
@.str.205 = private unnamed_addr constant [4 x i8] c"jpg\00", align 1
@.str.206 = private unnamed_addr constant [3 x i8] c"js\00", align 1
@.str.207 = private unnamed_addr constant [25 x i8] c"application/x-javascript\00", align 1
@.str.208 = private unnamed_addr constant [4 x i8] c"kar\00", align 1
@.str.209 = private unnamed_addr constant [11 x i8] c"audio/midi\00", align 1
@.str.210 = private unnamed_addr constant [4 x i8] c"kml\00", align 1
@.str.211 = private unnamed_addr constant [37 x i8] c"application/vnd.google-earth.kml+xml\00", align 1
@.str.212 = private unnamed_addr constant [4 x i8] c"kmz\00", align 1
@.str.213 = private unnamed_addr constant [33 x i8] c"application/vnd.google-earth.kmz\00", align 1
@.str.214 = private unnamed_addr constant [6 x i8] c"latex\00", align 1
@.str.215 = private unnamed_addr constant [20 x i8] c"application/x-latex\00", align 1
@.str.216 = private unnamed_addr constant [4 x i8] c"lha\00", align 1
@.str.217 = private unnamed_addr constant [4 x i8] c"loc\00", align 1
@.str.218 = private unnamed_addr constant [20 x i8] c"application/xml-loc\00", align 1
@.str.219 = private unnamed_addr constant [4 x i8] c"lzh\00", align 1
@.str.220 = private unnamed_addr constant [4 x i8] c"m3u\00", align 1
@.str.221 = private unnamed_addr constant [16 x i8] c"audio/x-mpegurl\00", align 1
@.str.222 = private unnamed_addr constant [4 x i8] c"man\00", align 1
@.str.223 = private unnamed_addr constant [24 x i8] c"application/x-troff-man\00", align 1
@.str.224 = private unnamed_addr constant [7 x i8] c"mathml\00", align 1
@.str.225 = private unnamed_addr constant [23 x i8] c"application/mathml+xml\00", align 1
@.str.226 = private unnamed_addr constant [3 x i8] c"me\00", align 1
@.str.227 = private unnamed_addr constant [23 x i8] c"application/x-troff-me\00", align 1
@.str.228 = private unnamed_addr constant [5 x i8] c"mesh\00", align 1
@.str.229 = private unnamed_addr constant [11 x i8] c"model/mesh\00", align 1
@.str.230 = private unnamed_addr constant [4 x i8] c"mid\00", align 1
@.str.231 = private unnamed_addr constant [5 x i8] c"midi\00", align 1
@.str.232 = private unnamed_addr constant [4 x i8] c"mif\00", align 1
@.str.233 = private unnamed_addr constant [20 x i8] c"application/vnd.mif\00", align 1
@.str.234 = private unnamed_addr constant [5 x i8] c"mime\00", align 1
@.str.235 = private unnamed_addr constant [15 x i8] c"message/rfc822\00", align 1
@.str.236 = private unnamed_addr constant [4 x i8] c"mml\00", align 1
@.str.237 = private unnamed_addr constant [4 x i8] c"mov\00", align 1
@.str.238 = private unnamed_addr constant [16 x i8] c"video/quicktime\00", align 1
@.str.239 = private unnamed_addr constant [6 x i8] c"movie\00", align 1
@.str.240 = private unnamed_addr constant [18 x i8] c"video/x-sgi-movie\00", align 1
@.str.241 = private unnamed_addr constant [4 x i8] c"mp2\00", align 1
@.str.242 = private unnamed_addr constant [11 x i8] c"audio/mpeg\00", align 1
@.str.243 = private unnamed_addr constant [4 x i8] c"mp3\00", align 1
@.str.244 = private unnamed_addr constant [4 x i8] c"mp4\00", align 1
@.str.245 = private unnamed_addr constant [10 x i8] c"video/mp4\00", align 1
@.str.246 = private unnamed_addr constant [4 x i8] c"mpe\00", align 1
@.str.247 = private unnamed_addr constant [11 x i8] c"video/mpeg\00", align 1
@.str.248 = private unnamed_addr constant [5 x i8] c"mpeg\00", align 1
@.str.249 = private unnamed_addr constant [4 x i8] c"mpg\00", align 1
@.str.250 = private unnamed_addr constant [5 x i8] c"mpga\00", align 1
@.str.251 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.252 = private unnamed_addr constant [23 x i8] c"application/x-troff-ms\00", align 1
@.str.253 = private unnamed_addr constant [4 x i8] c"msh\00", align 1
@.str.254 = private unnamed_addr constant [3 x i8] c"mv\00", align 1
@.str.255 = private unnamed_addr constant [4 x i8] c"mxu\00", align 1
@.str.256 = private unnamed_addr constant [18 x i8] c"video/vnd.mpegurl\00", align 1
@.str.257 = private unnamed_addr constant [3 x i8] c"nc\00", align 1
@.str.258 = private unnamed_addr constant [2 x i8] c"o\00", align 1
@.str.259 = private unnamed_addr constant [4 x i8] c"oda\00", align 1
@.str.260 = private unnamed_addr constant [16 x i8] c"application/oda\00", align 1
@.str.261 = private unnamed_addr constant [4 x i8] c"ogg\00", align 1
@.str.262 = private unnamed_addr constant [16 x i8] c"application/ogg\00", align 1
@.str.263 = private unnamed_addr constant [4 x i8] c"pac\00", align 1
@.str.264 = private unnamed_addr constant [34 x i8] c"application/x-ns-proxy-autoconfig\00", align 1
@.str.265 = private unnamed_addr constant [4 x i8] c"pbm\00", align 1
@.str.266 = private unnamed_addr constant [24 x i8] c"image/x-portable-bitmap\00", align 1
@.str.267 = private unnamed_addr constant [4 x i8] c"pdb\00", align 1
@.str.268 = private unnamed_addr constant [15 x i8] c"chemical/x-pdb\00", align 1
@.str.269 = private unnamed_addr constant [4 x i8] c"pdf\00", align 1
@.str.270 = private unnamed_addr constant [16 x i8] c"application/pdf\00", align 1
@.str.271 = private unnamed_addr constant [4 x i8] c"pgm\00", align 1
@.str.272 = private unnamed_addr constant [25 x i8] c"image/x-portable-graymap\00", align 1
@.str.273 = private unnamed_addr constant [4 x i8] c"pgn\00", align 1
@.str.274 = private unnamed_addr constant [24 x i8] c"application/x-chess-pgn\00", align 1
@.str.275 = private unnamed_addr constant [4 x i8] c"png\00", align 1
@.str.276 = private unnamed_addr constant [10 x i8] c"image/png\00", align 1
@.str.277 = private unnamed_addr constant [4 x i8] c"pnm\00", align 1
@.str.278 = private unnamed_addr constant [24 x i8] c"image/x-portable-anymap\00", align 1
@.str.279 = private unnamed_addr constant [4 x i8] c"ppm\00", align 1
@.str.280 = private unnamed_addr constant [24 x i8] c"image/x-portable-pixmap\00", align 1
@.str.281 = private unnamed_addr constant [4 x i8] c"ppt\00", align 1
@.str.282 = private unnamed_addr constant [30 x i8] c"application/vnd.ms-powerpoint\00", align 1
@.str.283 = private unnamed_addr constant [3 x i8] c"ps\00", align 1
@.str.284 = private unnamed_addr constant [3 x i8] c"qt\00", align 1
@.str.285 = private unnamed_addr constant [3 x i8] c"ra\00", align 1
@.str.286 = private unnamed_addr constant [18 x i8] c"audio/x-realaudio\00", align 1
@.str.287 = private unnamed_addr constant [4 x i8] c"ram\00", align 1
@.str.288 = private unnamed_addr constant [21 x i8] c"audio/x-pn-realaudio\00", align 1
@.str.289 = private unnamed_addr constant [4 x i8] c"ras\00", align 1
@.str.290 = private unnamed_addr constant [19 x i8] c"image/x-cmu-raster\00", align 1
@.str.291 = private unnamed_addr constant [4 x i8] c"rdf\00", align 1
@.str.292 = private unnamed_addr constant [20 x i8] c"application/rdf+xml\00", align 1
@.str.293 = private unnamed_addr constant [4 x i8] c"rgb\00", align 1
@.str.294 = private unnamed_addr constant [12 x i8] c"image/x-rgb\00", align 1
@.str.295 = private unnamed_addr constant [3 x i8] c"rm\00", align 1
@.str.296 = private unnamed_addr constant [5 x i8] c"roff\00", align 1
@.str.297 = private unnamed_addr constant [20 x i8] c"application/x-troff\00", align 1
@.str.298 = private unnamed_addr constant [4 x i8] c"rpm\00", align 1
@.str.299 = private unnamed_addr constant [28 x i8] c"audio/x-pn-realaudio-plugin\00", align 1
@.str.300 = private unnamed_addr constant [4 x i8] c"rss\00", align 1
@.str.301 = private unnamed_addr constant [20 x i8] c"application/rss+xml\00", align 1
@.str.302 = private unnamed_addr constant [4 x i8] c"rtf\00", align 1
@.str.303 = private unnamed_addr constant [21 x i8] c"text/rtf; charset=%s\00", align 1
@.str.304 = private unnamed_addr constant [4 x i8] c"rtx\00", align 1
@.str.305 = private unnamed_addr constant [26 x i8] c"text/richtext; charset=%s\00", align 1
@.str.306 = private unnamed_addr constant [4 x i8] c"sgm\00", align 1
@.str.307 = private unnamed_addr constant [22 x i8] c"text/sgml; charset=%s\00", align 1
@.str.308 = private unnamed_addr constant [5 x i8] c"sgml\00", align 1
@.str.309 = private unnamed_addr constant [3 x i8] c"sh\00", align 1
@.str.310 = private unnamed_addr constant [17 x i8] c"application/x-sh\00", align 1
@.str.311 = private unnamed_addr constant [5 x i8] c"shar\00", align 1
@.str.312 = private unnamed_addr constant [19 x i8] c"application/x-shar\00", align 1
@.str.313 = private unnamed_addr constant [5 x i8] c"silo\00", align 1
@.str.314 = private unnamed_addr constant [4 x i8] c"sit\00", align 1
@.str.315 = private unnamed_addr constant [22 x i8] c"application/x-stuffit\00", align 1
@.str.316 = private unnamed_addr constant [4 x i8] c"skd\00", align 1
@.str.317 = private unnamed_addr constant [19 x i8] c"application/x-koan\00", align 1
@.str.318 = private unnamed_addr constant [4 x i8] c"skm\00", align 1
@.str.319 = private unnamed_addr constant [4 x i8] c"skp\00", align 1
@.str.320 = private unnamed_addr constant [4 x i8] c"skt\00", align 1
@.str.321 = private unnamed_addr constant [4 x i8] c"smi\00", align 1
@.str.322 = private unnamed_addr constant [17 x i8] c"application/smil\00", align 1
@.str.323 = private unnamed_addr constant [5 x i8] c"smil\00", align 1
@.str.324 = private unnamed_addr constant [4 x i8] c"snd\00", align 1
@.str.325 = private unnamed_addr constant [3 x i8] c"so\00", align 1
@.str.326 = private unnamed_addr constant [4 x i8] c"spl\00", align 1
@.str.327 = private unnamed_addr constant [27 x i8] c"application/x-futuresplash\00", align 1
@.str.328 = private unnamed_addr constant [4 x i8] c"src\00", align 1
@.str.329 = private unnamed_addr constant [26 x i8] c"application/x-wais-source\00", align 1
@.str.330 = private unnamed_addr constant [4 x i8] c"stc\00", align 1
@.str.331 = private unnamed_addr constant [38 x i8] c"application/vnd.sun.xml.calc.template\00", align 1
@.str.332 = private unnamed_addr constant [4 x i8] c"std\00", align 1
@.str.333 = private unnamed_addr constant [38 x i8] c"application/vnd.sun.xml.draw.template\00", align 1
@.str.334 = private unnamed_addr constant [4 x i8] c"sti\00", align 1
@.str.335 = private unnamed_addr constant [41 x i8] c"application/vnd.sun.xml.impress.template\00", align 1
@.str.336 = private unnamed_addr constant [4 x i8] c"stw\00", align 1
@.str.337 = private unnamed_addr constant [40 x i8] c"application/vnd.sun.xml.writer.template\00", align 1
@.str.338 = private unnamed_addr constant [8 x i8] c"sv4cpio\00", align 1
@.str.339 = private unnamed_addr constant [22 x i8] c"application/x-sv4cpio\00", align 1
@.str.340 = private unnamed_addr constant [7 x i8] c"sv4crc\00", align 1
@.str.341 = private unnamed_addr constant [21 x i8] c"application/x-sv4crc\00", align 1
@.str.342 = private unnamed_addr constant [4 x i8] c"svg\00", align 1
@.str.343 = private unnamed_addr constant [14 x i8] c"image/svg+xml\00", align 1
@.str.344 = private unnamed_addr constant [5 x i8] c"svgz\00", align 1
@.str.345 = private unnamed_addr constant [4 x i8] c"swf\00", align 1
@.str.346 = private unnamed_addr constant [30 x i8] c"application/x-shockwave-flash\00", align 1
@.str.347 = private unnamed_addr constant [4 x i8] c"sxc\00", align 1
@.str.348 = private unnamed_addr constant [29 x i8] c"application/vnd.sun.xml.calc\00", align 1
@.str.349 = private unnamed_addr constant [4 x i8] c"sxd\00", align 1
@.str.350 = private unnamed_addr constant [29 x i8] c"application/vnd.sun.xml.draw\00", align 1
@.str.351 = private unnamed_addr constant [4 x i8] c"sxg\00", align 1
@.str.352 = private unnamed_addr constant [38 x i8] c"application/vnd.sun.xml.writer.global\00", align 1
@.str.353 = private unnamed_addr constant [4 x i8] c"sxi\00", align 1
@.str.354 = private unnamed_addr constant [32 x i8] c"application/vnd.sun.xml.impress\00", align 1
@.str.355 = private unnamed_addr constant [4 x i8] c"sxm\00", align 1
@.str.356 = private unnamed_addr constant [29 x i8] c"application/vnd.sun.xml.math\00", align 1
@.str.357 = private unnamed_addr constant [4 x i8] c"sxw\00", align 1
@.str.358 = private unnamed_addr constant [31 x i8] c"application/vnd.sun.xml.writer\00", align 1
@.str.359 = private unnamed_addr constant [2 x i8] c"t\00", align 1
@.str.360 = private unnamed_addr constant [4 x i8] c"tar\00", align 1
@.str.361 = private unnamed_addr constant [18 x i8] c"application/x-tar\00", align 1
@.str.362 = private unnamed_addr constant [4 x i8] c"tcl\00", align 1
@.str.363 = private unnamed_addr constant [18 x i8] c"application/x-tcl\00", align 1
@.str.364 = private unnamed_addr constant [4 x i8] c"tex\00", align 1
@.str.365 = private unnamed_addr constant [18 x i8] c"application/x-tex\00", align 1
@.str.366 = private unnamed_addr constant [5 x i8] c"texi\00", align 1
@.str.367 = private unnamed_addr constant [22 x i8] c"application/x-texinfo\00", align 1
@.str.368 = private unnamed_addr constant [8 x i8] c"texinfo\00", align 1
@.str.369 = private unnamed_addr constant [4 x i8] c"tif\00", align 1
@.str.370 = private unnamed_addr constant [11 x i8] c"image/tiff\00", align 1
@.str.371 = private unnamed_addr constant [5 x i8] c"tiff\00", align 1
@.str.372 = private unnamed_addr constant [3 x i8] c"tr\00", align 1
@.str.373 = private unnamed_addr constant [4 x i8] c"tsp\00", align 1
@.str.374 = private unnamed_addr constant [20 x i8] c"application/dsptype\00", align 1
@.str.375 = private unnamed_addr constant [4 x i8] c"tsv\00", align 1
@.str.376 = private unnamed_addr constant [38 x i8] c"text/tab-separated-values; charset=%s\00", align 1
@.str.377 = private unnamed_addr constant [4 x i8] c"txt\00", align 1
@.str.378 = private unnamed_addr constant [6 x i8] c"ustar\00", align 1
@.str.379 = private unnamed_addr constant [20 x i8] c"application/x-ustar\00", align 1
@.str.380 = private unnamed_addr constant [4 x i8] c"vcd\00", align 1
@.str.381 = private unnamed_addr constant [21 x i8] c"application/x-cdlink\00", align 1
@.str.382 = private unnamed_addr constant [5 x i8] c"vrml\00", align 1
@.str.383 = private unnamed_addr constant [11 x i8] c"model/vrml\00", align 1
@.str.384 = private unnamed_addr constant [3 x i8] c"vx\00", align 1
@.str.385 = private unnamed_addr constant [23 x i8] c"video/x-rad-screenplay\00", align 1
@.str.386 = private unnamed_addr constant [4 x i8] c"wav\00", align 1
@.str.387 = private unnamed_addr constant [12 x i8] c"audio/x-wav\00", align 1
@.str.388 = private unnamed_addr constant [4 x i8] c"wax\00", align 1
@.str.389 = private unnamed_addr constant [15 x i8] c"audio/x-ms-wax\00", align 1
@.str.390 = private unnamed_addr constant [5 x i8] c"wbmp\00", align 1
@.str.391 = private unnamed_addr constant [19 x i8] c"image/vnd.wap.wbmp\00", align 1
@.str.392 = private unnamed_addr constant [6 x i8] c"wbxml\00", align 1
@.str.393 = private unnamed_addr constant [26 x i8] c"application/vnd.wap.wbxml\00", align 1
@.str.394 = private unnamed_addr constant [3 x i8] c"wm\00", align 1
@.str.395 = private unnamed_addr constant [14 x i8] c"video/x-ms-wm\00", align 1
@.str.396 = private unnamed_addr constant [4 x i8] c"wma\00", align 1
@.str.397 = private unnamed_addr constant [15 x i8] c"audio/x-ms-wma\00", align 1
@.str.398 = private unnamed_addr constant [4 x i8] c"wmd\00", align 1
@.str.399 = private unnamed_addr constant [21 x i8] c"application/x-ms-wmd\00", align 1
@.str.400 = private unnamed_addr constant [4 x i8] c"wml\00", align 1
@.str.401 = private unnamed_addr constant [17 x i8] c"text/vnd.wap.wml\00", align 1
@.str.402 = private unnamed_addr constant [5 x i8] c"wmlc\00", align 1
@.str.403 = private unnamed_addr constant [25 x i8] c"application/vnd.wap.wmlc\00", align 1
@.str.404 = private unnamed_addr constant [5 x i8] c"wmls\00", align 1
@.str.405 = private unnamed_addr constant [23 x i8] c"text/vnd.wap.wmlscript\00", align 1
@.str.406 = private unnamed_addr constant [6 x i8] c"wmlsc\00", align 1
@.str.407 = private unnamed_addr constant [31 x i8] c"application/vnd.wap.wmlscriptc\00", align 1
@.str.408 = private unnamed_addr constant [4 x i8] c"wmv\00", align 1
@.str.409 = private unnamed_addr constant [15 x i8] c"video/x-ms-wmv\00", align 1
@.str.410 = private unnamed_addr constant [4 x i8] c"wmx\00", align 1
@.str.411 = private unnamed_addr constant [15 x i8] c"video/x-ms-wmx\00", align 1
@.str.412 = private unnamed_addr constant [4 x i8] c"wmz\00", align 1
@.str.413 = private unnamed_addr constant [21 x i8] c"application/x-ms-wmz\00", align 1
@.str.414 = private unnamed_addr constant [4 x i8] c"wrl\00", align 1
@.str.415 = private unnamed_addr constant [5 x i8] c"wsrc\00", align 1
@.str.416 = private unnamed_addr constant [4 x i8] c"wvx\00", align 1
@.str.417 = private unnamed_addr constant [15 x i8] c"video/x-ms-wvx\00", align 1
@.str.418 = private unnamed_addr constant [4 x i8] c"xbm\00", align 1
@.str.419 = private unnamed_addr constant [16 x i8] c"image/x-xbitmap\00", align 1
@.str.420 = private unnamed_addr constant [4 x i8] c"xht\00", align 1
@.str.421 = private unnamed_addr constant [34 x i8] c"application/xhtml+xml; charset=%s\00", align 1
@.str.422 = private unnamed_addr constant [6 x i8] c"xhtml\00", align 1
@.str.423 = private unnamed_addr constant [4 x i8] c"xls\00", align 1
@.str.424 = private unnamed_addr constant [25 x i8] c"application/vnd.ms-excel\00", align 1
@.str.425 = private unnamed_addr constant [4 x i8] c"xml\00", align 1
@.str.426 = private unnamed_addr constant [4 x i8] c"xpm\00", align 1
@.str.427 = private unnamed_addr constant [16 x i8] c"image/x-xpixmap\00", align 1
@.str.428 = private unnamed_addr constant [4 x i8] c"xsl\00", align 1
@.str.429 = private unnamed_addr constant [4 x i8] c"xwd\00", align 1
@.str.430 = private unnamed_addr constant [20 x i8] c"image/x-xwindowdump\00", align 1
@.str.431 = private unnamed_addr constant [4 x i8] c"xyz\00", align 1
@.str.432 = private unnamed_addr constant [15 x i8] c"chemical/x-xyz\00", align 1
@.str.433 = private unnamed_addr constant [4 x i8] c"zip\00", align 1
@.str.434 = private unnamed_addr constant [16 x i8] c"application/zip\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"%.80s starting on port %d\00", align 1
@.str.8.97 = private unnamed_addr constant [22 x i8] c"thttpd/2.27 19Oct2015\00", align 1
@.str.9.98 = private unnamed_addr constant [33 x i8] c"%.80s starting on %.80s, port %d\00", align 1
@.str.29 = private unnamed_addr constant [30 x i8] c"tmr_create(occasional) failed\00", align 1
@.str.135 = private unnamed_addr constant [35 x i8] c"%.80s connection timed out reading\00", align 1
@.str.17.113 = private unnamed_addr constant [17 x i8] c"%s/%s/err%d.html\00", align 1
@.str.18.114 = private unnamed_addr constant [7 x i8] c"errors\00", align 1
@.str.84.115 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.26.116 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.81.117 = private unnamed_addr constant [16 x i8] c"Partial Content\00", align 1
@.str.72 = private unnamed_addr constant [26 x i8] c"%a, %d %b %Y %H:%M:%S GMT\00", align 1
@.str.73 = private unnamed_addr constant [114 x i8] c"%.20s %d %s\0D\0AServer: %s\0D\0AContent-Type: %s\0D\0ADate: %s\0D\0ALast-Modified: %s\0D\0AAccept-Ranges: bytes\0D\0AConnection: close\0D\0A\00", align 1
@.str.16 = private unnamed_addr constant [49 x i8] c"out of memory reallocating a string to %ld bytes\00", align 1
@.str.74 = private unnamed_addr constant [35 x i8] c"Cache-Control: no-cache,no-store\0D\0A\00", align 1
@.str.75.118 = private unnamed_addr constant [23 x i8] c"Content-Encoding: %s\0D\0A\00", align 1
@.str.76.119 = private unnamed_addr constant [60 x i8] c"Content-Range: bytes %lld-%lld/%lld\0D\0AContent-Length: %lld\0D\0A\00", align 1
@.str.77.120 = private unnamed_addr constant [23 x i8] c"Content-Length: %lld\0D\0A\00", align 1
@.str.78.121 = private unnamed_addr constant [10 x i8] c"P3P: %s\0D\0A\00", align 1
@.str.79.122 = private unnamed_addr constant [41 x i8] c"Cache-Control: max-age=%d\0D\0AExpires: %s\0D\0A\00", align 1
@.str.82.123 = private unnamed_addr constant [74 x i8] c"    <hr>\0A\0A    <address><a href=\22%s\22>%s</a></address>\0A\0A  </body>\0A\0A</html>\0A\00", align 1
@.str.83.124 = private unnamed_addr constant [37 x i8] c"http://www.acme.com/software/thttpd/\00", align 1
@.str.19.125 = private unnamed_addr constant [14 x i8] c"%s/err%d.html\00", align 1
@.str.67.126 = private unnamed_addr constant [322 x i8] c"<!DOCTYPE html PUBLIC \22-//W3C//DTD HTML 4.01 Transitional//EN\22 \22http://www.w3.org/TR/html4/loose.dtd\22>\0A\0A<html>\0A\0A  <head>\0A    <meta http-equiv=\22Content-type\22 content=\22text/html;charset=UTF-8\22>\0A    <title>%d %s</title>\0A  </head>\0A\0A  <body bgcolor=\22#cc9999\22 text=\22#000000\22 link=\22#2020ff\22 vlink=\22#4040cc\22>\0A\0A    <h2>%d %s</h2>\0A\00", align 1
@.str.68 = private unnamed_addr constant [9 x i8] c"**MSIE**\00", align 1
@.str.69.127 = private unnamed_addr constant [6 x i8] c"<!--\0A\00", align 1
@.str.70 = private unnamed_addr constant [79 x i8] c"Padding so that MSIE deigns to show this error instead of its own canned one.\0A\00", align 1
@sub_process = internal unnamed_addr global i1 false
@.str.535 = private unnamed_addr constant [38 x i8] c"bad fd (%d) passed to fdwatch_add_fd!\00", align 1
@.str.5.536 = private unnamed_addr constant [29 x i8] c"too many fds in poll_add_fd!\00", align 1
@.str.133 = private unnamed_addr constant [33 x i8] c"replacing non-null linger_timer!\00", align 1
@first_free_connect = internal unnamed_addr global i32 0, align 4
@.str.134 = private unnamed_addr constant [43 x i8] c"tmr_create(linger_clear_connection) failed\00", align 1
@.str.136 = private unnamed_addr constant [35 x i8] c"%.80s connection timed out sending\00", align 1
@.str.30 = private unnamed_addr constant [24 x i8] c"tmr_create(idle) failed\00", align 1
@.str.130 = private unnamed_addr constant [70 x i8] c"throttle #%d '%.80s' rate %ld greatly exceeding limit %ld; %d sending\00", align 1
@.str.131 = private unnamed_addr constant [62 x i8] c"throttle #%d '%.80s' rate %ld exceeding limit %ld; %d sending\00", align 1
@.str.132 = private unnamed_addr constant [65 x i8] c"throttle #%d '%.80s' rate %ld lower than minimum %ld; %d sending\00", align 1
@.str.31 = private unnamed_addr constant [36 x i8] c"tmr_create(update_throttles) failed\00", align 1
@.str.32 = private unnamed_addr constant [30 x i8] c"tmr_create(show_stats) failed\00", align 1
@.str.33 = private unnamed_addr constant [15 x i8] c"setgroups - %m\00", align 1
@.str.34 = private unnamed_addr constant [12 x i8] c"setgid - %m\00", align 1
@.str.35 = private unnamed_addr constant [16 x i8] c"initgroups - %m\00", align 1
@.str.36 = private unnamed_addr constant [12 x i8] c"setuid - %m\00", align 1
@.str.37 = private unnamed_addr constant [58 x i8] c"started as root without requesting chroot(), warning only\00", align 1
@.str.38 = private unnamed_addr constant [38 x i8] c"out of memory allocating a connecttab\00", align 1
@.str.46 = private unnamed_addr constant [19 x i8] c"re-opening logfile\00", align 1
@.str.47 = private unnamed_addr constant [22 x i8] c"re-opening %.80s - %m\00", align 1
@nreturned = internal unnamed_addr global i32 0, align 4
@next_ridx = internal unnamed_addr global i32 0, align 4
@.str.39 = private unnamed_addr constant [13 x i8] c"fdwatch - %m\00", align 1
@.str.2.545 = private unnamed_addr constant [40 x i8] c"bad fd (%d) passed to fdwatch_check_fd!\00", align 1
@.str.7.546 = private unnamed_addr constant [33 x i8] c"bad fdidx (%d) in poll_check_fd!\00", align 1
@.str.123 = private unnamed_addr constant [22 x i8] c"too many connections!\00", align 1
@.str.124 = private unnamed_addr constant [36 x i8] c"the connects free list is messed up\00", align 1
@.str.125 = private unnamed_addr constant [39 x i8] c"out of memory allocating an httpd_conn\00", align 1
@.str.24.134 = private unnamed_addr constant [12 x i8] c"accept - %m\00", align 1
@.str.25.135 = private unnamed_addr constant [24 x i8] c"unknown sockaddr family\00", align 1
@.str.8.549 = private unnamed_addr constant [30 x i8] c"bad ridx (%d) in poll_get_fd!\00", align 1
@.str.27.140 = private unnamed_addr constant [5 x i8] c" \09\0A\0D\00", align 1
@.str.29.141 = private unnamed_addr constant [9 x i8] c"HTTP/1.0\00", align 1
@.str.28.142 = private unnamed_addr constant [9 x i8] c"HTTP/0.9\00", align 1
@.str.30.143 = private unnamed_addr constant [8 x i8] c"http://\00", align 1
@.str.85.144 = private unnamed_addr constant [16 x i8] c"Not Implemented\00", align 1
@.str.86.145 = private unnamed_addr constant [65 x i8] c"The requested method '%.80s' is not implemented by this server.\0A\00", align 1
@.str.95.146 = private unnamed_addr constant [3 x i8] c"//\00", align 1
@.str.96.147 = private unnamed_addr constant [3 x i8] c"./\00", align 1
@.str.97.148 = private unnamed_addr constant [4 x i8] c"/./\00", align 1
@.str.98.149 = private unnamed_addr constant [4 x i8] c"../\00", align 1
@.str.99.150 = private unnamed_addr constant [5 x i8] c"/../\00", align 1
@.str.32.151 = private unnamed_addr constant [9 x i8] c"Referer:\00", align 1
@.str.34.152 = private unnamed_addr constant [10 x i8] c"Referrer:\00", align 1
@.str.35.153 = private unnamed_addr constant [12 x i8] c"User-Agent:\00", align 1
@.str.36.154 = private unnamed_addr constant [6 x i8] c"Host:\00", align 1
@.str.37.155 = private unnamed_addr constant [8 x i8] c"Accept:\00", align 1
@.str.38.156 = private unnamed_addr constant [32 x i8] c"%.80s way too much Accept: data\00", align 1
@.str.39.157 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.40.158 = private unnamed_addr constant [17 x i8] c"Accept-Encoding:\00", align 1
@.str.41.159 = private unnamed_addr constant [41 x i8] c"%.80s way too much Accept-Encoding: data\00", align 1
@.str.42.160 = private unnamed_addr constant [17 x i8] c"Accept-Language:\00", align 1
@.str.43.161 = private unnamed_addr constant [19 x i8] c"If-Modified-Since:\00", align 1
@.str.602 = private unnamed_addr constant [32 x i8] c"%d-%400[a-zA-Z]-%d %d:%d:%d GMT\00", align 1
@scan_mon.sorted = internal unnamed_addr global i1 false
@scan_mon.mon_tab = internal global [23 x %struct.iovec] [%struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7.603, i32 0, i32 0), i64 0 }, %struct.iovec { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8.604, i32 0, i32 0), i64 0 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.605, i32 0, i32 0), i64 1 }, %struct.iovec { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10.606, i32 0, i32 0), i64 1 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11.607, i32 0, i32 0), i64 2 }, %struct.iovec { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12.608, i32 0, i32 0), i64 2 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13.609, i32 0, i32 0), i64 3 }, %struct.iovec { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14.610, i32 0, i32 0), i64 3 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.611, i32 0, i32 0), i64 4 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16.612, i32 0, i32 0), i64 5 }, %struct.iovec { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17.613, i32 0, i32 0), i64 5 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18.614, i32 0, i32 0), i64 6 }, %struct.iovec { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.615, i32 0, i32 0), i64 6 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.616, i32 0, i32 0), i64 7 }, %struct.iovec { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21.617, i32 0, i32 0), i64 7 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22.618, i32 0, i32 0), i64 8 }, %struct.iovec { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.23.619, i32 0, i32 0), i64 8 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24.620, i32 0, i32 0), i64 9 }, %struct.iovec { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.621, i32 0, i32 0), i64 9 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26.622, i32 0, i32 0), i64 10 }, %struct.iovec { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27.623, i32 0, i32 0), i64 10 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.28.624, i32 0, i32 0), i64 11 }, %struct.iovec { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.29.625, i32 0, i32 0), i64 11 }], align 16
@.str.7.603 = private unnamed_addr constant [4 x i8] c"jan\00", align 1
@.str.8.604 = private unnamed_addr constant [8 x i8] c"january\00", align 1
@.str.9.605 = private unnamed_addr constant [4 x i8] c"feb\00", align 1
@.str.10.606 = private unnamed_addr constant [9 x i8] c"february\00", align 1
@.str.11.607 = private unnamed_addr constant [4 x i8] c"mar\00", align 1
@.str.12.608 = private unnamed_addr constant [6 x i8] c"march\00", align 1
@.str.13.609 = private unnamed_addr constant [4 x i8] c"apr\00", align 1
@.str.14.610 = private unnamed_addr constant [6 x i8] c"april\00", align 1
@.str.15.611 = private unnamed_addr constant [4 x i8] c"may\00", align 1
@.str.16.612 = private unnamed_addr constant [4 x i8] c"jun\00", align 1
@.str.17.613 = private unnamed_addr constant [5 x i8] c"june\00", align 1
@.str.18.614 = private unnamed_addr constant [4 x i8] c"jul\00", align 1
@.str.19.615 = private unnamed_addr constant [5 x i8] c"july\00", align 1
@.str.20.616 = private unnamed_addr constant [4 x i8] c"aug\00", align 1
@.str.21.617 = private unnamed_addr constant [7 x i8] c"august\00", align 1
@.str.22.618 = private unnamed_addr constant [4 x i8] c"sep\00", align 1
@.str.23.619 = private unnamed_addr constant [10 x i8] c"september\00", align 1
@.str.24.620 = private unnamed_addr constant [4 x i8] c"oct\00", align 1
@.str.25.621 = private unnamed_addr constant [8 x i8] c"october\00", align 1
@.str.26.622 = private unnamed_addr constant [4 x i8] c"nov\00", align 1
@.str.27.623 = private unnamed_addr constant [9 x i8] c"november\00", align 1
@.str.28.624 = private unnamed_addr constant [4 x i8] c"dec\00", align 1
@.str.29.625 = private unnamed_addr constant [9 x i8] c"december\00", align 1
@.str.1.626 = private unnamed_addr constant [32 x i8] c"%d %400[a-zA-Z] %d %d:%d:%d GMT\00", align 1
@.str.2.627 = private unnamed_addr constant [32 x i8] c"%d:%d:%d GMT %d-%400[a-zA-Z]-%d\00", align 1
@.str.3.628 = private unnamed_addr constant [32 x i8] c"%d:%d:%d GMT %d %400[a-zA-Z] %d\00", align 1
@.str.4.629 = private unnamed_addr constant [46 x i8] c"%400[a-zA-Z], %d-%400[a-zA-Z]-%d %d:%d:%d GMT\00", align 1
@scan_wday.sorted = internal unnamed_addr global i1 false
@scan_wday.wday_tab = internal global [14 x %struct.iovec] [%struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.30.630, i32 0, i32 0), i64 0 }, %struct.iovec { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31.631, i32 0, i32 0), i64 0 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32.632, i32 0, i32 0), i64 1 }, %struct.iovec { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33.633, i32 0, i32 0), i64 1 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34.634, i32 0, i32 0), i64 2 }, %struct.iovec { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35.635, i32 0, i32 0), i64 2 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36.636, i32 0, i32 0), i64 3 }, %struct.iovec { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.37.637, i32 0, i32 0), i64 3 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.38.638, i32 0, i32 0), i64 4 }, %struct.iovec { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39.639, i32 0, i32 0), i64 4 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.40.640, i32 0, i32 0), i64 5 }, %struct.iovec { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41.641, i32 0, i32 0), i64 5 }, %struct.iovec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.42.642, i32 0, i32 0), i64 6 }, %struct.iovec { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.43.643, i32 0, i32 0), i64 6 }], align 16
@.str.30.630 = private unnamed_addr constant [4 x i8] c"sun\00", align 1
@.str.31.631 = private unnamed_addr constant [7 x i8] c"sunday\00", align 1
@.str.32.632 = private unnamed_addr constant [4 x i8] c"mon\00", align 1
@.str.33.633 = private unnamed_addr constant [7 x i8] c"monday\00", align 1
@.str.34.634 = private unnamed_addr constant [4 x i8] c"tue\00", align 1
@.str.35.635 = private unnamed_addr constant [8 x i8] c"tuesday\00", align 1
@.str.36.636 = private unnamed_addr constant [4 x i8] c"wed\00", align 1
@.str.37.637 = private unnamed_addr constant [10 x i8] c"wednesday\00", align 1
@.str.38.638 = private unnamed_addr constant [4 x i8] c"thu\00", align 1
@.str.39.639 = private unnamed_addr constant [9 x i8] c"thursday\00", align 1
@.str.40.640 = private unnamed_addr constant [4 x i8] c"fri\00", align 1
@.str.41.641 = private unnamed_addr constant [7 x i8] c"friday\00", align 1
@.str.42.642 = private unnamed_addr constant [4 x i8] c"sat\00", align 1
@.str.43.643 = private unnamed_addr constant [9 x i8] c"saturday\00", align 1
@.str.5.644 = private unnamed_addr constant [46 x i8] c"%400[a-zA-Z], %d %400[a-zA-Z] %d %d:%d:%d GMT\00", align 1
@.str.6.645 = private unnamed_addr constant [45 x i8] c"%400[a-zA-Z] %400[a-zA-Z] %d %d:%d:%d GMT %d\00", align 1
@tm_to_time.monthtab = internal unnamed_addr constant [12 x i32] [i32 0, i32 31, i32 59, i32 90, i32 120, i32 151, i32 181, i32 212, i32 243, i32 273, i32 304, i32 334], align 16
@.str.44.162 = private unnamed_addr constant [23 x i8] c"unparsable time: %.80s\00", align 1
@.str.45.163 = private unnamed_addr constant [8 x i8] c"Cookie:\00", align 1
@.str.46.164 = private unnamed_addr constant [7 x i8] c"Range:\00", align 1
@.str.48.165 = private unnamed_addr constant [10 x i8] c"Range-If:\00", align 1
@.str.49.166 = private unnamed_addr constant [10 x i8] c"If-Range:\00", align 1
@.str.50.167 = private unnamed_addr constant [14 x i8] c"Content-Type:\00", align 1
@.str.51 = private unnamed_addr constant [16 x i8] c"Content-Length:\00", align 1
@.str.52.168 = private unnamed_addr constant [15 x i8] c"Authorization:\00", align 1
@.str.53 = private unnamed_addr constant [12 x i8] c"Connection:\00", align 1
@.str.54 = private unnamed_addr constant [11 x i8] c"keep-alive\00", align 1
@vhost_map.tempfilename = internal global i8* null, align 8
@vhost_map.maxtempfilename = internal global i64 0, align 8
@.str.87.169 = private unnamed_addr constant [17 x i8] c"getsockname - %m\00", align 1
@.str.89.170 = private unnamed_addr constant [15 x i8] c"Internal Error\00", align 1
@.str.90.171 = private unnamed_addr constant [65 x i8] c"There was an unusual problem serving the requested URL '%.80s'.\0A\00", align 1
@expand_symlinks.checked = internal global i8* null, align 8
@expand_symlinks.maxchecked = internal global i64 0, align 8
@expand_symlinks.rest = internal global i8* null, align 8
@expand_symlinks.maxrest = internal global i64 0, align 8
@.str.91.172 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.92.173 = private unnamed_addr constant [20 x i8] c"readlink %.80s - %m\00", align 1
@.str.93.174 = private unnamed_addr constant [27 x i8] c"too many symlinks in %.80s\00", align 1
@.str.55 = private unnamed_addr constant [44 x i8] c"%.80s URL \22%.80s\22 goes outside the web tree\00", align 1
@.str.94.175 = private unnamed_addr constant [10 x i8] c"Forbidden\00", align 1
@.str.56 = private unnamed_addr constant [95 x i8] c"The requested URL '%.80s' resolves to a file outside the permitted web server directory tree.\0A\00", align 1
@.str.126 = private unnamed_addr constant [56 x i8] c"throttle sending count was negative - shouldn't happen!\00", align 1
@.str.441 = private unnamed_addr constant [56 x i8] c"%.80s URL \22%.80s\22 resolves to a non world-readable file\00", align 1
@.str.442 = private unnamed_addr constant [74 x i8] c"The requested URL '%.80s' resolves to a file that is not world-readable.\0A\00", align 1
@.str.454 = private unnamed_addr constant [10 x i8] c"Not Found\00", align 1
@.str.455 = private unnamed_addr constant [57 x i8] c"The requested URL '%.80s' was not found on this server.\0A\00", align 1
@send_dirredirect.location = internal global i8* null, align 8
@send_dirredirect.maxlocation = internal global i64 0, align 8
@.str.456 = private unnamed_addr constant [7 x i8] c"%s/?%s\00", align 1
@.str.457 = private unnamed_addr constant [4 x i8] c"%s/\00", align 1
@send_dirredirect.header = internal global i8* null, align 8
@send_dirredirect.maxheader = internal global i64 0, align 8
@.str.458 = private unnamed_addr constant [7 x i8] c"%s%s\0D\0A\00", align 1
@send_dirredirect.headstr = internal global [11 x i8] c"Location: \00", align 1
@.str.459 = private unnamed_addr constant [6 x i8] c"Found\00", align 1
@.str.460 = private unnamed_addr constant [28 x i8] c"The actual URL is '%.80s'.\0A\00", align 1
@really_start_request.index_names = internal unnamed_addr constant [6 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.435, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.436, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.437, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.438, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.439, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.440, i32 0, i32 0)], align 16
@.str.435 = private unnamed_addr constant [11 x i8] c"index.html\00", align 1
@.str.436 = private unnamed_addr constant [10 x i8] c"index.htm\00", align 1
@.str.437 = private unnamed_addr constant [12 x i8] c"index.xhtml\00", align 1
@.str.438 = private unnamed_addr constant [10 x i8] c"index.xht\00", align 1
@.str.439 = private unnamed_addr constant [12 x i8] c"Default.htm\00", align 1
@.str.440 = private unnamed_addr constant [10 x i8] c"index.cgi\00", align 1
@really_start_request.indexname = internal global i8* null, align 8
@really_start_request.maxindexname = internal global i64 0, align 8
@.str.443 = private unnamed_addr constant [68 x i8] c"%.80s URL \22%.80s\22 tried to index a directory with indexing disabled\00", align 1
@.str.444 = private unnamed_addr constant [79 x i8] c"The requested URL '%.80s' resolves to a directory that has indexing disabled.\0A\00", align 1
@.str.31.182 = private unnamed_addr constant [2 x i8] c".\00", align 1
@auth_check2.authpath = internal global i8* null, align 8
@auth_check2.maxauthpath = internal global i64 0, align 8
@.str.461 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@.str.447 = private unnamed_addr constant [10 x i8] c".htpasswd\00", align 1
@.str.462 = private unnamed_addr constant [7 x i8] c"Basic \00", align 1
@send_authenticate.header = internal global i8* null, align 8
@send_authenticate.maxheader = internal global i64 0, align 8
@.str.465 = private unnamed_addr constant [8 x i8] c"%s%s\22\0D\0A\00", align 1
@send_authenticate.headstr = internal global [32 x i8] c"WWW-Authenticate: Basic realm=\22\00", align 16
@.str.466 = private unnamed_addr constant [13 x i8] c"Unauthorized\00", align 1
@.str.467 = private unnamed_addr constant [45 x i8] c"Authorization required for the URL '%.80s'.\0A\00", align 1
@b64_decode_table = internal unnamed_addr constant [256 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 62, i32 -1, i32 -1, i32 -1, i32 63, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], align 16
@auth_check2.maxprevauthpath = internal global i64 0, align 8
@auth_check2.prevauthpath = internal global i8* null, align 8
@auth_check2.prevmtime = internal unnamed_addr global i64 0, align 8
@auth_check2.prevuser = internal global i8* null, align 8
@auth_check2.prevcryp = internal global i8* null, align 8
@.str.463 = private unnamed_addr constant [47 x i8] c"%.80s auth file %.80s could not be opened - %m\00", align 1
@.str.464 = private unnamed_addr constant [113 x i8] c"The requested URL '%.80s' is protected by an authentication file, but the authentication file cannot be opened.\0A\00", align 1
@auth_check2.maxprevuser = internal global i64 0, align 8
@auth_check2.maxprevcryp = internal global i64 0, align 8
@really_check_referrer.refhost = internal global i8* null, align 8
@really_check_referrer.refhost_size = internal global i64 0, align 8
@.str.468 = private unnamed_addr constant [46 x i8] c"%.80s non-local referrer \22%.80s%.80s\22 \22%.80s\22\00", align 1
@.str.469 = private unnamed_addr constant [71 x i8] c"You must supply a local referrer to get URL '%.80s' from this server.\0A\00", align 1
@.str.470 = private unnamed_addr constant [19 x i8] c"opendir %.80s - %m\00", align 1
@.str.536 = private unnamed_addr constant [3 x i8] c"OK\00", align 1
@.str.471 = private unnamed_addr constant [10 x i8] c"fork - %m\00", align 1
@.str.472 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.473 = private unnamed_addr constant [12 x i8] c"fdopen - %m\00", align 1
@.str.474 = private unnamed_addr constant [400 x i8] c"<!DOCTYPE html PUBLIC \22-//W3C//DTD HTML 4.01 Transitional//EN\22 \22http://www.w3.org/TR/html4/loose.dtd\22>\0A\0A<html>\0A\0A  <head>\0A    <meta http-equiv=\22Content-type\22 content=\22text/html;charset=UTF-8\22>\0A    <title>Index of %.80s</title>\0A  </head>\0A\0A  <body bgcolor=\22#99cc99\22 text=\22#000000\22 link=\22#2020ff\22 vlink=\22#4040cc\22>\0A\0A    <h2>Index of %.80s</h2>\0A\0A    <pre>\0Amode  links    bytes  last-changed  name\0A    <hr>\00", align 1
@ls.maxnames = internal unnamed_addr global i32 0, align 4
@ls.nameptrs = internal unnamed_addr global i8** null, align 8
@ls.names = internal unnamed_addr global i8* null, align 8
@.str.475 = private unnamed_addr constant [43 x i8] c"out of memory reallocating directory names\00", align 1
@ls.name = internal global i8* null, align 8
@ls.maxname = internal global i64 0, align 8
@ls.rname = internal global i8* null, align 8
@ls.maxrname = internal global i64 0, align 8
@.str.476 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.477 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@ls.encrname = internal global i8* null, align 8
@ls.maxencrname = internal global i64 0, align 8
@.str.485 = private unnamed_addr constant [6 x i8] c"/_.-~\00", align 1
@.str.486 = private unnamed_addr constant [7 x i8] c"%%%02x\00", align 1
@.str.478 = private unnamed_addr constant [8 x i8] c" -&gt; \00", align 1
@.str.480 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.479 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@.str.47.183 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@.str.88.184 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.481 = private unnamed_addr constant [58 x i8] c"%s %3ld  %10lld  %s  <a href=\22/%.500s%s\22>%.80s</a>%s%s%s\0A\00", align 1
@.str.482 = private unnamed_addr constant [30 x i8] c"    </pre>\0A  </body>\0A</html>\0A\00", align 1
@.str.483 = private unnamed_addr constant [51 x i8] c"spawned indexing process %d for directory '%.200s'\00", align 1
@.str.487 = private unnamed_addr constant [22 x i8] c"killed CGI process %d\00", align 1
@.str.489 = private unnamed_addr constant [27 x i8] c"hard-killed CGI process %d\00", align 1
@.str.488 = private unnamed_addr constant [29 x i8] c"tmr_create(cgi_kill2) failed\00", align 1
@.str.484 = private unnamed_addr constant [31 x i8] c"tmr_create(cgi_kill ls) failed\00", align 1
@.str.445 = private unnamed_addr constant [62 x i8] c"%.80s URL \22%.80s\22 resolves to a non-world-readable index file\00", align 1
@.str.446 = private unnamed_addr constant [81 x i8] c"The requested URL '%.80s' resolves to an index file that is not world-readable.\0A\00", align 1
@really_start_request.dirname = internal global i8* null, align 8
@really_start_request.maxdirname = internal global i64 0, align 8
@.str.448 = private unnamed_addr constant [49 x i8] c"%.80s URL \22%.80s\22 tried to retrieve an auth file\00", align 1
@.str.449 = private unnamed_addr constant [85 x i8] c"The requested URL '%.80s' is an authorization file, retrieving it is not permitted.\0A\00", align 1
@.str.495 = private unnamed_addr constant [8 x i8] c"PATH=%s\00", align 1
@.str.496 = private unnamed_addr constant [38 x i8] c"/usr/local/bin:/usr/ucb:/bin:/usr/bin\00", align 1
@build_env.maxbuf = internal global i64 0, align 8
@build_env.buf = internal global i8* null, align 8
@.str.526 = private unnamed_addr constant [43 x i8] c"out of memory copying environment variable\00", align 1
@make_envp.envp = internal global [50 x i8*] zeroinitializer, align 16
@.str.497 = private unnamed_addr constant [19 x i8] c"SERVER_SOFTWARE=%s\00", align 1
@.str.498 = private unnamed_addr constant [15 x i8] c"SERVER_NAME=%s\00", align 1
@.str.499 = private unnamed_addr constant [26 x i8] c"GATEWAY_INTERFACE=CGI/1.1\00", align 1
@.str.500 = private unnamed_addr constant [19 x i8] c"SERVER_PROTOCOL=%s\00", align 1
@.str.501 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.502 = private unnamed_addr constant [15 x i8] c"SERVER_PORT=%s\00", align 1
@.str.503 = private unnamed_addr constant [18 x i8] c"REQUEST_METHOD=%s\00", align 1
@.str.504 = private unnamed_addr constant [14 x i8] c"PATH_INFO=/%s\00", align 1
@.str.505 = private unnamed_addr constant [19 x i8] c"PATH_TRANSLATED=%s\00", align 1
@.str.506 = private unnamed_addr constant [16 x i8] c"SCRIPT_NAME=/%s\00", align 1
@.str.507 = private unnamed_addr constant [16 x i8] c"QUERY_STRING=%s\00", align 1
@.str.508 = private unnamed_addr constant [15 x i8] c"REMOTE_ADDR=%s\00", align 1
@.str.509 = private unnamed_addr constant [16 x i8] c"HTTP_REFERER=%s\00", align 1
@.str.510 = private unnamed_addr constant [17 x i8] c"HTTP_REFERRER=%s\00", align 1
@.str.511 = private unnamed_addr constant [19 x i8] c"HTTP_USER_AGENT=%s\00", align 1
@.str.512 = private unnamed_addr constant [15 x i8] c"HTTP_ACCEPT=%s\00", align 1
@.str.513 = private unnamed_addr constant [24 x i8] c"HTTP_ACCEPT_ENCODING=%s\00", align 1
@.str.514 = private unnamed_addr constant [24 x i8] c"HTTP_ACCEPT_LANGUAGE=%s\00", align 1
@.str.515 = private unnamed_addr constant [15 x i8] c"HTTP_COOKIE=%s\00", align 1
@.str.516 = private unnamed_addr constant [16 x i8] c"CONTENT_TYPE=%s\00", align 1
@.str.517 = private unnamed_addr constant [13 x i8] c"HTTP_HOST=%s\00", align 1
@.str.518 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@.str.519 = private unnamed_addr constant [18 x i8] c"CONTENT_LENGTH=%s\00", align 1
@.str.520 = private unnamed_addr constant [15 x i8] c"REMOTE_USER=%s\00", align 1
@.str.521 = private unnamed_addr constant [13 x i8] c"AUTH_TYPE=%s\00", align 1
@.str.522 = private unnamed_addr constant [6 x i8] c"Basic\00", align 1
@.str.523 = private unnamed_addr constant [3 x i8] c"TZ\00", align 1
@.str.524 = private unnamed_addr constant [6 x i8] c"TZ=%s\00", align 1
@.str.525 = private unnamed_addr constant [15 x i8] c"CGI_PATTERN=%s\00", align 1
@.str.492 = private unnamed_addr constant [10 x i8] c"pipe - %m\00", align 1
@.str.493 = private unnamed_addr constant [5 x i8] c"nph-\00", align 1
@.str.527 = private unnamed_addr constant [5 x i8] c"\0D\0A\0D\0A\00", align 1
@.str.528 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.529 = private unnamed_addr constant [6 x i8] c"HTTP/\00", align 1
@.str.530 = private unnamed_addr constant [10 x i8] c"Location:\00", align 1
@.str.531 = private unnamed_addr constant [8 x i8] c"Status:\00", align 1
@.str.532 = private unnamed_addr constant [10 x i8] c"Something\00", align 1
@.str.534 = private unnamed_addr constant [30 x i8] c"Unavailable For Legal Reasons\00", align 1
@.str.537 = private unnamed_addr constant [13 x i8] c"Not Modified\00", align 1
@.str.533 = private unnamed_addr constant [17 x i8] c"HTTP/1.0 %d %s\0D\0A\00", align 1
@.str.494 = private unnamed_addr constant [18 x i8] c"execve %.80s - %m\00", align 1
@.str.490 = private unnamed_addr constant [41 x i8] c"spawned CGI process %d for file '%.200s'\00", align 1
@.str.491 = private unnamed_addr constant [34 x i8] c"tmr_create(cgi_kill child) failed\00", align 1
@.str.450 = private unnamed_addr constant [46 x i8] c"%.80s URL \22%.80s\22 is executable but isn't CGI\00", align 1
@.str.451 = private unnamed_addr constant [124 x i8] c"The requested URL '%.80s' resolves to a file which is marked executable but is not a CGI file; retrieving it is forbidden.\0A\00", align 1
@.str.452 = private unnamed_addr constant [45 x i8] c"%.80s URL \22%.80s\22 has pathinfo but isn't CGI\00", align 1
@.str.453 = private unnamed_addr constant [109 x i8] c"The requested URL '%.80s' resolves to a file plus CGI-style pathinfo, but the file is not a valid CGI file.\0A\00", align 1
@.str.556 = private unnamed_addr constant [10 x i8] c"stat - %m\00", align 1
@.str.1.557 = private unnamed_addr constant [26 x i8] c"check_hash_size() failure\00", align 1
@.str.2.558 = private unnamed_addr constant [10 x i8] c"open - %m\00", align 1
@.str.3.559 = private unnamed_addr constant [31 x i8] c"out of memory allocating a Map\00", align 1
@.str.10.560 = private unnamed_addr constant [42 x i8] c"mmc panic - freeing all unreferenced maps\00", align 1
@.str.4.562 = private unnamed_addr constant [10 x i8] c"mmap - %m\00", align 1
@.str.5.563 = private unnamed_addr constant [19 x i8] c"add_hash() failure\00", align 1
@.str.127 = private unnamed_addr constant [33 x i8] c"replacing non-null wakeup_timer!\00", align 1
@.str.128 = private unnamed_addr constant [37 x i8] c"tmr_create(wakeup_connection) failed\00", align 1
@.str.129 = private unnamed_addr constant [25 x i8] c"write - %m sending %.80s\00", align 1
@tmr_timeout.timeout = internal global %struct.timeval zeroinitializer, align 8
@0 = internal constant [9 x i8] c"port=80\0A\00"
@1 = internal constant [8 x i8] c"chroot\0A\00"
@2 = internal constant [19 x i8] c"logfile=/dev/null\0A\00"
@3 = internal constant [8 x i8] c"port=82\00"
@4 = constant [3 x i8] c"80\00"
@5 = constant [5 x i8] c"port\00"
@6 = constant [7 x i8] c"chroot\00"
@7 = constant [10 x i8] c"/dev/null\00"
@8 = constant [8 x i8] c"logfile\00"
@9 = constant [3 x i8] c"82\00"
@10 = constant [5 x i8] c"port\00"

; Function Attrs: nounwind readonly
declare i64 @strlen(i8* nocapture) #0

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #0

; Function Attrs: nounwind readonly
declare i64 @strspn(i8* nocapture, i8* nocapture) #0

; Function Attrs: nounwind readonly
declare i64 @strcspn(i8* nocapture, i8* nocapture) #0

; Function Attrs: noinline nounwind uwtable
define i8* @substring(i8* nocapture readonly %source, i32 %start, i32 %end) #1 {
  %1 = sub nsw i32 %end, %start
  %2 = icmp slt i32 %1, 0
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0))
  br label %13

; <label>:5                                       ; preds = %0
  %6 = sext i32 %start to i64
  %7 = getelementptr inbounds i8, i8* %source, i64 %6
  %8 = add nsw i32 %1, 1
  %9 = sext i32 %8 to i64
  %10 = tail call noalias i8* @malloc(i64 %9) #6
  %11 = sext i32 %1 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %7, i64 %11, i32 1, i1 false)
  %12 = getelementptr inbounds i8, i8* %10, i64 %11
  store i8 0, i8* %12, align 1, !tbaa !1
  br label %13

; <label>:13                                      ; preds = %5, %3
  %.0 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), %3 ], [ %10, %5 ]
  ret i8* %.0
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #3

; Function Attrs: noreturn nounwind uwtable
define i32 @main(i32 %argc, i8** nocapture readonly %argv) #4 {
  %buf.i56 = alloca [4096 x i8], align 16
  %iv.i = alloca [2 x %struct.iovec], align 16
  %buf.i = alloca [5000 x i8], align 16
  %pattern.i = alloca [5000 x i8], align 16
  %max_limit.i = alloca i64, align 8
  %min_limit.i = alloca i64, align 8
  %tv.i = alloca %struct.timeval, align 8
  %hints.i = alloca %struct.addrinfo, align 8
  %portstr.i = alloca [10 x i8], align 1
  %ai.i = alloca %struct.addrinfo*, align 8
  %cwd = alloca [4097 x i8], align 16
  %sa4 = alloca %union.httpd_sockaddr, align 8
  %sa6 = alloca %union.httpd_sockaddr, align 8
  %tv = alloca %struct.timeval, align 8
  %1 = getelementptr inbounds [4097 x i8], [4097 x i8]* %cwd, i64 0, i64 0
  call void @llvm.lifetime.start(i64 4097, i8* %1) #6
  %2 = bitcast %union.httpd_sockaddr* %sa4 to i8*
  call void @llvm.lifetime.start(i64 128, i8* %2) #6
  %3 = bitcast %union.httpd_sockaddr* %sa6 to i8*
  call void @llvm.lifetime.start(i64 128, i8* %3) #6
  %4 = bitcast %struct.timeval* %tv to i8*
  call void @llvm.lifetime.start(i64 16, i8* %4) #6
  %5 = load i8*, i8** %argv, align 8, !tbaa !4
  store i8* %5, i8** @argv0, align 8, !tbaa !4
  %6 = tail call i8* @strrchr(i8* %5, i32 47) #13
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds i8, i8* %6, i64 1
  %cp.0 = select i1 %7, i8* %5, i8* %8
  tail call void @openlog(i8* %cp.0, i32 9, i32 24) #6
  store i1 false, i1* @debug, align 1
  store i16 80, i16* @port, align 2, !tbaa !6
  store i8* null, i8** @dir, align 8, !tbaa !4
  store i8* null, i8** @data_dir, align 8, !tbaa !4
  store i1 false, i1* @do_chroot, align 1
  store i1 false, i1* @no_log, align 1
  store i1 false, i1* @no_symlink_check, align 1
  store i1 false, i1* @do_vhost, align 1
  store i1 false, i1* @do_global_passwd, align 1
  store i8* null, i8** @cgi_pattern, align 8, !tbaa !4
  store i32 0, i32* @cgi_limit, align 4, !tbaa !8
  store i8* null, i8** @url_pattern, align 8, !tbaa !4
  store i1 false, i1* @no_empty_referrers, align 1
  store i8* null, i8** @local_pattern, align 8, !tbaa !4
  store i8* null, i8** @throttlefile, align 8, !tbaa !4
  store i8* null, i8** @hostname, align 8, !tbaa !4
  store i8* null, i8** @logfile, align 8, !tbaa !4
  store i8* null, i8** @pidfile, align 8, !tbaa !4
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.48, i64 0, i64 0), i8** @user, align 8, !tbaa !4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.49, i64 0, i64 0), i8** @charset, align 8, !tbaa !4
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8** @p3p, align 8, !tbaa !4
  store i32 -1, i32* @max_age, align 4, !tbaa !8
  %9 = icmp sgt i32 %argc, 1
  br i1 %9, label %.lr.ph.i.preheader, label %.critedge.i

.lr.ph.i.preheader:                               ; preds = %0
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i.preheader, %225
  %argn.0228.i = phi i32 [ %226, %225 ], [ 1, %.lr.ph.i.preheader ]
  %10 = sext i32 %argn.0228.i to i64
  %11 = getelementptr inbounds i8*, i8** %argv, i64 %10
  %12 = load i8*, i8** %11, align 8, !tbaa !4
  %13 = load i8, i8* %12, align 1, !tbaa !1
  %14 = icmp eq i8 %13, 45
  br i1 %14, label %15, label %.critedge.i.loopexit

; <label>:15                                      ; preds = %.lr.ph.i
  %16 = getelementptr inbounds i8, i8* %12, i64 1
  %17 = load i8, i8* %16, align 1, !tbaa !1
  switch i8 %17, label %.thread252.i [
    i8 86, label %18
    i8 67, label %23
    i8 112, label %31
    i8 100, label %44
    i8 114, label %56
  ]

; <label>:18                                      ; preds = %15
  %19 = getelementptr inbounds i8, i8* %12, i64 2
  %20 = load i8, i8* %19, align 1, !tbaa !1
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %.thread252.i

; <label>:22                                      ; preds = %18
  %puts.i = tail call i32 @puts(i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8.97, i64 0, i64 0)) #6
  tail call void @exit(i32 0) #18
  unreachable

; <label>:23                                      ; preds = %15
  %24 = getelementptr inbounds i8, i8* %12, i64 2
  %25 = load i8, i8* %24, align 1, !tbaa !1
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %.thread252.i

; <label>:27                                      ; preds = %23
  %28 = add nsw i32 %argn.0228.i, 1
  %29 = icmp slt i32 %28, %argc
  br i1 %29, label %30, label %.thread252.i

; <label>:30                                      ; preds = %27
  tail call fastcc void @read_config() #6
  br label %225

; <label>:31                                      ; preds = %15
  %32 = getelementptr inbounds i8, i8* %12, i64 2
  %33 = load i8, i8* %32, align 1, !tbaa !1
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %.thread252.i

; <label>:35                                      ; preds = %31
  %36 = add nsw i32 %argn.0228.i, 1
  %37 = icmp slt i32 %36, %argc
  br i1 %37, label %38, label %.thread252.i

; <label>:38                                      ; preds = %35
  %39 = sext i32 %36 to i64
  %40 = getelementptr inbounds i8*, i8** %argv, i64 %39
  %41 = load i8*, i8** %40, align 8, !tbaa !4
  %42 = tail call i64 @strtol(i8* nocapture nonnull %41, i8** null, i32 10) #6
  %43 = trunc i64 %42 to i16
  store i16 %43, i16* @port, align 2, !tbaa !6
  br label %225

; <label>:44                                      ; preds = %15
  %45 = getelementptr inbounds i8, i8* %12, i64 2
  %46 = load i8, i8* %45, align 1, !tbaa !1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %.thread252.i

; <label>:48                                      ; preds = %44
  %49 = add nsw i32 %argn.0228.i, 1
  %50 = icmp slt i32 %49, %argc
  br i1 %50, label %51, label %.thread252.i

; <label>:51                                      ; preds = %48
  %52 = sext i32 %49 to i64
  %53 = getelementptr inbounds i8*, i8** %argv, i64 %52
  %54 = bitcast i8** %53 to i64*
  %55 = load i64, i64* %54, align 8, !tbaa !4
  store i64 %55, i64* bitcast (i8** @dir to i64*), align 8, !tbaa !4
  br label %225

; <label>:56                                      ; preds = %15
  %57 = getelementptr inbounds i8, i8* %12, i64 2
  %58 = load i8, i8* %57, align 1, !tbaa !1
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %.thread252.i

; <label>:60                                      ; preds = %56
  store i1 true, i1* @do_chroot, align 1
  store i1 true, i1* @no_symlink_check, align 1
  br label %225

.thread252.i:                                     ; preds = %15, %18, %23, %27, %31, %35, %44, %48, %56
  %61 = phi i1 [ false, %56 ], [ true, %44 ], [ true, %48 ], [ false, %35 ], [ false, %31 ], [ false, %27 ], [ false, %23 ], [ false, %18 ], [ false, %15 ]
  %62 = tail call i32 @strcmp(i8* nonnull %12, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.57, i64 0, i64 0)) #6
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %65

; <label>:64                                      ; preds = %.thread252.i
  store i1 false, i1* @do_chroot, align 1
  store i1 false, i1* @no_symlink_check, align 1
  br label %225

; <label>:65                                      ; preds = %.thread252.i
  br i1 %61, label %66, label %.thread253.i

; <label>:66                                      ; preds = %65
  %67 = getelementptr inbounds i8, i8* %12, i64 2
  %68 = load i8, i8* %67, align 1, !tbaa !1
  %69 = icmp eq i8 %68, 100
  br i1 %69, label %70, label %.thread253.i

; <label>:70                                      ; preds = %66
  %71 = getelementptr inbounds i8, i8* %12, i64 3
  %72 = load i8, i8* %71, align 1, !tbaa !1
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %74, label %.thread253.i

; <label>:74                                      ; preds = %70
  %75 = add nsw i32 %argn.0228.i, 1
  %76 = icmp slt i32 %75, %argc
  br i1 %76, label %77, label %.thread253.i

; <label>:77                                      ; preds = %74
  %78 = sext i32 %75 to i64
  %79 = getelementptr inbounds i8*, i8** %argv, i64 %78
  %80 = bitcast i8** %79 to i64*
  %81 = load i64, i64* %80, align 8, !tbaa !4
  store i64 %81, i64* bitcast (i8** @data_dir to i64*), align 8, !tbaa !4
  br label %225

.thread253.i:                                     ; preds = %74, %70, %66, %65
  %82 = icmp eq i8 %17, 115
  br i1 %82, label %83, label %.thread254.i

; <label>:83                                      ; preds = %.thread253.i
  %84 = getelementptr inbounds i8, i8* %12, i64 2
  %85 = load i8, i8* %84, align 1, !tbaa !1
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %87, label %.thread254.i

; <label>:87                                      ; preds = %83
  store i1 false, i1* @no_symlink_check, align 1
  br label %225

.thread254.i:                                     ; preds = %83, %.thread253.i
  %88 = tail call i32 @strcmp(i8* nonnull %12, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.60, i64 0, i64 0)) #6
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %91

; <label>:90                                      ; preds = %.thread254.i
  store i1 true, i1* @no_symlink_check, align 1
  br label %225

; <label>:91                                      ; preds = %.thread254.i
  switch i8 %17, label %.thread260.i [
    i8 117, label %92
    i8 99, label %104
    i8 116, label %116
    i8 104, label %128
    i8 108, label %140
    i8 118, label %152
  ]

; <label>:92                                      ; preds = %91
  %93 = getelementptr inbounds i8, i8* %12, i64 2
  %94 = load i8, i8* %93, align 1, !tbaa !1
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %96, label %.thread260.i

; <label>:96                                      ; preds = %92
  %97 = add nsw i32 %argn.0228.i, 1
  %98 = icmp slt i32 %97, %argc
  br i1 %98, label %99, label %.thread260.i

; <label>:99                                      ; preds = %96
  %100 = sext i32 %97 to i64
  %101 = getelementptr inbounds i8*, i8** %argv, i64 %100
  %102 = bitcast i8** %101 to i64*
  %103 = load i64, i64* %102, align 8, !tbaa !4
  store i64 %103, i64* bitcast (i8** @user to i64*), align 8, !tbaa !4
  br label %225

; <label>:104                                     ; preds = %91
  %105 = getelementptr inbounds i8, i8* %12, i64 2
  %106 = load i8, i8* %105, align 1, !tbaa !1
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %108, label %.thread260.i

; <label>:108                                     ; preds = %104
  %109 = add nsw i32 %argn.0228.i, 1
  %110 = icmp slt i32 %109, %argc
  br i1 %110, label %111, label %.thread260.i

; <label>:111                                     ; preds = %108
  %112 = sext i32 %109 to i64
  %113 = getelementptr inbounds i8*, i8** %argv, i64 %112
  %114 = bitcast i8** %113 to i64*
  %115 = load i64, i64* %114, align 8, !tbaa !4
  store i64 %115, i64* bitcast (i8** @cgi_pattern to i64*), align 8, !tbaa !4
  br label %225

; <label>:116                                     ; preds = %91
  %117 = getelementptr inbounds i8, i8* %12, i64 2
  %118 = load i8, i8* %117, align 1, !tbaa !1
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %120, label %.thread260.i

; <label>:120                                     ; preds = %116
  %121 = add nsw i32 %argn.0228.i, 1
  %122 = icmp slt i32 %121, %argc
  br i1 %122, label %123, label %.thread260.i

; <label>:123                                     ; preds = %120
  %124 = sext i32 %121 to i64
  %125 = getelementptr inbounds i8*, i8** %argv, i64 %124
  %126 = bitcast i8** %125 to i64*
  %127 = load i64, i64* %126, align 8, !tbaa !4
  store i64 %127, i64* bitcast (i8** @throttlefile to i64*), align 8, !tbaa !4
  br label %225

; <label>:128                                     ; preds = %91
  %129 = getelementptr inbounds i8, i8* %12, i64 2
  %130 = load i8, i8* %129, align 1, !tbaa !1
  %131 = icmp eq i8 %130, 0
  br i1 %131, label %132, label %.thread260.i

; <label>:132                                     ; preds = %128
  %133 = add nsw i32 %argn.0228.i, 1
  %134 = icmp slt i32 %133, %argc
  br i1 %134, label %135, label %.thread260.i

; <label>:135                                     ; preds = %132
  %136 = sext i32 %133 to i64
  %137 = getelementptr inbounds i8*, i8** %argv, i64 %136
  %138 = bitcast i8** %137 to i64*
  %139 = load i64, i64* %138, align 8, !tbaa !4
  store i64 %139, i64* bitcast (i8** @hostname to i64*), align 8, !tbaa !4
  br label %225

; <label>:140                                     ; preds = %91
  %141 = getelementptr inbounds i8, i8* %12, i64 2
  %142 = load i8, i8* %141, align 1, !tbaa !1
  %143 = icmp eq i8 %142, 0
  br i1 %143, label %144, label %.thread260.i

; <label>:144                                     ; preds = %140
  %145 = add nsw i32 %argn.0228.i, 1
  %146 = icmp slt i32 %145, %argc
  br i1 %146, label %147, label %.thread260.i

; <label>:147                                     ; preds = %144
  %148 = sext i32 %145 to i64
  %149 = getelementptr inbounds i8*, i8** %argv, i64 %148
  %150 = bitcast i8** %149 to i64*
  %151 = load i64, i64* %150, align 8, !tbaa !4
  store i64 %151, i64* bitcast (i8** @logfile to i64*), align 8, !tbaa !4
  br label %225

; <label>:152                                     ; preds = %91
  %153 = getelementptr inbounds i8, i8* %12, i64 2
  %154 = load i8, i8* %153, align 1, !tbaa !1
  %155 = icmp eq i8 %154, 0
  br i1 %155, label %156, label %.thread260.i

; <label>:156                                     ; preds = %152
  store i1 true, i1* @do_vhost, align 1
  br label %225

.thread260.i:                                     ; preds = %91, %108, %104, %96, %92, %116, %120, %128, %132, %140, %144, %152
  %157 = tail call i32 @strcmp(i8* nonnull %12, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.67, i64 0, i64 0)) #6
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %160

; <label>:159                                     ; preds = %.thread260.i
  store i1 false, i1* @do_vhost, align 1
  br label %225

; <label>:160                                     ; preds = %.thread260.i
  %161 = icmp eq i8 %17, 103
  br i1 %161, label %162, label %.thread261.i

; <label>:162                                     ; preds = %160
  %163 = getelementptr inbounds i8, i8* %12, i64 2
  %164 = load i8, i8* %163, align 1, !tbaa !1
  %165 = icmp eq i8 %164, 0
  br i1 %165, label %166, label %.thread261.i

; <label>:166                                     ; preds = %162
  store i1 true, i1* @do_global_passwd, align 1
  br label %225

.thread261.i:                                     ; preds = %162, %160
  %167 = tail call i32 @strcmp(i8* nonnull %12, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.69, i64 0, i64 0)) #6
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %170

; <label>:169                                     ; preds = %.thread261.i
  store i1 false, i1* @do_global_passwd, align 1
  br label %225

; <label>:170                                     ; preds = %.thread261.i
  switch i8 %17, label %.thread266.i [
    i8 105, label %171
    i8 84, label %183
    i8 80, label %195
    i8 77, label %207
    i8 68, label %220
  ]

; <label>:171                                     ; preds = %170
  %172 = getelementptr inbounds i8, i8* %12, i64 2
  %173 = load i8, i8* %172, align 1, !tbaa !1
  %174 = icmp eq i8 %173, 0
  br i1 %174, label %175, label %.thread266.i

; <label>:175                                     ; preds = %171
  %176 = add nsw i32 %argn.0228.i, 1
  %177 = icmp slt i32 %176, %argc
  br i1 %177, label %178, label %.thread266.i

; <label>:178                                     ; preds = %175
  %179 = sext i32 %176 to i64
  %180 = getelementptr inbounds i8*, i8** %argv, i64 %179
  %181 = bitcast i8** %180 to i64*
  %182 = load i64, i64* %181, align 8, !tbaa !4
  store i64 %182, i64* bitcast (i8** @pidfile to i64*), align 8, !tbaa !4
  br label %225

; <label>:183                                     ; preds = %170
  %184 = getelementptr inbounds i8, i8* %12, i64 2
  %185 = load i8, i8* %184, align 1, !tbaa !1
  %186 = icmp eq i8 %185, 0
  br i1 %186, label %187, label %.thread266.i

; <label>:187                                     ; preds = %183
  %188 = add nsw i32 %argn.0228.i, 1
  %189 = icmp slt i32 %188, %argc
  br i1 %189, label %190, label %.thread266.i

; <label>:190                                     ; preds = %187
  %191 = sext i32 %188 to i64
  %192 = getelementptr inbounds i8*, i8** %argv, i64 %191
  %193 = bitcast i8** %192 to i64*
  %194 = load i64, i64* %193, align 8, !tbaa !4
  store i64 %194, i64* bitcast (i8** @charset to i64*), align 8, !tbaa !4
  br label %225

; <label>:195                                     ; preds = %170
  %196 = getelementptr inbounds i8, i8* %12, i64 2
  %197 = load i8, i8* %196, align 1, !tbaa !1
  %198 = icmp eq i8 %197, 0
  br i1 %198, label %199, label %.thread266.i

; <label>:199                                     ; preds = %195
  %200 = add nsw i32 %argn.0228.i, 1
  %201 = icmp slt i32 %200, %argc
  br i1 %201, label %202, label %.thread266.i

; <label>:202                                     ; preds = %199
  %203 = sext i32 %200 to i64
  %204 = getelementptr inbounds i8*, i8** %argv, i64 %203
  %205 = bitcast i8** %204 to i64*
  %206 = load i64, i64* %205, align 8, !tbaa !4
  store i64 %206, i64* bitcast (i8** @p3p to i64*), align 8, !tbaa !4
  br label %225

; <label>:207                                     ; preds = %170
  %208 = getelementptr inbounds i8, i8* %12, i64 2
  %209 = load i8, i8* %208, align 1, !tbaa !1
  %210 = icmp eq i8 %209, 0
  br i1 %210, label %211, label %.thread266.i

; <label>:211                                     ; preds = %207
  %212 = add nsw i32 %argn.0228.i, 1
  %213 = icmp slt i32 %212, %argc
  br i1 %213, label %214, label %.thread266.i

; <label>:214                                     ; preds = %211
  %215 = sext i32 %212 to i64
  %216 = getelementptr inbounds i8*, i8** %argv, i64 %215
  %217 = load i8*, i8** %216, align 8, !tbaa !4
  %218 = tail call i64 @strtol(i8* nocapture nonnull %217, i8** null, i32 10) #6
  %219 = trunc i64 %218 to i32
  store i32 %219, i32* @max_age, align 4, !tbaa !8
  br label %225

; <label>:220                                     ; preds = %170
  %221 = getelementptr inbounds i8, i8* %12, i64 2
  %222 = load i8, i8* %221, align 1, !tbaa !1
  %223 = icmp eq i8 %222, 0
  br i1 %223, label %224, label %.thread266.i

; <label>:224                                     ; preds = %220
  store i1 true, i1* @debug, align 1
  br label %225

.thread266.i:                                     ; preds = %170, %171, %175, %183, %187, %195, %199, %207, %211, %220
  tail call fastcc void @usage() #6
  unreachable

; <label>:225                                     ; preds = %224, %214, %202, %190, %178, %169, %166, %159, %156, %147, %135, %123, %111, %99, %90, %87, %77, %64, %60, %51, %38, %30
  %argn.1.i = phi i32 [ %28, %30 ], [ %36, %38 ], [ %49, %51 ], [ %argn.0228.i, %60 ], [ %argn.0228.i, %64 ], [ %75, %77 ], [ %argn.0228.i, %87 ], [ %argn.0228.i, %90 ], [ %97, %99 ], [ %109, %111 ], [ %121, %123 ], [ %133, %135 ], [ %145, %147 ], [ %argn.0228.i, %156 ], [ %argn.0228.i, %159 ], [ %argn.0228.i, %166 ], [ %argn.0228.i, %169 ], [ %176, %178 ], [ %188, %190 ], [ %200, %202 ], [ %212, %214 ], [ %argn.0228.i, %224 ]
  %226 = add nsw i32 %argn.1.i, 1
  %227 = icmp slt i32 %226, %argc
  br i1 %227, label %.lr.ph.i, label %.critedge.i.loopexit

.critedge.i.loopexit:                             ; preds = %.lr.ph.i, %225
  %argn.0.lcssa.i.ph = phi i32 [ %argn.0228.i, %.lr.ph.i ], [ %226, %225 ]
  br label %.critedge.i

.critedge.i:                                      ; preds = %.critedge.i.loopexit, %0
  %argn.0.lcssa.i = phi i32 [ 1, %0 ], [ %argn.0.lcssa.i.ph, %.critedge.i.loopexit ]
  %228 = icmp eq i32 %argn.0.lcssa.i, %argc
  br i1 %228, label %parse_args.exit, label %229

; <label>:229                                     ; preds = %.critedge.i
  tail call fastcc void @usage() #6
  unreachable

parse_args.exit:                                  ; preds = %.critedge.i
  tail call void @tzset() #6
  %230 = bitcast %struct.addrinfo* %hints.i to i8*
  call void @llvm.lifetime.start(i64 48, i8* %230) #6
  %231 = getelementptr inbounds [10 x i8], [10 x i8]* %portstr.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 10, i8* %231) #6
  %232 = bitcast %struct.addrinfo** %ai.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %232) #6
  %233 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %hints.i, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* %230, i8 0, i64 48, i32 8, i1 false) #6
  store i32 1, i32* %233, align 8, !tbaa !10
  %234 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %hints.i, i64 0, i32 2
  store i32 1, i32* %234, align 8, !tbaa !12
  %235 = load i16, i16* @port, align 2, !tbaa !6
  %236 = zext i16 %235 to i32
  %237 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %231, i64 10, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.501, i64 0, i64 0), i32 %236) #6
  %238 = load i8*, i8** @hostname, align 8, !tbaa !4
  %239 = call i32 @getaddrinfo(i8* %238, i8* %231, %struct.addrinfo* nonnull %hints.i, %struct.addrinfo** nonnull %ai.i) #6
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %.preheader.i, label %242

.preheader.i:                                     ; preds = %parse_args.exit
  %ai2.02.i = load %struct.addrinfo*, %struct.addrinfo** %ai.i, align 8, !tbaa !4
  %241 = icmp eq %struct.addrinfo* %ai2.02.i, null
  br i1 %241, label %lookup_hostname.exit, label %.lr.ph.i37.preheader

.lr.ph.i37.preheader:                             ; preds = %.preheader.i
  br label %.lr.ph.i37

; <label>:242                                     ; preds = %parse_args.exit
  %243 = load i8*, i8** @hostname, align 8, !tbaa !4
  %244 = call i8* @gai_strerror(i32 %239) #6
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.113, i64 0, i64 0), i8* %243, i8* %244) #6
  %245 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %246 = load i8*, i8** @argv0, align 8, !tbaa !4
  %247 = load i8*, i8** @hostname, align 8, !tbaa !4
  %248 = call i8* @gai_strerror(i32 %239) #6
  %249 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %245, i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.114, i64 0, i64 0), i8* %246, i8* %247, i8* %248) #19
  call void @exit(i32 1) #18
  unreachable

.lr.ph.i37:                                       ; preds = %.lr.ph.i37.preheader, %256
  %ai2.05.i = phi %struct.addrinfo* [ %ai2.0.i, %256 ], [ %ai2.02.i, %.lr.ph.i37.preheader ]
  %aiv4.04.i = phi %struct.addrinfo* [ %aiv4.1.i, %256 ], [ null, %.lr.ph.i37.preheader ]
  %aiv6.03.i = phi %struct.addrinfo* [ %aiv6.1.i, %256 ], [ null, %.lr.ph.i37.preheader ]
  %250 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai2.05.i, i64 0, i32 1
  %251 = load i32, i32* %250, align 4, !tbaa !13
  switch i32 %251, label %256 [
    i32 10, label %252
    i32 2, label %254
  ]

; <label>:252                                     ; preds = %.lr.ph.i37
  %253 = icmp eq %struct.addrinfo* %aiv6.03.i, null
  %ai2.0.aiv6.0.i = select i1 %253, %struct.addrinfo* %ai2.05.i, %struct.addrinfo* %aiv6.03.i
  br label %256

; <label>:254                                     ; preds = %.lr.ph.i37
  %255 = icmp eq %struct.addrinfo* %aiv4.04.i, null
  %ai2.0.aiv4.0.i = select i1 %255, %struct.addrinfo* %ai2.05.i, %struct.addrinfo* %aiv4.04.i
  br label %256

; <label>:256                                     ; preds = %254, %252, %.lr.ph.i37
  %aiv6.1.i = phi %struct.addrinfo* [ %aiv6.03.i, %.lr.ph.i37 ], [ %ai2.0.aiv6.0.i, %252 ], [ %aiv6.03.i, %254 ]
  %aiv4.1.i = phi %struct.addrinfo* [ %aiv4.04.i, %.lr.ph.i37 ], [ %aiv4.04.i, %252 ], [ %ai2.0.aiv4.0.i, %254 ]
  %257 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %ai2.05.i, i64 0, i32 7
  %ai2.0.i = load %struct.addrinfo*, %struct.addrinfo** %257, align 8, !tbaa !4
  %258 = icmp eq %struct.addrinfo* %ai2.0.i, null
  br i1 %258, label %._crit_edge.i, label %.lr.ph.i37

._crit_edge.i:                                    ; preds = %256
  %aiv4.1.i.lcssa = phi %struct.addrinfo* [ %aiv4.1.i, %256 ]
  %aiv6.1.i.lcssa = phi %struct.addrinfo* [ %aiv6.1.i, %256 ]
  %259 = icmp eq %struct.addrinfo* %aiv6.1.i.lcssa, null
  br i1 %259, label %273, label %260

; <label>:260                                     ; preds = %._crit_edge.i
  %261 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %aiv6.1.i.lcssa, i64 0, i32 4
  %262 = load i32, i32* %261, align 8, !tbaa !14
  %263 = icmp ugt i32 %262, 128
  br i1 %263, label %264, label %267

; <label>:264                                     ; preds = %260
  %265 = zext i32 %262 to i64
  %266 = load i8*, i8** @hostname, align 8, !tbaa !4
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([39 x i8], [39 x i8]* @.str.115, i64 0, i64 0), i8* %266, i64 128, i64 %265) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:267                                     ; preds = %260
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 128, i32 8, i1 false) #6
  %268 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %aiv6.1.i.lcssa, i64 0, i32 5
  %269 = bitcast %struct.sockaddr** %268 to i8**
  %270 = load i8*, i8** %269, align 8, !tbaa !15
  %271 = load i32, i32* %261, align 8, !tbaa !14
  %272 = zext i32 %271 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %3, i8* %270, i64 %272, i32 2, i1 false) #6
  br label %273

; <label>:273                                     ; preds = %267, %._crit_edge.i
  %storemerge.i = phi i32 [ 1, %267 ], [ 0, %._crit_edge.i ]
  %274 = icmp eq %struct.addrinfo* %aiv4.1.i.lcssa, null
  br i1 %274, label %lookup_hostname.exit, label %275

; <label>:275                                     ; preds = %273
  %276 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %aiv4.1.i.lcssa, i64 0, i32 4
  %277 = load i32, i32* %276, align 8, !tbaa !14
  %278 = icmp ugt i32 %277, 128
  br i1 %278, label %279, label %282

; <label>:279                                     ; preds = %275
  %280 = zext i32 %277 to i64
  %281 = load i8*, i8** @hostname, align 8, !tbaa !4
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([39 x i8], [39 x i8]* @.str.115, i64 0, i64 0), i8* %281, i64 128, i64 %280) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:282                                     ; preds = %275
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 128, i32 8, i1 false) #6
  %283 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %aiv4.1.i.lcssa, i64 0, i32 5
  %284 = bitcast %struct.sockaddr** %283 to i8**
  %285 = load i8*, i8** %284, align 8, !tbaa !15
  %286 = load i32, i32* %276, align 8, !tbaa !14
  %287 = zext i32 %286 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %2, i8* %285, i64 %287, i32 2, i1 false) #6
  br label %lookup_hostname.exit

lookup_hostname.exit:                             ; preds = %.preheader.i, %273, %282
  %gotv6.0 = phi i32 [ %storemerge.i, %273 ], [ %storemerge.i, %282 ], [ 0, %.preheader.i ]
  %storemerge1.i = phi i32 [ 0, %273 ], [ 1, %282 ], [ 0, %.preheader.i ]
  call void @freeaddrinfo(%struct.addrinfo* %ai2.02.i) #6
  call void @llvm.lifetime.end(i64 8, i8* %232) #6
  call void @llvm.lifetime.end(i64 10, i8* %231) #6
  call void @llvm.lifetime.end(i64 48, i8* %230) #6
  %288 = or i32 %storemerge1.i, %gotv6.0
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %290, label %294

; <label>:290                                     ; preds = %lookup_hostname.exit
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0)) #6
  %291 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %292 = load i8*, i8** @argv0, align 8, !tbaa !4
  %293 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %291, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i8* %292) #20
  call void @exit(i32 1) #18
  unreachable

; <label>:294                                     ; preds = %lookup_hostname.exit
  store i32 0, i32* @numthrottles, align 4, !tbaa !8
  store i32 0, i32* @maxthrottles, align 4, !tbaa !8
  store %struct.throttletab* null, %struct.throttletab** @throttles, align 8, !tbaa !4
  %295 = load i8*, i8** @throttlefile, align 8, !tbaa !4
  %296 = icmp eq i8* %295, null
  br i1 %296, label %390, label %297

; <label>:297                                     ; preds = %294
  %298 = getelementptr inbounds [5000 x i8], [5000 x i8]* %buf.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 5000, i8* %298) #6
  %299 = getelementptr inbounds [5000 x i8], [5000 x i8]* %pattern.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 5000, i8* %299) #6
  %300 = bitcast i64* %max_limit.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %300) #6
  %301 = bitcast i64* %min_limit.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %301) #6
  %302 = bitcast %struct.timeval* %tv.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %302) #6
  %303 = call %struct._IO_FILE* @fopen(i8* nonnull %295, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.84.115, i64 0, i64 0)) #6
  %304 = icmp eq %struct._IO_FILE* %303, null
  br i1 %304, label %305, label %306

; <label>:305                                     ; preds = %297
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* nonnull %295) #6
  call void @perror(i8* nonnull %295) #19
  call void @exit(i32 1) #18
  unreachable

; <label>:306                                     ; preds = %297
  %307 = call i32 @gettimeofday(%struct.timeval* nonnull %tv.i, %struct.timezone* null) #6
  %308 = call i8* @fgets(i8* %298, i32 5000, %struct._IO_FILE* nonnull %303) #6
  %309 = icmp eq i8* %308, null
  br i1 %309, label %read_throttlefile.exit, label %.lr.ph7.i

.lr.ph7.i:                                        ; preds = %306
  %310 = getelementptr inbounds [5000 x i8], [5000 x i8]* %pattern.i, i64 0, i64 1
  br label %311

; <label>:311                                     ; preds = %.backedge.i, %.lr.ph7.i
  %312 = call i8* @strchr(i8* %298, i32 35) #6
  %313 = icmp eq i8* %312, null
  br i1 %313, label %315, label %314

; <label>:314                                     ; preds = %311
  store i8 0, i8* %312, align 1, !tbaa !1
  br label %315

; <label>:315                                     ; preds = %314, %311
  %316 = call i64 @strlen(i8* %298) #13
  %317 = trunc i64 %316 to i32
  %318 = icmp sgt i32 %317, 0
  br i1 %318, label %.lr.ph.preheader.i, label %.critedge.i39

.lr.ph.preheader.i:                               ; preds = %315
  %sext.i = shl i64 %316, 32
  %319 = ashr exact i64 %sext.i, 32
  br label %.lr.ph.i38

.lr.ph.i38:                                       ; preds = %switch.edge.i, %.lr.ph.preheader.i
  %indvars.iv.i = phi i64 [ %319, %.lr.ph.preheader.i ], [ %indvars.iv.next.i, %switch.edge.i ]
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, -1
  %320 = getelementptr inbounds [5000 x i8], [5000 x i8]* %buf.i, i64 0, i64 %indvars.iv.next.i
  %321 = load i8, i8* %320, align 1, !tbaa !1
  switch i8 %321, label %.critedge.thread.i.loopexit [
    i8 32, label %switch.edge.i
    i8 9, label %switch.edge.i
    i8 10, label %switch.edge.i
    i8 13, label %switch.edge.i
  ]

switch.edge.i:                                    ; preds = %.lr.ph.i38, %.lr.ph.i38, %.lr.ph.i38, %.lr.ph.i38
  store i8 0, i8* %320, align 1, !tbaa !1
  %322 = icmp sgt i64 %indvars.iv.i, 1
  br i1 %322, label %.lr.ph.i38, label %.critedge.loopexit.i

.critedge.loopexit.i:                             ; preds = %switch.edge.i
  %indvars.iv.next.i.lcssa17 = phi i64 [ %indvars.iv.next.i, %switch.edge.i ]
  %323 = trunc i64 %indvars.iv.next.i.lcssa17 to i32
  br label %.critedge.i39

.critedge.i39:                                    ; preds = %.critedge.loopexit.i, %315
  %len.0.lcssa.i = phi i32 [ %317, %315 ], [ %323, %.critedge.loopexit.i ]
  %324 = icmp eq i32 %len.0.lcssa.i, 0
  br i1 %324, label %.backedge.i, label %.critedge.thread.i

.critedge.thread.i.loopexit:                      ; preds = %.lr.ph.i38
  br label %.critedge.thread.i

.critedge.thread.i:                               ; preds = %.critedge.thread.i.loopexit, %.critedge.i39
  %325 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %298, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.116, i64 0, i64 0), i8* %299, i64* nonnull %min_limit.i, i64* nonnull %max_limit.i) #6
  %326 = icmp eq i32 %325, 3
  br i1 %326, label %337, label %327

; <label>:327                                     ; preds = %.critedge.thread.i
  %328 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %298, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.117, i64 0, i64 0), i8* %299, i64* nonnull %max_limit.i) #6
  %329 = icmp eq i32 %328, 2
  br i1 %329, label %330, label %331

; <label>:330                                     ; preds = %327
  store i64 0, i64* %min_limit.i, align 8, !tbaa !16
  br label %337

; <label>:331                                     ; preds = %327
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.118, i64 0, i64 0), i8* nonnull %295, i8* %298) #6
  %332 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %333 = load i8*, i8** @argv0, align 8, !tbaa !4
  %334 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %332, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.119, i64 0, i64 0), i8* %333, i8* nonnull %295, i8* %298) #19
  br label %.backedge.i

.backedge.i:                                      ; preds = %e_strdup.exit.i, %331, %.critedge.i39
  %335 = call i8* @fgets(i8* %298, i32 5000, %struct._IO_FILE* nonnull %303) #6
  %336 = icmp eq i8* %335, null
  br i1 %336, label %read_throttlefile.exit.loopexit, label %311

; <label>:337                                     ; preds = %330, %.critedge.thread.i
  %338 = load i8, i8* %299, align 16, !tbaa !1
  %339 = icmp eq i8 %338, 47
  br i1 %339, label %340, label %.preheader.i40

; <label>:340                                     ; preds = %337
  %341 = call i64 @strlen(i8* nonnull %310) #13
  %342 = add i64 %341, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull %299, i8* nonnull %310, i64 %342, i32 1, i1 false) #6
  br label %.preheader.i40

.preheader.i40:                                   ; preds = %340, %337
  %343 = call i8* @strstr(i8* nonnull %299, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3.52, i64 0, i64 0)) #13
  %344 = icmp eq i8* %343, null
  br i1 %344, label %._crit_edge.i41, label %.lr.ph5.i.preheader

.lr.ph5.i.preheader:                              ; preds = %.preheader.i40
  br label %.lr.ph5.i

.lr.ph5.i:                                        ; preds = %.lr.ph5.i.preheader, %.lr.ph5.i
  %345 = phi i8* [ %350, %.lr.ph5.i ], [ %343, %.lr.ph5.i.preheader ]
  %346 = getelementptr inbounds i8, i8* %345, i64 1
  %347 = getelementptr inbounds i8, i8* %345, i64 2
  %348 = call i64 @strlen(i8* %347) #13
  %349 = add i64 %348, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %346, i8* %347, i64 %349, i32 1, i1 false) #6
  %350 = call i8* @strstr(i8* %299, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3.52, i64 0, i64 0)) #13
  %351 = icmp eq i8* %350, null
  br i1 %351, label %._crit_edge.i41.loopexit, label %.lr.ph5.i

._crit_edge.i41.loopexit:                         ; preds = %.lr.ph5.i
  br label %._crit_edge.i41

._crit_edge.i41:                                  ; preds = %._crit_edge.i41.loopexit, %.preheader.i40
  %352 = load i32, i32* @numthrottles, align 4, !tbaa !8
  %353 = load i32, i32* @maxthrottles, align 4, !tbaa !8
  %354 = icmp slt i32 %352, %353
  br i1 %354, label %371, label %355

; <label>:355                                     ; preds = %._crit_edge.i41
  %356 = icmp eq i32 %353, 0
  br i1 %356, label %357, label %359

; <label>:357                                     ; preds = %355
  store i32 100, i32* @maxthrottles, align 4, !tbaa !8
  %358 = call noalias i8* @malloc(i64 4800) #6
  br label %365

; <label>:359                                     ; preds = %355
  %360 = shl nsw i32 %353, 1
  store i32 %360, i32* @maxthrottles, align 4, !tbaa !8
  %361 = load i8*, i8** bitcast (%struct.throttletab** @throttles to i8**), align 8, !tbaa !4
  %362 = sext i32 %360 to i64
  %363 = mul nsw i64 %362, 48
  %364 = call i8* @realloc(i8* %361, i64 %363) #6
  br label %365

; <label>:365                                     ; preds = %359, %357
  %storemerge.i42 = phi i8* [ %358, %357 ], [ %364, %359 ]
  store i8* %storemerge.i42, i8** bitcast (%struct.throttletab** @throttles to i8**), align 8, !tbaa !4
  %366 = icmp eq i8* %storemerge.i42, null
  br i1 %366, label %367, label %371

; <label>:367                                     ; preds = %365
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([39 x i8], [39 x i8]* @.str.121, i64 0, i64 0)) #6
  %368 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %369 = load i8*, i8** @argv0, align 8, !tbaa !4
  %370 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %368, i8* nonnull getelementptr inbounds ([44 x i8], [44 x i8]* @.str.122, i64 0, i64 0), i8* %369) #19
  call void @exit(i32 1) #18
  unreachable

; <label>:371                                     ; preds = %365, %._crit_edge.i41
  %372 = call noalias i8* @__strdup(i8* %299) #6
  %373 = icmp eq i8* %372, null
  br i1 %373, label %374, label %e_strdup.exit.i

; <label>:374                                     ; preds = %371
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.109, i64 0, i64 0)) #6
  %375 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %376 = load i8*, i8** @argv0, align 8, !tbaa !4
  %377 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %375, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.110, i64 0, i64 0), i8* %376) #19
  call void @exit(i32 1) #18
  unreachable

e_strdup.exit.i:                                  ; preds = %371
  %378 = load i32, i32* @numthrottles, align 4, !tbaa !8
  %379 = sext i32 %378 to i64
  %380 = load %struct.throttletab*, %struct.throttletab** @throttles, align 8, !tbaa !4
  %381 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %380, i64 %379, i32 0
  store i8* %372, i8** %381, align 8, !tbaa !18
  %382 = load i64, i64* %max_limit.i, align 8, !tbaa !16
  %383 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %380, i64 %379, i32 1
  store i64 %382, i64* %383, align 8, !tbaa !20
  %384 = load i64, i64* %min_limit.i, align 8, !tbaa !16
  %385 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %380, i64 %379, i32 2
  store i64 %384, i64* %385, align 8, !tbaa !21
  %386 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %380, i64 %379, i32 3
  %387 = add nsw i32 %378, 1
  %388 = bitcast i64* %386 to i8*
  call void @llvm.memset.p0i8.i64(i8* %388, i8 0, i64 20, i32 8, i1 false) #6
  store i32 %387, i32* @numthrottles, align 4, !tbaa !8
  br label %.backedge.i

read_throttlefile.exit.loopexit:                  ; preds = %.backedge.i
  br label %read_throttlefile.exit

read_throttlefile.exit:                           ; preds = %read_throttlefile.exit.loopexit, %306
  %389 = call i32 @fclose(%struct._IO_FILE* nonnull %303) #6
  call void @llvm.lifetime.end(i64 16, i8* %302) #6
  call void @llvm.lifetime.end(i64 8, i8* %301) #6
  call void @llvm.lifetime.end(i64 8, i8* %300) #6
  call void @llvm.lifetime.end(i64 5000, i8* %299) #6
  call void @llvm.lifetime.end(i64 5000, i8* %298) #6
  br label %390

; <label>:390                                     ; preds = %294, %read_throttlefile.exit
  %391 = call i32 @getuid() #6
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %393, label %410

; <label>:393                                     ; preds = %390
  %394 = load i8*, i8** @user, align 8, !tbaa !4
  %395 = call %struct.passwd* @getpwnam(i8* %394)
  %396 = icmp eq %struct.passwd* %395, null
  br i1 %396, label %397, label %403

; <label>:397                                     ; preds = %393
  %398 = load i8*, i8** @user, align 8, !tbaa !4
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* %398) #6
  %399 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %400 = load i8*, i8** @argv0, align 8, !tbaa !4
  %401 = load i8*, i8** @user, align 8, !tbaa !4
  %402 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %399, i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i8* %400, i8* %401) #20
  call void @exit(i32 1) #18
  unreachable

; <label>:403                                     ; preds = %393
  %404 = getelementptr inbounds %struct.passwd, %struct.passwd* %395, i64 0, i32 2
  %405 = bitcast i32* %404 to i64*
  %406 = load i64, i64* %405, align 8
  %407 = trunc i64 %406 to i32
  %408 = lshr i64 %406, 32
  %409 = trunc i64 %408 to i32
  br label %410

; <label>:410                                     ; preds = %403, %390
  %gid.0 = phi i32 [ %409, %403 ], [ 32767, %390 ]
  %uid.0 = phi i32 [ %407, %403 ], [ 32767, %390 ]
  %411 = load i8*, i8** @logfile, align 8, !tbaa !4
  %412 = icmp eq i8* %411, null
  br i1 %412, label %448, label %413

; <label>:413                                     ; preds = %410
  %414 = call i32 @strcmp(i8* nonnull %411, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0)) #6
  %415 = icmp eq i32 %414, 0
  br i1 %415, label %416, label %417

; <label>:416                                     ; preds = %413
  store i1 true, i1* @no_log, align 1
  br label %448

; <label>:417                                     ; preds = %413
  %418 = load i8, i8* %411, align 1, !tbaa !1
  %419 = icmp eq i8 %418, 45
  br i1 %419, label %420, label %.thread

; <label>:420                                     ; preds = %417
  %421 = getelementptr inbounds i8, i8* %411, i64 1
  %422 = load i8, i8* %421, align 1, !tbaa !1
  %423 = icmp eq i8 %422, 0
  br i1 %423, label %424, label %.thread

; <label>:424                                     ; preds = %420
  %425 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !4
  br label %448

.thread:                                          ; preds = %417, %420
  %426 = call %struct._IO_FILE* @fopen(i8* nonnull %411, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.107.67, i64 0, i64 0))
  %427 = icmp eq %struct._IO_FILE* %426, null
  %428 = load i8*, i8** @logfile, align 8, !tbaa !4
  br i1 %427, label %429, label %431

; <label>:429                                     ; preds = %.thread
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* %428) #6
  %430 = load i8*, i8** @logfile, align 8, !tbaa !4
  call void @perror(i8* %430) #20
  call void @exit(i32 1) #18
  unreachable

; <label>:431                                     ; preds = %.thread
  %432 = load i8, i8* %428, align 1, !tbaa !1
  %433 = icmp eq i8 %432, 47
  br i1 %433, label %438, label %434

; <label>:434                                     ; preds = %431
  call void (i32, i8*, ...) @syslog(i32 4, i8* nonnull getelementptr inbounds ([67 x i8], [67 x i8]* @.str.10, i64 0, i64 0)) #6
  %435 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %436 = load i8*, i8** @argv0, align 8, !tbaa !4
  %437 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %435, i8* nonnull getelementptr inbounds ([72 x i8], [72 x i8]* @.str.11, i64 0, i64 0), i8* %436) #20
  br label %438

; <label>:438                                     ; preds = %431, %434
  %439 = call i32 @fileno(%struct._IO_FILE* nonnull %426) #6
  %440 = call i32 (i32, i32, ...) @fcntl(i32 %439, i32 2, i32 1) #6
  %441 = call i32 @getuid() #6
  %442 = icmp eq i32 %441, 0
  br i1 %442, label %443, label %448

; <label>:443                                     ; preds = %438
  %444 = call i32 @fileno(%struct._IO_FILE* nonnull %426) #6
  %445 = call i32 @fchown(i32 %444, i32 %uid.0, i32 %gid.0) #6
  %446 = icmp slt i32 %445, 0
  br i1 %446, label %447, label %448

; <label>:447                                     ; preds = %443
  call void (i32, i8*, ...) @syslog(i32 4, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)) #6
  call void @perror(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i64 0, i64 0)) #20
  br label %448

; <label>:448                                     ; preds = %410, %416, %438, %447, %443, %424
  %logfp.0 = phi %struct._IO_FILE* [ null, %416 ], [ %425, %424 ], [ %426, %447 ], [ %426, %443 ], [ %426, %438 ], [ null, %410 ]
  %449 = load i8*, i8** @dir, align 8, !tbaa !4
  %450 = icmp eq i8* %449, null
  br i1 %450, label %455, label %451

; <label>:451                                     ; preds = %448
  %452 = call i32 @chdir(i8* nonnull %449) #6
  %453 = icmp slt i32 %452, 0
  br i1 %453, label %454, label %455

; <label>:454                                     ; preds = %451
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0)) #6
  call void @perror(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0)) #20
  call void @exit(i32 1) #18
  unreachable

; <label>:455                                     ; preds = %448, %451
  %456 = call i8* @getcwd(i8* %1, i64 4096) #6
  %457 = call i64 @strlen(i8* %1) #13
  %458 = add i64 %457, -1
  %459 = getelementptr inbounds [4097 x i8], [4097 x i8]* %cwd, i64 0, i64 %458
  %460 = load i8, i8* %459, align 1, !tbaa !1
  %461 = icmp eq i8 %460, 47
  br i1 %461, label %464, label %462

; <label>:462                                     ; preds = %455
  %strlen = call i64 @strlen(i8* nonnull %1)
  %endptr = getelementptr [4097 x i8], [4097 x i8]* %cwd, i64 0, i64 %strlen
  %463 = bitcast i8* %endptr to i16*
  store i16 47, i16* %463, align 1
  br label %464

; <label>:464                                     ; preds = %455, %462
  %.b30 = load i1, i1* @debug, align 1
  br i1 %.b30, label %478, label %465

; <label>:465                                     ; preds = %464
  %466 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !4
  %467 = call i32 @fclose(%struct._IO_FILE* %466)
  %468 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !4
  %469 = icmp eq %struct._IO_FILE* %logfp.0, %468
  br i1 %469, label %472, label %470

; <label>:470                                     ; preds = %465
  %471 = call i32 @fclose(%struct._IO_FILE* %468)
  br label %472

; <label>:472                                     ; preds = %465, %470
  %473 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %474 = call i32 @fclose(%struct._IO_FILE* %473)
  %475 = call i32 @daemon(i32 1, i32 1) #6
  %476 = icmp slt i32 %475, 0
  br i1 %476, label %477, label %480

; <label>:477                                     ; preds = %472
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i64 0, i64 0)) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:478                                     ; preds = %464
  %479 = call i32 @setsid() #6
  br label %480

; <label>:480                                     ; preds = %472, %478
  %481 = load i8*, i8** @pidfile, align 8, !tbaa !4
  %482 = icmp eq i8* %481, null
  br i1 %482, label %492, label %483

; <label>:483                                     ; preds = %480
  %484 = call %struct._IO_FILE* @fopen(i8* nonnull %481, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.472, i64 0, i64 0))
  %485 = icmp eq %struct._IO_FILE* %484, null
  br i1 %485, label %486, label %488

; <label>:486                                     ; preds = %483
  %487 = load i8*, i8** @pidfile, align 8, !tbaa !4
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* %487) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:488                                     ; preds = %483
  %489 = call i32 @getpid() #6
  %490 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %484, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i64 0, i64 0), i32 %489)
  %491 = call i32 @fclose(%struct._IO_FILE* nonnull %484)
  br label %492

; <label>:492                                     ; preds = %480, %488
  %493 = call i32 @fdwatch_get_nfiles() #6
  store i32 %493, i32* @max_connects, align 4, !tbaa !8
  %494 = icmp slt i32 %493, 0
  br i1 %494, label %495, label %496

; <label>:495                                     ; preds = %492
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.20, i64 0, i64 0)) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:496                                     ; preds = %492
  %497 = add nsw i32 %493, -10
  store i32 %497, i32* @max_connects, align 4, !tbaa !8
  %.b32 = load i1, i1* @do_chroot, align 1
  br i1 %.b32, label %498, label %529

; <label>:498                                     ; preds = %496
  %499 = call i32 @chroot(i8* %1) #6
  %500 = icmp slt i32 %499, 0
  br i1 %500, label %501, label %502

; <label>:501                                     ; preds = %498
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0)) #6
  call void @perror(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0)) #20
  call void @exit(i32 1) #18
  unreachable

; <label>:502                                     ; preds = %498
  %503 = load i8*, i8** @logfile, align 8, !tbaa !4
  %504 = icmp eq i8* %503, null
  br i1 %504, label %524, label %505

; <label>:505                                     ; preds = %502
  %506 = load i8, i8* %503, align 1, !tbaa !1
  %507 = icmp eq i8 %506, 45
  br i1 %507, label %508, label %.thread76

; <label>:508                                     ; preds = %505
  %509 = getelementptr inbounds i8, i8* %503, i64 1
  %510 = load i8, i8* %509, align 1, !tbaa !1
  %511 = icmp eq i8 %510, 0
  br i1 %511, label %524, label %.thread76

.thread76:                                        ; preds = %505, %508
  %512 = call i64 @strlen(i8* %1) #13
  %513 = call i32 @strncmp(i8* nonnull %503, i8* %1, i64 %512) #13
  %514 = icmp eq i32 %513, 0
  br i1 %514, label %515, label %520

; <label>:515                                     ; preds = %.thread76
  %516 = add i64 %512, -1
  %517 = getelementptr inbounds i8, i8* %503, i64 %516
  %518 = call i64 @strlen(i8* %517) #13
  %519 = add i64 %518, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull %503, i8* %517, i64 %519, i32 1, i1 false)
  br label %524

; <label>:520                                     ; preds = %.thread76
  call void (i32, i8*, ...) @syslog(i32 4, i8* nonnull getelementptr inbounds ([74 x i8], [74 x i8]* @.str.23, i64 0, i64 0)) #6
  %521 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %522 = load i8*, i8** @argv0, align 8, !tbaa !4
  %523 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %521, i8* nonnull getelementptr inbounds ([79 x i8], [79 x i8]* @.str.24, i64 0, i64 0), i8* %522) #20
  br label %524

; <label>:524                                     ; preds = %508, %502, %515, %520
  %525 = bitcast [4097 x i8]* %cwd to i16*
  store i16 47, i16* %525, align 16
  %526 = call i32 @chdir(i8* %1) #6
  %527 = icmp slt i32 %526, 0
  br i1 %527, label %528, label %529

; <label>:528                                     ; preds = %524
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.25, i64 0, i64 0)) #6
  call void @perror(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.26, i64 0, i64 0)) #20
  call void @exit(i32 1) #18
  unreachable

; <label>:529                                     ; preds = %524, %496
  %530 = load i8*, i8** @data_dir, align 8, !tbaa !4
  %531 = icmp eq i8* %530, null
  br i1 %531, label %536, label %532

; <label>:532                                     ; preds = %529
  %533 = call i32 @chdir(i8* nonnull %530) #6
  %534 = icmp slt i32 %533, 0
  br i1 %534, label %535, label %536

; <label>:535                                     ; preds = %532
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.27, i64 0, i64 0)) #6
  call void @perror(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #20
  call void @exit(i32 1) #18
  unreachable

; <label>:536                                     ; preds = %529, %532
  %537 = call i32 (i32, void (i32)*, ...) bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 15, void (i32)* nonnull @handle_term) #6
  %538 = call i32 (i32, void (i32)*, ...) bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 2, void (i32)* nonnull @handle_term) #6
  %539 = call i32 (i32, void (i32)*, ...) bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 17, void (i32)* nonnull @handle_chld) #6
  %540 = call i32 (i32, void (i32)*, ...) bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 13, void (i32)* nonnull inttoptr (i64 1 to void (i32)*)) #6
  %541 = call i32 (i32, void (i32)*, ...) bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 1, void (i32)* nonnull @handle_hup) #6
  %542 = call i32 (i32, void (i32)*, ...) bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 10, void (i32)* nonnull @handle_usr1) #6
  %543 = call i32 (i32, void (i32)*, ...) bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 12, void (i32)* nonnull @handle_usr2) #6
  %544 = call i32 (i32, void (i32)*, ...) bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 14, void (i32)* nonnull @handle_alrm) #6
  store volatile i32 0, i32* @got_hup, align 4, !tbaa !8
  store volatile i32 0, i32* @got_usr1, align 4, !tbaa !8
  store volatile i32 0, i32* @watchdog_flag, align 4, !tbaa !8
  %545 = call i32 @alarm(i32 360) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull bitcast ([67 x %struct.TimerStruct*]* @timers to i8*), i8 0, i64 536, i32 16, i1 false) #6
  store %struct.TimerStruct* null, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  store i32 0, i32* @free_count.580, align 4, !tbaa !8
  store i32 0, i32* @active_count, align 4, !tbaa !8
  store i32 0, i32* @alloc_count.581, align 4, !tbaa !8
  %546 = load i8*, i8** @hostname, align 8, !tbaa !4
  %547 = icmp ne i32 %storemerge1.i, 0
  %sa4. = select i1 %547, %union.httpd_sockaddr* %sa4, %union.httpd_sockaddr* null
  %548 = icmp ne i32 %gotv6.0, 0
  %549 = select i1 %548, %union.httpd_sockaddr* %sa6, %union.httpd_sockaddr* null
  %550 = load i16, i16* @port, align 2, !tbaa !6
  %551 = load i8*, i8** @cgi_pattern, align 8, !tbaa !4
  %552 = load i32, i32* @cgi_limit, align 4, !tbaa !8
  %553 = load i8*, i8** @charset, align 8, !tbaa !4
  %554 = load i8*, i8** @p3p, align 8, !tbaa !4
  %555 = load i32, i32* @max_age, align 4, !tbaa !8
  %.b = load i1, i1* @no_log, align 1
  %556 = zext i1 %.b to i32
  %.b1 = load i1, i1* @no_symlink_check, align 1
  %557 = zext i1 %.b1 to i32
  %.b33 = load i1, i1* @do_vhost, align 1
  %558 = zext i1 %.b33 to i32
  %.b34 = load i1, i1* @do_global_passwd, align 1
  %559 = zext i1 %.b34 to i32
  %560 = load i8*, i8** @url_pattern, align 8, !tbaa !4
  %561 = load i8*, i8** @local_pattern, align 8, !tbaa !4
  %.b35 = load i1, i1* @no_empty_referrers, align 1
  %562 = zext i1 %.b35 to i32
  %563 = call %struct.httpd_server* @httpd_initialize(i8* %546, %union.httpd_sockaddr* %sa4., %union.httpd_sockaddr* %549, i16 zeroext %550, i8* %551, i32 %552, i8* %553, i8* %554, i32 %555, i8* %1, i32 %556, %struct._IO_FILE* %logfp.0, i32 %557, i32 %558, i32 %559, i8* %560, i8* %561, i32 %562) #6
  store %struct.httpd_server* %563, %struct.httpd_server** @hs, align 8, !tbaa !4
  %564 = icmp eq %struct.httpd_server* %563, null
  br i1 %564, label %565, label %566

; <label>:565                                     ; preds = %536
  call void @exit(i32 1) #18
  unreachable

; <label>:566                                     ; preds = %536
  %567 = load i8*, i8** getelementptr inbounds (%union.ClientData, %union.ClientData* @JunkClientData, i64 0, i32 0), align 8
  %568 = call %struct.TimerStruct* @tmr_create(%struct.timeval* null, void (i8*, %struct.timeval*)* nonnull @occasional, i8* %567, i64 120000, i32 1) #6
  %569 = icmp eq %struct.TimerStruct* %568, null
  br i1 %569, label %570, label %571

; <label>:570                                     ; preds = %566
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.29, i64 0, i64 0)) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:571                                     ; preds = %566
  %572 = load i8*, i8** getelementptr inbounds (%union.ClientData, %union.ClientData* @JunkClientData, i64 0, i32 0), align 8
  %573 = call %struct.TimerStruct* @tmr_create(%struct.timeval* null, void (i8*, %struct.timeval*)* nonnull @idle, i8* %572, i64 5000, i32 1) #6
  %574 = icmp eq %struct.TimerStruct* %573, null
  br i1 %574, label %575, label %576

; <label>:575                                     ; preds = %571
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.30, i64 0, i64 0)) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:576                                     ; preds = %571
  %577 = load i32, i32* @numthrottles, align 4, !tbaa !8
  %578 = icmp sgt i32 %577, 0
  br i1 %578, label %579, label %584

; <label>:579                                     ; preds = %576
  %580 = load i8*, i8** getelementptr inbounds (%union.ClientData, %union.ClientData* @JunkClientData, i64 0, i32 0), align 8
  %581 = call %struct.TimerStruct* @tmr_create(%struct.timeval* null, void (i8*, %struct.timeval*)* nonnull @update_throttles, i8* %580, i64 2000, i32 1) #6
  %582 = icmp eq %struct.TimerStruct* %581, null
  br i1 %582, label %583, label %584

; <label>:583                                     ; preds = %579
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.31, i64 0, i64 0)) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:584                                     ; preds = %579, %576
  %585 = load i8*, i8** getelementptr inbounds (%union.ClientData, %union.ClientData* @JunkClientData, i64 0, i32 0), align 8
  %586 = call %struct.TimerStruct* @tmr_create(%struct.timeval* null, void (i8*, %struct.timeval*)* nonnull @show_stats, i8* %585, i64 3600000, i32 1) #6
  %587 = icmp eq %struct.TimerStruct* %586, null
  br i1 %587, label %588, label %589

; <label>:588                                     ; preds = %584
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.32, i64 0, i64 0)) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:589                                     ; preds = %584
  %590 = call i64 @time(i64* null) #6
  store i64 %590, i64* @stats_time, align 8, !tbaa !16
  store i64 %590, i64* @start_time, align 8, !tbaa !16
  store i64 0, i64* @stats_connections, align 8, !tbaa !16
  store i64 0, i64* @stats_bytes, align 8, !tbaa !16
  store i32 0, i32* @stats_simultaneous, align 4, !tbaa !8
  %591 = call i32 @getuid() #6
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %593, label %612

; <label>:593                                     ; preds = %589
  %594 = call i32 @setgroups(i64 0, i32* null) #6
  %595 = icmp slt i32 %594, 0
  br i1 %595, label %596, label %597

; <label>:596                                     ; preds = %593
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.33, i64 0, i64 0)) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:597                                     ; preds = %593
  %598 = call i32 @setgid(i32 %gid.0) #6
  %599 = icmp slt i32 %598, 0
  br i1 %599, label %600, label %601

; <label>:600                                     ; preds = %597
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.34, i64 0, i64 0)) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:601                                     ; preds = %597
  %602 = load i8*, i8** @user, align 8, !tbaa !4
  %603 = call i32 @initgroups(i8* %602, i32 %gid.0) #6
  %604 = icmp slt i32 %603, 0
  br i1 %604, label %605, label %606

; <label>:605                                     ; preds = %601
  call void (i32, i8*, ...) @syslog(i32 4, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.35, i64 0, i64 0)) #6
  br label %606

; <label>:606                                     ; preds = %605, %601
  %607 = call i32 @setuid(i32 %uid.0) #6
  %608 = icmp slt i32 %607, 0
  br i1 %608, label %609, label %610

; <label>:609                                     ; preds = %606
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36, i64 0, i64 0)) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:610                                     ; preds = %606
  %.b31 = load i1, i1* @do_chroot, align 1
  br i1 %.b31, label %612, label %611

; <label>:611                                     ; preds = %610
  call void (i32, i8*, ...) @syslog(i32 4, i8* nonnull getelementptr inbounds ([58 x i8], [58 x i8]* @.str.37, i64 0, i64 0)) #6
  br label %612

; <label>:612                                     ; preds = %610, %611, %589
  %613 = load i32, i32* @max_connects, align 4, !tbaa !8
  %614 = sext i32 %613 to i64
  %615 = mul nsw i64 %614, 144
  %616 = call noalias i8* @malloc(i64 %615) #6
  store i8* %616, i8** bitcast (%struct.connecttab** @connects to i8**), align 8, !tbaa !4
  %617 = icmp eq i8* %616, null
  %618 = bitcast i8* %616 to %struct.connecttab*
  br i1 %617, label %626, label %.preheader

.preheader:                                       ; preds = %612
  %619 = icmp sgt i32 %613, 0
  br i1 %619, label %.lr.ph69.preheader, label %._crit_edge70

.lr.ph69.preheader:                               ; preds = %.preheader
  %xtraiter82 = and i32 %613, 1
  %lcmp.mod83 = icmp eq i32 %xtraiter82, 0
  br i1 %lcmp.mod83, label %.lr.ph69.preheader.split, label %.lr.ph69.prol

.lr.ph69.prol:                                    ; preds = %.lr.ph69.preheader
  %620 = bitcast i8* %616 to i32*
  store i32 0, i32* %620, align 8, !tbaa !22
  %621 = getelementptr inbounds i8, i8* %616, i64 4
  %622 = bitcast i8* %621 to i32*
  store i32 1, i32* %622, align 4, !tbaa !24
  %623 = getelementptr inbounds i8, i8* %616, i64 8
  %624 = bitcast i8* %623 to %struct.httpd_conn**
  store %struct.httpd_conn* null, %struct.httpd_conn** %624, align 8, !tbaa !25
  br label %.lr.ph69.preheader.split

.lr.ph69.preheader.split:                         ; preds = %.lr.ph69.preheader, %.lr.ph69.prol
  %indvars.iv.unr = phi i64 [ 0, %.lr.ph69.preheader ], [ 1, %.lr.ph69.prol ]
  %625 = icmp eq i32 %613, 1
  br i1 %625, label %._crit_edge70, label %.lr.ph69.preheader13

.lr.ph69.preheader13:                             ; preds = %.lr.ph69.preheader.split
  br label %.lr.ph69

; <label>:626                                     ; preds = %612
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.38, i64 0, i64 0)) #6
  call void @exit(i32 1) #18
  unreachable

.lr.ph69:                                         ; preds = %.lr.ph69.preheader13, %.lr.ph69
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %.lr.ph69 ], [ %indvars.iv.unr, %.lr.ph69.preheader13 ]
  %627 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %618, i64 %indvars.iv, i32 0
  store i32 0, i32* %627, align 8, !tbaa !22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %628 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %618, i64 %indvars.iv, i32 1
  %629 = trunc i64 %indvars.iv.next to i32
  store i32 %629, i32* %628, align 4, !tbaa !24
  %630 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %618, i64 %indvars.iv, i32 2
  store %struct.httpd_conn* null, %struct.httpd_conn** %630, align 8, !tbaa !25
  %631 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %618, i64 %indvars.iv.next, i32 0
  store i32 0, i32* %631, align 8, !tbaa !22
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %632 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %618, i64 %indvars.iv.next, i32 1
  %633 = trunc i64 %indvars.iv.next.1 to i32
  store i32 %633, i32* %632, align 4, !tbaa !24
  %634 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %618, i64 %indvars.iv.next, i32 2
  store %struct.httpd_conn* null, %struct.httpd_conn** %634, align 8, !tbaa !25
  %635 = icmp slt i64 %indvars.iv.next.1, %614
  br i1 %635, label %.lr.ph69, label %._crit_edge70.loopexit

._crit_edge70.loopexit:                           ; preds = %.lr.ph69
  br label %._crit_edge70

._crit_edge70:                                    ; preds = %._crit_edge70.loopexit, %.lr.ph69.preheader.split, %.preheader
  %636 = add nsw i32 %613, -1
  %637 = sext i32 %636 to i64
  %638 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %618, i64 %637, i32 1
  store i32 -1, i32* %638, align 4, !tbaa !24
  store i32 0, i32* @first_free_connect, align 4, !tbaa !8
  store i32 0, i32* @num_connects, align 4, !tbaa !8
  store i32 0, i32* @httpd_conn_count, align 4, !tbaa !8
  %639 = load %struct.httpd_server*, %struct.httpd_server** @hs, align 8, !tbaa !4
  %640 = icmp eq %struct.httpd_server* %639, null
  br i1 %640, label %fdwatch_add_fd.exit7, label %641

; <label>:641                                     ; preds = %._crit_edge70
  %642 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %639, i64 0, i32 10
  %643 = load i32, i32* %642, align 8, !tbaa !26
  %644 = icmp eq i32 %643, -1
  br i1 %644, label %672, label %645

; <label>:645                                     ; preds = %641
  %646 = icmp sgt i32 %643, -1
  %647 = load i32, i32* @nfiles, align 4
  %648 = icmp sgt i32 %647, %643
  %or.cond.i2 = and i1 %646, %648
  br i1 %or.cond.i2, label %649, label %655

; <label>:649                                     ; preds = %645
  %650 = sext i32 %643 to i64
  %651 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  %652 = getelementptr inbounds i32, i32* %651, i64 %650
  %653 = load i32, i32* %652, align 4, !tbaa !8
  %654 = icmp eq i32 %653, -1
  br i1 %654, label %656, label %655

; <label>:655                                     ; preds = %649, %645
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.535, i64 0, i64 0), i32 %643) #6
  br label %fdwatch_add_fd.exit

; <label>:656                                     ; preds = %649
  %657 = load i32, i32* @npoll_fds, align 4, !tbaa !8
  %658 = icmp slt i32 %657, %647
  br i1 %658, label %660, label %659

; <label>:659                                     ; preds = %656
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5.536, i64 0, i64 0)) #6
  %.pre.i3 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  br label %poll_add_fd.exit.i

; <label>:660                                     ; preds = %656
  %661 = sext i32 %657 to i64
  %662 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8, !tbaa !4
  %663 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %662, i64 %661, i32 0
  store i32 %643, i32* %663, align 4, !tbaa !28
  %664 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %662, i64 %661, i32 1
  store i16 1, i16* %664, align 4, !tbaa !30
  %665 = load i32*, i32** @poll_fdidx, align 8, !tbaa !4
  %666 = getelementptr inbounds i32, i32* %665, i64 %650
  store i32 %657, i32* %666, align 4, !tbaa !8
  %667 = add nsw i32 %657, 1
  store i32 %667, i32* @npoll_fds, align 4, !tbaa !8
  br label %poll_add_fd.exit.i

poll_add_fd.exit.i:                               ; preds = %660, %659
  %668 = phi i32* [ %.pre.i3, %659 ], [ %651, %660 ]
  %669 = getelementptr inbounds i32, i32* %668, i64 %650
  store i32 0, i32* %669, align 4, !tbaa !8
  %670 = load i8**, i8*** @fd_data, align 8, !tbaa !4
  %671 = getelementptr inbounds i8*, i8** %670, i64 %650
  store i8* null, i8** %671, align 8, !tbaa !4
  br label %fdwatch_add_fd.exit

fdwatch_add_fd.exit:                              ; preds = %655, %poll_add_fd.exit.i
  %.pre73 = load %struct.httpd_server*, %struct.httpd_server** @hs, align 8, !tbaa !4
  br label %672

; <label>:672                                     ; preds = %641, %fdwatch_add_fd.exit
  %673 = phi %struct.httpd_server* [ %639, %641 ], [ %.pre73, %fdwatch_add_fd.exit ]
  %674 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %673, i64 0, i32 11
  %675 = load i32, i32* %674, align 4, !tbaa !31
  %676 = icmp eq i32 %675, -1
  br i1 %676, label %fdwatch_add_fd.exit7, label %677

; <label>:677                                     ; preds = %672
  %678 = icmp sgt i32 %675, -1
  %679 = load i32, i32* @nfiles, align 4
  %680 = icmp sgt i32 %679, %675
  %or.cond.i4 = and i1 %678, %680
  br i1 %or.cond.i4, label %681, label %687

; <label>:681                                     ; preds = %677
  %682 = sext i32 %675 to i64
  %683 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  %684 = getelementptr inbounds i32, i32* %683, i64 %682
  %685 = load i32, i32* %684, align 4, !tbaa !8
  %686 = icmp eq i32 %685, -1
  br i1 %686, label %688, label %687

; <label>:687                                     ; preds = %681, %677
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.535, i64 0, i64 0), i32 %675) #6
  br label %fdwatch_add_fd.exit7

; <label>:688                                     ; preds = %681
  %689 = load i32, i32* @npoll_fds, align 4, !tbaa !8
  %690 = icmp slt i32 %689, %679
  br i1 %690, label %692, label %691

; <label>:691                                     ; preds = %688
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5.536, i64 0, i64 0)) #6
  %.pre.i5 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  br label %poll_add_fd.exit.i6

; <label>:692                                     ; preds = %688
  %693 = sext i32 %689 to i64
  %694 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8, !tbaa !4
  %695 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %694, i64 %693, i32 0
  store i32 %675, i32* %695, align 4, !tbaa !28
  %696 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %694, i64 %693, i32 1
  store i16 1, i16* %696, align 4, !tbaa !30
  %697 = load i32*, i32** @poll_fdidx, align 8, !tbaa !4
  %698 = getelementptr inbounds i32, i32* %697, i64 %682
  store i32 %689, i32* %698, align 4, !tbaa !8
  %699 = add nsw i32 %689, 1
  store i32 %699, i32* @npoll_fds, align 4, !tbaa !8
  br label %poll_add_fd.exit.i6

poll_add_fd.exit.i6:                              ; preds = %692, %691
  %700 = phi i32* [ %.pre.i5, %691 ], [ %683, %692 ]
  %701 = getelementptr inbounds i32, i32* %700, i64 %682
  store i32 0, i32* %701, align 4, !tbaa !8
  %702 = load i8**, i8*** @fd_data, align 8, !tbaa !4
  %703 = getelementptr inbounds i8*, i8** %702, i64 %682
  store i8* null, i8** %703, align 8, !tbaa !4
  br label %fdwatch_add_fd.exit7

fdwatch_add_fd.exit7:                             ; preds = %poll_add_fd.exit.i6, %687, %672, %._crit_edge70
  %704 = call i32 @gettimeofday(%struct.timeval* nonnull %tv, %struct.timezone* null) #6
  %705 = load i32, i32* @terminate, align 4, !tbaa !8
  %706 = load i32, i32* @num_connects, align 4, !tbaa !8
  %707 = icmp sgt i32 %706, 0
  %not.67 = icmp eq i32 %705, 0
  %708 = or i1 %not.67, %707
  br i1 %708, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %fdwatch_add_fd.exit7
  %709 = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i64 0, i32 0
  %710 = bitcast [2 x %struct.iovec]* %iv.i to i8*
  %711 = bitcast [2 x %struct.iovec]* %iv.i to i64*
  %712 = getelementptr inbounds [2 x %struct.iovec], [2 x %struct.iovec]* %iv.i, i64 0, i64 0, i32 1
  %713 = getelementptr inbounds [2 x %struct.iovec], [2 x %struct.iovec]* %iv.i, i64 0, i64 1, i32 0
  %714 = getelementptr inbounds [2 x %struct.iovec], [2 x %struct.iovec]* %iv.i, i64 0, i64 1, i32 1
  %715 = getelementptr inbounds [2 x %struct.iovec], [2 x %struct.iovec]* %iv.i, i64 0, i64 0
  %716 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf.i56, i64 0, i64 0
  %717 = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i64 0, i32 1
  br label %718

; <label>:718                                     ; preds = %.lr.ph, %.backedge
  %719 = load volatile i32, i32* @got_hup, align 4, !tbaa !8
  %720 = icmp eq i32 %719, 0
  br i1 %720, label %747, label %721

; <label>:721                                     ; preds = %718
  %.b.i = load i1, i1* @no_log, align 1
  %722 = load %struct.httpd_server*, %struct.httpd_server** @hs, align 8
  %723 = icmp eq %struct.httpd_server* %722, null
  %or.cond.i = or i1 %.b.i, %723
  br i1 %or.cond.i, label %re_open_logfile.exit, label %724

; <label>:724                                     ; preds = %721
  %725 = load i8*, i8** @logfile, align 8, !tbaa !4
  %726 = icmp eq i8* %725, null
  br i1 %726, label %re_open_logfile.exit, label %727

; <label>:727                                     ; preds = %724
  %728 = load i8, i8* %725, align 1, !tbaa !1
  %729 = icmp eq i8 %728, 45
  br i1 %729, label %730, label %.thread.i43

; <label>:730                                     ; preds = %727
  %731 = getelementptr inbounds i8, i8* %725, i64 1
  %732 = load i8, i8* %731, align 1, !tbaa !1
  %phitmp.i = icmp eq i8 %732, 0
  br i1 %phitmp.i, label %re_open_logfile.exit, label %.thread.i43

.thread.i43:                                      ; preds = %730, %727
  call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.46, i64 0, i64 0)) #6
  %733 = load i8*, i8** @logfile, align 8, !tbaa !4
  %734 = call %struct._IO_FILE* @fopen(i8* %733, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.107.67, i64 0, i64 0)) #6
  %735 = icmp eq %struct._IO_FILE* %734, null
  br i1 %735, label %736, label %738

; <label>:736                                     ; preds = %.thread.i43
  %737 = load i8*, i8** @logfile, align 8, !tbaa !4
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.47, i64 0, i64 0), i8* %737) #6
  br label %re_open_logfile.exit

; <label>:738                                     ; preds = %.thread.i43
  %739 = call i32 @fileno(%struct._IO_FILE* nonnull %734) #6
  %740 = call i32 (i32, i32, ...) @fcntl(i32 %739, i32 2, i32 1) #6
  %741 = load %struct.httpd_server*, %struct.httpd_server** @hs, align 8, !tbaa !4
  %742 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %741, i64 0, i32 13
  %743 = load %struct._IO_FILE*, %struct._IO_FILE** %742, align 8, !tbaa !32
  %744 = icmp eq %struct._IO_FILE* %743, null
  br i1 %744, label %httpd_set_logfp.exit, label %745

; <label>:745                                     ; preds = %738
  %746 = call i32 @fclose(%struct._IO_FILE* nonnull %743) #6
  br label %httpd_set_logfp.exit

httpd_set_logfp.exit:                             ; preds = %738, %745
  store %struct._IO_FILE* %734, %struct._IO_FILE** %742, align 8, !tbaa !32
  br label %re_open_logfile.exit

re_open_logfile.exit:                             ; preds = %721, %724, %730, %736, %httpd_set_logfp.exit
  store volatile i32 0, i32* @got_hup, align 4, !tbaa !8
  br label %747

; <label>:747                                     ; preds = %718, %re_open_logfile.exit
  %748 = load i64, i64* %709, align 8
  %749 = load i64, i64* %717, align 8
  br label %750

; <label>:750                                     ; preds = %767, %747
  %indvars.iv.i8 = phi i64 [ 0, %747 ], [ %indvars.iv.next.i9, %767 ]
  %msecs.03.i = phi i64 [ 0, %747 ], [ %msecs.1.i, %767 ]
  %gotone.02.i = phi i32 [ 0, %747 ], [ %gotone.1.i, %767 ]
  %751 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %indvars.iv.i8
  %752 = load %struct.TimerStruct*, %struct.TimerStruct** %751, align 8, !tbaa !4
  %753 = icmp eq %struct.TimerStruct* %752, null
  br i1 %753, label %767, label %754

; <label>:754                                     ; preds = %750
  %755 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %752, i64 0, i32 4, i32 0
  %756 = load i64, i64* %755, align 8, !tbaa !33
  %757 = sub nsw i64 %756, %748
  %758 = mul nsw i64 %757, 1000
  %759 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %752, i64 0, i32 4, i32 1
  %760 = load i64, i64* %759, align 8, !tbaa !36
  %761 = sub nsw i64 %760, %749
  %762 = sdiv i64 %761, 1000
  %763 = add nsw i64 %762, %758
  %764 = icmp eq i32 %gotone.02.i, 0
  br i1 %764, label %767, label %765

; <label>:765                                     ; preds = %754
  %766 = icmp slt i64 %763, %msecs.03.i
  %.msecs.0.i = select i1 %766, i64 %763, i64 %msecs.03.i
  br label %767

; <label>:767                                     ; preds = %765, %754, %750
  %gotone.1.i = phi i32 [ %gotone.02.i, %750 ], [ 1, %754 ], [ %gotone.02.i, %765 ]
  %msecs.1.i = phi i64 [ %msecs.03.i, %750 ], [ %763, %754 ], [ %.msecs.0.i, %765 ]
  %indvars.iv.next.i9 = add nuw nsw i64 %indvars.iv.i8, 1
  %exitcond.i = icmp eq i64 %indvars.iv.next.i9, 67
  br i1 %exitcond.i, label %tmr_mstimeout.exit, label %750

tmr_mstimeout.exit:                               ; preds = %767
  %msecs.1.i.lcssa = phi i64 [ %msecs.1.i, %767 ]
  %gotone.1.i.lcssa = phi i32 [ %gotone.1.i, %767 ]
  %768 = icmp eq i32 %gotone.1.i.lcssa, 0
  %769 = icmp sgt i64 %msecs.1.i.lcssa, 0
  %.msecs.01.i = select i1 %769, i64 %msecs.1.i.lcssa, i64 0
  %770 = load i64, i64* @nwatches, align 8, !tbaa !16
  %771 = add nsw i64 %770, 1
  store i64 %771, i64* @nwatches, align 8, !tbaa !16
  %772 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8, !tbaa !4
  %773 = load i32, i32* @npoll_fds, align 4, !tbaa !8
  %774 = sext i32 %773 to i64
  %775 = trunc i64 %.msecs.01.i to i32
  %776 = select i1 %768, i32 -1, i32 %775
  %777 = call i32 @poll(%struct.pollfd* %772, i64 %774, i32 %776) #6
  %778 = icmp slt i32 %777, 1
  br i1 %778, label %fdwatch.exit, label %.preheader.i.i

.preheader.i.i:                                   ; preds = %tmr_mstimeout.exit
  %779 = load i32, i32* @npoll_fds, align 4, !tbaa !8
  %780 = icmp sgt i32 %779, 0
  br i1 %780, label %.lr.ph.i.i, label %.thread36

.thread36:                                        ; preds = %.preheader.i.i
  store i32 0, i32* @nreturned, align 4, !tbaa !8
  store i32 0, i32* @next_ridx, align 4, !tbaa !8
  %781 = call i32 @gettimeofday(%struct.timeval* nonnull %tv, %struct.timezone* null) #6
  br label %807

.lr.ph.i.i:                                       ; preds = %.preheader.i.i
  %782 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8
  %783 = load i32*, i32** @poll_rfdidx, align 8
  %784 = sext i32 %779 to i64
  br label %785

; <label>:785                                     ; preds = %797, %.lr.ph.i.i
  %indvars.iv.i.i = phi i64 [ 0, %.lr.ph.i.i ], [ %indvars.iv.next.i.i10, %797 ]
  %ridx.01.i.i = phi i32 [ 0, %.lr.ph.i.i ], [ %ridx.1.i.i, %797 ]
  %786 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %782, i64 %indvars.iv.i.i, i32 2
  %787 = load i16, i16* %786, align 2, !tbaa !37
  %788 = and i16 %787, 61
  %789 = icmp eq i16 %788, 0
  br i1 %789, label %797, label %790

; <label>:790                                     ; preds = %785
  %791 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %782, i64 %indvars.iv.i.i, i32 0
  %792 = load i32, i32* %791, align 4, !tbaa !28
  %793 = add nsw i32 %ridx.01.i.i, 1
  %794 = sext i32 %ridx.01.i.i to i64
  %795 = getelementptr inbounds i32, i32* %783, i64 %794
  store i32 %792, i32* %795, align 4, !tbaa !8
  %796 = icmp eq i32 %793, %777
  br i1 %796, label %fdwatch.exit.loopexit, label %797

; <label>:797                                     ; preds = %790, %785
  %ridx.1.i.i = phi i32 [ %793, %790 ], [ %ridx.01.i.i, %785 ]
  %indvars.iv.next.i.i10 = add nuw nsw i64 %indvars.iv.i.i, 1
  %798 = icmp slt i64 %indvars.iv.next.i.i10, %784
  br i1 %798, label %785, label %fdwatch.exit.loopexit

fdwatch.exit.loopexit:                            ; preds = %797, %790
  %.0.i.i.ph = phi i32 [ %777, %790 ], [ %ridx.1.i.i, %797 ]
  br label %fdwatch.exit

fdwatch.exit:                                     ; preds = %fdwatch.exit.loopexit, %tmr_mstimeout.exit
  %.0.i.i = phi i32 [ %777, %tmr_mstimeout.exit ], [ %.0.i.i.ph, %fdwatch.exit.loopexit ]
  store i32 %.0.i.i, i32* @nreturned, align 4, !tbaa !8
  store i32 0, i32* @next_ridx, align 4, !tbaa !8
  %799 = icmp slt i32 %.0.i.i, 0
  br i1 %799, label %800, label %804

; <label>:800                                     ; preds = %fdwatch.exit
  %801 = tail call i32* @__errno_location() #21
  %802 = load i32, i32* %801, align 4, !tbaa !8
  switch i32 %802, label %803 [
    i32 4, label %.backedge
    i32 11, label %.backedge
  ]

; <label>:803                                     ; preds = %800
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.39, i64 0, i64 0)) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:804                                     ; preds = %fdwatch.exit
  %805 = call i32 @gettimeofday(%struct.timeval* nonnull %tv, %struct.timezone* null) #6
  %806 = icmp eq i32 %.0.i.i, 0
  br i1 %806, label %807, label %812

; <label>:807                                     ; preds = %.thread36, %804
  call void @tmr_run(%struct.timeval* nonnull %tv) #6
  br label %.backedge

.backedge:                                        ; preds = %1401, %1398, %807, %1368, %1373, %891, %851, %800, %800
  %808 = load i32, i32* @terminate, align 4, !tbaa !8
  %809 = load i32, i32* @num_connects, align 4, !tbaa !8
  %810 = icmp sgt i32 %809, 0
  %not. = icmp eq i32 %808, 0
  %811 = or i1 %not., %810
  br i1 %811, label %718, label %._crit_edge.loopexit

; <label>:812                                     ; preds = %804
  %813 = load %struct.httpd_server*, %struct.httpd_server** @hs, align 8, !tbaa !4
  %814 = icmp eq %struct.httpd_server* %813, null
  br i1 %814, label %handle_read.exit.preheader, label %815

; <label>:815                                     ; preds = %812
  %816 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %813, i64 0, i32 11
  %817 = load i32, i32* %816, align 4, !tbaa !31
  %818 = icmp eq i32 %817, -1
  br i1 %818, label %fdwatch_check_fd.exit.thread, label %819

; <label>:819                                     ; preds = %815
  %820 = icmp sgt i32 %817, -1
  %821 = load i32, i32* @nfiles, align 4
  %822 = icmp sgt i32 %821, %817
  %or.cond.i11 = and i1 %820, %822
  br i1 %or.cond.i11, label %823, label %829

; <label>:823                                     ; preds = %819
  %824 = sext i32 %817 to i64
  %825 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  %826 = getelementptr inbounds i32, i32* %825, i64 %824
  %827 = load i32, i32* %826, align 4, !tbaa !8
  %828 = icmp eq i32 %827, -1
  br i1 %828, label %829, label %830

; <label>:829                                     ; preds = %823, %819
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2.545, i64 0, i64 0), i32 %817) #6
  br label %fdwatch_check_fd.exit.thread

; <label>:830                                     ; preds = %823
  %831 = load i32*, i32** @poll_fdidx, align 8, !tbaa !4
  %832 = getelementptr inbounds i32, i32* %831, i64 %824
  %833 = load i32, i32* %832, align 4, !tbaa !8
  %834 = icmp sgt i32 %833, -1
  %835 = icmp slt i32 %833, %821
  %or.cond.i.i = and i1 %834, %835
  br i1 %or.cond.i.i, label %837, label %836

; <label>:836                                     ; preds = %830
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7.546, i64 0, i64 0), i32 %833) #6
  br label %fdwatch_check_fd.exit.thread

; <label>:837                                     ; preds = %830
  %838 = sext i32 %833 to i64
  %839 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8, !tbaa !4
  %840 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %839, i64 %838, i32 2
  %841 = load i16, i16* %840, align 2, !tbaa !37
  %842 = sext i16 %841 to i32
  %843 = and i32 %842, 8
  %844 = icmp eq i32 %843, 0
  br i1 %844, label %845, label %fdwatch_check_fd.exit.thread

; <label>:845                                     ; preds = %837
  switch i32 %827, label %fdwatch_check_fd.exit.thread [
    i32 0, label %846
    i32 1, label %848
  ]

; <label>:846                                     ; preds = %845
  %847 = and i32 %842, 49
  br label %fdwatch_check_fd.exit

; <label>:848                                     ; preds = %845
  %849 = and i32 %842, 52
  br label %fdwatch_check_fd.exit

fdwatch_check_fd.exit:                            ; preds = %846, %848
  %.0.i12 = phi i32 [ %849, %848 ], [ %847, %846 ]
  %850 = icmp eq i32 %.0.i12, 0
  br i1 %850, label %fdwatch_check_fd.exit.thread, label %851

; <label>:851                                     ; preds = %fdwatch_check_fd.exit
  %852 = call fastcc i32 @handle_newconnect(%struct.timeval* nonnull %tv, i32 %817)
  %853 = icmp eq i32 %852, 0
  br i1 %853, label %fdwatch_check_fd.exit.thread, label %.backedge

fdwatch_check_fd.exit.thread:                     ; preds = %845, %837, %836, %829, %851, %fdwatch_check_fd.exit, %815
  %.pr65 = load %struct.httpd_server*, %struct.httpd_server** @hs, align 8, !tbaa !4
  %854 = icmp eq %struct.httpd_server* %.pr65, null
  br i1 %854, label %handle_read.exit.preheader, label %855

; <label>:855                                     ; preds = %fdwatch_check_fd.exit.thread
  %856 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %.pr65, i64 0, i32 10
  %857 = load i32, i32* %856, align 8, !tbaa !26
  %858 = icmp eq i32 %857, -1
  br i1 %858, label %handle_read.exit.preheader, label %859

; <label>:859                                     ; preds = %855
  %860 = icmp sgt i32 %857, -1
  %861 = load i32, i32* @nfiles, align 4
  %862 = icmp sgt i32 %861, %857
  %or.cond.i13 = and i1 %860, %862
  br i1 %or.cond.i13, label %863, label %869

; <label>:863                                     ; preds = %859
  %864 = sext i32 %857 to i64
  %865 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  %866 = getelementptr inbounds i32, i32* %865, i64 %864
  %867 = load i32, i32* %866, align 4, !tbaa !8
  %868 = icmp eq i32 %867, -1
  br i1 %868, label %869, label %870

; <label>:869                                     ; preds = %863, %859
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2.545, i64 0, i64 0), i32 %857) #6
  br label %handle_read.exit.preheader

; <label>:870                                     ; preds = %863
  %871 = load i32*, i32** @poll_fdidx, align 8, !tbaa !4
  %872 = getelementptr inbounds i32, i32* %871, i64 %864
  %873 = load i32, i32* %872, align 4, !tbaa !8
  %874 = icmp sgt i32 %873, -1
  %875 = icmp slt i32 %873, %861
  %or.cond.i.i14 = and i1 %874, %875
  br i1 %or.cond.i.i14, label %877, label %876

; <label>:876                                     ; preds = %870
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7.546, i64 0, i64 0), i32 %873) #6
  br label %handle_read.exit.preheader

; <label>:877                                     ; preds = %870
  %878 = sext i32 %873 to i64
  %879 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8, !tbaa !4
  %880 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %879, i64 %878, i32 2
  %881 = load i16, i16* %880, align 2, !tbaa !37
  %882 = sext i16 %881 to i32
  %883 = and i32 %882, 8
  %884 = icmp eq i32 %883, 0
  br i1 %884, label %885, label %handle_read.exit.preheader

; <label>:885                                     ; preds = %877
  switch i32 %867, label %handle_read.exit.preheader [
    i32 0, label %886
    i32 1, label %888
  ]

; <label>:886                                     ; preds = %885
  %887 = and i32 %882, 49
  br label %fdwatch_check_fd.exit16

; <label>:888                                     ; preds = %885
  %889 = and i32 %882, 52
  br label %fdwatch_check_fd.exit16

fdwatch_check_fd.exit16:                          ; preds = %886, %888
  %.0.i15 = phi i32 [ %889, %888 ], [ %887, %886 ]
  %890 = icmp eq i32 %.0.i15, 0
  br i1 %890, label %handle_read.exit.preheader, label %891

; <label>:891                                     ; preds = %fdwatch_check_fd.exit16
  %892 = call fastcc i32 @handle_newconnect(%struct.timeval* nonnull %tv, i32 %857)
  %893 = icmp eq i32 %892, 0
  br i1 %893, label %handle_read.exit.preheader, label %.backedge

handle_read.exit.preheader:                       ; preds = %fdwatch_check_fd.exit.thread, %855, %fdwatch_check_fd.exit16, %891, %812, %869, %876, %877, %885
  br label %handle_read.exit

handle_read.exit:                                 ; preds = %handle_read.exit.backedge, %handle_read.exit.preheader
  %894 = load i32, i32* @next_ridx, align 4, !tbaa !8
  %895 = load i32, i32* @nreturned, align 4, !tbaa !8
  %896 = icmp slt i32 %894, %895
  br i1 %896, label %897, label %fdwatch_get_next_client_data.exit

; <label>:897                                     ; preds = %handle_read.exit
  %898 = add nsw i32 %894, 1
  store i32 %898, i32* @next_ridx, align 4, !tbaa !8
  %899 = icmp sgt i32 %894, -1
  %900 = load i32, i32* @nfiles, align 4
  %901 = icmp sgt i32 %900, %894
  %or.cond.i.i17 = and i1 %899, %901
  br i1 %or.cond.i.i17, label %poll_get_fd.exit.i, label %poll_get_fd.exit.thread.i

poll_get_fd.exit.thread.i:                        ; preds = %897
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8.549, i64 0, i64 0), i32 %894) #6
  br label %fdwatch_get_next_client_data.exit

poll_get_fd.exit.i:                               ; preds = %897
  %902 = sext i32 %894 to i64
  %903 = load i32*, i32** @poll_rfdidx, align 8, !tbaa !4
  %904 = getelementptr inbounds i32, i32* %903, i64 %902
  %905 = load i32, i32* %904, align 4, !tbaa !8
  %906 = icmp sgt i32 %905, -1
  %907 = icmp slt i32 %905, %900
  %or.cond.i18 = and i1 %906, %907
  br i1 %or.cond.i18, label %908, label %fdwatch_get_next_client_data.exit

; <label>:908                                     ; preds = %poll_get_fd.exit.i
  %909 = sext i32 %905 to i64
  %910 = load i8**, i8*** @fd_data, align 8, !tbaa !4
  %911 = getelementptr inbounds i8*, i8** %910, i64 %909
  %912 = load i8*, i8** %911, align 8, !tbaa !4
  br label %fdwatch_get_next_client_data.exit

fdwatch_get_next_client_data.exit:                ; preds = %handle_read.exit, %poll_get_fd.exit.thread.i, %poll_get_fd.exit.i, %908
  %.0.i19 = phi i8* [ %912, %908 ], [ inttoptr (i64 -1 to i8*), %handle_read.exit ], [ null, %poll_get_fd.exit.i ], [ null, %poll_get_fd.exit.thread.i ]
  %913 = bitcast i8* %.0.i19 to %struct.connecttab*
  %magicptr = ptrtoint i8* %.0.i19 to i64
  switch i64 %magicptr, label %914 [
    i64 -1, label %1368
    i64 0, label %handle_read.exit.backedge
  ]

; <label>:914                                     ; preds = %fdwatch_get_next_client_data.exit
  %915 = getelementptr inbounds i8, i8* %.0.i19, i64 8
  %916 = bitcast i8* %915 to %struct.httpd_conn**
  %917 = load %struct.httpd_conn*, %struct.httpd_conn** %916, align 8, !tbaa !25
  %918 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 60
  %919 = load i32, i32* %918, align 8, !tbaa !38
  %920 = icmp sgt i32 %919, -1
  %921 = load i32, i32* @nfiles, align 4
  %922 = icmp sgt i32 %921, %919
  %or.cond.i20 = and i1 %920, %922
  br i1 %or.cond.i20, label %923, label %929

; <label>:923                                     ; preds = %914
  %924 = sext i32 %919 to i64
  %925 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  %926 = getelementptr inbounds i32, i32* %925, i64 %924
  %927 = load i32, i32* %926, align 4, !tbaa !8
  %928 = icmp eq i32 %927, -1
  br i1 %928, label %929, label %930

; <label>:929                                     ; preds = %923, %914
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2.545, i64 0, i64 0), i32 %919) #6
  br label %fdwatch_check_fd.exit23.thread

; <label>:930                                     ; preds = %923
  %931 = load i32*, i32** @poll_fdidx, align 8, !tbaa !4
  %932 = getelementptr inbounds i32, i32* %931, i64 %924
  %933 = load i32, i32* %932, align 4, !tbaa !8
  %934 = icmp sgt i32 %933, -1
  %935 = icmp slt i32 %933, %921
  %or.cond.i.i21 = and i1 %934, %935
  br i1 %or.cond.i.i21, label %937, label %936

; <label>:936                                     ; preds = %930
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7.546, i64 0, i64 0), i32 %933) #6
  br label %fdwatch_check_fd.exit23.thread

; <label>:937                                     ; preds = %930
  %938 = sext i32 %933 to i64
  %939 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8, !tbaa !4
  %940 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %939, i64 %938, i32 2
  %941 = load i16, i16* %940, align 2, !tbaa !37
  %942 = sext i16 %941 to i32
  %943 = and i32 %942, 8
  %944 = icmp eq i32 %943, 0
  br i1 %944, label %945, label %fdwatch_check_fd.exit23.thread

; <label>:945                                     ; preds = %937
  switch i32 %927, label %fdwatch_check_fd.exit23.thread [
    i32 0, label %946
    i32 1, label %948
  ]

; <label>:946                                     ; preds = %945
  %947 = and i32 %942, 49
  br label %fdwatch_check_fd.exit23

; <label>:948                                     ; preds = %945
  %949 = and i32 %942, 52
  br label %fdwatch_check_fd.exit23

fdwatch_check_fd.exit23:                          ; preds = %946, %948
  %.0.i22 = phi i32 [ %949, %948 ], [ %947, %946 ]
  %950 = icmp eq i32 %.0.i22, 0
  br i1 %950, label %fdwatch_check_fd.exit23.thread, label %951

fdwatch_check_fd.exit23.thread:                   ; preds = %945, %937, %936, %929, %fdwatch_check_fd.exit23
  call fastcc void @clear_connection(%struct.connecttab* nonnull %913, %struct.timeval* nonnull %tv)
  br label %handle_read.exit.backedge

; <label>:951                                     ; preds = %fdwatch_check_fd.exit23
  %952 = bitcast i8* %.0.i19 to i32*
  %953 = load i32, i32* %952, align 8, !tbaa !22
  switch i32 %953, label %handle_read.exit.backedge [
    i32 1, label %954
    i32 2, label %1193
    i32 4, label %1359
  ]

; <label>:954                                     ; preds = %951
  %955 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 5
  %956 = load i64, i64* %955, align 8, !tbaa !42
  %957 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 4
  %958 = load i64, i64* %957, align 8, !tbaa !43
  %959 = icmp ult i64 %956, %958
  br i1 %959, label %._crit_edge4.i, label %960

._crit_edge4.i:                                   ; preds = %954
  %.pre5.i = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 3
  br label %969

; <label>:960                                     ; preds = %954
  %961 = icmp ugt i64 %958, 5000
  br i1 %961, label %962, label %966

; <label>:962                                     ; preds = %960
  %963 = load i8*, i8** @httpd_err400title, align 8, !tbaa !4
  %964 = load i8*, i8** @httpd_err400form, align 8, !tbaa !4
  call void @httpd_send_err(%struct.httpd_conn* nonnull %917, i32 400, i8* %963, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %964, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0)) #6
  %965 = load %struct.httpd_conn*, %struct.httpd_conn** %916, align 8, !tbaa !25
  call void @httpd_write_response(%struct.httpd_conn* %965) #6
  call fastcc void @clear_connection(%struct.connecttab* nonnull %913, %struct.timeval* nonnull %tv) #6
  br label %handle_read.exit.backedge

; <label>:966                                     ; preds = %960
  %967 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 3
  %968 = add i64 %958, 1000
  call void @httpd_realloc_str(i8** %967, i64* %957, i64 %968) #6
  %.pre.i = load i64, i64* %955, align 8, !tbaa !42
  %.pre3.i = load i64, i64* %957, align 8, !tbaa !43
  %.pre = load i32, i32* %918, align 8, !tbaa !38
  br label %969

; <label>:969                                     ; preds = %966, %._crit_edge4.i
  %970 = phi i32 [ %919, %._crit_edge4.i ], [ %.pre, %966 ]
  %.pre-phi.i = phi i8** [ %.pre5.i, %._crit_edge4.i ], [ %967, %966 ]
  %971 = phi i64 [ %958, %._crit_edge4.i ], [ %.pre3.i, %966 ]
  %972 = phi i64 [ %956, %._crit_edge4.i ], [ %.pre.i, %966 ]
  %973 = load i8*, i8** %.pre-phi.i, align 8, !tbaa !44
  %974 = getelementptr inbounds i8, i8* %973, i64 %972
  %975 = sub i64 %971, %972
  %976 = call i64 @read(i32 %970, i8* %974, i64 %975) #6
  %977 = trunc i64 %976 to i32
  %978 = icmp eq i32 %977, 0
  br i1 %978, label %979, label %983

; <label>:979                                     ; preds = %969
  %980 = load i8*, i8** @httpd_err400title, align 8, !tbaa !4
  %981 = load i8*, i8** @httpd_err400form, align 8, !tbaa !4
  call void @httpd_send_err(%struct.httpd_conn* nonnull %917, i32 400, i8* %980, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %981, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0)) #6
  %982 = load %struct.httpd_conn*, %struct.httpd_conn** %916, align 8, !tbaa !25
  call void @httpd_write_response(%struct.httpd_conn* %982) #6
  call fastcc void @clear_connection(%struct.connecttab* nonnull %913, %struct.timeval* nonnull %tv) #6
  br label %handle_read.exit.backedge

; <label>:983                                     ; preds = %969
  %984 = icmp slt i32 %977, 0
  br i1 %984, label %985, label %992

; <label>:985                                     ; preds = %983
  %986 = tail call i32* @__errno_location() #21
  %987 = load i32, i32* %986, align 4, !tbaa !8
  switch i32 %987, label %988 [
    i32 4, label %handle_read.exit.backedge
    i32 11, label %handle_read.exit.backedge
  ]

; <label>:988                                     ; preds = %985
  %989 = load i8*, i8** @httpd_err400title, align 8, !tbaa !4
  %990 = load i8*, i8** @httpd_err400form, align 8, !tbaa !4
  call void @httpd_send_err(%struct.httpd_conn* nonnull %917, i32 400, i8* %989, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %990, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0)) #6
  %991 = load %struct.httpd_conn*, %struct.httpd_conn** %916, align 8, !tbaa !25
  call void @httpd_write_response(%struct.httpd_conn* %991) #6
  call fastcc void @clear_connection(%struct.connecttab* nonnull %913, %struct.timeval* nonnull %tv) #6
  br label %handle_read.exit.backedge

; <label>:992                                     ; preds = %983
  %sext.i44 = shl i64 %976, 32
  %993 = ashr exact i64 %sext.i44, 32
  %994 = load i64, i64* %955, align 8, !tbaa !42
  %995 = add i64 %994, %993
  store i64 %995, i64* %955, align 8, !tbaa !42
  %996 = load i64, i64* %709, align 8, !tbaa !45
  %997 = getelementptr inbounds i8, i8* %.0.i19, i64 88
  %998 = bitcast i8* %997 to i64*
  store i64 %996, i64* %998, align 8, !tbaa !46
  %999 = call i32 @httpd_got_request(%struct.httpd_conn* nonnull %917) #6
  switch i32 %999, label %1004 [
    i32 0, label %handle_read.exit.backedge
    i32 2, label %1000
  ]

; <label>:1000                                    ; preds = %992
  %1001 = load i8*, i8** @httpd_err400title, align 8, !tbaa !4
  %1002 = load i8*, i8** @httpd_err400form, align 8, !tbaa !4
  call void @httpd_send_err(%struct.httpd_conn* nonnull %917, i32 400, i8* %1001, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %1002, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0)) #6
  %1003 = load %struct.httpd_conn*, %struct.httpd_conn** %916, align 8, !tbaa !25
  call void @httpd_write_response(%struct.httpd_conn* %1003) #6
  call fastcc void @clear_connection(%struct.connecttab* nonnull %913, %struct.timeval* nonnull %tv) #6
  br label %handle_read.exit.backedge

; <label>:1004                                    ; preds = %992
  %1005 = call i32 @httpd_parse_request(%struct.httpd_conn* nonnull %917) #6
  %1006 = icmp slt i32 %1005, 0
  br i1 %1006, label %1007, label %1009

; <label>:1007                                    ; preds = %1004
  %1008 = load %struct.httpd_conn*, %struct.httpd_conn** %916, align 8, !tbaa !25
  call void @httpd_write_response(%struct.httpd_conn* %1008) #6
  call fastcc void @clear_connection(%struct.connecttab* nonnull %913, %struct.timeval* nonnull %tv) #6
  br label %handle_read.exit.backedge

; <label>:1009                                    ; preds = %1004
  %1010 = getelementptr inbounds i8, i8* %.0.i19, i64 56
  %1011 = bitcast i8* %1010 to i32*
  store i32 0, i32* %1011, align 8, !tbaa !47
  %1012 = getelementptr inbounds i8, i8* %.0.i19, i64 72
  %1013 = bitcast i8* %1012 to i64*
  %1014 = getelementptr inbounds i8, i8* %.0.i19, i64 64
  %1015 = bitcast i8* %1014 to i64*
  call void @llvm.memset.p0i8.i64(i8* %1014, i8 -1, i64 16, i32 8, i1 false) #6
  %1016 = load i32, i32* @numthrottles, align 4, !tbaa !8
  %1017 = icmp sgt i32 %1016, 0
  br i1 %1017, label %.lr.ph.i.preheader.i.preheader, label %.loopexit.i

.lr.ph.i.preheader.i.preheader:                   ; preds = %1009
  br label %.lr.ph.i.preheader.i

.lr.ph.i.preheader.i:                             ; preds = %.lr.ph.i.preheader.i.preheader, %._crit_edge.i.i
  %1018 = phi i32 [ %.pre.i.i, %._crit_edge.i.i ], [ 0, %.lr.ph.i.preheader.i.preheader ]
  %indvars.iv.i2.i = phi i64 [ %indvars.iv.next.i.i, %._crit_edge.i.i ], [ 0, %.lr.ph.i.preheader.i.preheader ]
  %1019 = load %struct.throttletab*, %struct.throttletab** @throttles, align 8, !tbaa !4
  %1020 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1019, i64 %indvars.iv.i2.i, i32 0
  %1021 = load i8*, i8** %1020, align 8, !tbaa !18
  %1022 = load %struct.httpd_conn*, %struct.httpd_conn** %916, align 8, !tbaa !25
  %1023 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %1022, i64 0, i32 16
  %1024 = load i8*, i8** %1023, align 8, !tbaa !48
  %1025 = call i8* @strchr(i8* %1021, i32 124) #6
  %1026 = icmp eq i8* %1025, null
  br i1 %1026, label %match.exit, label %.lr.ph.i25.preheader

.lr.ph.i25.preheader:                             ; preds = %.lr.ph.i.preheader.i
  br label %.lr.ph.i25

; <label>:1027                                    ; preds = %.lr.ph.i25
  %1028 = call i8* @strchr(i8* %1037, i32 124) #6
  %1029 = icmp eq i8* %1028, null
  br i1 %1029, label %match.exit.loopexit, label %.lr.ph.i25

.lr.ph.i25:                                       ; preds = %.lr.ph.i25.preheader, %1027
  %1030 = phi i8* [ %1028, %1027 ], [ %1025, %.lr.ph.i25.preheader ]
  %.013.i = phi i8* [ %1037, %1027 ], [ %1021, %.lr.ph.i25.preheader ]
  %1031 = ptrtoint i8* %1030 to i64
  %1032 = ptrtoint i8* %.013.i to i64
  %1033 = sub i64 %1031, %1032
  %1034 = trunc i64 %1033 to i32
  %1035 = call fastcc i32 @match_one(i8* %.013.i, i32 %1034, i8* %1024) #6
  %1036 = icmp eq i32 %1035, 0
  %1037 = getelementptr inbounds i8, i8* %1030, i64 1
  br i1 %1036, label %1027, label %match.exit.thread.loopexit

match.exit.loopexit:                              ; preds = %1027
  %.lcssa16 = phi i8* [ %1037, %1027 ]
  br label %match.exit

match.exit:                                       ; preds = %match.exit.loopexit, %.lr.ph.i.preheader.i
  %.01.lcssa.i = phi i8* [ %1021, %.lr.ph.i.preheader.i ], [ %.lcssa16, %match.exit.loopexit ]
  %1038 = call i64 @strlen(i8* %.01.lcssa.i) #13
  %1039 = trunc i64 %1038 to i32
  %1040 = call fastcc i32 @match_one(i8* %.01.lcssa.i, i32 %1039, i8* %1024) #6
  %1041 = icmp eq i32 %1040, 0
  br i1 %1041, label %1081, label %match.exit.thread

match.exit.thread.loopexit:                       ; preds = %.lr.ph.i25
  br label %match.exit.thread

match.exit.thread:                                ; preds = %match.exit.thread.loopexit, %match.exit
  %1042 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1019, i64 %indvars.iv.i2.i, i32 3
  %1043 = load i64, i64* %1042, align 8, !tbaa !49
  %1044 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1019, i64 %indvars.iv.i2.i, i32 1
  %1045 = load i64, i64* %1044, align 8, !tbaa !20
  %1046 = shl nsw i64 %1045, 1
  %1047 = icmp sgt i64 %1043, %1046
  br i1 %1047, label %check_throttles.exit.i, label %1048

; <label>:1048                                    ; preds = %match.exit.thread
  %1049 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1019, i64 %indvars.iv.i2.i, i32 2
  %1050 = load i64, i64* %1049, align 8, !tbaa !21
  %1051 = icmp slt i64 %1043, %1050
  br i1 %1051, label %check_throttles.exit.i, label %1052

; <label>:1052                                    ; preds = %1048
  %1053 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1019, i64 %indvars.iv.i2.i, i32 5
  %1054 = load i32, i32* %1053, align 8, !tbaa !50
  %1055 = icmp slt i32 %1054, 0
  br i1 %1055, label %1056, label %1059

; <label>:1056                                    ; preds = %1052
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([56 x i8], [56 x i8]* @.str.126, i64 0, i64 0)) #6
  %1057 = load %struct.throttletab*, %struct.throttletab** @throttles, align 8, !tbaa !4
  %1058 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1057, i64 %indvars.iv.i2.i, i32 5
  store i32 0, i32* %1058, align 8, !tbaa !50
  %.phi.trans.insert.i.i = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1057, i64 %indvars.iv.i2.i, i32 1
  %.pre9.i.i = load i64, i64* %.phi.trans.insert.i.i, align 8, !tbaa !20
  %.phi.trans.insert10.i.i = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1057, i64 %indvars.iv.i2.i, i32 2
  %.pre11.i.i = load i64, i64* %.phi.trans.insert10.i.i, align 8, !tbaa !21
  %.pre43 = load i32, i32* %1011, align 8, !tbaa !47
  br label %1059

; <label>:1059                                    ; preds = %1056, %1052
  %1060 = phi i32 [ %.pre43, %1056 ], [ %1018, %1052 ]
  %1061 = phi i64 [ %.pre11.i.i, %1056 ], [ %1050, %1052 ]
  %1062 = phi i64 [ %.pre9.i.i, %1056 ], [ %1045, %1052 ]
  %1063 = phi %struct.throttletab* [ %1057, %1056 ], [ %1019, %1052 ]
  %1064 = add nsw i32 %1060, 1
  store i32 %1064, i32* %1011, align 8, !tbaa !47
  %1065 = sext i32 %1060 to i64
  %1066 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %913, i64 0, i32 3, i64 %1065
  %1067 = trunc i64 %indvars.iv.i2.i to i32
  store i32 %1067, i32* %1066, align 4, !tbaa !8
  %1068 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1063, i64 %indvars.iv.i2.i, i32 5
  %1069 = load i32, i32* %1068, align 8, !tbaa !50
  %1070 = add nsw i32 %1069, 1
  store i32 %1070, i32* %1068, align 8, !tbaa !50
  %1071 = sext i32 %1070 to i64
  %1072 = sdiv i64 %1062, %1071
  %1073 = load i64, i64* %1015, align 8, !tbaa !51
  %1074 = icmp eq i64 %1073, -1
  %1075 = icmp slt i64 %1073, %1072
  %..i.i = select i1 %1075, i64 %1073, i64 %1072
  %storemerge.i.i = select i1 %1074, i64 %1072, i64 %..i.i
  store i64 %storemerge.i.i, i64* %1015, align 8, !tbaa !51
  %1076 = load i64, i64* %1013, align 8, !tbaa !52
  %1077 = icmp eq i64 %1076, -1
  br i1 %1077, label %1078, label %1079

; <label>:1078                                    ; preds = %1059
  store i64 %1061, i64* %1013, align 8, !tbaa !52
  br label %1081

; <label>:1079                                    ; preds = %1059
  %1080 = icmp sgt i64 %1076, %1061
  %.1.i.i = select i1 %1080, i64 %1076, i64 %1061
  store i64 %.1.i.i, i64* %1013, align 8, !tbaa !52
  br label %1081

; <label>:1081                                    ; preds = %1079, %1078, %match.exit
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i2.i, 1
  %1082 = load i32, i32* @numthrottles, align 4, !tbaa !8
  %1083 = sext i32 %1082 to i64
  %1084 = icmp slt i64 %indvars.iv.next.i.i, %1083
  br i1 %1084, label %._crit_edge.i.i, label %.loopexit.i.loopexit

._crit_edge.i.i:                                  ; preds = %1081
  %.pre.i.i = load i32, i32* %1011, align 8, !tbaa !47
  %1085 = icmp slt i32 %.pre.i.i, 10
  br i1 %1085, label %.lr.ph.i.preheader.i, label %.loopexit.i.loopexit

check_throttles.exit.i:                           ; preds = %1048, %match.exit.thread
  %1086 = load i8*, i8** @httpd_err503title, align 8, !tbaa !4
  %1087 = load i8*, i8** @httpd_err503form, align 8, !tbaa !4
  %1088 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 12
  %1089 = load i8*, i8** %1088, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* %917, i32 503, i8* %1086, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %1087, i8* %1089) #6
  %1090 = load %struct.httpd_conn*, %struct.httpd_conn** %916, align 8, !tbaa !25
  call void @httpd_write_response(%struct.httpd_conn* %1090) #6
  call fastcc void @clear_connection(%struct.connecttab* nonnull %913, %struct.timeval* nonnull %tv) #6
  br label %handle_read.exit.backedge

.loopexit.i.loopexit:                             ; preds = %1081, %._crit_edge.i.i
  br label %.loopexit.i

.loopexit.i:                                      ; preds = %.loopexit.i.loopexit, %1009
  %1091 = call fastcc i32 @really_start_request(%struct.httpd_conn* %917, %struct.timeval* nonnull %tv) #6
  %1092 = icmp slt i32 %1091, 0
  br i1 %1092, label %1093, label %1095

; <label>:1093                                    ; preds = %.loopexit.i
  %1094 = load %struct.httpd_conn*, %struct.httpd_conn** %916, align 8, !tbaa !25
  call void @httpd_write_response(%struct.httpd_conn* %1094) #6
  call fastcc void @clear_connection(%struct.connecttab* nonnull %913, %struct.timeval* nonnull %tv) #6
  br label %handle_read.exit.backedge

; <label>:1095                                    ; preds = %.loopexit.i
  %1096 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 53
  %1097 = load i32, i32* %1096, align 8, !tbaa !54
  %1098 = icmp eq i32 %1097, 0
  br i1 %1098, label %1109, label %1099

; <label>:1099                                    ; preds = %1095
  %1100 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 55
  %1101 = load i64, i64* %1100, align 8, !tbaa !55
  %1102 = getelementptr inbounds i8, i8* %.0.i19, i64 136
  %1103 = bitcast i8* %1102 to i64*
  store i64 %1101, i64* %1103, align 8, !tbaa !56
  %1104 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 56
  %1105 = load i64, i64* %1104, align 8, !tbaa !57
  %1106 = add nsw i64 %1105, 1
  %1107 = getelementptr inbounds i8, i8* %.0.i19, i64 128
  %1108 = bitcast i8* %1107 to i64*
  store i64 %1106, i64* %1108, align 8, !tbaa !58
  br label %1117

; <label>:1109                                    ; preds = %1095
  %1110 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 10
  %1111 = load i64, i64* %1110, align 8, !tbaa !59
  %1112 = icmp slt i64 %1111, 0
  %1113 = getelementptr inbounds i8, i8* %.0.i19, i64 128
  %1114 = bitcast i8* %1113 to i64*
  br i1 %1112, label %1115, label %1116

; <label>:1115                                    ; preds = %1109
  store i64 0, i64* %1114, align 8, !tbaa !58
  br label %1117

; <label>:1116                                    ; preds = %1109
  store i64 %1111, i64* %1114, align 8, !tbaa !58
  br label %1117

; <label>:1117                                    ; preds = %1116, %1115, %1099
  %1118 = phi i64 [ 0, %1115 ], [ %1111, %1116 ], [ %1106, %1099 ]
  %1119 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 61
  %1120 = load i8*, i8** %1119, align 8, !tbaa !60
  %1121 = icmp eq i8* %1120, null
  br i1 %1121, label %.preheader.i45, label %1152

.preheader.i45:                                   ; preds = %1117
  %1122 = load i32, i32* %1011, align 8, !tbaa !47
  %1123 = icmp sgt i32 %1122, 0
  %1124 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 11
  %1125 = load i64, i64* %1124, align 8, !tbaa !61
  br i1 %1123, label %.lr.ph.i46, label %._crit_edge.i49

.lr.ph.i46:                                       ; preds = %.preheader.i45
  %1126 = load %struct.throttletab*, %struct.throttletab** @throttles, align 8
  %1127 = sext i32 %1122 to i64
  %xtraiter80 = and i32 %1122, 1
  %lcmp.mod81 = icmp eq i32 %xtraiter80, 0
  br i1 %lcmp.mod81, label %.lr.ph.i46.split, label %1128

; <label>:1128                                    ; preds = %.lr.ph.i46
  %1129 = getelementptr inbounds i8, i8* %.0.i19, i64 16
  %1130 = bitcast i8* %1129 to i32*
  %1131 = load i32, i32* %1130, align 4, !tbaa !8
  %1132 = sext i32 %1131 to i64
  %1133 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1126, i64 %1132, i32 4
  %1134 = load i64, i64* %1133, align 8, !tbaa !62
  %1135 = add nsw i64 %1134, %1125
  store i64 %1135, i64* %1133, align 8, !tbaa !62
  br label %.lr.ph.i46.split

.lr.ph.i46.split:                                 ; preds = %.lr.ph.i46, %1128
  %indvars.iv.i47.unr = phi i64 [ 0, %.lr.ph.i46 ], [ 1, %1128 ]
  %1136 = icmp eq i32 %1122, 1
  br i1 %1136, label %._crit_edge.i49, label %.lr.ph.i46.split.split.preheader

.lr.ph.i46.split.split.preheader:                 ; preds = %.lr.ph.i46.split
  br label %.lr.ph.i46.split.split

.lr.ph.i46.split.split:                           ; preds = %.lr.ph.i46.split.split.preheader, %.lr.ph.i46.split.split
  %indvars.iv.i47 = phi i64 [ %indvars.iv.next.i48.1, %.lr.ph.i46.split.split ], [ %indvars.iv.i47.unr, %.lr.ph.i46.split.split.preheader ]
  %1137 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %913, i64 0, i32 3, i64 %indvars.iv.i47
  %1138 = load i32, i32* %1137, align 4, !tbaa !8
  %1139 = sext i32 %1138 to i64
  %1140 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1126, i64 %1139, i32 4
  %1141 = load i64, i64* %1140, align 8, !tbaa !62
  %1142 = add nsw i64 %1141, %1125
  store i64 %1142, i64* %1140, align 8, !tbaa !62
  %indvars.iv.next.i48 = add nuw nsw i64 %indvars.iv.i47, 1
  %1143 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %913, i64 0, i32 3, i64 %indvars.iv.next.i48
  %1144 = load i32, i32* %1143, align 4, !tbaa !8
  %1145 = sext i32 %1144 to i64
  %1146 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1126, i64 %1145, i32 4
  %1147 = load i64, i64* %1146, align 8, !tbaa !62
  %1148 = add nsw i64 %1147, %1125
  store i64 %1148, i64* %1146, align 8, !tbaa !62
  %indvars.iv.next.i48.1 = add nuw nsw i64 %indvars.iv.i47, 2
  %exitcond72.1 = icmp eq i64 %indvars.iv.next.i48.1, %1127
  br i1 %exitcond72.1, label %._crit_edge.i49.loopexit, label %.lr.ph.i46.split.split

._crit_edge.i49.loopexit:                         ; preds = %.lr.ph.i46.split.split
  br label %._crit_edge.i49

._crit_edge.i49:                                  ; preds = %._crit_edge.i49.loopexit, %.lr.ph.i46.split, %.preheader.i45
  %1149 = getelementptr inbounds i8, i8* %.0.i19, i64 136
  %1150 = bitcast i8* %1149 to i64*
  store i64 %1125, i64* %1150, align 8, !tbaa !56
  %1151 = load %struct.httpd_conn*, %struct.httpd_conn** %916, align 8, !tbaa !25
  call void @httpd_write_response(%struct.httpd_conn* %1151) #6
  call fastcc void @clear_connection(%struct.connecttab* nonnull %913, %struct.timeval* nonnull %tv) #6
  br label %handle_read.exit.backedge

; <label>:1152                                    ; preds = %1117
  %1153 = getelementptr inbounds i8, i8* %.0.i19, i64 136
  %1154 = bitcast i8* %1153 to i64*
  %1155 = load i64, i64* %1154, align 8, !tbaa !56
  %1156 = icmp slt i64 %1155, %1118
  br i1 %1156, label %1159, label %1157

; <label>:1157                                    ; preds = %1152
  %1158 = load %struct.httpd_conn*, %struct.httpd_conn** %916, align 8, !tbaa !25
  call void @httpd_write_response(%struct.httpd_conn* %1158) #6
  call fastcc void @clear_connection(%struct.connecttab* nonnull %913, %struct.timeval* nonnull %tv) #6
  br label %handle_read.exit.backedge

; <label>:1159                                    ; preds = %1152
  store i32 2, i32* %952, align 8, !tbaa !22
  %1160 = load i64, i64* %709, align 8, !tbaa !45
  %1161 = getelementptr inbounds i8, i8* %.0.i19, i64 80
  %1162 = bitcast i8* %1161 to i64*
  store i64 %1160, i64* %1162, align 8, !tbaa !63
  %1163 = getelementptr inbounds i8, i8* %.0.i19, i64 112
  %1164 = bitcast i8* %1163 to i64*
  store i64 0, i64* %1164, align 8, !tbaa !64
  %1165 = load i32, i32* %918, align 8, !tbaa !38
  call void @fdwatch_del_fd(i32 %1165) #6
  %1166 = load i32, i32* %918, align 8, !tbaa !38
  %1167 = icmp sgt i32 %1166, -1
  %1168 = load i32, i32* @nfiles, align 4
  %1169 = icmp sgt i32 %1168, %1166
  %or.cond.i28 = and i1 %1167, %1169
  br i1 %or.cond.i28, label %1170, label %1176

; <label>:1170                                    ; preds = %1159
  %1171 = sext i32 %1166 to i64
  %1172 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  %1173 = getelementptr inbounds i32, i32* %1172, i64 %1171
  %1174 = load i32, i32* %1173, align 4, !tbaa !8
  %1175 = icmp eq i32 %1174, -1
  br i1 %1175, label %1177, label %1176

; <label>:1176                                    ; preds = %1170, %1159
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.535, i64 0, i64 0), i32 %1166) #6
  br label %handle_read.exit.backedge

; <label>:1177                                    ; preds = %1170
  %1178 = load i32, i32* @npoll_fds, align 4, !tbaa !8
  %1179 = icmp slt i32 %1178, %1168
  br i1 %1179, label %1181, label %1180

; <label>:1180                                    ; preds = %1177
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5.536, i64 0, i64 0)) #6
  %.pre.i29 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  br label %poll_add_fd.exit.i30

; <label>:1181                                    ; preds = %1177
  %1182 = sext i32 %1178 to i64
  %1183 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8, !tbaa !4
  %1184 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %1183, i64 %1182, i32 0
  store i32 %1166, i32* %1184, align 4, !tbaa !28
  %1185 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %1183, i64 %1182, i32 1
  store i16 4, i16* %1185, align 4, !tbaa !30
  %1186 = load i32*, i32** @poll_fdidx, align 8, !tbaa !4
  %1187 = getelementptr inbounds i32, i32* %1186, i64 %1171
  store i32 %1178, i32* %1187, align 4, !tbaa !8
  %1188 = add nsw i32 %1178, 1
  store i32 %1188, i32* @npoll_fds, align 4, !tbaa !8
  br label %poll_add_fd.exit.i30

poll_add_fd.exit.i30:                             ; preds = %1181, %1180
  %1189 = phi i32* [ %.pre.i29, %1180 ], [ %1172, %1181 ]
  %1190 = getelementptr inbounds i32, i32* %1189, i64 %1171
  store i32 1, i32* %1190, align 4, !tbaa !8
  %1191 = load i8**, i8*** @fd_data, align 8, !tbaa !4
  %1192 = getelementptr inbounds i8*, i8** %1191, i64 %1171
  store i8* %.0.i19, i8** %1192, align 8, !tbaa !4
  br label %handle_read.exit.backedge

; <label>:1193                                    ; preds = %951
  %1194 = getelementptr inbounds i8, i8* %.0.i19, i64 64
  %1195 = bitcast i8* %1194 to i64*
  %1196 = load i64, i64* %1195, align 8, !tbaa !51
  %1197 = icmp eq i64 %1196, -1
  %1198 = sdiv i64 %1196, 4
  %max_bytes.0.i = select i1 %1197, i64 1000000000, i64 %1198
  %1199 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 45
  %1200 = load i64, i64* %1199, align 8, !tbaa !65
  %1201 = icmp eq i64 %1200, 0
  br i1 %1201, label %1202, label %1215

; <label>:1202                                    ; preds = %1193
  %1203 = getelementptr inbounds i8, i8* %.0.i19, i64 136
  %1204 = bitcast i8* %1203 to i64*
  %1205 = load i64, i64* %1204, align 8, !tbaa !56
  %1206 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 61
  %1207 = load i8*, i8** %1206, align 8, !tbaa !60
  %1208 = getelementptr inbounds i8, i8* %1207, i64 %1205
  %1209 = getelementptr inbounds i8, i8* %.0.i19, i64 128
  %1210 = bitcast i8* %1209 to i64*
  %1211 = load i64, i64* %1210, align 8, !tbaa !58
  %1212 = sub nsw i64 %1211, %1205
  %1213 = icmp ult i64 %1212, %max_bytes.0.i
  %.max_bytes.0.i = select i1 %1213, i64 %1212, i64 %max_bytes.0.i
  %1214 = call i64 @write(i32 %919, i8* %1208, i64 %.max_bytes.0.i) #6
  br label %1231

; <label>:1215                                    ; preds = %1193
  call void @llvm.lifetime.start(i64 32, i8* %710) #6
  %1216 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 32
  %1217 = bitcast i8** %1216 to i64*
  %1218 = load i64, i64* %1217, align 8, !tbaa !66
  store i64 %1218, i64* %711, align 16, !tbaa !67
  store i64 %1200, i64* %712, align 8, !tbaa !69
  %1219 = getelementptr inbounds i8, i8* %.0.i19, i64 136
  %1220 = bitcast i8* %1219 to i64*
  %1221 = load i64, i64* %1220, align 8, !tbaa !56
  %1222 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 61
  %1223 = load i8*, i8** %1222, align 8, !tbaa !60
  %1224 = getelementptr inbounds i8, i8* %1223, i64 %1221
  store i8* %1224, i8** %713, align 16, !tbaa !67
  %1225 = getelementptr inbounds i8, i8* %.0.i19, i64 128
  %1226 = bitcast i8* %1225 to i64*
  %1227 = load i64, i64* %1226, align 8, !tbaa !58
  %1228 = sub nsw i64 %1227, %1221
  %1229 = icmp ult i64 %1228, %max_bytes.0.i
  %.max_bytes.04.i = select i1 %1229, i64 %1228, i64 %max_bytes.0.i
  store i64 %.max_bytes.04.i, i64* %714, align 8, !tbaa !69
  %1230 = call i64 @writev(i32 %919, %struct.iovec* %715, i32 2) #6
  call void @llvm.lifetime.end(i64 32, i8* %710) #6
  br label %1231

; <label>:1231                                    ; preds = %1215, %1202
  %sz.0.in.i = phi i64 [ %1214, %1202 ], [ %1230, %1215 ]
  %sz.0.i = trunc i64 %sz.0.in.i to i32
  %1232 = icmp slt i32 %sz.0.i, 0
  br i1 %1232, label %1233, label %1236

; <label>:1233                                    ; preds = %1231
  %1234 = tail call i32* @__errno_location() #21
  %1235 = load i32, i32* %1234, align 4, !tbaa !8
  switch i32 %1235, label %1254 [
    i32 4, label %handle_read.exit.backedge
    i32 11, label %1238
    i32 32, label %1257
    i32 22, label %1257
    i32 104, label %1257
  ]

; <label>:1236                                    ; preds = %1231
  %1237 = icmp eq i32 %sz.0.i, 0
  br i1 %1237, label %1238, label %.critedge.i50

; <label>:1238                                    ; preds = %1236, %1233
  %1239 = getelementptr inbounds i8, i8* %.0.i19, i64 112
  %1240 = bitcast i8* %1239 to i64*
  %1241 = load i64, i64* %1240, align 8, !tbaa !64
  %1242 = add nsw i64 %1241, 100
  store i64 %1242, i64* %1240, align 8, !tbaa !64
  store i32 3, i32* %952, align 8, !tbaa !22
  %1243 = load i32, i32* %918, align 8, !tbaa !38
  call void @fdwatch_del_fd(i32 %1243) #6
  %1244 = getelementptr inbounds i8, i8* %.0.i19, i64 96
  %1245 = bitcast i8* %1244 to %struct.TimerStruct**
  %1246 = load %struct.TimerStruct*, %struct.TimerStruct** %1245, align 8, !tbaa !70
  %1247 = icmp eq %struct.TimerStruct* %1246, null
  br i1 %1247, label %1249, label %1248

; <label>:1248                                    ; preds = %1238
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.127, i64 0, i64 0)) #6
  br label %1249

; <label>:1249                                    ; preds = %1248, %1238
  %1250 = load i64, i64* %1240, align 8, !tbaa !64
  %1251 = call %struct.TimerStruct* @tmr_create(%struct.timeval* nonnull %tv, void (i8*, %struct.timeval*)* nonnull @wakeup_connection, i8* nonnull %.0.i19, i64 %1250, i32 0) #6
  store %struct.TimerStruct* %1251, %struct.TimerStruct** %1245, align 8, !tbaa !70
  %1252 = icmp eq %struct.TimerStruct* %1251, null
  br i1 %1252, label %1253, label %handle_read.exit.backedge

; <label>:1253                                    ; preds = %1249
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.128, i64 0, i64 0)) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:1254                                    ; preds = %1233
  %1255 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 12
  %1256 = load i8*, i8** %1255, align 8, !tbaa !53
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.129, i64 0, i64 0), i8* %1256) #6
  br label %1257

; <label>:1257                                    ; preds = %1254, %1233, %1233, %1233
  call fastcc void @clear_connection(%struct.connecttab* nonnull %913, %struct.timeval* nonnull %tv) #6
  br label %handle_read.exit.backedge

.critedge.i50:                                    ; preds = %1236
  %1258 = load i64, i64* %709, align 8, !tbaa !45
  %1259 = getelementptr inbounds i8, i8* %.0.i19, i64 88
  %1260 = bitcast i8* %1259 to i64*
  store i64 %1258, i64* %1260, align 8, !tbaa !46
  %1261 = load i64, i64* %1199, align 8, !tbaa !65
  %1262 = icmp eq i64 %1261, 0
  br i1 %1262, label %1274, label %1263

; <label>:1263                                    ; preds = %.critedge.i50
  %sext2.i = shl i64 %sz.0.in.i, 32
  %1264 = ashr exact i64 %sext2.i, 32
  %1265 = icmp ult i64 %1264, %1261
  br i1 %1265, label %1266, label %1272

; <label>:1266                                    ; preds = %1263
  %1267 = sub i64 %1261, %1264
  %1268 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %917, i64 0, i32 32
  %1269 = load i8*, i8** %1268, align 8, !tbaa !66
  %1270 = getelementptr inbounds i8, i8* %1269, i64 %1264
  %sext3.i = shl i64 %1267, 32
  %1271 = ashr exact i64 %sext3.i, 32
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %1269, i8* %1270, i64 %1271, i32 1, i1 false) #6
  store i64 %1271, i64* %1199, align 8, !tbaa !65
  br label %1274

; <label>:1272                                    ; preds = %1263
  %1273 = sub i64 %1264, %1261
  store i64 0, i64* %1199, align 8, !tbaa !65
  br label %1274

; <label>:1274                                    ; preds = %1272, %1266, %.critedge.i50
  %sz.1.i = phi i64 [ 0, %1266 ], [ %1273, %1272 ], [ %sz.0.in.i, %.critedge.i50 ]
  %sext.i51 = shl i64 %sz.1.i, 32
  %1275 = ashr exact i64 %sext.i51, 32
  %1276 = getelementptr inbounds i8, i8* %.0.i19, i64 136
  %1277 = bitcast i8* %1276 to i64*
  %1278 = load i64, i64* %1277, align 8, !tbaa !56
  %1279 = add nsw i64 %1275, %1278
  store i64 %1279, i64* %1277, align 8, !tbaa !56
  %1280 = load %struct.httpd_conn*, %struct.httpd_conn** %916, align 8, !tbaa !25
  %1281 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %1280, i64 0, i32 11
  %1282 = load i64, i64* %1281, align 8, !tbaa !61
  %1283 = add nsw i64 %1282, %1275
  store i64 %1283, i64* %1281, align 8, !tbaa !61
  %1284 = getelementptr inbounds i8, i8* %.0.i19, i64 56
  %1285 = bitcast i8* %1284 to i32*
  %1286 = load i32, i32* %1285, align 8, !tbaa !47
  %1287 = icmp sgt i32 %1286, 0
  br i1 %1287, label %.lr.ph.i52, label %._crit_edge.i55

.lr.ph.i52:                                       ; preds = %1274
  %1288 = load %struct.throttletab*, %struct.throttletab** @throttles, align 8
  %1289 = sext i32 %1286 to i64
  %xtraiter = and i32 %1286, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph.i52.split, label %1290

; <label>:1290                                    ; preds = %.lr.ph.i52
  %1291 = getelementptr inbounds i8, i8* %.0.i19, i64 16
  %1292 = bitcast i8* %1291 to i32*
  %1293 = load i32, i32* %1292, align 4, !tbaa !8
  %1294 = sext i32 %1293 to i64
  %1295 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1288, i64 %1294, i32 4
  %1296 = load i64, i64* %1295, align 8, !tbaa !62
  %1297 = add nsw i64 %1296, %1275
  store i64 %1297, i64* %1295, align 8, !tbaa !62
  br label %.lr.ph.i52.split

.lr.ph.i52.split:                                 ; preds = %.lr.ph.i52, %1290
  %indvars.iv.i53.unr = phi i64 [ 0, %.lr.ph.i52 ], [ 1, %1290 ]
  %1298 = icmp eq i32 %1286, 1
  br i1 %1298, label %._crit_edge.i55, label %.lr.ph.i52.split.split.preheader

.lr.ph.i52.split.split.preheader:                 ; preds = %.lr.ph.i52.split
  br label %.lr.ph.i52.split.split

.lr.ph.i52.split.split:                           ; preds = %.lr.ph.i52.split.split.preheader, %.lr.ph.i52.split.split
  %indvars.iv.i53 = phi i64 [ %indvars.iv.next.i54.1, %.lr.ph.i52.split.split ], [ %indvars.iv.i53.unr, %.lr.ph.i52.split.split.preheader ]
  %1299 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %913, i64 0, i32 3, i64 %indvars.iv.i53
  %1300 = load i32, i32* %1299, align 4, !tbaa !8
  %1301 = sext i32 %1300 to i64
  %1302 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1288, i64 %1301, i32 4
  %1303 = load i64, i64* %1302, align 8, !tbaa !62
  %1304 = add nsw i64 %1303, %1275
  store i64 %1304, i64* %1302, align 8, !tbaa !62
  %indvars.iv.next.i54 = add nuw nsw i64 %indvars.iv.i53, 1
  %1305 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %913, i64 0, i32 3, i64 %indvars.iv.next.i54
  %1306 = load i32, i32* %1305, align 4, !tbaa !8
  %1307 = sext i32 %1306 to i64
  %1308 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %1288, i64 %1307, i32 4
  %1309 = load i64, i64* %1308, align 8, !tbaa !62
  %1310 = add nsw i64 %1309, %1275
  store i64 %1310, i64* %1308, align 8, !tbaa !62
  %indvars.iv.next.i54.1 = add nuw nsw i64 %indvars.iv.i53, 2
  %exitcond.1 = icmp eq i64 %indvars.iv.next.i54.1, %1289
  br i1 %exitcond.1, label %._crit_edge.i55.loopexit, label %.lr.ph.i52.split.split

._crit_edge.i55.loopexit:                         ; preds = %.lr.ph.i52.split.split
  br label %._crit_edge.i55

._crit_edge.i55:                                  ; preds = %._crit_edge.i55.loopexit, %.lr.ph.i52.split, %1274
  %1311 = getelementptr inbounds i8, i8* %.0.i19, i64 128
  %1312 = bitcast i8* %1311 to i64*
  %1313 = load i64, i64* %1312, align 8, !tbaa !58
  %1314 = icmp slt i64 %1279, %1313
  br i1 %1314, label %1316, label %1315

; <label>:1315                                    ; preds = %._crit_edge.i55
  call void @httpd_write_response(%struct.httpd_conn* %1280) #6
  call fastcc void @clear_connection(%struct.connecttab* nonnull %913, %struct.timeval* nonnull %tv) #6
  br label %handle_read.exit.backedge

; <label>:1316                                    ; preds = %._crit_edge.i55
  %1317 = getelementptr inbounds i8, i8* %.0.i19, i64 112
  %1318 = bitcast i8* %1317 to i64*
  %1319 = load i64, i64* %1318, align 8, !tbaa !64
  %1320 = icmp sgt i64 %1319, 100
  br i1 %1320, label %1321, label %1323

; <label>:1321                                    ; preds = %1316
  %1322 = add nsw i64 %1319, -100
  store i64 %1322, i64* %1318, align 8, !tbaa !64
  br label %1323

; <label>:1323                                    ; preds = %1321, %1316
  %1324 = load i64, i64* %1195, align 8, !tbaa !51
  %1325 = icmp eq i64 %1324, -1
  br i1 %1325, label %handle_read.exit.backedge, label %1326

; <label>:1326                                    ; preds = %1323
  %1327 = load i64, i64* %709, align 8, !tbaa !45
  %1328 = getelementptr inbounds i8, i8* %.0.i19, i64 80
  %1329 = bitcast i8* %1328 to i64*
  %1330 = load i64, i64* %1329, align 8, !tbaa !63
  %1331 = sub nsw i64 %1327, %1330
  %1332 = icmp eq i64 %1327, %1330
  %..i = select i1 %1332, i64 1, i64 %1331
  %1333 = sdiv i64 %1283, %..i
  %1334 = icmp sgt i64 %1333, %1324
  br i1 %1334, label %1335, label %handle_read.exit.backedge

; <label>:1335                                    ; preds = %1326
  store i32 3, i32* %952, align 8, !tbaa !22
  %1336 = load i32, i32* %918, align 8, !tbaa !38
  call void @fdwatch_del_fd(i32 %1336) #6
  %1337 = load %struct.httpd_conn*, %struct.httpd_conn** %916, align 8, !tbaa !25
  %1338 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %1337, i64 0, i32 11
  %1339 = load i64, i64* %1338, align 8, !tbaa !61
  %1340 = load i64, i64* %1195, align 8, !tbaa !51
  %1341 = sdiv i64 %1339, %1340
  %1342 = sub nsw i64 %1341, %..i
  %1343 = trunc i64 %1342 to i32
  %1344 = getelementptr inbounds i8, i8* %.0.i19, i64 96
  %1345 = bitcast i8* %1344 to %struct.TimerStruct**
  %1346 = load %struct.TimerStruct*, %struct.TimerStruct** %1345, align 8, !tbaa !70
  %1347 = icmp eq %struct.TimerStruct* %1346, null
  br i1 %1347, label %1349, label %1348

; <label>:1348                                    ; preds = %1335
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.127, i64 0, i64 0)) #6
  br label %1349

; <label>:1349                                    ; preds = %1348, %1335
  %1350 = icmp sgt i32 %1343, 0
  br i1 %1350, label %1351, label %1354

; <label>:1351                                    ; preds = %1349
  %sext1.i = shl i64 %1342, 32
  %1352 = ashr exact i64 %sext1.i, 32
  %1353 = mul nsw i64 %1352, 1000
  br label %1354

; <label>:1354                                    ; preds = %1351, %1349
  %1355 = phi i64 [ %1353, %1351 ], [ 500, %1349 ]
  %1356 = call %struct.TimerStruct* @tmr_create(%struct.timeval* nonnull %tv, void (i8*, %struct.timeval*)* nonnull @wakeup_connection, i8* nonnull %.0.i19, i64 %1355, i32 0) #6
  store %struct.TimerStruct* %1356, %struct.TimerStruct** %1345, align 8, !tbaa !70
  %1357 = icmp eq %struct.TimerStruct* %1356, null
  br i1 %1357, label %1358, label %handle_read.exit.backedge

; <label>:1358                                    ; preds = %1354
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.128, i64 0, i64 0)) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:1359                                    ; preds = %951
  call void @llvm.lifetime.start(i64 4096, i8* %716) #6
  %1360 = call i64 @read(i32 %919, i8* %716, i64 4096) #6
  %1361 = trunc i64 %1360 to i32
  %1362 = icmp slt i32 %1361, 0
  br i1 %1362, label %1363, label %1366

; <label>:1363                                    ; preds = %1359
  %1364 = tail call i32* @__errno_location() #21
  %1365 = load i32, i32* %1364, align 4, !tbaa !8
  switch i32 %1365, label %.thread.i57 [
    i32 4, label %handle_linger.exit
    i32 11, label %handle_linger.exit
  ]

; <label>:1366                                    ; preds = %1359
  %1367 = icmp slt i32 %1361, 1
  br i1 %1367, label %.thread.i57, label %handle_linger.exit

.thread.i57:                                      ; preds = %1366, %1363
  call fastcc void @really_clear_connection(%struct.connecttab* nonnull %913, %struct.timeval* nonnull %tv) #6
  br label %handle_linger.exit

handle_linger.exit:                               ; preds = %1363, %1363, %1366, %.thread.i57
  call void @llvm.lifetime.end(i64 4096, i8* %716) #6
  br label %handle_read.exit.backedge

handle_read.exit.backedge:                        ; preds = %handle_linger.exit, %951, %fdwatch_check_fd.exit23.thread, %fdwatch_get_next_client_data.exit, %962, %979, %985, %985, %988, %992, %1000, %1007, %check_throttles.exit.i, %1093, %._crit_edge.i49, %1157, %1233, %1249, %1257, %1315, %1323, %1326, %1354, %1176, %poll_add_fd.exit.i30
  br label %handle_read.exit

; <label>:1368                                    ; preds = %fdwatch_get_next_client_data.exit
  call void @tmr_run(%struct.timeval* nonnull %tv) #6
  %1369 = load volatile i32, i32* @got_usr1, align 4, !tbaa !8
  %1370 = icmp eq i32 %1369, 0
  %1371 = load i32, i32* @terminate, align 4
  %1372 = icmp ne i32 %1371, 0
  %or.cond29 = or i1 %1370, %1372
  br i1 %or.cond29, label %.backedge, label %1373

; <label>:1373                                    ; preds = %1368
  store i32 1, i32* @terminate, align 4, !tbaa !8
  %1374 = load %struct.httpd_server*, %struct.httpd_server** @hs, align 8, !tbaa !4
  %1375 = icmp eq %struct.httpd_server* %1374, null
  br i1 %1375, label %.backedge, label %1376

; <label>:1376                                    ; preds = %1373
  %1377 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %1374, i64 0, i32 10
  %1378 = load i32, i32* %1377, align 8, !tbaa !26
  %1379 = icmp eq i32 %1378, -1
  br i1 %1379, label %1381, label %1380

; <label>:1380                                    ; preds = %1376
  call void @fdwatch_del_fd(i32 %1378) #6
  %.pre74 = load %struct.httpd_server*, %struct.httpd_server** @hs, align 8, !tbaa !4
  br label %1381

; <label>:1381                                    ; preds = %1376, %1380
  %1382 = phi %struct.httpd_server* [ %1374, %1376 ], [ %.pre74, %1380 ]
  %1383 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %1382, i64 0, i32 11
  %1384 = load i32, i32* %1383, align 4, !tbaa !31
  %1385 = icmp eq i32 %1384, -1
  br i1 %1385, label %1387, label %1386

; <label>:1386                                    ; preds = %1381
  call void @fdwatch_del_fd(i32 %1384) #6
  %.pre75 = load %struct.httpd_server*, %struct.httpd_server** @hs, align 8, !tbaa !4
  br label %1387

; <label>:1387                                    ; preds = %1381, %1386
  %1388 = phi %struct.httpd_server* [ %1382, %1381 ], [ %.pre75, %1386 ]
  %1389 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %1388, i64 0, i32 10
  %1390 = bitcast i32* %1389 to i64*
  %1391 = load i64, i64* %1390, align 8
  %1392 = trunc i64 %1391 to i32
  %1393 = icmp eq i32 %1392, -1
  br i1 %1393, label %._crit_edge.i32, label %1396

._crit_edge.i32:                                  ; preds = %1387
  %1394 = lshr i64 %1391, 32
  %1395 = trunc i64 %1394 to i32
  %.pre1.i = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %1388, i64 0, i32 11
  br label %1398

; <label>:1396                                    ; preds = %1387
  %1397 = call i32 @close(i32 %1392) #6
  store i32 -1, i32* %1389, align 8, !tbaa !26
  %.phi.trans.insert.i = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %1388, i64 0, i32 11
  %.pre.i33 = load i32, i32* %.phi.trans.insert.i, align 4, !tbaa !31
  br label %1398

; <label>:1398                                    ; preds = %1396, %._crit_edge.i32
  %.pre-phi.i34 = phi i32* [ %.pre1.i, %._crit_edge.i32 ], [ %.phi.trans.insert.i, %1396 ]
  %1399 = phi i32 [ %1395, %._crit_edge.i32 ], [ %.pre.i33, %1396 ]
  %1400 = icmp eq i32 %1399, -1
  br i1 %1400, label %.backedge, label %1401

; <label>:1401                                    ; preds = %1398
  %1402 = call i32 @close(i32 %1399) #6
  store i32 -1, i32* %.pre-phi.i34, align 4, !tbaa !31
  br label %.backedge

._crit_edge.loopexit:                             ; preds = %.backedge
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %fdwatch_add_fd.exit7
  call fastcc void @shut_down()
  call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.40, i64 0, i64 0)) #6
  call void @closelog() #6
  call void @exit(i32 0) #18
  unreachable
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #3

; Function Attrs: nounwind readonly
declare i8* @strrchr(i8*, i32) #0

declare void @openlog(i8*, i32, i32) #5

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) #6

; Function Attrs: noreturn nounwind
declare void @exit(i32) #7

; Function Attrs: noinline nounwind uwtable
define internal fastcc void @read_config() unnamed_addr #1 {
.us-lcssa.us.i7:
  %0 = tail call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.75, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.84.115, i64 0, i64 0))
  %1 = getelementptr [3 x i8], [3 x i8]* @4, i64 0, i64 0
  %2 = getelementptr [5 x i8], [5 x i8]* @5, i64 0, i64 0
  %3 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.80, i64 0, i64 0), i8* %2, i8* %1)
  %4 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.81, i64 0, i64 0), i64 5) #13
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %.us-lcssa.us.i7
  %7 = icmp eq i8* %1, null
  br i1 %7, label %no_value_required.exit, label %8

; <label>:8                                       ; preds = %715, %552, %6
  %.lcssa254 = phi i8* [ %2, %6 ], [ %392, %552 ], [ %555, %715 ]
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %10 = load i8*, i8** @argv0, align 8, !tbaa !4
  %11 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.107, i64 0, i64 0), i8* %10, i8* %.lcssa254) #19
  tail call void @exit(i32 1) #18
  unreachable

no_value_required.exit:                           ; preds = %6
  store i1 true, i1* @debug, align 1
  br label %.us-lcssa.us.i1291

; <label>:12                                      ; preds = %.us-lcssa.us.i7
  %13 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.82, i64 0, i64 0), i64 4) #13
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %26

; <label>:15                                      ; preds = %12
  %16 = icmp eq i8* %1, null
  br i1 %16, label %17, label %value_required.exit

; <label>:17                                      ; preds = %316, %708, %545, %15
  %.lcssa253 = phi i8* [ %2, %15 ], [ %392, %545 ], [ %555, %708 ], [ %312, %316 ]
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %19 = load i8*, i8** @argv0, align 8, !tbaa !4
  %20 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %19, i8* %.lcssa253) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit:                              ; preds = %15
  %21 = tail call i64 @strtol(i8* nocapture nonnull %1, i8** null, i32 10) #6
  %22 = trunc i64 %21 to i32
  %23 = trunc i64 %21 to i16
  store i16 %23, i16* @port, align 2, !tbaa !6
  %24 = and i32 %22, 65535
  %25 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.83, i64 0, i64 0), i32 %24)
  br label %.us-lcssa.us.i1291

; <label>:26                                      ; preds = %12
  %27 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.153, i64 0, i64 0), i64 3) #13
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %41

; <label>:29                                      ; preds = %26
  %30 = icmp eq i8* %1, null
  br i1 %30, label %31, label %value_required.exit1

; <label>:31                                      ; preds = %319, %704, %541, %29
  %.lcssa251 = phi i8* [ %2, %29 ], [ %392, %541 ], [ %555, %704 ], [ %312, %319 ]
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %33 = load i8*, i8** @argv0, align 8, !tbaa !4
  %34 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %33, i8* %.lcssa251) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit1:                             ; preds = %29
  %35 = tail call noalias i8* @__strdup(i8* nonnull %1) #6
  %36 = icmp eq i8* %35, null
  br i1 %36, label %37, label %e_strdup.exit

; <label>:37                                      ; preds = %value_required.exit1.3, %value_required.exit1.2, %value_required.exit1
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.109, i64 0, i64 0)) #6
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %39 = load i8*, i8** @argv0, align 8, !tbaa !4
  %40 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.110, i64 0, i64 0), i8* %39) #19
  tail call void @exit(i32 1) #18
  unreachable

e_strdup.exit:                                    ; preds = %value_required.exit1
  store i8* %35, i8** @dir, align 8, !tbaa !4
  br label %.us-lcssa.us.i1291

; <label>:41                                      ; preds = %26
  %42 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0), i64 6) #13
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %50

; <label>:44                                      ; preds = %41
  %45 = icmp eq i8* %1, null
  br i1 %45, label %no_value_required.exit2, label %46

; <label>:46                                      ; preds = %702, %539, %44
  %.lcssa250 = phi i8* [ %2, %44 ], [ %392, %539 ], [ %555, %702 ]
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %48 = load i8*, i8** @argv0, align 8, !tbaa !4
  %49 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.107, i64 0, i64 0), i8* %48, i8* %.lcssa250) #19
  tail call void @exit(i32 1) #18
  unreachable

no_value_required.exit2:                          ; preds = %44
  store i1 true, i1* @do_chroot, align 1
  store i1 true, i1* @no_symlink_check, align 1
  br label %.us-lcssa.us.i1291

; <label>:50                                      ; preds = %41
  %51 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.85, i64 0, i64 0), i64 8) #13
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %59

; <label>:53                                      ; preds = %50
  %54 = icmp eq i8* %1, null
  br i1 %54, label %no_value_required.exit3, label %55

; <label>:55                                      ; preds = %700, %537, %53
  %.lcssa249 = phi i8* [ %2, %53 ], [ %392, %537 ], [ %555, %700 ]
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %57 = load i8*, i8** @argv0, align 8, !tbaa !4
  %58 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.107, i64 0, i64 0), i8* %57, i8* %.lcssa249) #19
  tail call void @exit(i32 1) #18
  unreachable

no_value_required.exit3:                          ; preds = %53
  store i1 false, i1* @do_chroot, align 1
  store i1 false, i1* @no_symlink_check, align 1
  br label %.us-lcssa.us.i1291

; <label>:59                                      ; preds = %50
  %60 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.86, i64 0, i64 0), i64 8) #13
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %74

; <label>:62                                      ; preds = %59
  %63 = icmp eq i8* %1, null
  br i1 %63, label %64, label %value_required.exit4

; <label>:64                                      ; preds = %328, %696, %533, %62
  %.lcssa247 = phi i8* [ %2, %62 ], [ %392, %533 ], [ %555, %696 ], [ %312, %328 ]
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %66 = load i8*, i8** @argv0, align 8, !tbaa !4
  %67 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %65, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %66, i8* %.lcssa247) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit4:                             ; preds = %62
  %68 = tail call noalias i8* @__strdup(i8* nonnull %1) #6
  %69 = icmp eq i8* %68, null
  br i1 %69, label %70, label %e_strdup.exit5

; <label>:70                                      ; preds = %value_required.exit4.3, %value_required.exit4.2, %value_required.exit4
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.109, i64 0, i64 0)) #6
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %72 = load i8*, i8** @argv0, align 8, !tbaa !4
  %73 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.110, i64 0, i64 0), i8* %72) #19
  tail call void @exit(i32 1) #18
  unreachable

e_strdup.exit5:                                   ; preds = %value_required.exit4
  store i8* %68, i8** @data_dir, align 8, !tbaa !4
  br label %.us-lcssa.us.i1291

; <label>:74                                      ; preds = %59
  %75 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.87, i64 0, i64 0), i64 14) #13
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %83

; <label>:77                                      ; preds = %74
  %78 = icmp eq i8* %1, null
  br i1 %78, label %no_value_required.exit6, label %79

; <label>:79                                      ; preds = %694, %531, %77
  %.lcssa246 = phi i8* [ %2, %77 ], [ %392, %531 ], [ %555, %694 ]
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %81 = load i8*, i8** @argv0, align 8, !tbaa !4
  %82 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %80, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.107, i64 0, i64 0), i8* %81, i8* %.lcssa246) #19
  tail call void @exit(i32 1) #18
  unreachable

no_value_required.exit6:                          ; preds = %77
  store i1 true, i1* @no_symlink_check, align 1
  br label %.us-lcssa.us.i1291

; <label>:83                                      ; preds = %74
  %84 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.88, i64 0, i64 0), i64 12) #13
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %92

; <label>:86                                      ; preds = %83
  %87 = icmp eq i8* %1, null
  br i1 %87, label %no_value_required.exit7, label %88

; <label>:88                                      ; preds = %692, %529, %86
  %.lcssa245 = phi i8* [ %2, %86 ], [ %392, %529 ], [ %555, %692 ]
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %90 = load i8*, i8** @argv0, align 8, !tbaa !4
  %91 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %89, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.107, i64 0, i64 0), i8* %90, i8* %.lcssa245) #19
  tail call void @exit(i32 1) #18
  unreachable

no_value_required.exit7:                          ; preds = %86
  store i1 false, i1* @no_symlink_check, align 1
  br label %.us-lcssa.us.i1291

; <label>:92                                      ; preds = %83
  %93 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.89, i64 0, i64 0), i64 4) #13
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %107

; <label>:95                                      ; preds = %92
  %96 = icmp eq i8* %1, null
  br i1 %96, label %97, label %value_required.exit8

; <label>:97                                      ; preds = %337, %688, %525, %95
  %.lcssa243 = phi i8* [ %2, %95 ], [ %392, %525 ], [ %555, %688 ], [ %312, %337 ]
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %99 = load i8*, i8** @argv0, align 8, !tbaa !4
  %100 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %98, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %99, i8* %.lcssa243) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit8:                             ; preds = %95
  %101 = tail call noalias i8* @__strdup(i8* nonnull %1) #6
  %102 = icmp eq i8* %101, null
  br i1 %102, label %103, label %e_strdup.exit9

; <label>:103                                     ; preds = %value_required.exit8.3, %value_required.exit8.2, %value_required.exit8
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.109, i64 0, i64 0)) #6
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %105 = load i8*, i8** @argv0, align 8, !tbaa !4
  %106 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %104, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.110, i64 0, i64 0), i8* %105) #19
  tail call void @exit(i32 1) #18
  unreachable

e_strdup.exit9:                                   ; preds = %value_required.exit8
  store i8* %101, i8** @user, align 8, !tbaa !4
  br label %.us-lcssa.us.i1291

; <label>:107                                     ; preds = %92
  %108 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.90, i64 0, i64 0), i64 6) #13
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %122

; <label>:110                                     ; preds = %107
  %111 = icmp eq i8* %1, null
  br i1 %111, label %112, label %value_required.exit10

; <label>:112                                     ; preds = %340, %684, %521, %110
  %.lcssa241 = phi i8* [ %2, %110 ], [ %392, %521 ], [ %555, %684 ], [ %312, %340 ]
  %113 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %114 = load i8*, i8** @argv0, align 8, !tbaa !4
  %115 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %113, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %114, i8* %.lcssa241) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit10:                            ; preds = %110
  %116 = tail call noalias i8* @__strdup(i8* nonnull %1) #6
  %117 = icmp eq i8* %116, null
  br i1 %117, label %118, label %e_strdup.exit11

; <label>:118                                     ; preds = %value_required.exit10.3, %value_required.exit10.2, %value_required.exit10
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.109, i64 0, i64 0)) #6
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %120 = load i8*, i8** @argv0, align 8, !tbaa !4
  %121 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %119, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.110, i64 0, i64 0), i8* %120) #19
  tail call void @exit(i32 1) #18
  unreachable

e_strdup.exit11:                                  ; preds = %value_required.exit10
  store i8* %116, i8** @cgi_pattern, align 8, !tbaa !4
  br label %.us-lcssa.us.i1291

; <label>:122                                     ; preds = %107
  %123 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.91, i64 0, i64 0), i64 8) #13
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %133

; <label>:125                                     ; preds = %122
  %126 = icmp eq i8* %1, null
  br i1 %126, label %127, label %value_required.exit12

; <label>:127                                     ; preds = %343, %680, %517, %125
  %.lcssa240 = phi i8* [ %2, %125 ], [ %392, %517 ], [ %555, %680 ], [ %312, %343 ]
  %128 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %129 = load i8*, i8** @argv0, align 8, !tbaa !4
  %130 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %128, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %129, i8* %.lcssa240) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit12:                            ; preds = %125
  %131 = tail call i64 @strtol(i8* nocapture nonnull %1, i8** null, i32 10) #6
  %132 = trunc i64 %131 to i32
  store i32 %132, i32* @cgi_limit, align 4, !tbaa !8
  br label %.us-lcssa.us.i1291

; <label>:133                                     ; preds = %122
  %134 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.92, i64 0, i64 0), i64 6) #13
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %148

; <label>:136                                     ; preds = %133
  %137 = icmp eq i8* %1, null
  br i1 %137, label %138, label %value_required.exit13

; <label>:138                                     ; preds = %346, %676, %513, %136
  %.lcssa238 = phi i8* [ %2, %136 ], [ %392, %513 ], [ %555, %676 ], [ %312, %346 ]
  %139 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %140 = load i8*, i8** @argv0, align 8, !tbaa !4
  %141 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %139, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %140, i8* %.lcssa238) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit13:                            ; preds = %136
  %142 = tail call noalias i8* @__strdup(i8* nonnull %1) #6
  %143 = icmp eq i8* %142, null
  br i1 %143, label %144, label %e_strdup.exit14

; <label>:144                                     ; preds = %value_required.exit13.3, %value_required.exit13.2, %value_required.exit13
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.109, i64 0, i64 0)) #6
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %146 = load i8*, i8** @argv0, align 8, !tbaa !4
  %147 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %145, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.110, i64 0, i64 0), i8* %146) #19
  tail call void @exit(i32 1) #18
  unreachable

e_strdup.exit14:                                  ; preds = %value_required.exit13
  store i8* %142, i8** @url_pattern, align 8, !tbaa !4
  br label %.us-lcssa.us.i1291

; <label>:148                                     ; preds = %133
  %149 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.93, i64 0, i64 0), i64 15) #13
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %154, label %151

; <label>:151                                     ; preds = %148
  %152 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.94, i64 0, i64 0), i64 16) #13
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %160

; <label>:154                                     ; preds = %151, %148
  %155 = icmp eq i8* %1, null
  br i1 %155, label %no_value_required.exit15, label %156

; <label>:156                                     ; preds = %674, %511, %154
  %.lcssa237 = phi i8* [ %2, %154 ], [ %392, %511 ], [ %555, %674 ]
  %157 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %158 = load i8*, i8** @argv0, align 8, !tbaa !4
  %159 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %157, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.107, i64 0, i64 0), i8* %158, i8* %.lcssa237) #19
  tail call void @exit(i32 1) #18
  unreachable

no_value_required.exit15:                         ; preds = %154
  store i1 true, i1* @no_empty_referrers, align 1
  br label %.us-lcssa.us.i1291

; <label>:160                                     ; preds = %151
  %161 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.95, i64 0, i64 0), i64 8) #13
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %175

; <label>:163                                     ; preds = %160
  %164 = icmp eq i8* %1, null
  br i1 %164, label %165, label %value_required.exit16

; <label>:165                                     ; preds = %355, %670, %507, %163
  %.lcssa235 = phi i8* [ %2, %163 ], [ %392, %507 ], [ %555, %670 ], [ %312, %355 ]
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %167 = load i8*, i8** @argv0, align 8, !tbaa !4
  %168 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %166, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %167, i8* %.lcssa235) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit16:                            ; preds = %163
  %169 = tail call noalias i8* @__strdup(i8* nonnull %1) #6
  %170 = icmp eq i8* %169, null
  br i1 %170, label %171, label %e_strdup.exit17

; <label>:171                                     ; preds = %value_required.exit16.3, %value_required.exit16.2, %value_required.exit16
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.109, i64 0, i64 0)) #6
  %172 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %173 = load i8*, i8** @argv0, align 8, !tbaa !4
  %174 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %172, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.110, i64 0, i64 0), i8* %173) #19
  tail call void @exit(i32 1) #18
  unreachable

e_strdup.exit17:                                  ; preds = %value_required.exit16
  store i8* %169, i8** @local_pattern, align 8, !tbaa !4
  br label %.us-lcssa.us.i1291

; <label>:175                                     ; preds = %160
  %176 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.96, i64 0, i64 0), i64 9) #13
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %178, label %190

; <label>:178                                     ; preds = %175
  %179 = icmp eq i8* %1, null
  br i1 %179, label %180, label %value_required.exit18

; <label>:180                                     ; preds = %358, %666, %503, %178
  %.lcssa233 = phi i8* [ %2, %178 ], [ %392, %503 ], [ %555, %666 ], [ %312, %358 ]
  %181 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %182 = load i8*, i8** @argv0, align 8, !tbaa !4
  %183 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %181, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %182, i8* %.lcssa233) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit18:                            ; preds = %178
  %184 = tail call noalias i8* @__strdup(i8* nonnull %1) #6
  %185 = icmp eq i8* %184, null
  br i1 %185, label %186, label %e_strdup.exit19

; <label>:186                                     ; preds = %value_required.exit18.3, %value_required.exit18.2, %value_required.exit18
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.109, i64 0, i64 0)) #6
  %187 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %188 = load i8*, i8** @argv0, align 8, !tbaa !4
  %189 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %187, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.110, i64 0, i64 0), i8* %188) #19
  tail call void @exit(i32 1) #18
  unreachable

e_strdup.exit19:                                  ; preds = %value_required.exit18
  store i8* %184, i8** @throttlefile, align 8, !tbaa !4
  br label %.us-lcssa.us.i1291

; <label>:190                                     ; preds = %175
  %191 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.97, i64 0, i64 0), i64 4) #13
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %205

; <label>:193                                     ; preds = %190
  %194 = icmp eq i8* %1, null
  br i1 %194, label %195, label %value_required.exit20

; <label>:195                                     ; preds = %361, %662, %499, %193
  %.lcssa231 = phi i8* [ %2, %193 ], [ %392, %499 ], [ %555, %662 ], [ %312, %361 ]
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %197 = load i8*, i8** @argv0, align 8, !tbaa !4
  %198 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %196, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %197, i8* %.lcssa231) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit20:                            ; preds = %193
  %199 = tail call noalias i8* @__strdup(i8* nonnull %1) #6
  %200 = icmp eq i8* %199, null
  br i1 %200, label %201, label %e_strdup.exit21

; <label>:201                                     ; preds = %value_required.exit20.3, %value_required.exit20.2, %value_required.exit20
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.109, i64 0, i64 0)) #6
  %202 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %203 = load i8*, i8** @argv0, align 8, !tbaa !4
  %204 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %202, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.110, i64 0, i64 0), i8* %203) #19
  tail call void @exit(i32 1) #18
  unreachable

e_strdup.exit21:                                  ; preds = %value_required.exit20
  store i8* %199, i8** @hostname, align 8, !tbaa !4
  br label %.us-lcssa.us.i1291

; <label>:205                                     ; preds = %190
  %206 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.98, i64 0, i64 0), i64 7) #13
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %208, label %220

; <label>:208                                     ; preds = %205
  %209 = icmp eq i8* %1, null
  br i1 %209, label %210, label %value_required.exit22

; <label>:210                                     ; preds = %364, %658, %495, %208
  %.lcssa229 = phi i8* [ %2, %208 ], [ %392, %495 ], [ %555, %658 ], [ %312, %364 ]
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %212 = load i8*, i8** @argv0, align 8, !tbaa !4
  %213 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %211, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %212, i8* %.lcssa229) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit22:                            ; preds = %208
  %214 = tail call noalias i8* @__strdup(i8* nonnull %1) #6
  %215 = icmp eq i8* %214, null
  br i1 %215, label %216, label %e_strdup.exit23

; <label>:216                                     ; preds = %value_required.exit22.3, %value_required.exit22.2, %value_required.exit22
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.109, i64 0, i64 0)) #6
  %217 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %218 = load i8*, i8** @argv0, align 8, !tbaa !4
  %219 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %217, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.110, i64 0, i64 0), i8* %218) #19
  tail call void @exit(i32 1) #18
  unreachable

e_strdup.exit23:                                  ; preds = %value_required.exit22
  store i8* %214, i8** @logfile, align 8, !tbaa !4
  br label %.us-lcssa.us.i1291

; <label>:220                                     ; preds = %205
  %221 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.99, i64 0, i64 0), i64 5) #13
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %223, label %229

; <label>:223                                     ; preds = %220
  %224 = icmp eq i8* %1, null
  br i1 %224, label %no_value_required.exit24, label %225

; <label>:225                                     ; preds = %656, %493, %223
  %.lcssa228 = phi i8* [ %2, %223 ], [ %392, %493 ], [ %555, %656 ]
  %226 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %227 = load i8*, i8** @argv0, align 8, !tbaa !4
  %228 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %226, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.107, i64 0, i64 0), i8* %227, i8* %.lcssa228) #19
  tail call void @exit(i32 1) #18
  unreachable

no_value_required.exit24:                         ; preds = %223
  store i1 true, i1* @do_vhost, align 1
  br label %.us-lcssa.us.i1291

; <label>:229                                     ; preds = %220
  %230 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i64 0, i64 0), i64 7) #13
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %232, label %238

; <label>:232                                     ; preds = %229
  %233 = icmp eq i8* %1, null
  br i1 %233, label %no_value_required.exit25, label %234

; <label>:234                                     ; preds = %654, %491, %232
  %.lcssa227 = phi i8* [ %2, %232 ], [ %392, %491 ], [ %555, %654 ]
  %235 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %236 = load i8*, i8** @argv0, align 8, !tbaa !4
  %237 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %235, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.107, i64 0, i64 0), i8* %236, i8* %.lcssa227) #19
  tail call void @exit(i32 1) #18
  unreachable

no_value_required.exit25:                         ; preds = %232
  store i1 false, i1* @do_vhost, align 1
  br label %.us-lcssa.us.i1291

; <label>:238                                     ; preds = %229
  %239 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.101, i64 0, i64 0), i64 12) #13
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %241, label %247

; <label>:241                                     ; preds = %238
  %242 = icmp eq i8* %1, null
  br i1 %242, label %no_value_required.exit26, label %243

; <label>:243                                     ; preds = %652, %489, %241
  %.lcssa226 = phi i8* [ %2, %241 ], [ %392, %489 ], [ %555, %652 ]
  %244 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %245 = load i8*, i8** @argv0, align 8, !tbaa !4
  %246 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %244, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.107, i64 0, i64 0), i8* %245, i8* %.lcssa226) #19
  tail call void @exit(i32 1) #18
  unreachable

no_value_required.exit26:                         ; preds = %241
  store i1 true, i1* @do_global_passwd, align 1
  br label %.us-lcssa.us.i1291

; <label>:247                                     ; preds = %238
  %248 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.102, i64 0, i64 0), i64 14) #13
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %250, label %256

; <label>:250                                     ; preds = %247
  %251 = icmp eq i8* %1, null
  br i1 %251, label %no_value_required.exit27, label %252

; <label>:252                                     ; preds = %650, %487, %250
  %.lcssa225 = phi i8* [ %2, %250 ], [ %392, %487 ], [ %555, %650 ]
  %253 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %254 = load i8*, i8** @argv0, align 8, !tbaa !4
  %255 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %253, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.107, i64 0, i64 0), i8* %254, i8* %.lcssa225) #19
  tail call void @exit(i32 1) #18
  unreachable

no_value_required.exit27:                         ; preds = %250
  store i1 false, i1* @do_global_passwd, align 1
  br label %.us-lcssa.us.i1291

; <label>:256                                     ; preds = %247
  %257 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.103, i64 0, i64 0), i64 7) #13
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %259, label %271

; <label>:259                                     ; preds = %256
  %260 = icmp eq i8* %1, null
  br i1 %260, label %261, label %value_required.exit28

; <label>:261                                     ; preds = %379, %646, %483, %259
  %.lcssa223 = phi i8* [ %2, %259 ], [ %392, %483 ], [ %555, %646 ], [ %312, %379 ]
  %262 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %263 = load i8*, i8** @argv0, align 8, !tbaa !4
  %264 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %262, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %263, i8* %.lcssa223) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit28:                            ; preds = %259
  %265 = tail call noalias i8* @__strdup(i8* nonnull %1) #6
  %266 = icmp eq i8* %265, null
  br i1 %266, label %267, label %e_strdup.exit29

; <label>:267                                     ; preds = %value_required.exit28.3, %value_required.exit28.2, %value_required.exit28
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.109, i64 0, i64 0)) #6
  %268 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %269 = load i8*, i8** @argv0, align 8, !tbaa !4
  %270 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %268, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.110, i64 0, i64 0), i8* %269) #19
  tail call void @exit(i32 1) #18
  unreachable

e_strdup.exit29:                                  ; preds = %value_required.exit28
  store i8* %265, i8** @pidfile, align 8, !tbaa !4
  br label %.us-lcssa.us.i1291

; <label>:271                                     ; preds = %256
  %272 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.104, i64 0, i64 0), i64 7) #13
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %274, label %286

; <label>:274                                     ; preds = %271
  %275 = icmp eq i8* %1, null
  br i1 %275, label %276, label %value_required.exit30

; <label>:276                                     ; preds = %382, %642, %479, %274
  %.lcssa221 = phi i8* [ %2, %274 ], [ %392, %479 ], [ %555, %642 ], [ %312, %382 ]
  %277 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %278 = load i8*, i8** @argv0, align 8, !tbaa !4
  %279 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %277, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %278, i8* %.lcssa221) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit30:                            ; preds = %274
  %280 = tail call noalias i8* @__strdup(i8* nonnull %1) #6
  %281 = icmp eq i8* %280, null
  br i1 %281, label %282, label %e_strdup.exit31

; <label>:282                                     ; preds = %value_required.exit30.3, %value_required.exit30.2, %value_required.exit30
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.109, i64 0, i64 0)) #6
  %283 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %284 = load i8*, i8** @argv0, align 8, !tbaa !4
  %285 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %283, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.110, i64 0, i64 0), i8* %284) #19
  tail call void @exit(i32 1) #18
  unreachable

e_strdup.exit31:                                  ; preds = %value_required.exit30
  store i8* %280, i8** @charset, align 8, !tbaa !4
  br label %.us-lcssa.us.i1291

; <label>:286                                     ; preds = %271
  %287 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.105, i64 0, i64 0), i64 3) #13
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %301

; <label>:289                                     ; preds = %286
  %290 = icmp eq i8* %1, null
  br i1 %290, label %291, label %value_required.exit32

; <label>:291                                     ; preds = %385, %638, %475, %289
  %.lcssa219 = phi i8* [ %2, %289 ], [ %392, %475 ], [ %555, %638 ], [ %312, %385 ]
  %292 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %293 = load i8*, i8** @argv0, align 8, !tbaa !4
  %294 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %292, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %293, i8* %.lcssa219) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit32:                            ; preds = %289
  %295 = tail call noalias i8* @__strdup(i8* nonnull %1) #6
  %296 = icmp eq i8* %295, null
  br i1 %296, label %297, label %e_strdup.exit33

; <label>:297                                     ; preds = %value_required.exit32.3, %value_required.exit32.2, %value_required.exit32
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.109, i64 0, i64 0)) #6
  %298 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %299 = load i8*, i8** @argv0, align 8, !tbaa !4
  %300 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %298, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.110, i64 0, i64 0), i8* %299) #19
  tail call void @exit(i32 1) #18
  unreachable

e_strdup.exit33:                                  ; preds = %value_required.exit32
  store i8* %295, i8** @p3p, align 8, !tbaa !4
  br label %.us-lcssa.us.i1291

; <label>:301                                     ; preds = %286
  %302 = tail call i32 @strncmp(i8* %2, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.106, i64 0, i64 0), i64 7) #13
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %304, label %.us-lcssa.us.i1291

; <label>:304                                     ; preds = %301
  %305 = icmp eq i8* %1, null
  br i1 %305, label %306, label %value_required.exit34

; <label>:306                                     ; preds = %388, %634, %471, %304
  %.lcssa = phi i8* [ %2, %304 ], [ %392, %471 ], [ %555, %634 ], [ %312, %388 ]
  %307 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %308 = load i8*, i8** @argv0, align 8, !tbaa !4
  %309 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %307, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.108, i64 0, i64 0), i8* %308, i8* %.lcssa) #19
  tail call void @exit(i32 1) #18
  unreachable

value_required.exit34:                            ; preds = %304
  %310 = tail call i64 @strtol(i8* nocapture nonnull %1, i8** null, i32 10) #6
  %311 = trunc i64 %310 to i32
  store i32 %311, i32* @max_age, align 4, !tbaa !8
  br label %.us-lcssa.us.i1291

.us-lcssa.us.i1291:                               ; preds = %no_value_required.exit, %e_strdup.exit, %no_value_required.exit3, %no_value_required.exit6, %e_strdup.exit9, %value_required.exit12, %no_value_required.exit15, %e_strdup.exit19, %e_strdup.exit23, %no_value_required.exit25, %no_value_required.exit27, %e_strdup.exit31, %301, %value_required.exit34, %e_strdup.exit33, %e_strdup.exit29, %no_value_required.exit26, %no_value_required.exit24, %e_strdup.exit21, %e_strdup.exit17, %e_strdup.exit14, %e_strdup.exit11, %no_value_required.exit7, %e_strdup.exit5, %no_value_required.exit2, %value_required.exit
  %312 = getelementptr [7 x i8], [7 x i8]* @6, i64 0, i64 0
  %313 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.80, i64 0, i64 0), i8* %312, i8* null)
  %314 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.81, i64 0, i64 0), i64 5) #13
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %no_value_required.exit.1, label %316

; <label>:316                                     ; preds = %.us-lcssa.us.i1291
  %317 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.82, i64 0, i64 0), i64 4) #13
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %17, label %319

; <label>:319                                     ; preds = %316
  %320 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.153, i64 0, i64 0), i64 3) #13
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %31, label %322

; <label>:322                                     ; preds = %319
  %323 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0), i64 6) #13
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %no_value_required.exit2.1, label %325

; <label>:325                                     ; preds = %322
  %326 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.85, i64 0, i64 0), i64 8) #13
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %no_value_required.exit3.1, label %328

; <label>:328                                     ; preds = %325
  %329 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.86, i64 0, i64 0), i64 8) #13
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %64, label %331

; <label>:331                                     ; preds = %328
  %332 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.87, i64 0, i64 0), i64 14) #13
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %no_value_required.exit6.1, label %334

; <label>:334                                     ; preds = %331
  %335 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.88, i64 0, i64 0), i64 12) #13
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %no_value_required.exit7.1, label %337

; <label>:337                                     ; preds = %334
  %338 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.89, i64 0, i64 0), i64 4) #13
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %97, label %340

; <label>:340                                     ; preds = %337
  %341 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.90, i64 0, i64 0), i64 6) #13
  %342 = icmp eq i32 %341, 0
  br i1 %342, label %112, label %343

; <label>:343                                     ; preds = %340
  %344 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.91, i64 0, i64 0), i64 8) #13
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %127, label %346

; <label>:346                                     ; preds = %343
  %347 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.92, i64 0, i64 0), i64 6) #13
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %138, label %349

; <label>:349                                     ; preds = %346
  %350 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.93, i64 0, i64 0), i64 15) #13
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %no_value_required.exit15.1, label %352

; <label>:352                                     ; preds = %349
  %353 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.94, i64 0, i64 0), i64 16) #13
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %no_value_required.exit15.1, label %355

; <label>:355                                     ; preds = %352
  %356 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.95, i64 0, i64 0), i64 8) #13
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %165, label %358

; <label>:358                                     ; preds = %355
  %359 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.96, i64 0, i64 0), i64 9) #13
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %180, label %361

; <label>:361                                     ; preds = %358
  %362 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.97, i64 0, i64 0), i64 4) #13
  %363 = icmp eq i32 %362, 0
  br i1 %363, label %195, label %364

; <label>:364                                     ; preds = %361
  %365 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.98, i64 0, i64 0), i64 7) #13
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %210, label %367

; <label>:367                                     ; preds = %364
  %368 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.99, i64 0, i64 0), i64 5) #13
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %no_value_required.exit24.1, label %370

; <label>:370                                     ; preds = %367
  %371 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i64 0, i64 0), i64 7) #13
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %no_value_required.exit25.1, label %373

; <label>:373                                     ; preds = %370
  %374 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.101, i64 0, i64 0), i64 12) #13
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %no_value_required.exit26.1, label %376

; <label>:376                                     ; preds = %373
  %377 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.102, i64 0, i64 0), i64 14) #13
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %no_value_required.exit27.1, label %379

; <label>:379                                     ; preds = %376
  %380 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.103, i64 0, i64 0), i64 7) #13
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %261, label %382

; <label>:382                                     ; preds = %379
  %383 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.104, i64 0, i64 0), i64 7) #13
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %276, label %385

; <label>:385                                     ; preds = %382
  %386 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.105, i64 0, i64 0), i64 3) #13
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %291, label %388

; <label>:388                                     ; preds = %385
  %389 = tail call i32 @strncmp(i8* %312, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.106, i64 0, i64 0), i64 7) #13
  %390 = icmp eq i32 %389, 0
  br i1 %390, label %306, label %.us-lcssa.us.i2007

no_value_required.exit27.1:                       ; preds = %376
  store i1 false, i1* @do_global_passwd, align 1
  br label %.us-lcssa.us.i2007

no_value_required.exit26.1:                       ; preds = %373
  store i1 true, i1* @do_global_passwd, align 1
  br label %.us-lcssa.us.i2007

no_value_required.exit25.1:                       ; preds = %370
  store i1 false, i1* @do_vhost, align 1
  br label %.us-lcssa.us.i2007

no_value_required.exit24.1:                       ; preds = %367
  store i1 true, i1* @do_vhost, align 1
  br label %.us-lcssa.us.i2007

no_value_required.exit15.1:                       ; preds = %349, %352
  store i1 true, i1* @no_empty_referrers, align 1
  br label %.us-lcssa.us.i2007

no_value_required.exit7.1:                        ; preds = %334
  store i1 false, i1* @no_symlink_check, align 1
  br label %.us-lcssa.us.i2007

no_value_required.exit6.1:                        ; preds = %331
  store i1 true, i1* @no_symlink_check, align 1
  br label %.us-lcssa.us.i2007

no_value_required.exit3.1:                        ; preds = %325
  store i1 false, i1* @do_chroot, align 1
  store i1 false, i1* @no_symlink_check, align 1
  br label %.us-lcssa.us.i2007

no_value_required.exit2.1:                        ; preds = %322
  store i1 true, i1* @do_chroot, align 1
  store i1 true, i1* @no_symlink_check, align 1
  br label %.us-lcssa.us.i2007

no_value_required.exit.1:                         ; preds = %.us-lcssa.us.i1291
  store i1 true, i1* @debug, align 1
  br label %.us-lcssa.us.i2007

.us-lcssa.us.i2007:                               ; preds = %388, %no_value_required.exit27.1, %no_value_required.exit26.1, %no_value_required.exit25.1, %no_value_required.exit24.1, %no_value_required.exit15.1, %no_value_required.exit7.1, %no_value_required.exit6.1, %no_value_required.exit3.1, %no_value_required.exit2.1, %no_value_required.exit.1
  %391 = getelementptr [10 x i8], [10 x i8]* @7, i64 0, i64 0
  %392 = getelementptr [8 x i8], [8 x i8]* @8, i64 0, i64 0
  %393 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.80, i64 0, i64 0), i8* %392, i8* %391)
  %394 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.81, i64 0, i64 0), i64 5) #13
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %552, label %396

; <label>:396                                     ; preds = %.us-lcssa.us.i2007
  %397 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.82, i64 0, i64 0), i64 4) #13
  %398 = icmp eq i32 %397, 0
  br i1 %398, label %545, label %399

; <label>:399                                     ; preds = %396
  %400 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.153, i64 0, i64 0), i64 3) #13
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %541, label %402

; <label>:402                                     ; preds = %399
  %403 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0), i64 6) #13
  %404 = icmp eq i32 %403, 0
  br i1 %404, label %539, label %405

; <label>:405                                     ; preds = %402
  %406 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.85, i64 0, i64 0), i64 8) #13
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %537, label %408

; <label>:408                                     ; preds = %405
  %409 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.86, i64 0, i64 0), i64 8) #13
  %410 = icmp eq i32 %409, 0
  br i1 %410, label %533, label %411

; <label>:411                                     ; preds = %408
  %412 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.87, i64 0, i64 0), i64 14) #13
  %413 = icmp eq i32 %412, 0
  br i1 %413, label %531, label %414

; <label>:414                                     ; preds = %411
  %415 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.88, i64 0, i64 0), i64 12) #13
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %529, label %417

; <label>:417                                     ; preds = %414
  %418 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.89, i64 0, i64 0), i64 4) #13
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %525, label %420

; <label>:420                                     ; preds = %417
  %421 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.90, i64 0, i64 0), i64 6) #13
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %521, label %423

; <label>:423                                     ; preds = %420
  %424 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.91, i64 0, i64 0), i64 8) #13
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %517, label %426

; <label>:426                                     ; preds = %423
  %427 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.92, i64 0, i64 0), i64 6) #13
  %428 = icmp eq i32 %427, 0
  br i1 %428, label %513, label %429

; <label>:429                                     ; preds = %426
  %430 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.93, i64 0, i64 0), i64 15) #13
  %431 = icmp eq i32 %430, 0
  br i1 %431, label %511, label %432

; <label>:432                                     ; preds = %429
  %433 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.94, i64 0, i64 0), i64 16) #13
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %511, label %435

; <label>:435                                     ; preds = %432
  %436 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.95, i64 0, i64 0), i64 8) #13
  %437 = icmp eq i32 %436, 0
  br i1 %437, label %507, label %438

; <label>:438                                     ; preds = %435
  %439 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.96, i64 0, i64 0), i64 9) #13
  %440 = icmp eq i32 %439, 0
  br i1 %440, label %503, label %441

; <label>:441                                     ; preds = %438
  %442 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.97, i64 0, i64 0), i64 4) #13
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %499, label %444

; <label>:444                                     ; preds = %441
  %445 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.98, i64 0, i64 0), i64 7) #13
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %495, label %447

; <label>:447                                     ; preds = %444
  %448 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.99, i64 0, i64 0), i64 5) #13
  %449 = icmp eq i32 %448, 0
  br i1 %449, label %493, label %450

; <label>:450                                     ; preds = %447
  %451 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i64 0, i64 0), i64 7) #13
  %452 = icmp eq i32 %451, 0
  br i1 %452, label %491, label %453

; <label>:453                                     ; preds = %450
  %454 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.101, i64 0, i64 0), i64 12) #13
  %455 = icmp eq i32 %454, 0
  br i1 %455, label %489, label %456

; <label>:456                                     ; preds = %453
  %457 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.102, i64 0, i64 0), i64 14) #13
  %458 = icmp eq i32 %457, 0
  br i1 %458, label %487, label %459

; <label>:459                                     ; preds = %456
  %460 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.103, i64 0, i64 0), i64 7) #13
  %461 = icmp eq i32 %460, 0
  br i1 %461, label %483, label %462

; <label>:462                                     ; preds = %459
  %463 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.104, i64 0, i64 0), i64 7) #13
  %464 = icmp eq i32 %463, 0
  br i1 %464, label %479, label %465

; <label>:465                                     ; preds = %462
  %466 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.105, i64 0, i64 0), i64 3) #13
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %475, label %468

; <label>:468                                     ; preds = %465
  %469 = tail call i32 @strncmp(i8* %392, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.106, i64 0, i64 0), i64 7) #13
  %470 = icmp eq i32 %469, 0
  br i1 %470, label %471, label %.us-lcssa.us.i3132

; <label>:471                                     ; preds = %468
  %472 = icmp eq i8* %391, null
  br i1 %472, label %306, label %value_required.exit34.2

value_required.exit34.2:                          ; preds = %471
  %473 = tail call i64 @strtol(i8* nocapture nonnull %391, i8** null, i32 10) #6
  %474 = trunc i64 %473 to i32
  store i32 %474, i32* @max_age, align 4, !tbaa !8
  br label %.us-lcssa.us.i3132

; <label>:475                                     ; preds = %465
  %476 = icmp eq i8* %391, null
  br i1 %476, label %291, label %value_required.exit32.2

value_required.exit32.2:                          ; preds = %475
  %477 = tail call noalias i8* @__strdup(i8* nonnull %391) #6
  %478 = icmp eq i8* %477, null
  br i1 %478, label %297, label %e_strdup.exit33.2

e_strdup.exit33.2:                                ; preds = %value_required.exit32.2
  store i8* %477, i8** @p3p, align 8, !tbaa !4
  br label %.us-lcssa.us.i3132

; <label>:479                                     ; preds = %462
  %480 = icmp eq i8* %391, null
  br i1 %480, label %276, label %value_required.exit30.2

value_required.exit30.2:                          ; preds = %479
  %481 = tail call noalias i8* @__strdup(i8* nonnull %391) #6
  %482 = icmp eq i8* %481, null
  br i1 %482, label %282, label %e_strdup.exit31.2

e_strdup.exit31.2:                                ; preds = %value_required.exit30.2
  store i8* %481, i8** @charset, align 8, !tbaa !4
  br label %.us-lcssa.us.i3132

; <label>:483                                     ; preds = %459
  %484 = icmp eq i8* %391, null
  br i1 %484, label %261, label %value_required.exit28.2

value_required.exit28.2:                          ; preds = %483
  %485 = tail call noalias i8* @__strdup(i8* nonnull %391) #6
  %486 = icmp eq i8* %485, null
  br i1 %486, label %267, label %e_strdup.exit29.2

e_strdup.exit29.2:                                ; preds = %value_required.exit28.2
  store i8* %485, i8** @pidfile, align 8, !tbaa !4
  br label %.us-lcssa.us.i3132

; <label>:487                                     ; preds = %456
  %488 = icmp eq i8* %391, null
  br i1 %488, label %no_value_required.exit27.2, label %252

no_value_required.exit27.2:                       ; preds = %487
  store i1 false, i1* @do_global_passwd, align 1
  br label %.us-lcssa.us.i3132

; <label>:489                                     ; preds = %453
  %490 = icmp eq i8* %391, null
  br i1 %490, label %no_value_required.exit26.2, label %243

no_value_required.exit26.2:                       ; preds = %489
  store i1 true, i1* @do_global_passwd, align 1
  br label %.us-lcssa.us.i3132

; <label>:491                                     ; preds = %450
  %492 = icmp eq i8* %391, null
  br i1 %492, label %no_value_required.exit25.2, label %234

no_value_required.exit25.2:                       ; preds = %491
  store i1 false, i1* @do_vhost, align 1
  br label %.us-lcssa.us.i3132

; <label>:493                                     ; preds = %447
  %494 = icmp eq i8* %391, null
  br i1 %494, label %no_value_required.exit24.2, label %225

no_value_required.exit24.2:                       ; preds = %493
  store i1 true, i1* @do_vhost, align 1
  br label %.us-lcssa.us.i3132

; <label>:495                                     ; preds = %444
  %496 = icmp eq i8* %391, null
  br i1 %496, label %210, label %value_required.exit22.2

value_required.exit22.2:                          ; preds = %495
  %497 = tail call noalias i8* @__strdup(i8* nonnull %391) #6
  %498 = icmp eq i8* %497, null
  br i1 %498, label %216, label %e_strdup.exit23.2

e_strdup.exit23.2:                                ; preds = %value_required.exit22.2
  store i8* %497, i8** @logfile, align 8, !tbaa !4
  br label %.us-lcssa.us.i3132

; <label>:499                                     ; preds = %441
  %500 = icmp eq i8* %391, null
  br i1 %500, label %195, label %value_required.exit20.2

value_required.exit20.2:                          ; preds = %499
  %501 = tail call noalias i8* @__strdup(i8* nonnull %391) #6
  %502 = icmp eq i8* %501, null
  br i1 %502, label %201, label %e_strdup.exit21.2

e_strdup.exit21.2:                                ; preds = %value_required.exit20.2
  store i8* %501, i8** @hostname, align 8, !tbaa !4
  br label %.us-lcssa.us.i3132

; <label>:503                                     ; preds = %438
  %504 = icmp eq i8* %391, null
  br i1 %504, label %180, label %value_required.exit18.2

value_required.exit18.2:                          ; preds = %503
  %505 = tail call noalias i8* @__strdup(i8* nonnull %391) #6
  %506 = icmp eq i8* %505, null
  br i1 %506, label %186, label %e_strdup.exit19.2

e_strdup.exit19.2:                                ; preds = %value_required.exit18.2
  store i8* %505, i8** @throttlefile, align 8, !tbaa !4
  br label %.us-lcssa.us.i3132

; <label>:507                                     ; preds = %435
  %508 = icmp eq i8* %391, null
  br i1 %508, label %165, label %value_required.exit16.2

value_required.exit16.2:                          ; preds = %507
  %509 = tail call noalias i8* @__strdup(i8* nonnull %391) #6
  %510 = icmp eq i8* %509, null
  br i1 %510, label %171, label %e_strdup.exit17.2

e_strdup.exit17.2:                                ; preds = %value_required.exit16.2
  store i8* %509, i8** @local_pattern, align 8, !tbaa !4
  br label %.us-lcssa.us.i3132

; <label>:511                                     ; preds = %432, %429
  %512 = icmp eq i8* %391, null
  br i1 %512, label %no_value_required.exit15.2, label %156

no_value_required.exit15.2:                       ; preds = %511
  store i1 true, i1* @no_empty_referrers, align 1
  br label %.us-lcssa.us.i3132

; <label>:513                                     ; preds = %426
  %514 = icmp eq i8* %391, null
  br i1 %514, label %138, label %value_required.exit13.2

value_required.exit13.2:                          ; preds = %513
  %515 = tail call noalias i8* @__strdup(i8* nonnull %391) #6
  %516 = icmp eq i8* %515, null
  br i1 %516, label %144, label %e_strdup.exit14.2

e_strdup.exit14.2:                                ; preds = %value_required.exit13.2
  store i8* %515, i8** @url_pattern, align 8, !tbaa !4
  br label %.us-lcssa.us.i3132

; <label>:517                                     ; preds = %423
  %518 = icmp eq i8* %391, null
  br i1 %518, label %127, label %value_required.exit12.2

value_required.exit12.2:                          ; preds = %517
  %519 = tail call i64 @strtol(i8* nocapture nonnull %391, i8** null, i32 10) #6
  %520 = trunc i64 %519 to i32
  store i32 %520, i32* @cgi_limit, align 4, !tbaa !8
  br label %.us-lcssa.us.i3132

; <label>:521                                     ; preds = %420
  %522 = icmp eq i8* %391, null
  br i1 %522, label %112, label %value_required.exit10.2

value_required.exit10.2:                          ; preds = %521
  %523 = tail call noalias i8* @__strdup(i8* nonnull %391) #6
  %524 = icmp eq i8* %523, null
  br i1 %524, label %118, label %e_strdup.exit11.2

e_strdup.exit11.2:                                ; preds = %value_required.exit10.2
  store i8* %523, i8** @cgi_pattern, align 8, !tbaa !4
  br label %.us-lcssa.us.i3132

; <label>:525                                     ; preds = %417
  %526 = icmp eq i8* %391, null
  br i1 %526, label %97, label %value_required.exit8.2

value_required.exit8.2:                           ; preds = %525
  %527 = tail call noalias i8* @__strdup(i8* nonnull %391) #6
  %528 = icmp eq i8* %527, null
  br i1 %528, label %103, label %e_strdup.exit9.2

e_strdup.exit9.2:                                 ; preds = %value_required.exit8.2
  store i8* %527, i8** @user, align 8, !tbaa !4
  br label %.us-lcssa.us.i3132

; <label>:529                                     ; preds = %414
  %530 = icmp eq i8* %391, null
  br i1 %530, label %no_value_required.exit7.2, label %88

no_value_required.exit7.2:                        ; preds = %529
  store i1 false, i1* @no_symlink_check, align 1
  br label %.us-lcssa.us.i3132

; <label>:531                                     ; preds = %411
  %532 = icmp eq i8* %391, null
  br i1 %532, label %no_value_required.exit6.2, label %79

no_value_required.exit6.2:                        ; preds = %531
  store i1 true, i1* @no_symlink_check, align 1
  br label %.us-lcssa.us.i3132

; <label>:533                                     ; preds = %408
  %534 = icmp eq i8* %391, null
  br i1 %534, label %64, label %value_required.exit4.2

value_required.exit4.2:                           ; preds = %533
  %535 = tail call noalias i8* @__strdup(i8* nonnull %391) #6
  %536 = icmp eq i8* %535, null
  br i1 %536, label %70, label %e_strdup.exit5.2

e_strdup.exit5.2:                                 ; preds = %value_required.exit4.2
  store i8* %535, i8** @data_dir, align 8, !tbaa !4
  br label %.us-lcssa.us.i3132

; <label>:537                                     ; preds = %405
  %538 = icmp eq i8* %391, null
  br i1 %538, label %no_value_required.exit3.2, label %55

no_value_required.exit3.2:                        ; preds = %537
  store i1 false, i1* @do_chroot, align 1
  store i1 false, i1* @no_symlink_check, align 1
  br label %.us-lcssa.us.i3132

; <label>:539                                     ; preds = %402
  %540 = icmp eq i8* %391, null
  br i1 %540, label %no_value_required.exit2.2, label %46

no_value_required.exit2.2:                        ; preds = %539
  store i1 true, i1* @do_chroot, align 1
  store i1 true, i1* @no_symlink_check, align 1
  br label %.us-lcssa.us.i3132

; <label>:541                                     ; preds = %399
  %542 = icmp eq i8* %391, null
  br i1 %542, label %31, label %value_required.exit1.2

value_required.exit1.2:                           ; preds = %541
  %543 = tail call noalias i8* @__strdup(i8* nonnull %391) #6
  %544 = icmp eq i8* %543, null
  br i1 %544, label %37, label %e_strdup.exit.2

e_strdup.exit.2:                                  ; preds = %value_required.exit1.2
  store i8* %543, i8** @dir, align 8, !tbaa !4
  br label %.us-lcssa.us.i3132

; <label>:545                                     ; preds = %396
  %546 = icmp eq i8* %391, null
  br i1 %546, label %17, label %value_required.exit.2

value_required.exit.2:                            ; preds = %545
  %547 = tail call i64 @strtol(i8* nocapture nonnull %391, i8** null, i32 10) #6
  %548 = trunc i64 %547 to i32
  %549 = trunc i64 %547 to i16
  store i16 %549, i16* @port, align 2, !tbaa !6
  %550 = and i32 %548, 65535
  %551 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.83, i64 0, i64 0), i32 %550)
  br label %.us-lcssa.us.i3132

; <label>:552                                     ; preds = %.us-lcssa.us.i2007
  %553 = icmp eq i8* %391, null
  br i1 %553, label %no_value_required.exit.2, label %8

no_value_required.exit.2:                         ; preds = %552
  store i1 true, i1* @debug, align 1
  br label %.us-lcssa.us.i3132

.us-lcssa.us.i3132:                               ; preds = %468, %value_required.exit34.2, %e_strdup.exit33.2, %e_strdup.exit31.2, %e_strdup.exit29.2, %no_value_required.exit27.2, %no_value_required.exit26.2, %no_value_required.exit25.2, %no_value_required.exit24.2, %e_strdup.exit23.2, %e_strdup.exit21.2, %e_strdup.exit19.2, %e_strdup.exit17.2, %no_value_required.exit15.2, %e_strdup.exit14.2, %value_required.exit12.2, %e_strdup.exit11.2, %e_strdup.exit9.2, %no_value_required.exit7.2, %no_value_required.exit6.2, %e_strdup.exit5.2, %no_value_required.exit3.2, %no_value_required.exit2.2, %e_strdup.exit.2, %value_required.exit.2, %no_value_required.exit.2
  %554 = getelementptr [3 x i8], [3 x i8]* @9, i64 0, i64 0
  %555 = getelementptr [5 x i8], [5 x i8]* @10, i64 0, i64 0
  %556 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.80, i64 0, i64 0), i8* %555, i8* %554)
  %557 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.81, i64 0, i64 0), i64 5) #13
  %558 = icmp eq i32 %557, 0
  br i1 %558, label %715, label %559

; <label>:559                                     ; preds = %.us-lcssa.us.i3132
  %560 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.82, i64 0, i64 0), i64 4) #13
  %561 = icmp eq i32 %560, 0
  br i1 %561, label %708, label %562

; <label>:562                                     ; preds = %559
  %563 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.153, i64 0, i64 0), i64 3) #13
  %564 = icmp eq i32 %563, 0
  br i1 %564, label %704, label %565

; <label>:565                                     ; preds = %562
  %566 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0), i64 6) #13
  %567 = icmp eq i32 %566, 0
  br i1 %567, label %702, label %568

; <label>:568                                     ; preds = %565
  %569 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.85, i64 0, i64 0), i64 8) #13
  %570 = icmp eq i32 %569, 0
  br i1 %570, label %700, label %571

; <label>:571                                     ; preds = %568
  %572 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.86, i64 0, i64 0), i64 8) #13
  %573 = icmp eq i32 %572, 0
  br i1 %573, label %696, label %574

; <label>:574                                     ; preds = %571
  %575 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.87, i64 0, i64 0), i64 14) #13
  %576 = icmp eq i32 %575, 0
  br i1 %576, label %694, label %577

; <label>:577                                     ; preds = %574
  %578 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.88, i64 0, i64 0), i64 12) #13
  %579 = icmp eq i32 %578, 0
  br i1 %579, label %692, label %580

; <label>:580                                     ; preds = %577
  %581 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.89, i64 0, i64 0), i64 4) #13
  %582 = icmp eq i32 %581, 0
  br i1 %582, label %688, label %583

; <label>:583                                     ; preds = %580
  %584 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.90, i64 0, i64 0), i64 6) #13
  %585 = icmp eq i32 %584, 0
  br i1 %585, label %684, label %586

; <label>:586                                     ; preds = %583
  %587 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.91, i64 0, i64 0), i64 8) #13
  %588 = icmp eq i32 %587, 0
  br i1 %588, label %680, label %589

; <label>:589                                     ; preds = %586
  %590 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.92, i64 0, i64 0), i64 6) #13
  %591 = icmp eq i32 %590, 0
  br i1 %591, label %676, label %592

; <label>:592                                     ; preds = %589
  %593 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.93, i64 0, i64 0), i64 15) #13
  %594 = icmp eq i32 %593, 0
  br i1 %594, label %674, label %595

; <label>:595                                     ; preds = %592
  %596 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.94, i64 0, i64 0), i64 16) #13
  %597 = icmp eq i32 %596, 0
  br i1 %597, label %674, label %598

; <label>:598                                     ; preds = %595
  %599 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.95, i64 0, i64 0), i64 8) #13
  %600 = icmp eq i32 %599, 0
  br i1 %600, label %670, label %601

; <label>:601                                     ; preds = %598
  %602 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.96, i64 0, i64 0), i64 9) #13
  %603 = icmp eq i32 %602, 0
  br i1 %603, label %666, label %604

; <label>:604                                     ; preds = %601
  %605 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.97, i64 0, i64 0), i64 4) #13
  %606 = icmp eq i32 %605, 0
  br i1 %606, label %662, label %607

; <label>:607                                     ; preds = %604
  %608 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.98, i64 0, i64 0), i64 7) #13
  %609 = icmp eq i32 %608, 0
  br i1 %609, label %658, label %610

; <label>:610                                     ; preds = %607
  %611 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.99, i64 0, i64 0), i64 5) #13
  %612 = icmp eq i32 %611, 0
  br i1 %612, label %656, label %613

; <label>:613                                     ; preds = %610
  %614 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i64 0, i64 0), i64 7) #13
  %615 = icmp eq i32 %614, 0
  br i1 %615, label %654, label %616

; <label>:616                                     ; preds = %613
  %617 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.101, i64 0, i64 0), i64 12) #13
  %618 = icmp eq i32 %617, 0
  br i1 %618, label %652, label %619

; <label>:619                                     ; preds = %616
  %620 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.102, i64 0, i64 0), i64 14) #13
  %621 = icmp eq i32 %620, 0
  br i1 %621, label %650, label %622

; <label>:622                                     ; preds = %619
  %623 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.103, i64 0, i64 0), i64 7) #13
  %624 = icmp eq i32 %623, 0
  br i1 %624, label %646, label %625

; <label>:625                                     ; preds = %622
  %626 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.104, i64 0, i64 0), i64 7) #13
  %627 = icmp eq i32 %626, 0
  br i1 %627, label %642, label %628

; <label>:628                                     ; preds = %625
  %629 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.105, i64 0, i64 0), i64 3) #13
  %630 = icmp eq i32 %629, 0
  br i1 %630, label %638, label %631

; <label>:631                                     ; preds = %628
  %632 = tail call i32 @strncmp(i8* %555, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.106, i64 0, i64 0), i64 7) #13
  %633 = icmp eq i32 %632, 0
  br i1 %633, label %634, label %.backedge.3

; <label>:634                                     ; preds = %631
  %635 = icmp eq i8* %554, null
  br i1 %635, label %306, label %value_required.exit34.3

value_required.exit34.3:                          ; preds = %634
  %636 = tail call i64 @strtol(i8* nocapture nonnull %554, i8** null, i32 10) #6
  %637 = trunc i64 %636 to i32
  store i32 %637, i32* @max_age, align 4, !tbaa !8
  br label %.backedge.3

; <label>:638                                     ; preds = %628
  %639 = icmp eq i8* %554, null
  br i1 %639, label %291, label %value_required.exit32.3

value_required.exit32.3:                          ; preds = %638
  %640 = tail call noalias i8* @__strdup(i8* nonnull %554) #6
  %641 = icmp eq i8* %640, null
  br i1 %641, label %297, label %e_strdup.exit33.3

e_strdup.exit33.3:                                ; preds = %value_required.exit32.3
  store i8* %640, i8** @p3p, align 8, !tbaa !4
  br label %.backedge.3

; <label>:642                                     ; preds = %625
  %643 = icmp eq i8* %554, null
  br i1 %643, label %276, label %value_required.exit30.3

value_required.exit30.3:                          ; preds = %642
  %644 = tail call noalias i8* @__strdup(i8* nonnull %554) #6
  %645 = icmp eq i8* %644, null
  br i1 %645, label %282, label %e_strdup.exit31.3

e_strdup.exit31.3:                                ; preds = %value_required.exit30.3
  store i8* %644, i8** @charset, align 8, !tbaa !4
  br label %.backedge.3

; <label>:646                                     ; preds = %622
  %647 = icmp eq i8* %554, null
  br i1 %647, label %261, label %value_required.exit28.3

value_required.exit28.3:                          ; preds = %646
  %648 = tail call noalias i8* @__strdup(i8* nonnull %554) #6
  %649 = icmp eq i8* %648, null
  br i1 %649, label %267, label %e_strdup.exit29.3

e_strdup.exit29.3:                                ; preds = %value_required.exit28.3
  store i8* %648, i8** @pidfile, align 8, !tbaa !4
  br label %.backedge.3

; <label>:650                                     ; preds = %619
  %651 = icmp eq i8* %554, null
  br i1 %651, label %no_value_required.exit27.3, label %252

no_value_required.exit27.3:                       ; preds = %650
  store i1 false, i1* @do_global_passwd, align 1
  br label %.backedge.3

; <label>:652                                     ; preds = %616
  %653 = icmp eq i8* %554, null
  br i1 %653, label %no_value_required.exit26.3, label %243

no_value_required.exit26.3:                       ; preds = %652
  store i1 true, i1* @do_global_passwd, align 1
  br label %.backedge.3

; <label>:654                                     ; preds = %613
  %655 = icmp eq i8* %554, null
  br i1 %655, label %no_value_required.exit25.3, label %234

no_value_required.exit25.3:                       ; preds = %654
  store i1 false, i1* @do_vhost, align 1
  br label %.backedge.3

; <label>:656                                     ; preds = %610
  %657 = icmp eq i8* %554, null
  br i1 %657, label %no_value_required.exit24.3, label %225

no_value_required.exit24.3:                       ; preds = %656
  store i1 true, i1* @do_vhost, align 1
  br label %.backedge.3

; <label>:658                                     ; preds = %607
  %659 = icmp eq i8* %554, null
  br i1 %659, label %210, label %value_required.exit22.3

value_required.exit22.3:                          ; preds = %658
  %660 = tail call noalias i8* @__strdup(i8* nonnull %554) #6
  %661 = icmp eq i8* %660, null
  br i1 %661, label %216, label %e_strdup.exit23.3

e_strdup.exit23.3:                                ; preds = %value_required.exit22.3
  store i8* %660, i8** @logfile, align 8, !tbaa !4
  br label %.backedge.3

; <label>:662                                     ; preds = %604
  %663 = icmp eq i8* %554, null
  br i1 %663, label %195, label %value_required.exit20.3

value_required.exit20.3:                          ; preds = %662
  %664 = tail call noalias i8* @__strdup(i8* nonnull %554) #6
  %665 = icmp eq i8* %664, null
  br i1 %665, label %201, label %e_strdup.exit21.3

e_strdup.exit21.3:                                ; preds = %value_required.exit20.3
  store i8* %664, i8** @hostname, align 8, !tbaa !4
  br label %.backedge.3

; <label>:666                                     ; preds = %601
  %667 = icmp eq i8* %554, null
  br i1 %667, label %180, label %value_required.exit18.3

value_required.exit18.3:                          ; preds = %666
  %668 = tail call noalias i8* @__strdup(i8* nonnull %554) #6
  %669 = icmp eq i8* %668, null
  br i1 %669, label %186, label %e_strdup.exit19.3

e_strdup.exit19.3:                                ; preds = %value_required.exit18.3
  store i8* %668, i8** @throttlefile, align 8, !tbaa !4
  br label %.backedge.3

; <label>:670                                     ; preds = %598
  %671 = icmp eq i8* %554, null
  br i1 %671, label %165, label %value_required.exit16.3

value_required.exit16.3:                          ; preds = %670
  %672 = tail call noalias i8* @__strdup(i8* nonnull %554) #6
  %673 = icmp eq i8* %672, null
  br i1 %673, label %171, label %e_strdup.exit17.3

e_strdup.exit17.3:                                ; preds = %value_required.exit16.3
  store i8* %672, i8** @local_pattern, align 8, !tbaa !4
  br label %.backedge.3

; <label>:674                                     ; preds = %595, %592
  %675 = icmp eq i8* %554, null
  br i1 %675, label %no_value_required.exit15.3, label %156

no_value_required.exit15.3:                       ; preds = %674
  store i1 true, i1* @no_empty_referrers, align 1
  br label %.backedge.3

; <label>:676                                     ; preds = %589
  %677 = icmp eq i8* %554, null
  br i1 %677, label %138, label %value_required.exit13.3

value_required.exit13.3:                          ; preds = %676
  %678 = tail call noalias i8* @__strdup(i8* nonnull %554) #6
  %679 = icmp eq i8* %678, null
  br i1 %679, label %144, label %e_strdup.exit14.3

e_strdup.exit14.3:                                ; preds = %value_required.exit13.3
  store i8* %678, i8** @url_pattern, align 8, !tbaa !4
  br label %.backedge.3

; <label>:680                                     ; preds = %586
  %681 = icmp eq i8* %554, null
  br i1 %681, label %127, label %value_required.exit12.3

value_required.exit12.3:                          ; preds = %680
  %682 = tail call i64 @strtol(i8* nocapture nonnull %554, i8** null, i32 10) #6
  %683 = trunc i64 %682 to i32
  store i32 %683, i32* @cgi_limit, align 4, !tbaa !8
  br label %.backedge.3

; <label>:684                                     ; preds = %583
  %685 = icmp eq i8* %554, null
  br i1 %685, label %112, label %value_required.exit10.3

value_required.exit10.3:                          ; preds = %684
  %686 = tail call noalias i8* @__strdup(i8* nonnull %554) #6
  %687 = icmp eq i8* %686, null
  br i1 %687, label %118, label %e_strdup.exit11.3

e_strdup.exit11.3:                                ; preds = %value_required.exit10.3
  store i8* %686, i8** @cgi_pattern, align 8, !tbaa !4
  br label %.backedge.3

; <label>:688                                     ; preds = %580
  %689 = icmp eq i8* %554, null
  br i1 %689, label %97, label %value_required.exit8.3

value_required.exit8.3:                           ; preds = %688
  %690 = tail call noalias i8* @__strdup(i8* nonnull %554) #6
  %691 = icmp eq i8* %690, null
  br i1 %691, label %103, label %e_strdup.exit9.3

e_strdup.exit9.3:                                 ; preds = %value_required.exit8.3
  store i8* %690, i8** @user, align 8, !tbaa !4
  br label %.backedge.3

; <label>:692                                     ; preds = %577
  %693 = icmp eq i8* %554, null
  br i1 %693, label %no_value_required.exit7.3, label %88

no_value_required.exit7.3:                        ; preds = %692
  store i1 false, i1* @no_symlink_check, align 1
  br label %.backedge.3

; <label>:694                                     ; preds = %574
  %695 = icmp eq i8* %554, null
  br i1 %695, label %no_value_required.exit6.3, label %79

no_value_required.exit6.3:                        ; preds = %694
  store i1 true, i1* @no_symlink_check, align 1
  br label %.backedge.3

; <label>:696                                     ; preds = %571
  %697 = icmp eq i8* %554, null
  br i1 %697, label %64, label %value_required.exit4.3

value_required.exit4.3:                           ; preds = %696
  %698 = tail call noalias i8* @__strdup(i8* nonnull %554) #6
  %699 = icmp eq i8* %698, null
  br i1 %699, label %70, label %e_strdup.exit5.3

e_strdup.exit5.3:                                 ; preds = %value_required.exit4.3
  store i8* %698, i8** @data_dir, align 8, !tbaa !4
  br label %.backedge.3

; <label>:700                                     ; preds = %568
  %701 = icmp eq i8* %554, null
  br i1 %701, label %no_value_required.exit3.3, label %55

no_value_required.exit3.3:                        ; preds = %700
  store i1 false, i1* @do_chroot, align 1
  store i1 false, i1* @no_symlink_check, align 1
  br label %.backedge.3

; <label>:702                                     ; preds = %565
  %703 = icmp eq i8* %554, null
  br i1 %703, label %no_value_required.exit2.3, label %46

no_value_required.exit2.3:                        ; preds = %702
  store i1 true, i1* @do_chroot, align 1
  store i1 true, i1* @no_symlink_check, align 1
  br label %.backedge.3

; <label>:704                                     ; preds = %562
  %705 = icmp eq i8* %554, null
  br i1 %705, label %31, label %value_required.exit1.3

value_required.exit1.3:                           ; preds = %704
  %706 = tail call noalias i8* @__strdup(i8* nonnull %554) #6
  %707 = icmp eq i8* %706, null
  br i1 %707, label %37, label %e_strdup.exit.3

e_strdup.exit.3:                                  ; preds = %value_required.exit1.3
  store i8* %706, i8** @dir, align 8, !tbaa !4
  br label %.backedge.3

; <label>:708                                     ; preds = %559
  %709 = icmp eq i8* %554, null
  br i1 %709, label %17, label %value_required.exit.3

value_required.exit.3:                            ; preds = %708
  %710 = tail call i64 @strtol(i8* nocapture nonnull %554, i8** null, i32 10) #6
  %711 = trunc i64 %710 to i32
  %712 = trunc i64 %710 to i16
  store i16 %712, i16* @port, align 2, !tbaa !6
  %713 = and i32 %711, 65535
  %714 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.83, i64 0, i64 0), i32 %713)
  br label %.backedge.3

; <label>:715                                     ; preds = %.us-lcssa.us.i3132
  %716 = icmp eq i8* %554, null
  br i1 %716, label %no_value_required.exit.3, label %8

no_value_required.exit.3:                         ; preds = %715
  store i1 true, i1* @debug, align 1
  br label %.backedge.3

.backedge.3:                                      ; preds = %no_value_required.exit.3, %value_required.exit.3, %e_strdup.exit.3, %no_value_required.exit2.3, %no_value_required.exit3.3, %e_strdup.exit5.3, %no_value_required.exit6.3, %no_value_required.exit7.3, %e_strdup.exit9.3, %e_strdup.exit11.3, %value_required.exit12.3, %e_strdup.exit14.3, %no_value_required.exit15.3, %e_strdup.exit17.3, %e_strdup.exit19.3, %e_strdup.exit21.3, %e_strdup.exit23.3, %no_value_required.exit24.3, %no_value_required.exit25.3, %no_value_required.exit26.3, %no_value_required.exit27.3, %e_strdup.exit29.3, %e_strdup.exit31.3, %e_strdup.exit33.3, %value_required.exit34.3, %631
  ret void
}

; Function Attrs: nounwind
declare noalias %struct._IO_FILE* @fopen(i8* nocapture readonly, i8* nocapture readonly) #2

; Function Attrs: nounwind
declare i8* @fgets(i8*, i32, %struct._IO_FILE* nocapture) #2

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) #0

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #2

; Function Attrs: nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) #2

; Function Attrs: nounwind
declare noalias i8* @__strdup(i8* nocapture readonly) #2

declare void @syslog(i32, i8*, ...) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #3

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) #0

; Function Attrs: noreturn nounwind uwtable
define internal fastcc void @usage() unnamed_addr #4 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %2 = load i8*, i8** @argv0, align 8, !tbaa !4
  %3 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([219 x i8], [219 x i8]* @.str.111, i64 0, i64 0), i8* %2) #20
  tail call void @exit(i32 1) #18
  unreachable
}

; Function Attrs: nounwind
declare void @tzset() #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #3

; Function Attrs: nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) #2

declare i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) #5

; Function Attrs: nounwind
declare i8* @gai_strerror(i32) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #3

; Function Attrs: nounwind
declare void @freeaddrinfo(%struct.addrinfo*) #2

; Function Attrs: nounwind
declare void @perror(i8* nocapture readonly) #2

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval* nocapture, %struct.timezone* nocapture) #2

; Function Attrs: nounwind
declare i32 @__isoc99_sscanf(i8* nocapture readonly, i8* nocapture readonly, ...) #2

; Function Attrs: nounwind readonly
declare i8* @strstr(i8*, i8* nocapture) #0

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) #2

; Function Attrs: nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) #2

; Function Attrs: nounwind
declare i32 @getuid() #2

; Function Attrs: nounwind
declare %struct.passwd* @getpwnam(i8* nocapture readonly) #2

; Function Attrs: nounwind
declare i32 @fileno(%struct._IO_FILE* nocapture) #2

declare i32 @fcntl(i32, i32, ...) #5

; Function Attrs: nounwind
declare i32 @fchown(i32, i32, i32) #2

; Function Attrs: nounwind
declare i32 @chdir(i8*) #2

; Function Attrs: nounwind
declare i8* @getcwd(i8*, i64) #2

; Function Attrs: nounwind
declare i32 @daemon(i32, i32) #2

; Function Attrs: nounwind
declare i32 @setsid() #2

; Function Attrs: nounwind
declare i32 @getpid() #2

; Function Attrs: nounwind uwtable
define i32 @fdwatch_get_nfiles() #8 {
  %rl = alloca %struct.timeval, align 8
  %1 = bitcast %struct.timeval* %rl to i8*
  call void @llvm.lifetime.start(i64 16, i8* %1) #6
  %2 = tail call i32 @getdtablesize() #6
  store i32 %2, i32* @nfiles, align 4, !tbaa !8
  %3 = call i32 @getrlimit(i32 7, %struct.timeval* nonnull %rl) #6
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %thread-pre-split

; <label>:5                                       ; preds = %0
  %6 = getelementptr inbounds %struct.timeval, %struct.timeval* %rl, i64 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !71
  %8 = trunc i64 %7 to i32
  store i32 %8, i32* @nfiles, align 4, !tbaa !8
  %9 = getelementptr inbounds %struct.timeval, %struct.timeval* %rl, i64 0, i32 1
  %10 = load i64, i64* %9, align 8, !tbaa !73
  %11 = icmp eq i64 %10, -1
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %5
  store i64 8192, i64* %6, align 8, !tbaa !71
  br label %16

; <label>:13                                      ; preds = %5
  %14 = icmp ugt i64 %10, %7
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %13
  store i64 %10, i64* %6, align 8, !tbaa !71
  br label %16

; <label>:16                                      ; preds = %13, %15, %12
  %17 = call i32 @setrlimit(i32 7, %struct.timeval* nonnull %rl) #6
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %thread-pre-split

; <label>:19                                      ; preds = %16
  %20 = load i64, i64* %6, align 8, !tbaa !71
  %21 = trunc i64 %20 to i32
  store i32 %21, i32* @nfiles, align 4, !tbaa !8
  br label %22

thread-pre-split:                                 ; preds = %0, %16
  %.pr = load i32, i32* @nfiles, align 4, !tbaa !8
  br label %22

; <label>:22                                      ; preds = %thread-pre-split, %19
  %23 = phi i32 [ %.pr, %thread-pre-split ], [ %21, %19 ]
  store i64 0, i64* @nwatches, align 8, !tbaa !16
  %24 = sext i32 %23 to i64
  %25 = shl nsw i64 %24, 2
  %26 = call noalias i8* @malloc(i64 %25) #6
  store i8* %26, i8** bitcast (i32** @fd_rw to i8**), align 8, !tbaa !4
  %27 = shl nsw i64 %24, 3
  %28 = call noalias i8* @malloc(i64 %27) #6
  store i8* %28, i8** bitcast (i8*** @fd_data to i8**), align 8, !tbaa !4
  %29 = icmp eq i8* %26, null
  %30 = icmp eq i8* %28, null
  %or.cond = or i1 %29, %30
  br i1 %or.cond, label %poll_init.exit.thread, label %.preheader

.preheader:                                       ; preds = %22
  %31 = icmp sgt i32 %23, 0
  br i1 %31, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %32 = icmp sgt i32 %23, 1
  %smax = select i1 %32, i32 %23, i32 1
  %33 = add i32 %smax, -1
  %34 = zext i32 %33 to i64
  %35 = shl nuw nsw i64 %34, 2
  %36 = add nuw nsw i64 %35, 4
  call void @llvm.memset.p0i8.i64(i8* %26, i8 -1, i64 %36, i32 4, i1 false)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %37 = call noalias i8* @malloc(i64 %27) #6
  store i8* %37, i8** bitcast (%struct.pollfd** @pollfds to i8**), align 8, !tbaa !4
  %38 = call noalias i8* @malloc(i64 %25) #6
  store i8* %38, i8** bitcast (i32** @poll_fdidx to i8**), align 8, !tbaa !4
  %39 = call noalias i8* @malloc(i64 %25) #6
  store i8* %39, i8** bitcast (i32** @poll_rfdidx to i8**), align 8, !tbaa !4
  %40 = icmp eq i8* %37, null
  %41 = icmp eq i8* %38, null
  %or.cond.i = or i1 %40, %41
  %42 = icmp eq i8* %39, null
  %or.cond3.i = or i1 %or.cond.i, %42
  %43 = bitcast i8* %37 to %struct.pollfd*
  %.not = xor i1 %31, true
  %brmerge = or i1 %or.cond3.i, %.not
  %.mux = select i1 %or.cond3.i, i32 -1, i32 %23
  br i1 %brmerge, label %poll_init.exit.thread, label %.lr.ph.i.preheader

.lr.ph.i.preheader:                               ; preds = %._crit_edge
  %44 = add i32 %23, -1
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 2
  %47 = add nuw nsw i64 %46, 4
  call void @llvm.memset.p0i8.i64(i8* %38, i8 -1, i64 %47, i32 4, i1 false)
  %xtraiter = and i32 %23, 7
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph.i.preheader.split, label %.lr.ph.i.prol.preheader

.lr.ph.i.prol.preheader:                          ; preds = %.lr.ph.i.preheader
  %48 = add nsw i32 %xtraiter, -1
  br label %.lr.ph.i.prol

.lr.ph.i.prol:                                    ; preds = %.lr.ph.i.prol.preheader, %.lr.ph.i.prol
  %indvars.iv.i.prol = phi i64 [ %indvars.iv.next.i.prol, %.lr.ph.i.prol ], [ 0, %.lr.ph.i.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %.lr.ph.i.prol ], [ %xtraiter, %.lr.ph.i.prol.preheader ]
  %49 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %43, i64 %indvars.iv.i.prol, i32 0
  store i32 -1, i32* %49, align 4, !tbaa !28
  %indvars.iv.next.i.prol = add nuw nsw i64 %indvars.iv.i.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph.i.preheader.split.loopexit, label %.lr.ph.i.prol, !llvm.loop !74

.lr.ph.i.preheader.split.loopexit:                ; preds = %.lr.ph.i.prol
  %50 = zext i32 %48 to i64
  %51 = add nuw nsw i64 %50, 1
  br label %.lr.ph.i.preheader.split

.lr.ph.i.preheader.split:                         ; preds = %.lr.ph.i.preheader.split.loopexit, %.lr.ph.i.preheader
  %indvars.iv.i.unr = phi i64 [ 0, %.lr.ph.i.preheader ], [ %51, %.lr.ph.i.preheader.split.loopexit ]
  %52 = icmp ult i32 %44, 7
  br i1 %52, label %poll_init.exit.thread, label %.lr.ph.i.preheader5

.lr.ph.i.preheader5:                              ; preds = %.lr.ph.i.preheader.split
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i.preheader5, %.lr.ph.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i.7, %.lr.ph.i ], [ %indvars.iv.i.unr, %.lr.ph.i.preheader5 ]
  %53 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %43, i64 %indvars.iv.i, i32 0
  store i32 -1, i32* %53, align 4, !tbaa !28
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %54 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %43, i64 %indvars.iv.next.i, i32 0
  store i32 -1, i32* %54, align 4, !tbaa !28
  %indvars.iv.next.i.1 = add nsw i64 %indvars.iv.i, 2
  %55 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %43, i64 %indvars.iv.next.i.1, i32 0
  store i32 -1, i32* %55, align 4, !tbaa !28
  %indvars.iv.next.i.2 = add nsw i64 %indvars.iv.i, 3
  %56 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %43, i64 %indvars.iv.next.i.2, i32 0
  store i32 -1, i32* %56, align 4, !tbaa !28
  %indvars.iv.next.i.3 = add nsw i64 %indvars.iv.i, 4
  %57 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %43, i64 %indvars.iv.next.i.3, i32 0
  store i32 -1, i32* %57, align 4, !tbaa !28
  %indvars.iv.next.i.4 = add nsw i64 %indvars.iv.i, 5
  %58 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %43, i64 %indvars.iv.next.i.4, i32 0
  store i32 -1, i32* %58, align 4, !tbaa !28
  %indvars.iv.next.i.5 = add nsw i64 %indvars.iv.i, 6
  %59 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %43, i64 %indvars.iv.next.i.5, i32 0
  store i32 -1, i32* %59, align 4, !tbaa !28
  %indvars.iv.next.i.6 = add nsw i64 %indvars.iv.i, 7
  %60 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %43, i64 %indvars.iv.next.i.6, i32 0
  store i32 -1, i32* %60, align 4, !tbaa !28
  %indvars.iv.next.i.7 = add nsw i64 %indvars.iv.i, 8
  %lftr.wideiv.7 = trunc i64 %indvars.iv.next.i.7 to i32
  %exitcond.7 = icmp eq i32 %lftr.wideiv.7, %23
  br i1 %exitcond.7, label %poll_init.exit.thread.loopexit, label %.lr.ph.i

poll_init.exit.thread.loopexit:                   ; preds = %.lr.ph.i
  br label %poll_init.exit.thread

poll_init.exit.thread:                            ; preds = %poll_init.exit.thread.loopexit, %._crit_edge, %.lr.ph.i.preheader.split, %22
  %.0 = phi i32 [ -1, %22 ], [ %.mux, %._crit_edge ], [ %23, %.lr.ph.i.preheader.split ], [ %23, %poll_init.exit.thread.loopexit ]
  call void @llvm.lifetime.end(i64 16, i8* %1) #6
  ret i32 %.0
}

; Function Attrs: nounwind
declare i32 @getdtablesize() #2

; Function Attrs: nounwind
declare i32 @getrlimit(i32, %struct.timeval*) #2

; Function Attrs: nounwind
declare i32 @setrlimit(i32, %struct.timeval*) #2

; Function Attrs: nounwind
declare i32 @chroot(i8*) #2

; Function Attrs: noreturn nounwind uwtable
define internal void @handle_term(i32 %sig) #4 {
  tail call fastcc void @shut_down()
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.41, i64 0, i64 0), i32 %sig) #6
  tail call void @closelog() #6
  tail call void @exit(i32 1) #18
  unreachable
}

; Function Attrs: nounwind uwtable
define internal fastcc void @shut_down() unnamed_addr #8 {
  %tv = alloca %struct.timeval, align 8
  %1 = bitcast %struct.timeval* %tv to i8*
  call void @llvm.lifetime.start(i64 16, i8* %1) #6
  %2 = call i32 @gettimeofday(%struct.timeval* nonnull %tv, %struct.timezone* null) #6
  call fastcc void @logstats(%struct.timeval* nonnull %tv)
  %3 = load i32, i32* @max_connects, align 4, !tbaa !8
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %0
  %.pre = load %struct.connecttab*, %struct.connecttab** @connects, align 8, !tbaa !4
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %26
  %5 = phi %struct.connecttab* [ %.pre, %.lr.ph.preheader ], [ %27, %26 ]
  %indvars.iv = phi i64 [ 0, %.lr.ph.preheader ], [ %indvars.iv.next, %26 ]
  %6 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %5, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %6, align 8, !tbaa !22
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %12, label %9

; <label>:9                                       ; preds = %.lr.ph
  %10 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %5, i64 %indvars.iv, i32 2
  %11 = load %struct.httpd_conn*, %struct.httpd_conn** %10, align 8, !tbaa !25
  call void @httpd_close_conn(%struct.httpd_conn* %11, %struct.timeval* nonnull %tv) #6
  %.pre2 = load %struct.connecttab*, %struct.connecttab** @connects, align 8, !tbaa !4
  br label %12

; <label>:12                                      ; preds = %.lr.ph, %9
  %13 = phi %struct.connecttab* [ %5, %.lr.ph ], [ %.pre2, %9 ]
  %14 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %13, i64 %indvars.iv, i32 2
  %15 = load %struct.httpd_conn*, %struct.httpd_conn** %14, align 8, !tbaa !25
  %16 = icmp eq %struct.httpd_conn* %15, null
  br i1 %16, label %26, label %17

; <label>:17                                      ; preds = %12
  call void @httpd_destroy_conn(%struct.httpd_conn* nonnull %15) #6
  %18 = load %struct.connecttab*, %struct.connecttab** @connects, align 8, !tbaa !4
  %19 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %18, i64 %indvars.iv, i32 2
  %20 = bitcast %struct.httpd_conn** %19 to i8**
  %21 = load i8*, i8** %20, align 8, !tbaa !25
  call void @free(i8* %21) #6
  %22 = load i32, i32* @httpd_conn_count, align 4, !tbaa !8
  %23 = add nsw i32 %22, -1
  store i32 %23, i32* @httpd_conn_count, align 4, !tbaa !8
  %24 = load %struct.connecttab*, %struct.connecttab** @connects, align 8, !tbaa !4
  %25 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %24, i64 %indvars.iv, i32 2
  store %struct.httpd_conn* null, %struct.httpd_conn** %25, align 8, !tbaa !25
  br label %26

; <label>:26                                      ; preds = %12, %17
  %27 = phi %struct.connecttab* [ %13, %12 ], [ %24, %17 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %28 = load i32, i32* @max_connects, align 4, !tbaa !8
  %29 = sext i32 %28 to i64
  %30 = icmp slt i64 %indvars.iv.next, %29
  br i1 %30, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %26
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  %31 = load %struct.httpd_server*, %struct.httpd_server** @hs, align 8, !tbaa !4
  %32 = icmp eq %struct.httpd_server* %31, null
  br i1 %32, label %64, label %33

; <label>:33                                      ; preds = %._crit_edge
  store %struct.httpd_server* null, %struct.httpd_server** @hs, align 8, !tbaa !4
  %34 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %31, i64 0, i32 10
  %35 = bitcast i32* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = trunc i64 %36 to i32
  %38 = icmp eq i32 %37, -1
  br i1 %38, label %._crit_edge4, label %41

._crit_edge4:                                     ; preds = %33
  %39 = lshr i64 %36, 32
  %40 = trunc i64 %39 to i32
  br label %42

; <label>:41                                      ; preds = %33
  call void @fdwatch_del_fd(i32 %37) #6
  %.phi.trans.insert = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %31, i64 0, i32 11
  %.pre3 = load i32, i32* %.phi.trans.insert, align 4, !tbaa !31
  br label %42

; <label>:42                                      ; preds = %._crit_edge4, %41
  %43 = phi i32 [ %40, %._crit_edge4 ], [ %.pre3, %41 ]
  %44 = icmp eq i32 %43, -1
  br i1 %44, label %46, label %45

; <label>:45                                      ; preds = %42
  call void @fdwatch_del_fd(i32 %43) #6
  br label %46

; <label>:46                                      ; preds = %42, %45
  %47 = load i64, i64* %35, align 8
  %48 = trunc i64 %47 to i32
  %49 = icmp eq i32 %48, -1
  br i1 %49, label %._crit_edge.i.i, label %52

._crit_edge.i.i:                                  ; preds = %46
  %50 = lshr i64 %47, 32
  %51 = trunc i64 %50 to i32
  %.pre1.i.i = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %31, i64 0, i32 11
  br label %54

; <label>:52                                      ; preds = %46
  %53 = call i32 @close(i32 %48) #6
  store i32 -1, i32* %34, align 8, !tbaa !26
  %.phi.trans.insert.i.i = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %31, i64 0, i32 11
  %.pre.i.i = load i32, i32* %.phi.trans.insert.i.i, align 4, !tbaa !31
  br label %54

; <label>:54                                      ; preds = %52, %._crit_edge.i.i
  %.pre-phi.i.i = phi i32* [ %.pre1.i.i, %._crit_edge.i.i ], [ %.phi.trans.insert.i.i, %52 ]
  %55 = phi i32 [ %51, %._crit_edge.i.i ], [ %.pre.i.i, %52 ]
  %56 = icmp eq i32 %55, -1
  br i1 %56, label %httpd_unlisten.exit.i, label %57

; <label>:57                                      ; preds = %54
  %58 = call i32 @close(i32 %55) #6
  store i32 -1, i32* %.pre-phi.i.i, align 4, !tbaa !31
  br label %httpd_unlisten.exit.i

httpd_unlisten.exit.i:                            ; preds = %57, %54
  %59 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %31, i64 0, i32 13
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** %59, align 8, !tbaa !32
  %61 = icmp eq %struct._IO_FILE* %60, null
  br i1 %61, label %httpd_terminate.exit, label %62

; <label>:62                                      ; preds = %httpd_unlisten.exit.i
  %63 = call i32 @fclose(%struct._IO_FILE* nonnull %60) #6
  br label %httpd_terminate.exit

httpd_terminate.exit:                             ; preds = %httpd_unlisten.exit.i, %62
  call fastcc void @free_httpd_server(%struct.httpd_server* nonnull %31) #6
  br label %64

; <label>:64                                      ; preds = %._crit_edge, %httpd_terminate.exit
  call void @mmc_term() #6
  br label %.preheader.i

.preheader.i:                                     ; preds = %100, %64
  %indvars.iv.i = phi i64 [ 0, %64 ], [ %indvars.iv.next.i, %100 ]
  %65 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %indvars.iv.i
  %66 = load %struct.TimerStruct*, %struct.TimerStruct** %65, align 8, !tbaa !4
  %67 = icmp eq %struct.TimerStruct* %66, null
  br i1 %67, label %100, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.preheader.i
  %active_count.promoted.i = load i32, i32* @active_count, align 4, !tbaa !8
  %free_count.promoted.i = load i32, i32* @free_count.580, align 4, !tbaa !8
  br label %68

; <label>:68                                      ; preds = %tmr_cancel.exit.i, %.lr.ph.i
  %69 = phi i32 [ %free_count.promoted.i, %.lr.ph.i ], [ %97, %tmr_cancel.exit.i ]
  %70 = phi i32 [ %active_count.promoted.i, %.lr.ph.i ], [ %95, %tmr_cancel.exit.i ]
  %71 = phi %struct.TimerStruct* [ %66, %.lr.ph.i ], [ %98, %tmr_cancel.exit.i ]
  %72 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %71, i64 0, i32 5
  %73 = load %struct.TimerStruct*, %struct.TimerStruct** %72, align 8, !tbaa !76
  %74 = icmp eq %struct.TimerStruct* %73, null
  %75 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %71, i64 0, i32 6
  %76 = bitcast %struct.TimerStruct** %75 to i64*
  %77 = load i64, i64* %76, align 8, !tbaa !77
  %78 = ptrtoint %struct.TimerStruct* %73 to i64
  br i1 %74, label %79, label %86

; <label>:79                                      ; preds = %68
  %80 = inttoptr i64 %77 to %struct.TimerStruct*
  %81 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %71, i64 0, i32 7
  %82 = load i32, i32* %81, align 8, !tbaa !78
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %83
  %85 = bitcast %struct.TimerStruct** %84 to i64*
  store i64 %77, i64* %85, align 8, !tbaa !4
  br label %89

; <label>:86                                      ; preds = %68
  %87 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %73, i64 0, i32 6
  %88 = bitcast %struct.TimerStruct** %87 to i64*
  store i64 %77, i64* %88, align 8, !tbaa !77
  %.pre.i.i.i = load %struct.TimerStruct*, %struct.TimerStruct** %75, align 8, !tbaa !77
  br label %89

; <label>:89                                      ; preds = %86, %79
  %90 = phi %struct.TimerStruct* [ %.pre.i.i.i, %86 ], [ %80, %79 ]
  %91 = icmp eq %struct.TimerStruct* %90, null
  br i1 %91, label %tmr_cancel.exit.i, label %92

; <label>:92                                      ; preds = %89
  %93 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %90, i64 0, i32 5
  %94 = bitcast %struct.TimerStruct** %93 to i64*
  store i64 %78, i64* %94, align 8, !tbaa !76
  br label %tmr_cancel.exit.i

tmr_cancel.exit.i:                                ; preds = %92, %89
  %95 = add nsw i32 %70, -1
  %96 = load i64, i64* bitcast (%struct.TimerStruct** @free_timers to i64*), align 8, !tbaa !4
  store i64 %96, i64* %76, align 8, !tbaa !77
  store %struct.TimerStruct* %71, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %97 = add nsw i32 %69, 1
  store %struct.TimerStruct* null, %struct.TimerStruct** %72, align 8, !tbaa !76
  %98 = load %struct.TimerStruct*, %struct.TimerStruct** %65, align 8, !tbaa !4
  %99 = icmp eq %struct.TimerStruct* %98, null
  br i1 %99, label %._crit_edge.i, label %68

._crit_edge.i:                                    ; preds = %tmr_cancel.exit.i
  %.lcssa6 = phi i32 [ %97, %tmr_cancel.exit.i ]
  %.lcssa = phi i32 [ %95, %tmr_cancel.exit.i ]
  store i32 %.lcssa, i32* @active_count, align 4, !tbaa !8
  store i32 %.lcssa6, i32* @free_count.580, align 4, !tbaa !8
  br label %100

; <label>:100                                     ; preds = %._crit_edge.i, %.preheader.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.i = icmp eq i64 %indvars.iv.next.i, 67
  br i1 %exitcond.i, label %101, label %.preheader.i

; <label>:101                                     ; preds = %100
  %102 = load %struct.TimerStruct*, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %103 = icmp eq %struct.TimerStruct* %102, null
  br i1 %103, label %tmr_term.exit, label %.lr.ph.i.i.preheader

.lr.ph.i.i.preheader:                             ; preds = %101
  br label %.lr.ph.i.i

.lr.ph.i.i:                                       ; preds = %.lr.ph.i.i.preheader, %.lr.ph.i.i
  %104 = phi %struct.TimerStruct* [ %113, %.lr.ph.i.i ], [ %102, %.lr.ph.i.i.preheader ]
  %105 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %104, i64 0, i32 6
  %106 = bitcast %struct.TimerStruct** %105 to i64*
  %107 = load i64, i64* %106, align 8, !tbaa !77
  store i64 %107, i64* bitcast (%struct.TimerStruct** @free_timers to i64*), align 8, !tbaa !4
  %108 = load i32, i32* @free_count.580, align 4, !tbaa !8
  %109 = add nsw i32 %108, -1
  store i32 %109, i32* @free_count.580, align 4, !tbaa !8
  %110 = bitcast %struct.TimerStruct* %104 to i8*
  call void @free(i8* %110) #6
  %111 = load i32, i32* @alloc_count.581, align 4, !tbaa !8
  %112 = add nsw i32 %111, -1
  store i32 %112, i32* @alloc_count.581, align 4, !tbaa !8
  %113 = load %struct.TimerStruct*, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %114 = icmp eq %struct.TimerStruct* %113, null
  br i1 %114, label %tmr_term.exit.loopexit, label %.lr.ph.i.i

tmr_term.exit.loopexit:                           ; preds = %.lr.ph.i.i
  br label %tmr_term.exit

tmr_term.exit:                                    ; preds = %tmr_term.exit.loopexit, %101
  %115 = load i8*, i8** bitcast (%struct.connecttab** @connects to i8**), align 8, !tbaa !4
  call void @free(i8* %115) #6
  %116 = load %struct.throttletab*, %struct.throttletab** @throttles, align 8, !tbaa !4
  %117 = icmp eq %struct.throttletab* %116, null
  br i1 %117, label %120, label %118

; <label>:118                                     ; preds = %tmr_term.exit
  %119 = bitcast %struct.throttletab* %116 to i8*
  call void @free(i8* %119) #6
  br label %120

; <label>:120                                     ; preds = %tmr_term.exit, %118
  call void @llvm.lifetime.end(i64 16, i8* %1) #6
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @logstats(%struct.timeval* readonly %nowP) unnamed_addr #8 {
  %tv = alloca %struct.timeval, align 8
  %1 = bitcast %struct.timeval* %tv to i8*
  call void @llvm.lifetime.start(i64 16, i8* %1) #6
  %2 = icmp eq %struct.timeval* %nowP, null
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = call i32 @gettimeofday(%struct.timeval* nonnull %tv, %struct.timezone* null) #6
  br label %5

; <label>:5                                       ; preds = %3, %0
  %.0 = phi %struct.timeval* [ %tv, %3 ], [ %nowP, %0 ]
  %6 = getelementptr inbounds %struct.timeval, %struct.timeval* %.0, i64 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !45
  %8 = load i64, i64* @start_time, align 8, !tbaa !16
  %9 = sub nsw i64 %7, %8
  %10 = load i64, i64* @stats_time, align 8, !tbaa !16
  %11 = sub nsw i64 %7, %10
  %12 = icmp eq i64 %7, %10
  %. = select i1 %12, i64 1, i64 %11
  store i64 %7, i64* @stats_time, align 8, !tbaa !16
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([39 x i8], [39 x i8]* @.str.43, i64 0, i64 0), i64 %9, i64 %.) #6
  %13 = icmp sgt i64 %., 0
  br i1 %13, label %14, label %thttpd_logstats.exit

; <label>:14                                      ; preds = %5
  %15 = load i64, i64* @stats_connections, align 8, !tbaa !16
  %16 = sitofp i64 %15 to float
  %17 = sitofp i64 %. to float
  %18 = fdiv float %16, %17
  %19 = fpext float %18 to double
  %20 = load i32, i32* @stats_simultaneous, align 4, !tbaa !8
  %21 = load i64, i64* @stats_bytes, align 8, !tbaa !16
  %22 = sitofp i64 %21 to float
  %23 = fdiv float %22, %17
  %24 = fpext float %23 to double
  %25 = load i32, i32* @httpd_conn_count, align 4, !tbaa !8
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([104 x i8], [104 x i8]* @.str.44, i64 0, i64 0), i64 %15, double %19, i32 %20, i64 %21, double %24, i32 %25) #6
  br label %thttpd_logstats.exit

thttpd_logstats.exit:                             ; preds = %5, %14
  store i64 0, i64* @stats_connections, align 8, !tbaa !16
  store i64 0, i64* @stats_bytes, align 8, !tbaa !16
  store i32 0, i32* @stats_simultaneous, align 4, !tbaa !8
  %26 = load i32, i32* @str_alloc_count, align 4, !tbaa !8
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %httpd_logstats.exit

; <label>:28                                      ; preds = %thttpd_logstats.exit
  %29 = load i64, i64* @str_alloc_size, align 8, !tbaa !16
  %30 = uitofp i64 %29 to float
  %31 = sitofp i32 %26 to float
  %32 = fdiv float %30, %31
  %33 = fpext float %32 to double
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([60 x i8], [60 x i8]* @.str.58, i64 0, i64 0), i32 %26, i64 %29, double %33) #6
  br label %httpd_logstats.exit

httpd_logstats.exit:                              ; preds = %thttpd_logstats.exit, %28
  %34 = load i32, i32* @alloc_count, align 4, !tbaa !8
  %35 = load i32, i32* @map_count, align 4, !tbaa !8
  %36 = load i64, i64* @mapped_bytes, align 8, !tbaa !16
  %37 = load i32, i32* @free_count, align 4, !tbaa !8
  %38 = load i32, i32* @hash_size, align 4, !tbaa !8
  %39 = load i64, i64* @expire_age, align 8, !tbaa !16
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([92 x i8], [92 x i8]* @.str.8.574, i64 0, i64 0), i32 %34, i32 %35, i64 %36, i32 %37, i32 %38, i64 %39) #6
  %40 = load i32, i32* @map_count, align 4, !tbaa !8
  %41 = load i32, i32* @free_count, align 4, !tbaa !8
  %42 = add nsw i32 %41, %40
  %43 = load i32, i32* @alloc_count, align 4, !tbaa !8
  %44 = icmp eq i32 %42, %43
  br i1 %44, label %mmc_logstats.exit, label %45

; <label>:45                                      ; preds = %httpd_logstats.exit
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9.575, i64 0, i64 0)) #6
  br label %mmc_logstats.exit

mmc_logstats.exit:                                ; preds = %httpd_logstats.exit, %45
  br i1 %13, label %46, label %fdwatch_logstats.exit

; <label>:46                                      ; preds = %mmc_logstats.exit
  %47 = load i64, i64* @nwatches, align 8, !tbaa !16
  %48 = sitofp i64 %47 to float
  %49 = sitofp i64 %. to float
  %50 = fdiv float %48, %49
  %51 = fpext float %50 to double
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3.552, i64 0, i64 0), i64 %47, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.553, i64 0, i64 0), double %51) #6
  br label %fdwatch_logstats.exit

fdwatch_logstats.exit:                            ; preds = %mmc_logstats.exit, %46
  store i64 0, i64* @nwatches, align 8, !tbaa !16
  %52 = load i32, i32* @alloc_count.581, align 4, !tbaa !8
  %53 = load i32, i32* @active_count, align 4, !tbaa !8
  %54 = load i32, i32* @free_count.580, align 4, !tbaa !8
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([44 x i8], [44 x i8]* @.str.596, i64 0, i64 0), i32 %52, i32 %53, i32 %54) #6
  %55 = load i32, i32* @active_count, align 4, !tbaa !8
  %56 = load i32, i32* @free_count.580, align 4, !tbaa !8
  %57 = add nsw i32 %56, %55
  %58 = load i32, i32* @alloc_count.581, align 4, !tbaa !8
  %59 = icmp eq i32 %57, %58
  br i1 %59, label %tmr_logstats.exit, label %60

; <label>:60                                      ; preds = %fdwatch_logstats.exit
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.597, i64 0, i64 0)) #6
  br label %tmr_logstats.exit

tmr_logstats.exit:                                ; preds = %fdwatch_logstats.exit, %60
  call void @llvm.lifetime.end(i64 16, i8* %1) #6
  ret void
}

; Function Attrs: nounwind uwtable
define void @httpd_logstats(i64 %secs) #8 {
  %1 = load i32, i32* @str_alloc_count, align 4, !tbaa !8
  %2 = icmp sgt i32 %1, 0
  br i1 %2, label %3, label %9

; <label>:3                                       ; preds = %0
  %4 = load i64, i64* @str_alloc_size, align 8, !tbaa !16
  %5 = uitofp i64 %4 to float
  %6 = sitofp i32 %1 to float
  %7 = fdiv float %5, %6
  %8 = fpext float %7 to double
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([60 x i8], [60 x i8]* @.str.58, i64 0, i64 0), i32 %1, i64 %4, double %8) #6
  br label %9

; <label>:9                                       ; preds = %3, %0
  ret void
}

; Function Attrs: nounwind uwtable
define void @mmc_logstats(i64 %secs) #8 {
  %1 = load i32, i32* @alloc_count, align 4, !tbaa !8
  %2 = load i32, i32* @map_count, align 4, !tbaa !8
  %3 = load i64, i64* @mapped_bytes, align 8, !tbaa !16
  %4 = load i32, i32* @free_count, align 4, !tbaa !8
  %5 = load i32, i32* @hash_size, align 4, !tbaa !8
  %6 = load i64, i64* @expire_age, align 8, !tbaa !16
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.8.574, i64 0, i64 0), i32 %1, i32 %2, i64 %3, i32 %4, i32 %5, i64 %6) #6
  %7 = load i32, i32* @map_count, align 4, !tbaa !8
  %8 = load i32, i32* @free_count, align 4, !tbaa !8
  %9 = add nsw i32 %8, %7
  %10 = load i32, i32* @alloc_count, align 4, !tbaa !8
  %11 = icmp eq i32 %9, %10
  br i1 %11, label %13, label %12

; <label>:12                                      ; preds = %0
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9.575, i64 0, i64 0)) #6
  br label %13

; <label>:13                                      ; preds = %0, %12
  ret void
}

; Function Attrs: nounwind uwtable
define void @fdwatch_logstats(i64 %secs) #8 {
  %1 = icmp sgt i64 %secs, 0
  br i1 %1, label %2, label %8

; <label>:2                                       ; preds = %0
  %3 = load i64, i64* @nwatches, align 8, !tbaa !16
  %4 = sitofp i64 %3 to float
  %5 = sitofp i64 %secs to float
  %6 = fdiv float %4, %5
  %7 = fpext float %6 to double
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3.552, i64 0, i64 0), i64 %3, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.553, i64 0, i64 0), double %7) #6
  br label %8

; <label>:8                                       ; preds = %2, %0
  store i64 0, i64* @nwatches, align 8, !tbaa !16
  ret void
}

; Function Attrs: nounwind uwtable
define void @tmr_logstats(i64 %secs) #8 {
  %1 = load i32, i32* @alloc_count.581, align 4, !tbaa !8
  %2 = load i32, i32* @active_count, align 4, !tbaa !8
  %3 = load i32, i32* @free_count.580, align 4, !tbaa !8
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.596, i64 0, i64 0), i32 %1, i32 %2, i32 %3) #6
  %4 = load i32, i32* @active_count, align 4, !tbaa !8
  %5 = load i32, i32* @free_count.580, align 4, !tbaa !8
  %6 = add nsw i32 %5, %4
  %7 = load i32, i32* @alloc_count.581, align 4, !tbaa !8
  %8 = icmp eq i32 %6, %7
  br i1 %8, label %10, label %9

; <label>:9                                       ; preds = %0
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.597, i64 0, i64 0)) #6
  br label %10

; <label>:10                                      ; preds = %0, %9
  ret void
}

; Function Attrs: nounwind uwtable
define void @httpd_close_conn(%struct.httpd_conn* %hc, %struct.timeval* readonly %nowP) #8 {
  %url.i = alloca [305 x i8], align 16
  %bytes.i = alloca [40 x i8], align 16
  %now.i = alloca i64, align 8
  %date_nozone.i = alloca [100 x i8], align 16
  %date.i = alloca [100 x i8], align 16
  %1 = getelementptr inbounds [305 x i8], [305 x i8]* %url.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 305, i8* %1) #6
  %2 = getelementptr inbounds [40 x i8], [40 x i8]* %bytes.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 40, i8* %2) #6
  %3 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 1
  %4 = load %struct.httpd_server*, %struct.httpd_server** %3, align 8, !tbaa !79
  %5 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %4, i64 0, i32 12
  %6 = load i32, i32* %5, align 8, !tbaa !80
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %make_log_entry.exit

; <label>:8                                       ; preds = %0
  %9 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 31
  %10 = load i8*, i8** %9, align 8, !tbaa !81
  %11 = load i8, i8* %10, align 1, !tbaa !1
  %12 = icmp eq i8 %11, 0
  %..i = select i1 %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.538, i64 0, i64 0), i8* %10
  %13 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %4, i64 0, i32 15
  %14 = load i32, i32* %13, align 4, !tbaa !82
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %31, label %16

; <label>:16                                      ; preds = %8
  %17 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 54
  %18 = load i32, i32* %17, align 4, !tbaa !83
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %31

; <label>:20                                      ; preds = %16
  %21 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 50
  %22 = load i8*, i8** %21, align 8, !tbaa !84
  %23 = icmp eq i8* %22, null
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %20
  %25 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %4, i64 0, i32 1
  %26 = load i8*, i8** %25, align 8, !tbaa !85
  br label %27

; <label>:27                                      ; preds = %24, %20
  %28 = phi i8* [ %26, %24 ], [ %22, %20 ]
  %29 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %30 = load i8*, i8** %29, align 8, !tbaa !53
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %1, i64 305, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.539, i64 0, i64 0), i8* %28, i8* %30) #6
  br label %34

; <label>:31                                      ; preds = %16, %8
  %32 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %33 = load i8*, i8** %32, align 8, !tbaa !53
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %1, i64 305, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.540, i64 0, i64 0), i8* %33) #6
  br label %34

; <label>:34                                      ; preds = %31, %27
  %35 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 11
  %36 = load i64, i64* %35, align 8, !tbaa !61
  %37 = icmp sgt i64 %36, -1
  br i1 %37, label %38, label %39

; <label>:38                                      ; preds = %34
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %2, i64 40, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.541, i64 0, i64 0), i64 %36) #6
  br label %41

; <label>:39                                      ; preds = %34
  %40 = bitcast [40 x i8]* %bytes.i to i16*
  store i16 45, i16* %40, align 16
  br label %41

; <label>:41                                      ; preds = %39, %38
  %42 = load %struct.httpd_server*, %struct.httpd_server** %3, align 8, !tbaa !79
  %43 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %42, i64 0, i32 13
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %43, align 8, !tbaa !32
  %45 = icmp eq %struct._IO_FILE* %44, null
  br i1 %45, label %124, label %46

; <label>:46                                      ; preds = %41
  %47 = bitcast i64* %now.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %47) #6
  %48 = getelementptr inbounds [100 x i8], [100 x i8]* %date_nozone.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 100, i8* %48) #6
  %49 = getelementptr inbounds [100 x i8], [100 x i8]* %date.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 100, i8* %49) #6
  %50 = icmp eq %struct.timeval* %nowP, null
  br i1 %50, label %54, label %51

; <label>:51                                      ; preds = %46
  %52 = getelementptr inbounds %struct.timeval, %struct.timeval* %nowP, i64 0, i32 0
  %53 = load i64, i64* %52, align 8, !tbaa !45
  br label %56

; <label>:54                                      ; preds = %46
  %55 = tail call i64 @time(i64* null) #6
  br label %56

; <label>:56                                      ; preds = %54, %51
  %storemerge.i = phi i64 [ %55, %54 ], [ %53, %51 ]
  store i64 %storemerge.i, i64* %now.i, align 8, !tbaa !16
  %57 = call %struct.tm* @localtime(i64* nonnull %now.i) #6
  %58 = call i64 @strftime(i8* %48, i64 100, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.542, i64 0, i64 0), %struct.tm* %57) #6
  %59 = getelementptr inbounds %struct.tm, %struct.tm* %57, i64 0, i32 9
  %60 = load i64, i64* %59, align 8, !tbaa !86
  %61 = sdiv i64 %60, 60
  %62 = trunc i64 %61 to i32
  %63 = icmp sgt i32 %62, -1
  %64 = sub nsw i32 0, %62
  %zone.0.i = select i1 %63, i32 %62, i32 %64
  %65 = ashr i32 %62, 31
  %66 = and i32 %65, 2
  %67 = add nuw nsw i32 %66, 43
  %68 = sdiv i32 %zone.0.i, 60
  %69 = mul nsw i32 %68, 100
  %70 = srem i32 %zone.0.i, 60
  %71 = add nsw i32 %69, %70
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %49, i64 100, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.543, i64 0, i64 0), i8* %48, i32 %67, i32 %71) #6
  %72 = load %struct.httpd_server*, %struct.httpd_server** %3, align 8, !tbaa !79
  %73 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %72, i64 0, i32 13
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** %73, align 8, !tbaa !32
  %75 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %76 = bitcast %union.httpd_sockaddr* %75 to %struct.sockaddr*
  %77 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %75, i64 0, i32 0, i32 0
  %78 = load i16, i16* %77, align 8, !tbaa !88
  %switch.selectcmp.i.i = icmp eq i16 %78, 10
  %switch.selectcmp1.i.i = icmp eq i16 %78, 2
  %79 = select i1 %switch.selectcmp.i.i, i32 28, i32 0
  %80 = select i1 %switch.selectcmp1.i.i, i32 16, i32 %79
  %81 = call i32 @getnameinfo(%struct.sockaddr* %76, i32 %80, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %84, label %83

; <label>:83                                      ; preds = %56
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit

; <label>:84                                      ; preds = %56
  %85 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2, i32 0, i32 1
  %86 = bitcast i64* %85 to i32*
  %87 = load i32, i32* %86, align 4, !tbaa !8
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %httpd_ntoa.exit

; <label>:89                                      ; preds = %84
  %90 = bitcast i64* %85 to [4 x i32]*
  %91 = getelementptr inbounds [4 x i32], [4 x i32]* %90, i64 0, i64 1
  %92 = load i32, i32* %91, align 4, !tbaa !8
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %httpd_ntoa.exit

; <label>:94                                      ; preds = %89
  %95 = getelementptr inbounds i64, i64* %85, i64 1
  %96 = bitcast i64* %95 to i32*
  %97 = load i32, i32* %96, align 4, !tbaa !8
  %98 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %99 = icmp eq i32 %97, %98
  br i1 %99, label %100, label %httpd_ntoa.exit

; <label>:100                                     ; preds = %94
  %101 = call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %httpd_ntoa.exit

; <label>:103                                     ; preds = %100
  %104 = call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %105 = add i64 %104, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %105, i32 1, i1 false) #6
  br label %httpd_ntoa.exit

httpd_ntoa.exit:                                  ; preds = %83, %84, %89, %94, %100, %103
  %106 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 8
  %107 = load i32, i32* %106, align 4, !tbaa !91
  %switch.tableidx.i.i = add i32 %107, -1
  %108 = icmp ult i32 %switch.tableidx.i.i, 3
  br i1 %108, label %switch.lookup.i.i, label %httpd_method_str.exit.i

switch.lookup.i.i:                                ; preds = %httpd_ntoa.exit
  %109 = sext i32 %switch.tableidx.i.i to i64
  %switch.gep.i.i = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table, i64 0, i64 %109
  %switch.load.i.i = load i8*, i8** %switch.gep.i.i, align 8
  br label %httpd_method_str.exit.i

httpd_method_str.exit.i:                          ; preds = %switch.lookup.i.i, %httpd_ntoa.exit
  %110 = phi i8* [ %switch.load.i.i, %switch.lookup.i.i ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23.131, i64 0, i64 0), %httpd_ntoa.exit ]
  %111 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 14
  %112 = load i8*, i8** %111, align 8, !tbaa !92
  %113 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 9
  %114 = load i32, i32* %113, align 8, !tbaa !93
  %115 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 20
  %116 = load i8*, i8** %115, align 8, !tbaa !94
  %117 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 21
  %118 = load i8*, i8** %117, align 8, !tbaa !95
  %119 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %74, i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.544, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* %..i, i8* %49, i8* %110, i8* %1, i8* %112, i32 %114, i8* %2, i8* %116, i8* %118) #6
  %120 = load %struct.httpd_server*, %struct.httpd_server** %3, align 8, !tbaa !79
  %121 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %120, i64 0, i32 13
  %122 = load %struct._IO_FILE*, %struct._IO_FILE** %121, align 8, !tbaa !32
  %123 = call i32 @fflush(%struct._IO_FILE* %122) #6
  call void @llvm.lifetime.end(i64 100, i8* %49) #6
  call void @llvm.lifetime.end(i64 100, i8* %48) #6
  call void @llvm.lifetime.end(i64 8, i8* nonnull %47) #6
  br label %make_log_entry.exit

; <label>:124                                     ; preds = %41
  %125 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %126 = bitcast %union.httpd_sockaddr* %125 to %struct.sockaddr*
  %127 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %125, i64 0, i32 0, i32 0
  %128 = load i16, i16* %127, align 8, !tbaa !88
  %switch.selectcmp.i.i1 = icmp eq i16 %128, 10
  %switch.selectcmp1.i.i2 = icmp eq i16 %128, 2
  %129 = select i1 %switch.selectcmp.i.i1, i32 28, i32 0
  %130 = select i1 %switch.selectcmp1.i.i2, i32 16, i32 %129
  %131 = tail call i32 @getnameinfo(%struct.sockaddr* %126, i32 %130, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %134, label %133

; <label>:133                                     ; preds = %124
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit3

; <label>:134                                     ; preds = %124
  %135 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2, i32 0, i32 1
  %136 = bitcast i64* %135 to i32*
  %137 = load i32, i32* %136, align 4, !tbaa !8
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %httpd_ntoa.exit3

; <label>:139                                     ; preds = %134
  %140 = bitcast i64* %135 to [4 x i32]*
  %141 = getelementptr inbounds [4 x i32], [4 x i32]* %140, i64 0, i64 1
  %142 = load i32, i32* %141, align 4, !tbaa !8
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %httpd_ntoa.exit3

; <label>:144                                     ; preds = %139
  %145 = getelementptr inbounds i64, i64* %135, i64 1
  %146 = bitcast i64* %145 to i32*
  %147 = load i32, i32* %146, align 4, !tbaa !8
  %148 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %149 = icmp eq i32 %147, %148
  br i1 %149, label %150, label %httpd_ntoa.exit3

; <label>:150                                     ; preds = %144
  %151 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %httpd_ntoa.exit3

; <label>:153                                     ; preds = %150
  %154 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %155 = add i64 %154, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %155, i32 1, i1 false) #6
  br label %httpd_ntoa.exit3

httpd_ntoa.exit3:                                 ; preds = %133, %134, %139, %144, %150, %153
  %156 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 8
  %157 = load i32, i32* %156, align 4, !tbaa !91
  %switch.tableidx.i1.i = add i32 %157, -1
  %158 = icmp ult i32 %switch.tableidx.i1.i, 3
  br i1 %158, label %switch.lookup.i4.i, label %httpd_method_str.exit5.i

switch.lookup.i4.i:                               ; preds = %httpd_ntoa.exit3
  %159 = sext i32 %switch.tableidx.i1.i to i64
  %switch.gep.i2.i = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table, i64 0, i64 %159
  %switch.load.i3.i = load i8*, i8** %switch.gep.i2.i, align 8
  br label %httpd_method_str.exit5.i

httpd_method_str.exit5.i:                         ; preds = %switch.lookup.i4.i, %httpd_ntoa.exit3
  %160 = phi i8* [ %switch.load.i3.i, %switch.lookup.i4.i ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23.131, i64 0, i64 0), %httpd_ntoa.exit3 ]
  %161 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 14
  %162 = load i8*, i8** %161, align 8, !tbaa !92
  %163 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 9
  %164 = load i32, i32* %163, align 8, !tbaa !93
  %165 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 20
  %166 = load i8*, i8** %165, align 8, !tbaa !94
  %167 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 21
  %168 = load i8*, i8** %167, align 8, !tbaa !95
  call void (i32, i8*, ...) @syslog(i32 6, i8* nonnull getelementptr inbounds ([59 x i8], [59 x i8]* @.str.545, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* %..i, i8* %160, i8* %1, i8* %162, i32 %164, i8* %2, i8* %166, i8* %168) #6
  br label %make_log_entry.exit

make_log_entry.exit:                              ; preds = %0, %httpd_method_str.exit.i, %httpd_method_str.exit5.i
  call void @llvm.lifetime.end(i64 40, i8* %2) #6
  call void @llvm.lifetime.end(i64 305, i8* %1) #6
  %169 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 61
  %170 = load i8*, i8** %169, align 8, !tbaa !60
  %171 = icmp eq i8* %170, null
  br i1 %171, label %174, label %172

; <label>:172                                     ; preds = %make_log_entry.exit
  %173 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 59
  call void @mmc_unmap(i8* nonnull %170, %struct.stat* %173, %struct.timeval* %nowP) #6
  store i8* null, i8** %169, align 8, !tbaa !60
  br label %174

; <label>:174                                     ; preds = %make_log_entry.exit, %172
  %175 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 60
  %176 = load i32, i32* %175, align 8, !tbaa !38
  %177 = icmp sgt i32 %176, -1
  br i1 %177, label %178, label %180

; <label>:178                                     ; preds = %174
  %179 = call i32 @close(i32 %176) #6
  store i32 -1, i32* %175, align 8, !tbaa !38
  br label %180

; <label>:180                                     ; preds = %178, %174
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @my_snprintf(i8* nocapture %str, i64 %size, i8* nocapture readonly %format, ...) unnamed_addr #8 {
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %1 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.lifetime.start(i64 24, i8* %1) #6
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0
  call void @llvm.va_start(i8* %1)
  %3 = call i32 @vsnprintf(i8* %str, i64 %size, i8* %format, %struct.__va_list_tag* %2) #6
  call void @llvm.va_end(i8* %1)
  call void @llvm.lifetime.end(i64 24, i8* %1) #6
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #6

; Function Attrs: nounwind
declare i32 @vsnprintf(i8* nocapture, i64, i8* nocapture readonly, %struct.__va_list_tag*) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #6

; Function Attrs: nounwind
declare i64 @time(i64*) #2

; Function Attrs: nounwind
declare %struct.tm* @localtime(i64*) #2

; Function Attrs: nounwind
declare i64 @strftime(i8*, i64, i8*, %struct.tm*) #2

; Function Attrs: nounwind uwtable
define i8* @httpd_ntoa(%union.httpd_sockaddr* %saP) #8 {
  %1 = bitcast %union.httpd_sockaddr* %saP to %struct.sockaddr*
  %2 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %saP, i64 0, i32 0, i32 0
  %3 = load i16, i16* %2, align 8, !tbaa !88
  %switch.selectcmp.i = icmp eq i16 %3, 10
  %switch.selectcmp1.i = icmp eq i16 %3, 2
  %4 = select i1 %switch.selectcmp.i, i32 28, i32 0
  %5 = select i1 %switch.selectcmp1.i, i32 16, i32 %4
  %6 = tail call i32 @getnameinfo(%struct.sockaddr* %1, i32 %5, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %9, label %8

; <label>:8                                       ; preds = %0
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %.critedge

; <label>:9                                       ; preds = %0
  %10 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %saP, i64 0, i32 0, i32 1
  %11 = bitcast i64* %10 to i32*
  %12 = load i32, i32* %11, align 4, !tbaa !8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %.critedge

; <label>:14                                      ; preds = %9
  %15 = bitcast i64* %10 to [4 x i32]*
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %15, i64 0, i64 1
  %17 = load i32, i32* %16, align 4, !tbaa !8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %.critedge

; <label>:19                                      ; preds = %14
  %20 = getelementptr inbounds i64, i64* %10, i64 1
  %21 = bitcast i64* %20 to i32*
  %22 = load i32, i32* %21, align 4, !tbaa !8
  %23 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %24 = icmp eq i32 %22, %23
  br i1 %24, label %25, label %.critedge

; <label>:25                                      ; preds = %19
  %26 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %.critedge

; <label>:28                                      ; preds = %25
  %29 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %30 = add i64 %29, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %30, i32 1, i1 false)
  br label %.critedge

.critedge:                                        ; preds = %9, %14, %19, %25, %28, %8
  ret i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0)
}

declare i32 @getnameinfo(%struct.sockaddr*, i32, i8*, i32, i8*, i32, i32) #5

; Function Attrs: nounwind
declare i32 @fflush(%struct._IO_FILE* nocapture) #2

; Function Attrs: nounwind uwtable
define void @mmc_unmap(i8* readnone %addr, %struct.stat* readonly %sbP, %struct.timeval* readonly %nowP) #8 {
  %1 = icmp eq %struct.stat* %sbP, null
  br i1 %1, label %.thread.preheader, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.stat, %struct.stat* %sbP, i64 0, i32 1
  %4 = load i64, i64* %3, align 8, !tbaa !96
  %5 = getelementptr inbounds %struct.stat, %struct.stat* %sbP, i64 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !97
  %7 = getelementptr inbounds %struct.stat, %struct.stat* %sbP, i64 0, i32 8
  %8 = load i64, i64* %7, align 8, !tbaa !98
  %9 = getelementptr inbounds %struct.stat, %struct.stat* %sbP, i64 0, i32 13, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !99
  %11 = xor i64 %4, 177573
  %12 = mul i64 %11, 33
  %13 = xor i64 %12, %6
  %14 = mul i64 %13, 33
  %15 = xor i64 %14, %8
  %16 = mul i64 %15, 33
  %17 = xor i64 %16, %10
  %18 = trunc i64 %17 to i32
  %19 = load i32, i32* @hash_mask, align 4, !tbaa !8
  %20 = and i32 %18, %19
  %21 = load i32, i32* @hash_size, align 4, !tbaa !8
  %22 = add i32 %21, -1
  %23 = add i32 %22, %20
  %24 = and i32 %23, %19
  %25 = zext i32 %20 to i64
  %26 = load %struct.MapStruct**, %struct.MapStruct*** @hash_table, align 8, !tbaa !4
  %27 = getelementptr inbounds %struct.MapStruct*, %struct.MapStruct** %26, i64 %25
  %28 = load %struct.MapStruct*, %struct.MapStruct** %27, align 8, !tbaa !4
  %29 = icmp eq %struct.MapStruct* %28, null
  br i1 %29, label %.thread.preheader, label %.lr.ph.i.preheader

.lr.ph.i.preheader:                               ; preds = %2
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i.preheader, %52
  %30 = phi %struct.MapStruct* [ %57, %52 ], [ %28, %.lr.ph.i.preheader ]
  %i.01.i = phi i32 [ %54, %52 ], [ %20, %.lr.ph.i.preheader ]
  %31 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %30, i64 0, i32 7
  %32 = load i32, i32* %31, align 8, !tbaa !100
  %33 = icmp eq i32 %32, %20
  br i1 %33, label %34, label %50

; <label>:34                                      ; preds = %.lr.ph.i
  %35 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %30, i64 0, i32 0
  %36 = load i64, i64* %35, align 8, !tbaa !102
  %37 = icmp eq i64 %36, %4
  br i1 %37, label %38, label %50

; <label>:38                                      ; preds = %34
  %39 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %30, i64 0, i32 1
  %40 = load i64, i64* %39, align 8, !tbaa !103
  %41 = icmp eq i64 %40, %6
  br i1 %41, label %42, label %50

; <label>:42                                      ; preds = %38
  %43 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %30, i64 0, i32 2
  %44 = load i64, i64* %43, align 8, !tbaa !104
  %45 = icmp eq i64 %44, %8
  br i1 %45, label %46, label %50

; <label>:46                                      ; preds = %42
  %47 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %30, i64 0, i32 3
  %48 = load i64, i64* %47, align 8, !tbaa !105
  %49 = icmp eq i64 %48, %10
  br i1 %49, label %find_hash.exit, label %50

; <label>:50                                      ; preds = %46, %42, %38, %34, %.lr.ph.i
  %51 = icmp eq i32 %i.01.i, %24
  br i1 %51, label %.thread.preheader.loopexit, label %52

; <label>:52                                      ; preds = %50
  %53 = add i32 %i.01.i, 1
  %54 = and i32 %53, %19
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds %struct.MapStruct*, %struct.MapStruct** %26, i64 %55
  %57 = load %struct.MapStruct*, %struct.MapStruct** %56, align 8, !tbaa !4
  %58 = icmp eq %struct.MapStruct* %57, null
  br i1 %58, label %.thread.preheader.loopexit, label %.lr.ph.i

find_hash.exit:                                   ; preds = %46
  %.lcssa = phi %struct.MapStruct* [ %30, %46 ]
  %59 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %.lcssa, i64 0, i32 6
  %60 = load i8*, i8** %59, align 8, !tbaa !106
  %61 = icmp eq i8* %60, %addr
  br i1 %61, label %.loopexit, label %.thread.preheader

.thread.preheader.loopexit:                       ; preds = %50, %52
  br label %.thread.preheader

.thread.preheader:                                ; preds = %.thread.preheader.loopexit, %0, %find_hash.exit, %2
  %m.16 = load %struct.MapStruct*, %struct.MapStruct** @maps, align 8, !tbaa !4
  %62 = icmp eq %struct.MapStruct* %m.16, null
  br i1 %62, label %.thread._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %.thread.preheader
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.thread
  %m.17 = phi %struct.MapStruct* [ %m.1, %.thread ], [ %m.16, %.lr.ph.preheader ]
  %63 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.17, i64 0, i32 6
  %64 = load i8*, i8** %63, align 8, !tbaa !106
  %65 = icmp eq i8* %64, %addr
  br i1 %65, label %.loopexit.loopexit, label %.thread

.thread:                                          ; preds = %.lr.ph
  %66 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.17, i64 0, i32 9
  %m.1 = load %struct.MapStruct*, %struct.MapStruct** %66, align 8, !tbaa !4
  %67 = icmp eq %struct.MapStruct* %m.1, null
  br i1 %67, label %.thread._crit_edge.loopexit, label %.lr.ph

.thread._crit_edge.loopexit:                      ; preds = %.thread
  br label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %.thread._crit_edge.loopexit, %.thread.preheader
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6.566, i64 0, i64 0)) #6
  br label %82

.loopexit.loopexit:                               ; preds = %.lr.ph
  %m.17.lcssa = phi %struct.MapStruct* [ %m.17, %.lr.ph ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %find_hash.exit
  %m.2.ph = phi %struct.MapStruct* [ %.lcssa, %find_hash.exit ], [ %m.17.lcssa, %.loopexit.loopexit ]
  %68 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.2.ph, i64 0, i32 4
  %69 = load i32, i32* %68, align 8, !tbaa !107
  %70 = icmp slt i32 %69, 1
  br i1 %70, label %71, label %72

; <label>:71                                      ; preds = %.loopexit
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7.567, i64 0, i64 0)) #6
  br label %82

; <label>:72                                      ; preds = %.loopexit
  %73 = add nsw i32 %69, -1
  store i32 %73, i32* %68, align 8, !tbaa !107
  %74 = icmp eq %struct.timeval* %nowP, null
  br i1 %74, label %79, label %75

; <label>:75                                      ; preds = %72
  %76 = getelementptr inbounds %struct.timeval, %struct.timeval* %nowP, i64 0, i32 0
  %77 = load i64, i64* %76, align 8, !tbaa !45
  %78 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.2.ph, i64 0, i32 5
  store i64 %77, i64* %78, align 8, !tbaa !108
  br label %82

; <label>:79                                      ; preds = %72
  %80 = tail call i64 @time(i64* null) #6
  %81 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.2.ph, i64 0, i32 5
  store i64 %80, i64* %81, align 8, !tbaa !108
  br label %82

; <label>:82                                      ; preds = %71, %79, %75, %.thread._crit_edge
  ret void
}

declare i32 @close(i32) #5

; Function Attrs: nounwind uwtable
define void @httpd_destroy_conn(%struct.httpd_conn* nocapture %hc) #8 {
  %1 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 0
  %2 = load i32, i32* %1, align 8, !tbaa !109
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %31, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 3
  %6 = load i8*, i8** %5, align 8, !tbaa !44
  tail call void @free(i8* %6) #6
  %7 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 13
  %8 = load i8*, i8** %7, align 8, !tbaa !110
  tail call void @free(i8* %8) #6
  %9 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 15
  %10 = load i8*, i8** %9, align 8, !tbaa !111
  tail call void @free(i8* %10) #6
  %11 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 16
  %12 = load i8*, i8** %11, align 8, !tbaa !48
  tail call void @free(i8* %12) #6
  %13 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 17
  %14 = load i8*, i8** %13, align 8, !tbaa !112
  tail call void @free(i8* %14) #6
  %15 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 18
  %16 = load i8*, i8** %15, align 8, !tbaa !113
  tail call void @free(i8* %16) #6
  %17 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 19
  %18 = load i8*, i8** %17, align 8, !tbaa !114
  tail call void @free(i8* %18) #6
  %19 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 22
  %20 = load i8*, i8** %19, align 8, !tbaa !115
  tail call void @free(i8* %20) #6
  %21 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 23
  %22 = load i8*, i8** %21, align 8, !tbaa !116
  tail call void @free(i8* %22) #6
  %23 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 27
  %24 = load i8*, i8** %23, align 8, !tbaa !117
  tail call void @free(i8* %24) #6
  %25 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 29
  %26 = load i8*, i8** %25, align 8, !tbaa !118
  tail call void @free(i8* %26) #6
  %27 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 31
  %28 = load i8*, i8** %27, align 8, !tbaa !81
  tail call void @free(i8* %28) #6
  %29 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 32
  %30 = load i8*, i8** %29, align 8, !tbaa !66
  tail call void @free(i8* %30) #6
  store i32 0, i32* %1, align 8, !tbaa !109
  br label %31

; <label>:31                                      ; preds = %0, %4
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #2

; Function Attrs: nounwind uwtable
define void @fdwatch_del_fd(i32 %fd) #8 {
  %1 = icmp sgt i32 %fd, -1
  %2 = load i32, i32* @nfiles, align 4
  %3 = icmp sgt i32 %2, %fd
  %or.cond = and i1 %1, %3
  br i1 %or.cond, label %4, label %10

; <label>:4                                       ; preds = %0
  %5 = sext i32 %fd to i64
  %6 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  %7 = getelementptr inbounds i32, i32* %6, i64 %5
  %8 = load i32, i32* %7, align 4, !tbaa !8
  %9 = icmp eq i32 %8, -1
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %0, %4
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1.539, i64 0, i64 0), i32 %fd) #6
  br label %36

; <label>:11                                      ; preds = %4
  %12 = load i32*, i32** @poll_fdidx, align 8, !tbaa !4
  %13 = getelementptr inbounds i32, i32* %12, i64 %5
  %14 = load i32, i32* %13, align 4, !tbaa !8
  %15 = icmp sgt i32 %14, -1
  %16 = icmp slt i32 %14, %2
  %or.cond.i = and i1 %15, %16
  br i1 %or.cond.i, label %18, label %17

; <label>:17                                      ; preds = %11
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6.540, i64 0, i64 0), i32 %14) #6
  %.pre = load i32*, i32** @fd_rw, align 8, !tbaa !4
  br label %poll_del_fd.exit

; <label>:18                                      ; preds = %11
  %19 = load i32, i32* @npoll_fds, align 4, !tbaa !8
  %20 = add nsw i32 %19, -1
  store i32 %20, i32* @npoll_fds, align 4, !tbaa !8
  %21 = sext i32 %14 to i64
  %22 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8, !tbaa !4
  %23 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %22, i64 %21
  %24 = sext i32 %20 to i64
  %25 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %22, i64 %24
  %26 = bitcast %struct.pollfd* %25 to i64*
  %27 = bitcast %struct.pollfd* %23 to i64*
  %28 = load i64, i64* %26, align 4
  store i64 %28, i64* %27, align 4
  %sext.i = shl i64 %28, 32
  %29 = ashr exact i64 %sext.i, 32
  %30 = getelementptr inbounds i32, i32* %12, i64 %29
  store i32 %14, i32* %30, align 4, !tbaa !8
  %31 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %22, i64 %24, i32 0
  store i32 -1, i32* %31, align 4, !tbaa !28
  store i32 -1, i32* %13, align 4, !tbaa !8
  br label %poll_del_fd.exit

poll_del_fd.exit:                                 ; preds = %17, %18
  %32 = phi i32* [ %.pre, %17 ], [ %6, %18 ]
  %33 = getelementptr inbounds i32, i32* %32, i64 %5
  store i32 -1, i32* %33, align 4, !tbaa !8
  %34 = load i8**, i8*** @fd_data, align 8, !tbaa !4
  %35 = getelementptr inbounds i8*, i8** %34, i64 %5
  store i8* null, i8** %35, align 8, !tbaa !4
  br label %36

; <label>:36                                      ; preds = %poll_del_fd.exit, %10
  ret void
}

; Function Attrs: nounwind uwtable
define void @httpd_terminate(%struct.httpd_server* nocapture %hs) #8 {
  %1 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 10
  %2 = bitcast i32* %1 to i64*
  %3 = load i64, i64* %2, align 8
  %4 = trunc i64 %3 to i32
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %._crit_edge.i, label %8

._crit_edge.i:                                    ; preds = %0
  %6 = lshr i64 %3, 32
  %7 = trunc i64 %6 to i32
  %.pre1.i = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 11
  br label %10

; <label>:8                                       ; preds = %0
  %9 = tail call i32 @close(i32 %4) #6
  store i32 -1, i32* %1, align 8, !tbaa !26
  %.phi.trans.insert.i = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 11
  %.pre.i = load i32, i32* %.phi.trans.insert.i, align 4, !tbaa !31
  br label %10

; <label>:10                                      ; preds = %8, %._crit_edge.i
  %.pre-phi.i = phi i32* [ %.pre1.i, %._crit_edge.i ], [ %.phi.trans.insert.i, %8 ]
  %11 = phi i32 [ %7, %._crit_edge.i ], [ %.pre.i, %8 ]
  %12 = icmp eq i32 %11, -1
  br i1 %12, label %httpd_unlisten.exit, label %13

; <label>:13                                      ; preds = %10
  %14 = tail call i32 @close(i32 %11) #6
  store i32 -1, i32* %.pre-phi.i, align 4, !tbaa !31
  br label %httpd_unlisten.exit

httpd_unlisten.exit:                              ; preds = %10, %13
  %15 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 13
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !tbaa !32
  %17 = icmp eq %struct._IO_FILE* %16, null
  br i1 %17, label %20, label %18

; <label>:18                                      ; preds = %httpd_unlisten.exit
  %19 = tail call i32 @fclose(%struct._IO_FILE* nonnull %16)
  br label %20

; <label>:20                                      ; preds = %httpd_unlisten.exit, %18
  tail call fastcc void @free_httpd_server(%struct.httpd_server* nonnull %hs)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @free_httpd_server(%struct.httpd_server* nocapture %hs) unnamed_addr #8 {
  %1 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 0
  %2 = load i8*, i8** %1, align 8, !tbaa !119
  %3 = icmp eq i8* %2, null
  br i1 %3, label %5, label %4

; <label>:4                                       ; preds = %0
  tail call void @free(i8* nonnull %2) #6
  br label %5

; <label>:5                                       ; preds = %0, %4
  %6 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 9
  %7 = load i8*, i8** %6, align 8, !tbaa !120
  %8 = icmp eq i8* %7, null
  br i1 %8, label %10, label %9

; <label>:9                                       ; preds = %5
  tail call void @free(i8* nonnull %7) #6
  br label %10

; <label>:10                                      ; preds = %5, %9
  %11 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8, !tbaa !121
  %13 = icmp eq i8* %12, null
  br i1 %13, label %15, label %14

; <label>:14                                      ; preds = %10
  tail call void @free(i8* nonnull %12) #6
  br label %15

; <label>:15                                      ; preds = %10, %14
  %16 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 6
  %17 = load i8*, i8** %16, align 8, !tbaa !122
  %18 = icmp eq i8* %17, null
  br i1 %18, label %20, label %19

; <label>:19                                      ; preds = %15
  tail call void @free(i8* nonnull %17) #6
  br label %20

; <label>:20                                      ; preds = %15, %19
  %21 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 7
  %22 = load i8*, i8** %21, align 8, !tbaa !123
  %23 = icmp eq i8* %22, null
  br i1 %23, label %25, label %24

; <label>:24                                      ; preds = %20
  tail call void @free(i8* nonnull %22) #6
  br label %25

; <label>:25                                      ; preds = %20, %24
  %26 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 17
  %27 = load i8*, i8** %26, align 8, !tbaa !124
  %28 = icmp eq i8* %27, null
  br i1 %28, label %30, label %29

; <label>:29                                      ; preds = %25
  tail call void @free(i8* nonnull %27) #6
  br label %30

; <label>:30                                      ; preds = %25, %29
  %31 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 18
  %32 = load i8*, i8** %31, align 8, !tbaa !125
  %33 = icmp eq i8* %32, null
  br i1 %33, label %35, label %34

; <label>:34                                      ; preds = %30
  tail call void @free(i8* nonnull %32) #6
  br label %35

; <label>:35                                      ; preds = %30, %34
  %36 = bitcast %struct.httpd_server* %hs to i8*
  tail call void @free(i8* %36) #6
  ret void
}

; Function Attrs: nounwind uwtable
define void @mmc_term() #8 {
  %1 = load %struct.MapStruct*, %struct.MapStruct** @maps, align 8, !tbaa !4
  %2 = icmp eq %struct.MapStruct* %1, null
  br i1 %2, label %.preheader, label %.lr.ph2.preheader

.lr.ph2.preheader:                                ; preds = %0
  br label %.lr.ph2

.preheader:                                       ; preds = %0
  %.pre = load %struct.MapStruct*, %struct.MapStruct** @free_maps, align 8, !tbaa !4
  %3 = icmp eq %struct.MapStruct* %.pre, null
  br i1 %3, label %._crit_edge, label %.lr.ph.preheader

.lr.ph2:                                          ; preds = %.lr.ph2.preheader, %really_unmap.exit
  %4 = phi %struct.MapStruct* [ %30, %really_unmap.exit ], [ %1, %.lr.ph2.preheader ]
  %5 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %4, i64 0, i32 2
  %6 = load i64, i64* %5, align 8, !tbaa !104
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %really_unmap.exit, label %8

; <label>:8                                       ; preds = %.lr.ph2
  %9 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %4, i64 0, i32 6
  %10 = load i8*, i8** %9, align 8, !tbaa !106
  %11 = tail call i32 @munmap(i8* %10, i64 %6) #6
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %really_unmap.exit

; <label>:13                                      ; preds = %8
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11.561, i64 0, i64 0)) #6
  br label %really_unmap.exit

really_unmap.exit:                                ; preds = %.lr.ph2, %8, %13
  %14 = load i64, i64* %5, align 8, !tbaa !104
  %15 = load i64, i64* @mapped_bytes, align 8, !tbaa !16
  %16 = sub nsw i64 %15, %14
  store i64 %16, i64* @mapped_bytes, align 8, !tbaa !16
  %17 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %4, i64 0, i32 9
  %18 = bitcast %struct.MapStruct** %17 to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !126
  store i64 %19, i64* bitcast (%struct.MapStruct** @maps to i64*), align 8, !tbaa !4
  %20 = load i32, i32* @map_count, align 4, !tbaa !8
  %21 = add nsw i32 %20, -1
  store i32 %21, i32* @map_count, align 4, !tbaa !8
  %22 = load i64, i64* bitcast (%struct.MapStruct** @free_maps to i64*), align 8, !tbaa !4
  store i64 %22, i64* %18, align 8, !tbaa !126
  store %struct.MapStruct* %4, %struct.MapStruct** @free_maps, align 8, !tbaa !4
  %23 = load i32, i32* @free_count, align 4, !tbaa !8
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* @free_count, align 4, !tbaa !8
  %25 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %4, i64 0, i32 8
  %26 = load i32, i32* %25, align 4, !tbaa !127
  %27 = sext i32 %26 to i64
  %28 = load %struct.MapStruct**, %struct.MapStruct*** @hash_table, align 8, !tbaa !4
  %29 = getelementptr inbounds %struct.MapStruct*, %struct.MapStruct** %28, i64 %27
  store %struct.MapStruct* null, %struct.MapStruct** %29, align 8, !tbaa !4
  %30 = load %struct.MapStruct*, %struct.MapStruct** @maps, align 8, !tbaa !4
  %31 = icmp eq %struct.MapStruct* %30, null
  br i1 %31, label %.lr.ph.preheader.loopexit, label %.lr.ph2

.lr.ph.preheader.loopexit:                        ; preds = %really_unmap.exit
  %.lcssa = phi %struct.MapStruct* [ %4, %really_unmap.exit ]
  br label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %.lr.ph.preheader.loopexit, %.preheader
  %.ph = phi %struct.MapStruct* [ %.pre, %.preheader ], [ %.lcssa, %.lr.ph.preheader.loopexit ]
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %32 = phi %struct.MapStruct* [ %41, %.lr.ph ], [ %.ph, %.lr.ph.preheader ]
  %33 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %32, i64 0, i32 9
  %34 = bitcast %struct.MapStruct** %33 to i64*
  %35 = load i64, i64* %34, align 8, !tbaa !126
  store i64 %35, i64* bitcast (%struct.MapStruct** @free_maps to i64*), align 8, !tbaa !4
  %36 = load i32, i32* @free_count, align 4, !tbaa !8
  %37 = add nsw i32 %36, -1
  store i32 %37, i32* @free_count, align 4, !tbaa !8
  %38 = bitcast %struct.MapStruct* %32 to i8*
  tail call void @free(i8* %38) #6
  %39 = load i32, i32* @alloc_count, align 4, !tbaa !8
  %40 = add nsw i32 %39, -1
  store i32 %40, i32* @alloc_count, align 4, !tbaa !8
  %41 = load %struct.MapStruct*, %struct.MapStruct** @free_maps, align 8, !tbaa !4
  %42 = icmp eq %struct.MapStruct* %41, null
  br i1 %42, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  ret void
}

; Function Attrs: nounwind
declare i32 @munmap(i8*, i64) #2

; Function Attrs: nounwind uwtable
define void @tmr_term() #8 {
  br label %.preheader

.preheader:                                       ; preds = %36, %0
  %indvars.iv = phi i64 [ 0, %0 ], [ %indvars.iv.next, %36 ]
  %1 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %indvars.iv
  %2 = load %struct.TimerStruct*, %struct.TimerStruct** %1, align 8, !tbaa !4
  %3 = icmp eq %struct.TimerStruct* %2, null
  br i1 %3, label %36, label %.lr.ph

.lr.ph:                                           ; preds = %.preheader
  %active_count.promoted = load i32, i32* @active_count, align 4, !tbaa !8
  %free_count.promoted = load i32, i32* @free_count.580, align 4, !tbaa !8
  br label %4

; <label>:4                                       ; preds = %.lr.ph, %tmr_cancel.exit
  %5 = phi i32 [ %free_count.promoted, %.lr.ph ], [ %33, %tmr_cancel.exit ]
  %6 = phi i32 [ %active_count.promoted, %.lr.ph ], [ %31, %tmr_cancel.exit ]
  %7 = phi %struct.TimerStruct* [ %2, %.lr.ph ], [ %34, %tmr_cancel.exit ]
  %8 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %7, i64 0, i32 5
  %9 = load %struct.TimerStruct*, %struct.TimerStruct** %8, align 8, !tbaa !76
  %10 = icmp eq %struct.TimerStruct* %9, null
  %11 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %7, i64 0, i32 6
  %12 = bitcast %struct.TimerStruct** %11 to i64*
  %13 = load i64, i64* %12, align 8, !tbaa !77
  %14 = ptrtoint %struct.TimerStruct* %9 to i64
  br i1 %10, label %15, label %22

; <label>:15                                      ; preds = %4
  %16 = inttoptr i64 %13 to %struct.TimerStruct*
  %17 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %7, i64 0, i32 7
  %18 = load i32, i32* %17, align 8, !tbaa !78
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %19
  %21 = bitcast %struct.TimerStruct** %20 to i64*
  store i64 %13, i64* %21, align 8, !tbaa !4
  br label %25

; <label>:22                                      ; preds = %4
  %23 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %9, i64 0, i32 6
  %24 = bitcast %struct.TimerStruct** %23 to i64*
  store i64 %13, i64* %24, align 8, !tbaa !77
  %.pre.i.i = load %struct.TimerStruct*, %struct.TimerStruct** %11, align 8, !tbaa !77
  br label %25

; <label>:25                                      ; preds = %22, %15
  %26 = phi %struct.TimerStruct* [ %.pre.i.i, %22 ], [ %16, %15 ]
  %27 = icmp eq %struct.TimerStruct* %26, null
  br i1 %27, label %tmr_cancel.exit, label %28

; <label>:28                                      ; preds = %25
  %29 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %26, i64 0, i32 5
  %30 = bitcast %struct.TimerStruct** %29 to i64*
  store i64 %14, i64* %30, align 8, !tbaa !76
  br label %tmr_cancel.exit

tmr_cancel.exit:                                  ; preds = %25, %28
  %31 = add nsw i32 %6, -1
  %32 = load i64, i64* bitcast (%struct.TimerStruct** @free_timers to i64*), align 8, !tbaa !4
  store i64 %32, i64* %12, align 8, !tbaa !77
  store %struct.TimerStruct* %7, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %33 = add nsw i32 %5, 1
  store %struct.TimerStruct* null, %struct.TimerStruct** %8, align 8, !tbaa !76
  %34 = load %struct.TimerStruct*, %struct.TimerStruct** %1, align 8, !tbaa !4
  %35 = icmp eq %struct.TimerStruct* %34, null
  br i1 %35, label %._crit_edge, label %4

._crit_edge:                                      ; preds = %tmr_cancel.exit
  %.lcssa6 = phi i32 [ %33, %tmr_cancel.exit ]
  %.lcssa = phi i32 [ %31, %tmr_cancel.exit ]
  store i32 %.lcssa, i32* @active_count, align 4, !tbaa !8
  store i32 %.lcssa6, i32* @free_count.580, align 4, !tbaa !8
  br label %36

; <label>:36                                      ; preds = %._crit_edge, %.preheader
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 67
  br i1 %exitcond, label %37, label %.preheader

; <label>:37                                      ; preds = %36
  %38 = load %struct.TimerStruct*, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %39 = icmp eq %struct.TimerStruct* %38, null
  br i1 %39, label %tmr_cleanup.exit, label %.lr.ph.i.preheader

.lr.ph.i.preheader:                               ; preds = %37
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i.preheader, %.lr.ph.i
  %40 = phi %struct.TimerStruct* [ %49, %.lr.ph.i ], [ %38, %.lr.ph.i.preheader ]
  %41 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %40, i64 0, i32 6
  %42 = bitcast %struct.TimerStruct** %41 to i64*
  %43 = load i64, i64* %42, align 8, !tbaa !77
  store i64 %43, i64* bitcast (%struct.TimerStruct** @free_timers to i64*), align 8, !tbaa !4
  %44 = load i32, i32* @free_count.580, align 4, !tbaa !8
  %45 = add nsw i32 %44, -1
  store i32 %45, i32* @free_count.580, align 4, !tbaa !8
  %46 = bitcast %struct.TimerStruct* %40 to i8*
  tail call void @free(i8* %46) #6
  %47 = load i32, i32* @alloc_count.581, align 4, !tbaa !8
  %48 = add nsw i32 %47, -1
  store i32 %48, i32* @alloc_count.581, align 4, !tbaa !8
  %49 = load %struct.TimerStruct*, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %50 = icmp eq %struct.TimerStruct* %49, null
  br i1 %50, label %tmr_cleanup.exit.loopexit, label %.lr.ph.i

tmr_cleanup.exit.loopexit:                        ; preds = %.lr.ph.i
  br label %tmr_cleanup.exit

tmr_cleanup.exit:                                 ; preds = %tmr_cleanup.exit.loopexit, %37
  ret void
}

declare void @closelog() #5

declare i32 @sigset(...) #5

; Function Attrs: nounwind uwtable
define internal void @handle_chld(i32 %sig) #8 {
  %status = alloca i32, align 4
  %1 = tail call i32* @__errno_location() #21
  %2 = load i32, i32* %1, align 4, !tbaa !8
  %3 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #6
  %4 = call i32 @waitpid(i32 -1, i32* nonnull %status, i32 1) #6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %.loopexit, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %0
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.backedge
  %6 = phi i32 [ %19, %.backedge ], [ %4, %.lr.ph.preheader ]
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %8, label %11

; <label>:8                                       ; preds = %.lr.ph
  %9 = load i32, i32* %1, align 4, !tbaa !8
  switch i32 %9, label %10 [
    i32 4, label %.backedge
    i32 11, label %.backedge
    i32 10, label %.loopexit.loopexit
  ]

; <label>:10                                      ; preds = %8
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.42, i64 0, i64 0)) #6
  br label %.loopexit

; <label>:11                                      ; preds = %.lr.ph
  %12 = load %struct.httpd_server*, %struct.httpd_server** @hs, align 8, !tbaa !4
  %13 = icmp eq %struct.httpd_server* %12, null
  br i1 %13, label %.backedge, label %14

; <label>:14                                      ; preds = %11
  %15 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %12, i64 0, i32 5
  %16 = load i32, i32* %15, align 4, !tbaa !128
  %17 = add nsw i32 %16, -1
  %18 = icmp slt i32 %16, 1
  %. = select i1 %18, i32 0, i32 %17
  store i32 %., i32* %15, align 4
  br label %.backedge

.backedge:                                        ; preds = %14, %11, %8, %8
  %19 = call i32 @waitpid(i32 -1, i32* nonnull %status, i32 1) #6
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %.loopexit.loopexit, label %.lr.ph

.loopexit.loopexit:                               ; preds = %8, %.backedge
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %0, %10
  store i32 %2, i32* %1, align 4, !tbaa !8
  call void @llvm.lifetime.end(i64 4, i8* %3) #6
  ret void
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #9

declare i32 @waitpid(i32, i32*, i32) #5

; Function Attrs: nounwind uwtable
define internal void @handle_hup(i32 %sig) #8 {
  %1 = tail call i32* @__errno_location() #21
  %2 = load i32, i32* %1, align 4, !tbaa !8
  store volatile i32 1, i32* @got_hup, align 4, !tbaa !8
  store i32 %2, i32* %1, align 4, !tbaa !8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @handle_usr1(i32 %sig) #8 {
  %1 = load i32, i32* @num_connects, align 4, !tbaa !8
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %4

; <label>:3                                       ; preds = %0
  tail call fastcc void @shut_down()
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.40, i64 0, i64 0)) #6
  tail call void @closelog() #6
  tail call void @exit(i32 0) #18
  unreachable

; <label>:4                                       ; preds = %0
  store volatile i32 1, i32* @got_usr1, align 4, !tbaa !8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @handle_usr2(i32 %sig) #8 {
  %1 = tail call i32* @__errno_location() #21
  %2 = load i32, i32* %1, align 4, !tbaa !8
  tail call fastcc void @logstats(%struct.timeval* null)
  store i32 %2, i32* %1, align 4, !tbaa !8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @handle_alrm(i32 %sig) #8 {
  %1 = tail call i32* @__errno_location() #21
  %2 = load i32, i32* %1, align 4, !tbaa !8
  %3 = load volatile i32, i32* @watchdog_flag, align 4, !tbaa !8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %0
  %6 = tail call i32 @chdir(i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i64 0, i64 0)) #6
  tail call void @abort() #18
  unreachable

; <label>:7                                       ; preds = %0
  store volatile i32 0, i32* @watchdog_flag, align 4, !tbaa !8
  %8 = tail call i32 @alarm(i32 360) #6
  store i32 %2, i32* %1, align 4, !tbaa !8
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() #7

; Function Attrs: nounwind
declare i32 @alarm(i32) #2

; Function Attrs: norecurse nounwind uwtable
define void @tmr_init() #10 {
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([67 x %struct.TimerStruct*]* @timers to i8*), i8 0, i64 536, i32 16, i1 false)
  store %struct.TimerStruct* null, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  store i32 0, i32* @free_count.580, align 4, !tbaa !8
  store i32 0, i32* @active_count, align 4, !tbaa !8
  store i32 0, i32* @alloc_count.581, align 4, !tbaa !8
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.httpd_server* @httpd_initialize(i8* readonly %hostname, %union.httpd_sockaddr* %sa4P, %union.httpd_sockaddr* %sa6P, i16 zeroext %port, i8* readonly %cgi_pattern, i32 %cgi_limit, i8* nocapture readonly %charset, i8* nocapture readonly %p3p, i32 %max_age, i8* nocapture readonly %cwd, i32 %no_log, %struct._IO_FILE* %logfp, i32 %no_symlink_check, i32 %vhost, i32 %global_passwd, i8* readonly %url_pattern, i8* readonly %local_pattern, i32 %no_empty_referrers) #8 {
  %1 = tail call noalias i8* @malloc(i64 136) #6
  %2 = bitcast i8* %1 to %struct.httpd_server*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %0
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([41 x i8], [41 x i8]* @.str.50, i64 0, i64 0)) #6
  br label %186

; <label>:5                                       ; preds = %0
  %6 = icmp eq i8* %hostname, null
  br i1 %6, label %15, label %7

; <label>:7                                       ; preds = %5
  %8 = tail call noalias i8* @__strdup(i8* nonnull %hostname) #6
  %9 = bitcast i8* %1 to i8**
  store i8* %8, i8** %9, align 8, !tbaa !119
  %10 = icmp eq i8* %8, null
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %7
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1.51, i64 0, i64 0)) #6
  br label %186

; <label>:12                                      ; preds = %7
  %13 = getelementptr inbounds i8, i8* %1, i64 8
  %14 = bitcast i8* %13 to i8**
  store i8* %8, i8** %14, align 8, !tbaa !85
  br label %25

; <label>:15                                      ; preds = %5
  %16 = getelementptr inbounds i8, i8* %1, i64 8
  %17 = bitcast i8* %16 to i8**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull %1, i8 0, i64 16, i32 8, i1 false)
  %18 = tail call i32 @gethostname(i8* nonnull getelementptr inbounds ([256 x i8], [256 x i8]* @httpd_initialize.ghnbuf, i64 0, i64 0), i64 256) #6
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %.thread, label %20

.thread:                                          ; preds = %15
  store i8 0, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @httpd_initialize.ghnbuf, i64 0, i64 0), align 16, !tbaa !1
  br label %25

; <label>:20                                      ; preds = %15
  %.pre = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @httpd_initialize.ghnbuf, i64 0, i64 0), align 16
  %21 = load i8*, i8** %17, align 8, !tbaa !85
  %22 = icmp ne i8* %21, null
  %23 = icmp eq i8 %.pre, 0
  %or.cond = or i1 %23, %22
  br i1 %or.cond, label %25, label %24

; <label>:24                                      ; preds = %20
  store i8* getelementptr inbounds ([256 x i8], [256 x i8]* @httpd_initialize.ghnbuf, i64 0, i64 0), i8** %17, align 8, !tbaa !85
  br label %25

; <label>:25                                      ; preds = %.thread, %20, %24, %12
  %26 = getelementptr inbounds i8, i8* %1, i64 16
  %27 = bitcast i8* %26 to i16*
  store i16 %port, i16* %27, align 8, !tbaa !129
  %28 = icmp eq i8* %cgi_pattern, null
  br i1 %28, label %29, label %32

; <label>:29                                      ; preds = %25
  %30 = getelementptr inbounds i8, i8* %1, i64 24
  %31 = bitcast i8* %30 to i8**
  store i8* null, i8** %31, align 8, !tbaa !121
  br label %.loopexit

; <label>:32                                      ; preds = %25
  %33 = load i8, i8* %cgi_pattern, align 1, !tbaa !1
  %34 = icmp eq i8 %33, 47
  %35 = getelementptr inbounds i8, i8* %cgi_pattern, i64 1
  %.cgi_pattern = select i1 %34, i8* %35, i8* %cgi_pattern
  %36 = tail call noalias i8* @__strdup(i8* %.cgi_pattern) #6
  %37 = getelementptr inbounds i8, i8* %1, i64 24
  %38 = bitcast i8* %37 to i8**
  store i8* %36, i8** %38, align 8, !tbaa !121
  %39 = icmp eq i8* %36, null
  br i1 %39, label %42, label %.preheader

.preheader:                                       ; preds = %32
  %40 = tail call i8* @strstr(i8* nonnull %36, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3.52, i64 0, i64 0)) #13
  %41 = icmp eq i8* %40, null
  br i1 %41, label %.loopexit, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %.preheader
  br label %.lr.ph

; <label>:42                                      ; preds = %32
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2.53, i64 0, i64 0)) #6
  br label %186

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %43 = phi i8* [ %49, %.lr.ph ], [ %40, %.lr.ph.preheader ]
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  %45 = getelementptr inbounds i8, i8* %43, i64 2
  %46 = tail call i64 @strlen(i8* %45) #13
  %47 = add i64 %46, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %44, i8* %45, i64 %47, i32 1, i1 false)
  %48 = load i8*, i8** %38, align 8, !tbaa !121
  %49 = tail call i8* @strstr(i8* %48, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3.52, i64 0, i64 0)) #13
  %50 = icmp eq i8* %49, null
  br i1 %50, label %.loopexit.loopexit, label %.lr.ph

.loopexit.loopexit:                               ; preds = %.lr.ph
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %.preheader, %29
  %51 = getelementptr inbounds i8, i8* %1, i64 32
  %52 = bitcast i8* %51 to i32*
  store i32 %cgi_limit, i32* %52, align 8, !tbaa !130
  %53 = getelementptr inbounds i8, i8* %1, i64 36
  %54 = bitcast i8* %53 to i32*
  store i32 0, i32* %54, align 4, !tbaa !128
  %55 = tail call noalias i8* @__strdup(i8* %charset) #6
  %56 = getelementptr inbounds i8, i8* %1, i64 40
  %57 = bitcast i8* %56 to i8**
  store i8* %55, i8** %57, align 8, !tbaa !122
  %58 = tail call noalias i8* @__strdup(i8* %p3p) #6
  %59 = getelementptr inbounds i8, i8* %1, i64 48
  %60 = bitcast i8* %59 to i8**
  store i8* %58, i8** %60, align 8, !tbaa !123
  %61 = getelementptr inbounds i8, i8* %1, i64 56
  %62 = bitcast i8* %61 to i32*
  store i32 %max_age, i32* %62, align 8, !tbaa !131
  %63 = tail call noalias i8* @__strdup(i8* %cwd) #6
  %64 = getelementptr inbounds i8, i8* %1, i64 64
  %65 = bitcast i8* %64 to i8**
  store i8* %63, i8** %65, align 8, !tbaa !120
  %66 = icmp eq i8* %63, null
  br i1 %66, label %67, label %68

; <label>:67                                      ; preds = %.loopexit
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4.54, i64 0, i64 0)) #6
  br label %186

; <label>:68                                      ; preds = %.loopexit
  %69 = icmp eq i8* %url_pattern, null
  br i1 %69, label %70, label %73

; <label>:70                                      ; preds = %68
  %71 = getelementptr inbounds i8, i8* %1, i64 112
  %72 = bitcast i8* %71 to i8**
  store i8* null, i8** %72, align 8, !tbaa !124
  br label %79

; <label>:73                                      ; preds = %68
  %74 = tail call noalias i8* @__strdup(i8* nonnull %url_pattern) #6
  %75 = getelementptr inbounds i8, i8* %1, i64 112
  %76 = bitcast i8* %75 to i8**
  store i8* %74, i8** %76, align 8, !tbaa !124
  %77 = icmp eq i8* %74, null
  br i1 %77, label %78, label %79

; <label>:78                                      ; preds = %73
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.55, i64 0, i64 0)) #6
  br label %186

; <label>:79                                      ; preds = %73, %70
  %80 = icmp eq i8* %local_pattern, null
  br i1 %80, label %81, label %84

; <label>:81                                      ; preds = %79
  %82 = getelementptr inbounds i8, i8* %1, i64 120
  %83 = bitcast i8* %82 to i8**
  store i8* null, i8** %83, align 8, !tbaa !125
  br label %httpd_set_logfp.exit

; <label>:84                                      ; preds = %79
  %85 = tail call noalias i8* @__strdup(i8* nonnull %local_pattern) #6
  %86 = getelementptr inbounds i8, i8* %1, i64 120
  %87 = bitcast i8* %86 to i8**
  store i8* %85, i8** %87, align 8, !tbaa !125
  %88 = icmp eq i8* %85, null
  br i1 %88, label %89, label %httpd_set_logfp.exit

; <label>:89                                      ; preds = %84
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.6.56, i64 0, i64 0)) #6
  br label %186

httpd_set_logfp.exit:                             ; preds = %84, %81
  %90 = getelementptr inbounds i8, i8* %1, i64 80
  %91 = bitcast i8* %90 to i32*
  store i32 %no_log, i32* %91, align 8, !tbaa !80
  %92 = getelementptr inbounds i8, i8* %1, i64 88
  %93 = bitcast i8* %92 to %struct._IO_FILE**
  store %struct._IO_FILE* %logfp, %struct._IO_FILE** %93, align 8, !tbaa !32
  %94 = getelementptr inbounds i8, i8* %1, i64 96
  %95 = bitcast i8* %94 to i32*
  store i32 %no_symlink_check, i32* %95, align 8, !tbaa !132
  %96 = getelementptr inbounds i8, i8* %1, i64 100
  %97 = bitcast i8* %96 to i32*
  store i32 %vhost, i32* %97, align 4, !tbaa !82
  %98 = getelementptr inbounds i8, i8* %1, i64 104
  %99 = bitcast i8* %98 to i32*
  store i32 %global_passwd, i32* %99, align 8, !tbaa !133
  %100 = getelementptr inbounds i8, i8* %1, i64 128
  %101 = bitcast i8* %100 to i32*
  store i32 %no_empty_referrers, i32* %101, align 8, !tbaa !134
  %102 = icmp eq %union.httpd_sockaddr* %sa6P, null
  br i1 %102, label %103, label %106

; <label>:103                                     ; preds = %httpd_set_logfp.exit
  %104 = getelementptr inbounds i8, i8* %1, i64 76
  %105 = bitcast i8* %104 to i32*
  store i32 -1, i32* %105, align 4, !tbaa !31
  br label %110

; <label>:106                                     ; preds = %httpd_set_logfp.exit
  %107 = tail call fastcc i32 @initialize_listen_socket(%union.httpd_sockaddr* nonnull %sa6P)
  %108 = getelementptr inbounds i8, i8* %1, i64 76
  %109 = bitcast i8* %108 to i32*
  store i32 %107, i32* %109, align 4, !tbaa !31
  br label %110

; <label>:110                                     ; preds = %106, %103
  %111 = phi i32 [ %107, %106 ], [ -1, %103 ]
  %112 = icmp eq %union.httpd_sockaddr* %sa4P, null
  br i1 %112, label %.thread5, label %115

.thread5:                                         ; preds = %110
  %113 = getelementptr inbounds i8, i8* %1, i64 72
  %114 = bitcast i8* %113 to i32*
  store i32 -1, i32* %114, align 8, !tbaa !26
  br label %119

; <label>:115                                     ; preds = %110
  %116 = tail call fastcc i32 @initialize_listen_socket(%union.httpd_sockaddr* nonnull %sa4P)
  %117 = getelementptr inbounds i8, i8* %1, i64 72
  %118 = bitcast i8* %117 to i32*
  store i32 %116, i32* %118, align 8, !tbaa !26
  %phitmp = icmp eq i32 %116, -1
  br i1 %phitmp, label %._crit_edge, label %123

._crit_edge:                                      ; preds = %115
  %.phi.trans.insert = getelementptr inbounds i8, i8* %1, i64 76
  %.phi.trans.insert1 = bitcast i8* %.phi.trans.insert to i32*
  %.pre2 = load i32, i32* %.phi.trans.insert1, align 4, !tbaa !31
  br label %119

; <label>:119                                     ; preds = %._crit_edge, %.thread5
  %120 = phi i32 [ %111, %.thread5 ], [ %.pre2, %._crit_edge ]
  %.pre-phi37 = phi i32* [ %114, %.thread5 ], [ %118, %._crit_edge ]
  %121 = icmp eq i32 %120, -1
  br i1 %121, label %122, label %123

; <label>:122                                     ; preds = %119
  tail call fastcc void @free_httpd_server(%struct.httpd_server* nonnull %2)
  br label %186

; <label>:123                                     ; preds = %119, %115
  %.pre-phi36 = phi i32* [ %.pre-phi37, %119 ], [ %118, %115 ]
  tail call void @qsort(i8* nonnull bitcast ([3 x %struct.mime_entry]* @enc_tab to i8*), i64 3, i64 32, i32 (i8*, i8*)* nonnull @ext_compare) #6
  tail call void @qsort(i8* nonnull bitcast ([193 x %struct.mime_entry]* @typ_tab to i8*), i64 193, i64 32, i32 (i8*, i8*)* nonnull @ext_compare) #6
  %124 = load i8*, i8** getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 0, i32 0), align 16, !tbaa !135
  %125 = tail call i64 @strlen(i8* %124) #13
  store i64 %125, i64* getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 0, i32 1), align 8, !tbaa !137
  %126 = load i8*, i8** getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 0, i32 2), align 16, !tbaa !138
  %127 = tail call i64 @strlen(i8* %126) #13
  store i64 %127, i64* getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 0, i32 3), align 8, !tbaa !139
  %128 = load i8*, i8** getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 1, i32 0), align 16, !tbaa !135
  %129 = tail call i64 @strlen(i8* %128) #13
  store i64 %129, i64* getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 1, i32 1), align 8, !tbaa !137
  %130 = load i8*, i8** getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 1, i32 2), align 16, !tbaa !138
  %131 = tail call i64 @strlen(i8* %130) #13
  store i64 %131, i64* getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 1, i32 3), align 8, !tbaa !139
  %132 = load i8*, i8** getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 2, i32 0), align 16, !tbaa !135
  %133 = tail call i64 @strlen(i8* %132) #13
  store i64 %133, i64* getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 2, i32 1), align 8, !tbaa !137
  %134 = load i8*, i8** getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 2, i32 2), align 16, !tbaa !138
  %135 = tail call i64 @strlen(i8* %134) #13
  store i64 %135, i64* getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 2, i32 3), align 8, !tbaa !139
  br label %.preheader.i

.preheader.i:                                     ; preds = %.preheader.i, %123
  %indvars.iv.i = phi i64 [ 0, %123 ], [ %indvars.iv.next.i, %.preheader.i ]
  %136 = getelementptr inbounds [193 x %struct.mime_entry], [193 x %struct.mime_entry]* @typ_tab, i64 0, i64 %indvars.iv.i, i32 0
  %137 = load i8*, i8** %136, align 16, !tbaa !135
  %138 = tail call i64 @strlen(i8* %137) #13
  %139 = getelementptr inbounds [193 x %struct.mime_entry], [193 x %struct.mime_entry]* @typ_tab, i64 0, i64 %indvars.iv.i, i32 1
  store i64 %138, i64* %139, align 8, !tbaa !137
  %140 = getelementptr inbounds [193 x %struct.mime_entry], [193 x %struct.mime_entry]* @typ_tab, i64 0, i64 %indvars.iv.i, i32 2
  %141 = load i8*, i8** %140, align 16, !tbaa !138
  %142 = tail call i64 @strlen(i8* %141) #13
  %143 = getelementptr inbounds [193 x %struct.mime_entry], [193 x %struct.mime_entry]* @typ_tab, i64 0, i64 %indvars.iv.i, i32 3
  store i64 %142, i64* %143, align 8, !tbaa !139
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.i = icmp eq i64 %indvars.iv.next.i, 193
  br i1 %exitcond.i, label %init_mime.exit, label %.preheader.i

init_mime.exit:                                   ; preds = %.preheader.i
  %144 = bitcast i8* %1 to i8**
  %145 = load i8*, i8** %144, align 8, !tbaa !119
  %146 = icmp eq i8* %145, null
  br i1 %146, label %147, label %150

; <label>:147                                     ; preds = %init_mime.exit
  %148 = load i16, i16* %27, align 8, !tbaa !129
  %149 = zext i16 %148 to i32
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8.97, i64 0, i64 0), i32 %149) #6
  br label %186

; <label>:150                                     ; preds = %init_mime.exit
  %151 = load i32, i32* %.pre-phi36, align 8, !tbaa !26
  %152 = icmp ne i32 %151, -1
  %153 = select i1 %152, %union.httpd_sockaddr* %sa4P, %union.httpd_sockaddr* %sa6P
  %154 = bitcast %union.httpd_sockaddr* %153 to %struct.sockaddr*
  %155 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %153, i64 0, i32 0, i32 0
  %156 = load i16, i16* %155, align 8, !tbaa !88
  %switch.selectcmp.i.i = icmp eq i16 %156, 10
  %switch.selectcmp1.i.i = icmp eq i16 %156, 2
  %157 = select i1 %switch.selectcmp.i.i, i32 28, i32 0
  %158 = select i1 %switch.selectcmp1.i.i, i32 16, i32 %157
  %159 = tail call i32 @getnameinfo(%struct.sockaddr* %154, i32 %158, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %162, label %161

; <label>:161                                     ; preds = %150
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit

; <label>:162                                     ; preds = %150
  %163 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %153, i64 0, i32 0, i32 1
  %164 = bitcast i64* %163 to i32*
  %165 = load i32, i32* %164, align 4, !tbaa !8
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %httpd_ntoa.exit

; <label>:167                                     ; preds = %162
  %168 = bitcast i64* %163 to [4 x i32]*
  %169 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i64 0, i64 1
  %170 = load i32, i32* %169, align 4, !tbaa !8
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %httpd_ntoa.exit

; <label>:172                                     ; preds = %167
  %173 = getelementptr inbounds i64, i64* %163, i64 1
  %174 = bitcast i64* %173 to i32*
  %175 = load i32, i32* %174, align 4, !tbaa !8
  %176 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %177 = icmp eq i32 %175, %176
  br i1 %177, label %178, label %httpd_ntoa.exit

; <label>:178                                     ; preds = %172
  %179 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %httpd_ntoa.exit

; <label>:181                                     ; preds = %178
  %182 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %183 = add i64 %182, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %183, i32 1, i1 false) #6
  br label %httpd_ntoa.exit

httpd_ntoa.exit:                                  ; preds = %161, %162, %167, %172, %178, %181
  %184 = load i16, i16* %27, align 8, !tbaa !129
  %185 = zext i16 %184 to i32
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9.98, i64 0, i64 0), i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8.97, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 %185) #6
  br label %186

; <label>:186                                     ; preds = %147, %httpd_ntoa.exit, %122, %89, %78, %67, %42, %11, %4
  %.0 = phi %struct.httpd_server* [ null, %4 ], [ null, %11 ], [ null, %67 ], [ null, %122 ], [ null, %89 ], [ null, %78 ], [ null, %42 ], [ %2, %httpd_ntoa.exit ], [ %2, %147 ]
  ret %struct.httpd_server* %.0
}

; Function Attrs: nounwind
declare i32 @gethostname(i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal fastcc i32 @initialize_listen_socket(%union.httpd_sockaddr* %saP) unnamed_addr #8 {
  %on = alloca i32, align 4
  %1 = bitcast i32* %on to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #6
  %2 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %saP, i64 0, i32 0, i32 0
  %3 = load i16, i16* %2, align 8, !tbaa !88
  %4 = zext i16 %3 to i32
  switch i32 %4, label %5 [
    i32 2, label %sockaddr_check.exit
    i32 10, label %sockaddr_check.exit
  ]

; <label>:5                                       ; preds = %0
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([41 x i8], [41 x i8]* @.str.59, i64 0, i64 0)) #6
  br label %95

sockaddr_check.exit:                              ; preds = %0, %0
  %6 = bitcast %union.httpd_sockaddr* %saP to %struct.sockaddr*
  %7 = tail call i32 @socket(i32 %4, i32 1, i32 0) #6
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %38

; <label>:9                                       ; preds = %sockaddr_check.exit
  %10 = load i16, i16* %2, align 8, !tbaa !88
  %switch.selectcmp.i.i = icmp eq i16 %10, 10
  %switch.selectcmp1.i.i = icmp eq i16 %10, 2
  %11 = select i1 %switch.selectcmp.i.i, i32 28, i32 0
  %12 = select i1 %switch.selectcmp1.i.i, i32 16, i32 %11
  %13 = tail call i32 @getnameinfo(%struct.sockaddr* %6, i32 %12, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

; <label>:15                                      ; preds = %9
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit

; <label>:16                                      ; preds = %9
  %17 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %saP, i64 0, i32 0, i32 1
  %18 = bitcast i64* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %httpd_ntoa.exit

; <label>:21                                      ; preds = %16
  %22 = bitcast i64* %17 to [4 x i32]*
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 1
  %24 = load i32, i32* %23, align 4, !tbaa !8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %httpd_ntoa.exit

; <label>:26                                      ; preds = %21
  %27 = getelementptr inbounds i64, i64* %17, i64 1
  %28 = bitcast i64* %27 to i32*
  %29 = load i32, i32* %28, align 4, !tbaa !8
  %30 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %31 = icmp eq i32 %29, %30
  br i1 %31, label %32, label %httpd_ntoa.exit

; <label>:32                                      ; preds = %26
  %33 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %httpd_ntoa.exit

; <label>:35                                      ; preds = %32
  %36 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %37 = add i64 %36, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %37, i32 1, i1 false) #6
  br label %httpd_ntoa.exit

httpd_ntoa.exit:                                  ; preds = %15, %16, %21, %26, %32, %35
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.60.60, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0)) #6
  br label %95

; <label>:38                                      ; preds = %sockaddr_check.exit
  %39 = tail call i32 (i32, i32, ...) @fcntl(i32 %7, i32 2, i32 1) #6
  store i32 1, i32* %on, align 4, !tbaa !8
  %40 = call i32 @setsockopt(i32 %7, i32 1, i32 2, i8* %1, i32 4) #6
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %42, label %43

; <label>:42                                      ; preds = %38
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.61, i64 0, i64 0)) #6
  br label %43

; <label>:43                                      ; preds = %42, %38
  %44 = load i16, i16* %2, align 8, !tbaa !88
  %switch.selectcmp.i = icmp eq i16 %44, 10
  %switch.selectcmp1.i = icmp eq i16 %44, 2
  %45 = select i1 %switch.selectcmp.i, i32 28, i32 0
  %46 = select i1 %switch.selectcmp1.i, i32 16, i32 %45
  %47 = call i32 @bind(i32 %7, %struct.sockaddr* %6, i32 %46) #6
  %48 = icmp slt i32 %47, 0
  br i1 %48, label %49, label %79

; <label>:49                                      ; preds = %43
  %50 = load i16, i16* %2, align 8, !tbaa !88
  %switch.selectcmp.i.i1 = icmp eq i16 %50, 10
  %switch.selectcmp1.i.i2 = icmp eq i16 %50, 2
  %51 = select i1 %switch.selectcmp.i.i1, i32 28, i32 0
  %52 = select i1 %switch.selectcmp1.i.i2, i32 16, i32 %51
  %53 = call i32 @getnameinfo(%struct.sockaddr* nonnull %6, i32 %52, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %56, label %55

; <label>:55                                      ; preds = %49
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit3

; <label>:56                                      ; preds = %49
  %57 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %saP, i64 0, i32 0, i32 1
  %58 = bitcast i64* %57 to i32*
  %59 = load i32, i32* %58, align 4, !tbaa !8
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %httpd_ntoa.exit3

; <label>:61                                      ; preds = %56
  %62 = bitcast i64* %57 to [4 x i32]*
  %63 = getelementptr inbounds [4 x i32], [4 x i32]* %62, i64 0, i64 1
  %64 = load i32, i32* %63, align 4, !tbaa !8
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %httpd_ntoa.exit3

; <label>:66                                      ; preds = %61
  %67 = getelementptr inbounds i64, i64* %57, i64 1
  %68 = bitcast i64* %67 to i32*
  %69 = load i32, i32* %68, align 4, !tbaa !8
  %70 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %71 = icmp eq i32 %69, %70
  br i1 %71, label %72, label %httpd_ntoa.exit3

; <label>:72                                      ; preds = %66
  %73 = call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %httpd_ntoa.exit3

; <label>:75                                      ; preds = %72
  %76 = call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %77 = add i64 %76, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %77, i32 1, i1 false) #6
  br label %httpd_ntoa.exit3

httpd_ntoa.exit3:                                 ; preds = %55, %56, %61, %66, %72, %75
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0)) #6
  %78 = call i32 @close(i32 %7) #6
  br label %95

; <label>:79                                      ; preds = %43
  %80 = call i32 (i32, i32, ...) @fcntl(i32 %7, i32 3, i32 0) #6
  %81 = icmp eq i32 %80, -1
  br i1 %81, label %82, label %84

; <label>:82                                      ; preds = %79
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.63, i64 0, i64 0)) #6
  %83 = call i32 @close(i32 %7) #6
  br label %95

; <label>:84                                      ; preds = %79
  %85 = or i32 %80, 2048
  %86 = call i32 (i32, i32, ...) @fcntl(i32 %7, i32 4, i32 %85) #6
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %88, label %90

; <label>:88                                      ; preds = %84
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.64, i64 0, i64 0)) #6
  %89 = call i32 @close(i32 %7) #6
  br label %95

; <label>:90                                      ; preds = %84
  %91 = call i32 @listen(i32 %7, i32 1024) #6
  %92 = icmp slt i32 %91, 0
  br i1 %92, label %93, label %95

; <label>:93                                      ; preds = %90
  call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.65, i64 0, i64 0)) #6
  %94 = call i32 @close(i32 %7) #6
  br label %95

; <label>:95                                      ; preds = %90, %93, %88, %82, %httpd_ntoa.exit3, %httpd_ntoa.exit, %5
  %.0 = phi i32 [ -1, %httpd_ntoa.exit ], [ -1, %httpd_ntoa.exit3 ], [ -1, %82 ], [ -1, %88 ], [ -1, %93 ], [ -1, %5 ], [ %7, %90 ]
  call void @llvm.lifetime.end(i64 4, i8* %1) #6
  ret i32 %.0
}

; Function Attrs: nounwind
declare i32 @socket(i32, i32, i32) #2

; Function Attrs: nounwind
declare i32 @setsockopt(i32, i32, i32, i8*, i32) #2

; Function Attrs: nounwind
declare i32 @bind(i32, %struct.sockaddr*, i32) #2

; Function Attrs: nounwind
declare i32 @listen(i32, i32) #2

; Function Attrs: nounwind readonly uwtable
define internal i32 @ext_compare(i8* nocapture readonly %v1, i8* nocapture readonly %v2) #11 {
  %1 = bitcast i8* %v1 to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !135
  %3 = bitcast i8* %v2 to i8**
  %4 = load i8*, i8** %3, align 8, !tbaa !135
  %5 = tail call i32 @strcmp(i8* %2, i8* %4) #6
  ret i32 %5
}

declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) #5

; Function Attrs: nounwind uwtable
define internal void @occasional(i8* nocapture readnone %client_data.coerce, %struct.timeval* readonly %nowP) #8 {
  tail call void @mmc_cleanup(%struct.timeval* %nowP) #6
  %1 = load %struct.TimerStruct*, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %2 = icmp eq %struct.TimerStruct* %1, null
  br i1 %2, label %tmr_cleanup.exit, label %.lr.ph.i.preheader

.lr.ph.i.preheader:                               ; preds = %0
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i.preheader, %.lr.ph.i
  %3 = phi %struct.TimerStruct* [ %12, %.lr.ph.i ], [ %1, %.lr.ph.i.preheader ]
  %4 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %3, i64 0, i32 6
  %5 = bitcast %struct.TimerStruct** %4 to i64*
  %6 = load i64, i64* %5, align 8, !tbaa !77
  store i64 %6, i64* bitcast (%struct.TimerStruct** @free_timers to i64*), align 8, !tbaa !4
  %7 = load i32, i32* @free_count.580, align 4, !tbaa !8
  %8 = add nsw i32 %7, -1
  store i32 %8, i32* @free_count.580, align 4, !tbaa !8
  %9 = bitcast %struct.TimerStruct* %3 to i8*
  tail call void @free(i8* %9) #6
  %10 = load i32, i32* @alloc_count.581, align 4, !tbaa !8
  %11 = add nsw i32 %10, -1
  store i32 %11, i32* @alloc_count.581, align 4, !tbaa !8
  %12 = load %struct.TimerStruct*, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %13 = icmp eq %struct.TimerStruct* %12, null
  br i1 %13, label %tmr_cleanup.exit.loopexit, label %.lr.ph.i

tmr_cleanup.exit.loopexit:                        ; preds = %.lr.ph.i
  br label %tmr_cleanup.exit

tmr_cleanup.exit:                                 ; preds = %tmr_cleanup.exit.loopexit, %0
  store volatile i32 1, i32* @watchdog_flag, align 4, !tbaa !8
  ret void
}

; Function Attrs: nounwind uwtable
define void @mmc_cleanup(%struct.timeval* readonly %nowP) #8 {
  %1 = icmp eq %struct.timeval* %nowP, null
  br i1 %1, label %5, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.timeval, %struct.timeval* %nowP, i64 0, i32 0
  %4 = load i64, i64* %3, align 8, !tbaa !45
  br label %7

; <label>:5                                       ; preds = %0
  %6 = tail call i64 @time(i64* null) #6
  br label %7

; <label>:7                                       ; preds = %5, %2
  %now.0 = phi i64 [ %4, %2 ], [ %6, %5 ]
  %8 = load %struct.MapStruct*, %struct.MapStruct** @maps, align 8, !tbaa !4
  %9 = icmp eq %struct.MapStruct* %8, null
  br i1 %9, label %.outer._crit_edge, label %.lr.ph1.preheader

.lr.ph1.preheader:                                ; preds = %7
  br label %.lr.ph1

.lr.ph1:                                          ; preds = %.lr.ph1.preheader, %.outer
  %10 = phi %struct.MapStruct* [ %52, %.outer ], [ %8, %.lr.ph1.preheader ]
  %mm.0.ph3 = phi %struct.MapStruct** [ %51, %.outer ], [ @maps, %.lr.ph1.preheader ]
  %11 = bitcast %struct.MapStruct** %mm.0.ph3 to i64*
  br label %12

; <label>:12                                      ; preds = %.lr.ph1, %really_unmap.exit
  %13 = phi %struct.MapStruct* [ %10, %.lr.ph1 ], [ %49, %really_unmap.exit ]
  %14 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %13, i64 0, i32 4
  %15 = load i32, i32* %14, align 8, !tbaa !107
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %.outer

; <label>:17                                      ; preds = %12
  %18 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %13, i64 0, i32 5
  %19 = load i64, i64* %18, align 8, !tbaa !108
  %20 = sub nsw i64 %now.0, %19
  %21 = load i64, i64* @expire_age, align 8, !tbaa !16
  %22 = icmp slt i64 %20, %21
  br i1 %22, label %.outer, label %23

; <label>:23                                      ; preds = %17
  %24 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %13, i64 0, i32 2
  %25 = load i64, i64* %24, align 8, !tbaa !104
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %really_unmap.exit, label %27

; <label>:27                                      ; preds = %23
  %28 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %13, i64 0, i32 6
  %29 = load i8*, i8** %28, align 8, !tbaa !106
  %30 = tail call i32 @munmap(i8* %29, i64 %25) #6
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %really_unmap.exit

; <label>:32                                      ; preds = %27
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11.561, i64 0, i64 0)) #6
  br label %really_unmap.exit

really_unmap.exit:                                ; preds = %23, %27, %32
  %33 = load i64, i64* %24, align 8, !tbaa !104
  %34 = load i64, i64* @mapped_bytes, align 8, !tbaa !16
  %35 = sub nsw i64 %34, %33
  store i64 %35, i64* @mapped_bytes, align 8, !tbaa !16
  %36 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %13, i64 0, i32 9
  %37 = bitcast %struct.MapStruct** %36 to i64*
  %38 = load i64, i64* %37, align 8, !tbaa !126
  store i64 %38, i64* %11, align 8, !tbaa !4
  %39 = load i32, i32* @map_count, align 4, !tbaa !8
  %40 = add nsw i32 %39, -1
  store i32 %40, i32* @map_count, align 4, !tbaa !8
  %41 = load i64, i64* bitcast (%struct.MapStruct** @free_maps to i64*), align 8, !tbaa !4
  store i64 %41, i64* %37, align 8, !tbaa !126
  store %struct.MapStruct* %13, %struct.MapStruct** @free_maps, align 8, !tbaa !4
  %42 = load i32, i32* @free_count, align 4, !tbaa !8
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* @free_count, align 4, !tbaa !8
  %44 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %13, i64 0, i32 8
  %45 = load i32, i32* %44, align 4, !tbaa !127
  %46 = sext i32 %45 to i64
  %47 = load %struct.MapStruct**, %struct.MapStruct*** @hash_table, align 8, !tbaa !4
  %48 = getelementptr inbounds %struct.MapStruct*, %struct.MapStruct** %47, i64 %46
  store %struct.MapStruct* null, %struct.MapStruct** %48, align 8, !tbaa !4
  %49 = load %struct.MapStruct*, %struct.MapStruct** %mm.0.ph3, align 8, !tbaa !4
  %50 = icmp eq %struct.MapStruct* %49, null
  br i1 %50, label %.outer._crit_edge.loopexit, label %12

.outer:                                           ; preds = %17, %12
  %.lcssa = phi %struct.MapStruct* [ %13, %17 ], [ %13, %12 ]
  %51 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %.lcssa, i64 0, i32 9
  %52 = load %struct.MapStruct*, %struct.MapStruct** %51, align 8, !tbaa !4
  %53 = icmp eq %struct.MapStruct* %52, null
  br i1 %53, label %.outer._crit_edge.loopexit9, label %.lr.ph1

.outer._crit_edge.loopexit:                       ; preds = %really_unmap.exit
  br label %.outer._crit_edge

.outer._crit_edge.loopexit9:                      ; preds = %.outer
  br label %.outer._crit_edge

.outer._crit_edge:                                ; preds = %.outer._crit_edge.loopexit9, %.outer._crit_edge.loopexit, %7
  %54 = load i64, i64* @mapped_bytes, align 8, !tbaa !16
  %55 = icmp sgt i64 %54, 1000000000
  br i1 %55, label %56, label %62

; <label>:56                                      ; preds = %.outer._crit_edge
  %57 = load i64, i64* @expire_age, align 8, !tbaa !16
  %58 = shl nsw i64 %57, 1
  %59 = icmp sgt i64 %58, 182
  %60 = sdiv i64 %58, 3
  %61 = select i1 %59, i64 %60, i64 60
  store i64 %61, i64* @expire_age, align 8, !tbaa !16
  br label %.preheader

; <label>:62                                      ; preds = %.outer._crit_edge
  %63 = load i32, i32* @map_count, align 4, !tbaa !8
  %64 = icmp sgt i32 %63, 1000
  br i1 %64, label %65, label %71

; <label>:65                                      ; preds = %62
  %66 = load i64, i64* @expire_age, align 8, !tbaa !16
  %67 = shl nsw i64 %66, 1
  %68 = icmp sgt i64 %67, 182
  %69 = sdiv i64 %67, 3
  %70 = select i1 %68, i64 %69, i64 60
  store i64 %70, i64* @expire_age, align 8, !tbaa !16
  br label %.preheader

; <label>:71                                      ; preds = %62
  %72 = icmp slt i32 %63, 500
  br i1 %72, label %73, label %.preheader

; <label>:73                                      ; preds = %71
  %74 = load i64, i64* @expire_age, align 8, !tbaa !16
  %75 = mul nsw i64 %74, 5
  %76 = icmp slt i64 %75, 7200
  %77 = sdiv i64 %75, 4
  %78 = select i1 %76, i64 %77, i64 1800
  store i64 %78, i64* @expire_age, align 8, !tbaa !16
  br label %.preheader

.preheader:                                       ; preds = %65, %73, %71, %56
  %79 = load i32, i32* @free_count, align 4, !tbaa !8
  %80 = icmp sgt i32 %79, 100
  br i1 %80, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.preheader
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %81 = phi i32 [ %90, %.lr.ph ], [ %79, %.lr.ph.preheader ]
  %82 = load %struct.MapStruct*, %struct.MapStruct** @free_maps, align 8, !tbaa !4
  %83 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %82, i64 0, i32 9
  %84 = bitcast %struct.MapStruct** %83 to i64*
  %85 = load i64, i64* %84, align 8, !tbaa !126
  store i64 %85, i64* bitcast (%struct.MapStruct** @free_maps to i64*), align 8, !tbaa !4
  %86 = add nsw i32 %81, -1
  store i32 %86, i32* @free_count, align 4, !tbaa !8
  %87 = bitcast %struct.MapStruct* %82 to i8*
  tail call void @free(i8* %87) #6
  %88 = load i32, i32* @alloc_count, align 4, !tbaa !8
  %89 = add nsw i32 %88, -1
  store i32 %89, i32* @alloc_count, align 4, !tbaa !8
  %90 = load i32, i32* @free_count, align 4, !tbaa !8
  %91 = icmp sgt i32 %90, 100
  br i1 %91, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  ret void
}

; Function Attrs: nounwind uwtable
define void @tmr_cleanup() #8 {
  %1 = load %struct.TimerStruct*, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %2 = icmp eq %struct.TimerStruct* %1, null
  br i1 %2, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %0
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %3 = phi %struct.TimerStruct* [ %12, %.lr.ph ], [ %1, %.lr.ph.preheader ]
  %4 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %3, i64 0, i32 6
  %5 = bitcast %struct.TimerStruct** %4 to i64*
  %6 = load i64, i64* %5, align 8, !tbaa !77
  store i64 %6, i64* bitcast (%struct.TimerStruct** @free_timers to i64*), align 8, !tbaa !4
  %7 = load i32, i32* @free_count.580, align 4, !tbaa !8
  %8 = add nsw i32 %7, -1
  store i32 %8, i32* @free_count.580, align 4, !tbaa !8
  %9 = bitcast %struct.TimerStruct* %3 to i8*
  tail call void @free(i8* %9) #6
  %10 = load i32, i32* @alloc_count.581, align 4, !tbaa !8
  %11 = add nsw i32 %10, -1
  store i32 %11, i32* @alloc_count.581, align 4, !tbaa !8
  %12 = load %struct.TimerStruct*, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %13 = icmp eq %struct.TimerStruct* %12, null
  br i1 %13, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.TimerStruct* @tmr_create(%struct.timeval* readonly %nowP, void (i8*, %struct.timeval*)* %timer_proc, i8* %client_data.coerce, i64 %msecs, i32 %periodic) #8 {
  %1 = load %struct.TimerStruct*, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %2 = icmp eq %struct.TimerStruct* %1, null
  br i1 %2, label %9, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %1, i64 0, i32 6
  %5 = bitcast %struct.TimerStruct** %4 to i64*
  %6 = load i64, i64* %5, align 8, !tbaa !77
  store i64 %6, i64* bitcast (%struct.TimerStruct** @free_timers to i64*), align 8, !tbaa !4
  %7 = load i32, i32* @free_count.580, align 4, !tbaa !8
  %8 = add nsw i32 %7, -1
  store i32 %8, i32* @free_count.580, align 4, !tbaa !8
  br label %16

; <label>:9                                       ; preds = %0
  %10 = tail call noalias i8* @malloc(i64 72) #6
  %11 = icmp eq i8* %10, null
  br i1 %11, label %90, label %12

; <label>:12                                      ; preds = %9
  %13 = bitcast i8* %10 to %struct.TimerStruct*
  %14 = load i32, i32* @alloc_count.581, align 4, !tbaa !8
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* @alloc_count.581, align 4, !tbaa !8
  br label %16

; <label>:16                                      ; preds = %12, %3
  %t.0 = phi %struct.TimerStruct* [ %1, %3 ], [ %13, %12 ]
  %17 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.0, i64 0, i32 0
  store void (i8*, %struct.timeval*)* %timer_proc, void (i8*, %struct.timeval*)** %17, align 8, !tbaa !140
  %18 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.0, i64 0, i32 1, i32 0
  store i8* %client_data.coerce, i8** %18, align 8
  %19 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.0, i64 0, i32 2
  store i64 %msecs, i64* %19, align 8, !tbaa !141
  %20 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.0, i64 0, i32 3
  store i32 %periodic, i32* %20, align 8, !tbaa !142
  %21 = icmp eq %struct.timeval* %nowP, null
  %22 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.0, i64 0, i32 4
  br i1 %21, label %26, label %23

; <label>:23                                      ; preds = %16
  %24 = bitcast %struct.timeval* %22 to i8*
  %25 = bitcast %struct.timeval* %nowP to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 16, i32 8, i1 false), !tbaa.struct !143
  br label %28

; <label>:26                                      ; preds = %16
  %27 = tail call i32 @gettimeofday(%struct.timeval* %22, %struct.timezone* null) #6
  br label %28

; <label>:28                                      ; preds = %26, %23
  %29 = sdiv i64 %msecs, 1000
  %30 = getelementptr inbounds %struct.timeval, %struct.timeval* %22, i64 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !33
  %32 = add nsw i64 %31, %29
  store i64 %32, i64* %30, align 8, !tbaa !33
  %33 = srem i64 %msecs, 1000
  %34 = mul nsw i64 %33, 1000
  %35 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.0, i64 0, i32 4, i32 1
  %36 = load i64, i64* %35, align 8, !tbaa !36
  %37 = add nsw i64 %36, %34
  store i64 %37, i64* %35, align 8, !tbaa !36
  %38 = icmp sgt i64 %37, 999999
  br i1 %38, label %39, label %43

; <label>:39                                      ; preds = %28
  %40 = sdiv i64 %37, 1000000
  %41 = add nsw i64 %40, %32
  store i64 %41, i64* %30, align 8, !tbaa !33
  %42 = srem i64 %37, 1000000
  store i64 %42, i64* %35, align 8, !tbaa !36
  br label %43

; <label>:43                                      ; preds = %39, %28
  %44 = phi i64 [ %42, %39 ], [ %37, %28 ]
  %45 = phi i64 [ %41, %39 ], [ %32, %28 ]
  %46 = xor i64 %45, %44
  %47 = trunc i64 %46 to i32
  %48 = urem i32 %47, 67
  %49 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.0, i64 0, i32 7
  store i32 %48, i32* %49, align 8, !tbaa !78
  %50 = zext i32 %48 to i64
  %51 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %50
  %52 = load %struct.TimerStruct*, %struct.TimerStruct** %51, align 8, !tbaa !4
  %53 = icmp eq %struct.TimerStruct* %52, null
  br i1 %53, label %54, label %57

; <label>:54                                      ; preds = %43
  store %struct.TimerStruct* %t.0, %struct.TimerStruct** %51, align 8, !tbaa !4
  %55 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.0, i64 0, i32 5
  %56 = bitcast %struct.TimerStruct** %55 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %56, i8 0, i64 16, i32 8, i1 false) #6
  br label %l_add.exit

; <label>:57                                      ; preds = %43
  %58 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %52, i64 0, i32 4, i32 0
  %59 = load i64, i64* %58, align 8, !tbaa !33
  %60 = icmp slt i64 %45, %59
  br i1 %60, label %68, label %61

; <label>:61                                      ; preds = %57
  %62 = icmp eq i64 %45, %59
  br i1 %62, label %64, label %.preheader.i

.preheader.i:                                     ; preds = %64, %61
  %t2.0.in4.i = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %52, i64 0, i32 6
  %t2.05.i = load %struct.TimerStruct*, %struct.TimerStruct** %t2.0.in4.i, align 8, !tbaa !77
  %63 = icmp eq %struct.TimerStruct* %t2.05.i, null
  br i1 %63, label %._crit_edge.i, label %.lr.ph.i.preheader

.lr.ph.i.preheader:                               ; preds = %.preheader.i
  br label %.lr.ph.i

; <label>:64                                      ; preds = %61
  %65 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %52, i64 0, i32 4, i32 1
  %66 = load i64, i64* %65, align 8, !tbaa !36
  %67 = icmp sgt i64 %44, %66
  br i1 %67, label %.preheader.i, label %68

; <label>:68                                      ; preds = %64, %57
  store %struct.TimerStruct* %t.0, %struct.TimerStruct** %51, align 8, !tbaa !4
  %69 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.0, i64 0, i32 5
  store %struct.TimerStruct* null, %struct.TimerStruct** %69, align 8, !tbaa !76
  %70 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.0, i64 0, i32 6
  store %struct.TimerStruct* %52, %struct.TimerStruct** %70, align 8, !tbaa !77
  %71 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %52, i64 0, i32 5
  store %struct.TimerStruct* %t.0, %struct.TimerStruct** %71, align 8, !tbaa !76
  br label %l_add.exit

.lr.ph.i:                                         ; preds = %.lr.ph.i.preheader, %.backedge.i
  %t2.08.i = phi %struct.TimerStruct* [ %t2.0.i, %.backedge.i ], [ %t2.05.i, %.lr.ph.i.preheader ]
  %t2.0.in7.i = phi %struct.TimerStruct** [ %t2.0.in.i, %.backedge.i ], [ %t2.0.in4.i, %.lr.ph.i.preheader ]
  %.pn6.i = phi %struct.TimerStruct* [ %t2.08.i, %.backedge.i ], [ %52, %.lr.ph.i.preheader ]
  %72 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t2.08.i, i64 0, i32 4, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !33
  %74 = icmp slt i64 %45, %73
  br i1 %74, label %82, label %75

; <label>:75                                      ; preds = %.lr.ph.i
  %76 = icmp eq i64 %45, %73
  br i1 %76, label %77, label %.backedge.i

; <label>:77                                      ; preds = %75
  %78 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t2.08.i, i64 0, i32 4, i32 1
  %79 = load i64, i64* %78, align 8, !tbaa !36
  %80 = icmp sgt i64 %44, %79
  br i1 %80, label %.backedge.i, label %82

.backedge.i:                                      ; preds = %77, %75
  %t2.0.in.i = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t2.08.i, i64 0, i32 6
  %t2.0.i = load %struct.TimerStruct*, %struct.TimerStruct** %t2.0.in.i, align 8, !tbaa !77
  %81 = icmp eq %struct.TimerStruct* %t2.0.i, null
  br i1 %81, label %._crit_edge.i.loopexit, label %.lr.ph.i

; <label>:82                                      ; preds = %77, %.lr.ph.i
  %.pn6.i.lcssa = phi %struct.TimerStruct* [ %.pn6.i, %77 ], [ %.pn6.i, %.lr.ph.i ]
  %t2.0.in7.i.lcssa = phi %struct.TimerStruct** [ %t2.0.in7.i, %77 ], [ %t2.0.in7.i, %.lr.ph.i ]
  %t2.08.i.lcssa = phi %struct.TimerStruct* [ %t2.08.i, %77 ], [ %t2.08.i, %.lr.ph.i ]
  store %struct.TimerStruct* %t.0, %struct.TimerStruct** %t2.0.in7.i.lcssa, align 8, !tbaa !77
  %83 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.0, i64 0, i32 5
  store %struct.TimerStruct* %.pn6.i.lcssa, %struct.TimerStruct** %83, align 8, !tbaa !76
  %84 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.0, i64 0, i32 6
  store %struct.TimerStruct* %t2.08.i.lcssa, %struct.TimerStruct** %84, align 8, !tbaa !77
  %85 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t2.08.i.lcssa, i64 0, i32 5
  store %struct.TimerStruct* %t.0, %struct.TimerStruct** %85, align 8, !tbaa !76
  br label %l_add.exit

._crit_edge.i.loopexit:                           ; preds = %.backedge.i
  %t2.0.in.i.lcssa = phi %struct.TimerStruct** [ %t2.0.in.i, %.backedge.i ]
  %t2.08.i.lcssa16 = phi %struct.TimerStruct* [ %t2.08.i, %.backedge.i ]
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i.loopexit, %.preheader.i
  %t2.0.in.lcssa.i = phi %struct.TimerStruct** [ %t2.0.in4.i, %.preheader.i ], [ %t2.0.in.i.lcssa, %._crit_edge.i.loopexit ]
  %.pn.lcssa.i = phi %struct.TimerStruct* [ %52, %.preheader.i ], [ %t2.08.i.lcssa16, %._crit_edge.i.loopexit ]
  store %struct.TimerStruct* %t.0, %struct.TimerStruct** %t2.0.in.lcssa.i, align 8, !tbaa !77
  %86 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.0, i64 0, i32 5
  store %struct.TimerStruct* %.pn.lcssa.i, %struct.TimerStruct** %86, align 8, !tbaa !76
  %87 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.0, i64 0, i32 6
  store %struct.TimerStruct* null, %struct.TimerStruct** %87, align 8, !tbaa !77
  br label %l_add.exit

l_add.exit:                                       ; preds = %54, %68, %82, %._crit_edge.i
  %88 = load i32, i32* @active_count, align 4, !tbaa !8
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* @active_count, align 4, !tbaa !8
  br label %90

; <label>:90                                      ; preds = %9, %l_add.exit
  %.0 = phi %struct.TimerStruct* [ %t.0, %l_add.exit ], [ null, %9 ]
  ret %struct.TimerStruct* %.0
}

; Function Attrs: nounwind uwtable
define internal void @idle(i8* nocapture readnone %client_data.coerce, %struct.timeval* %nowP) #8 {
  %1 = load i32, i32* @max_connects, align 4, !tbaa !8
  %2 = icmp sgt i32 %1, 0
  br i1 %2, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %3 = getelementptr inbounds %struct.timeval, %struct.timeval* %nowP, i64 0, i32 0
  br label %4

; <label>:4                                       ; preds = %.lr.ph, %93
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %93 ]
  %5 = load %struct.connecttab*, %struct.connecttab** @connects, align 8, !tbaa !4
  %6 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %5, i64 %indvars.iv
  %7 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %6, i64 0, i32 0
  %8 = load i32, i32* %7, align 8, !tbaa !22
  switch i32 %8, label %93 [
    i32 1, label %9
    i32 2, label %53
    i32 3, label %53
  ]

; <label>:9                                       ; preds = %4
  %10 = load i64, i64* %3, align 8, !tbaa !45
  %11 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %5, i64 %indvars.iv, i32 8
  %12 = load i64, i64* %11, align 8, !tbaa !46
  %13 = sub nsw i64 %10, %12
  %14 = icmp sgt i64 %13, 59
  br i1 %14, label %15, label %93

; <label>:15                                      ; preds = %9
  %16 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %5, i64 %indvars.iv, i32 2
  %17 = load %struct.httpd_conn*, %struct.httpd_conn** %16, align 8, !tbaa !25
  %18 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %17, i64 0, i32 2
  %19 = bitcast %union.httpd_sockaddr* %18 to %struct.sockaddr*
  %20 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %18, i64 0, i32 0, i32 0
  %21 = load i16, i16* %20, align 8, !tbaa !88
  %switch.selectcmp.i.i = icmp eq i16 %21, 10
  %switch.selectcmp1.i.i = icmp eq i16 %21, 2
  %22 = select i1 %switch.selectcmp.i.i, i32 28, i32 0
  %23 = select i1 %switch.selectcmp1.i.i, i32 16, i32 %22
  %24 = tail call i32 @getnameinfo(%struct.sockaddr* %19, i32 %23, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %27, label %26

; <label>:26                                      ; preds = %15
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit

; <label>:27                                      ; preds = %15
  %28 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %17, i64 0, i32 2, i32 0, i32 1
  %29 = bitcast i64* %28 to i32*
  %30 = load i32, i32* %29, align 4, !tbaa !8
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %httpd_ntoa.exit

; <label>:32                                      ; preds = %27
  %33 = bitcast i64* %28 to [4 x i32]*
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %33, i64 0, i64 1
  %35 = load i32, i32* %34, align 4, !tbaa !8
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %httpd_ntoa.exit

; <label>:37                                      ; preds = %32
  %38 = getelementptr inbounds i64, i64* %28, i64 1
  %39 = bitcast i64* %38 to i32*
  %40 = load i32, i32* %39, align 4, !tbaa !8
  %41 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %42 = icmp eq i32 %40, %41
  br i1 %42, label %43, label %httpd_ntoa.exit

; <label>:43                                      ; preds = %37
  %44 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %httpd_ntoa.exit

; <label>:46                                      ; preds = %43
  %47 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %48 = add i64 %47, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %48, i32 1, i1 false) #6
  br label %httpd_ntoa.exit

httpd_ntoa.exit:                                  ; preds = %26, %27, %32, %37, %43, %46
  tail call void (i32, i8*, ...) @syslog(i32 6, i8* nonnull getelementptr inbounds ([35 x i8], [35 x i8]* @.str.135, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0)) #6
  %49 = load %struct.httpd_conn*, %struct.httpd_conn** %16, align 8, !tbaa !25
  %50 = load i8*, i8** @httpd_err408title, align 8, !tbaa !4
  %51 = load i8*, i8** @httpd_err408form, align 8, !tbaa !4
  tail call void @httpd_send_err(%struct.httpd_conn* %49, i32 408, i8* %50, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %51, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0)) #6
  %52 = load %struct.httpd_conn*, %struct.httpd_conn** %16, align 8, !tbaa !25
  tail call void @httpd_write_response(%struct.httpd_conn* %52) #6
  tail call fastcc void @clear_connection(%struct.connecttab* nonnull %6, %struct.timeval* nonnull %nowP) #6
  br label %93

; <label>:53                                      ; preds = %4, %4
  %54 = load i64, i64* %3, align 8, !tbaa !45
  %55 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %5, i64 %indvars.iv, i32 8
  %56 = load i64, i64* %55, align 8, !tbaa !46
  %57 = sub nsw i64 %54, %56
  %58 = icmp sgt i64 %57, 299
  br i1 %58, label %59, label %93

; <label>:59                                      ; preds = %53
  %60 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %5, i64 %indvars.iv, i32 2
  %61 = load %struct.httpd_conn*, %struct.httpd_conn** %60, align 8, !tbaa !25
  %62 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %61, i64 0, i32 2
  %63 = bitcast %union.httpd_sockaddr* %62 to %struct.sockaddr*
  %64 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %62, i64 0, i32 0, i32 0
  %65 = load i16, i16* %64, align 8, !tbaa !88
  %switch.selectcmp.i.i1 = icmp eq i16 %65, 10
  %switch.selectcmp1.i.i2 = icmp eq i16 %65, 2
  %66 = select i1 %switch.selectcmp.i.i1, i32 28, i32 0
  %67 = select i1 %switch.selectcmp1.i.i2, i32 16, i32 %66
  %68 = tail call i32 @getnameinfo(%struct.sockaddr* %63, i32 %67, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %71, label %70

; <label>:70                                      ; preds = %59
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit3

; <label>:71                                      ; preds = %59
  %72 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %61, i64 0, i32 2, i32 0, i32 1
  %73 = bitcast i64* %72 to i32*
  %74 = load i32, i32* %73, align 4, !tbaa !8
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %httpd_ntoa.exit3

; <label>:76                                      ; preds = %71
  %77 = bitcast i64* %72 to [4 x i32]*
  %78 = getelementptr inbounds [4 x i32], [4 x i32]* %77, i64 0, i64 1
  %79 = load i32, i32* %78, align 4, !tbaa !8
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %httpd_ntoa.exit3

; <label>:81                                      ; preds = %76
  %82 = getelementptr inbounds i64, i64* %72, i64 1
  %83 = bitcast i64* %82 to i32*
  %84 = load i32, i32* %83, align 4, !tbaa !8
  %85 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %86 = icmp eq i32 %84, %85
  br i1 %86, label %87, label %httpd_ntoa.exit3

; <label>:87                                      ; preds = %81
  %88 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %httpd_ntoa.exit3

; <label>:90                                      ; preds = %87
  %91 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %92 = add i64 %91, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %92, i32 1, i1 false) #6
  br label %httpd_ntoa.exit3

httpd_ntoa.exit3:                                 ; preds = %70, %71, %76, %81, %87, %90
  tail call void (i32, i8*, ...) @syslog(i32 6, i8* nonnull getelementptr inbounds ([35 x i8], [35 x i8]* @.str.136, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0)) #6
  tail call fastcc void @clear_connection(%struct.connecttab* nonnull %6, %struct.timeval* nonnull %nowP)
  br label %93

; <label>:93                                      ; preds = %4, %httpd_ntoa.exit, %9, %httpd_ntoa.exit3, %53
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %94 = load i32, i32* @max_connects, align 4, !tbaa !8
  %95 = sext i32 %94 to i64
  %96 = icmp slt i64 %indvars.iv.next, %95
  br i1 %96, label %4, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %93
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  ret void
}

; Function Attrs: nounwind uwtable
define void @httpd_send_err(%struct.httpd_conn* %hc, i32 %status, i8* %title, i8* nocapture readonly %extraheads, i8* nocapture readonly %form, i8* nocapture readonly %arg) #8 {
  %filename = alloca [1000 x i8], align 16
  %1 = getelementptr inbounds [1000 x i8], [1000 x i8]* %filename, i64 0, i64 0
  call void @llvm.lifetime.start(i64 1000, i8* %1) #6
  %2 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 1
  %3 = load %struct.httpd_server*, %struct.httpd_server** %2, align 8, !tbaa !79
  %4 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %3, i64 0, i32 15
  %5 = load i32, i32* %4, align 4, !tbaa !82
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %15, label %7

; <label>:7                                       ; preds = %0
  %8 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 29
  %9 = load i8*, i8** %8, align 8, !tbaa !118
  %10 = load i8, i8* %9, align 1, !tbaa !1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %15, label %12

; <label>:12                                      ; preds = %7
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %1, i64 1000, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.17.113, i64 0, i64 0), i8* %9, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18.114, i64 0, i64 0), i32 %status)
  %13 = call fastcc i32 @send_err_file(%struct.httpd_conn* nonnull %hc, i32 %status, i8* %title, i8* %extraheads, i8* %1)
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %19

; <label>:15                                      ; preds = %12, %7, %0
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %1, i64 1000, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19.125, i64 0, i64 0), i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18.114, i64 0, i64 0), i32 %status)
  %16 = call fastcc i32 @send_err_file(%struct.httpd_conn* nonnull %hc, i32 %status, i8* %title, i8* %extraheads, i8* %1)
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

; <label>:18                                      ; preds = %15
  tail call fastcc void @send_response(%struct.httpd_conn* nonnull %hc, i32 %status, i8* %title, i8* %extraheads, i8* %form, i8* %arg)
  br label %19

; <label>:19                                      ; preds = %15, %12, %18
  call void @llvm.lifetime.end(i64 1000, i8* %1) #6
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @send_err_file(%struct.httpd_conn* %hc, i32 %status, i8* %title, i8* nocapture readonly %extraheads, i8* nocapture readonly %filename) unnamed_addr #8 {
  %buf.i = alloca [1000 x i8], align 16
  %buf = alloca [1000 x i8], align 16
  %1 = getelementptr inbounds [1000 x i8], [1000 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 1000, i8* %1) #6
  %2 = tail call %struct._IO_FILE* @fopen(i8* %filename, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.84.115, i64 0, i64 0))
  %3 = icmp eq %struct._IO_FILE* %2, null
  br i1 %3, label %29, label %4

; <label>:4                                       ; preds = %0
  tail call fastcc void @send_mime(%struct.httpd_conn* %hc, i32 %status, i8* %title, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %extraheads, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.66, i64 0, i64 0), i64 -1, i64 0)
  %5 = call i64 @fread(i8* %1, i64 1, i64 999, %struct._IO_FILE* nonnull %2)
  %6 = icmp eq i64 %5, 0
  %.pre = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 32
  %.pre1 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 44
  %.pre3 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 45
  br i1 %6, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %4
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %7 = phi i64 [ %17, %.lr.ph ], [ %5, %.lr.ph.preheader ]
  %8 = getelementptr inbounds [1000 x i8], [1000 x i8]* %buf, i64 0, i64 %7
  store i8 0, i8* %8, align 1, !tbaa !1
  %9 = call i64 @strlen(i8* %1) #13
  %10 = load i64, i64* %.pre3, align 8, !tbaa !65
  %11 = add i64 %10, %9
  tail call void @httpd_realloc_str(i8** %.pre, i64* %.pre1, i64 %11) #6
  %12 = load i64, i64* %.pre3, align 8, !tbaa !65
  %13 = load i8*, i8** %.pre, align 8, !tbaa !66
  %14 = getelementptr inbounds i8, i8* %13, i64 %12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %1, i64 %9, i32 1, i1 false) #6
  %15 = load i64, i64* %.pre3, align 8, !tbaa !65
  %16 = add i64 %15, %9
  store i64 %16, i64* %.pre3, align 8, !tbaa !65
  %17 = call i64 @fread(i8* %1, i64 1, i64 999, %struct._IO_FILE* nonnull %2)
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %4
  %19 = tail call i32 @fclose(%struct._IO_FILE* nonnull %2)
  %20 = getelementptr inbounds [1000 x i8], [1000 x i8]* %buf.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 1000, i8* %20) #6
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %20, i64 1000, i8* nonnull getelementptr inbounds ([74 x i8], [74 x i8]* @.str.82.123, i64 0, i64 0), i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.83.124, i64 0, i64 0), i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8.97, i64 0, i64 0)) #6
  %21 = call i64 @strlen(i8* %20) #13
  %22 = load i64, i64* %.pre3, align 8, !tbaa !65
  %23 = add i64 %22, %21
  tail call void @httpd_realloc_str(i8** %.pre, i64* %.pre1, i64 %23) #6
  %24 = load i64, i64* %.pre3, align 8, !tbaa !65
  %25 = load i8*, i8** %.pre, align 8, !tbaa !66
  %26 = getelementptr inbounds i8, i8* %25, i64 %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %20, i64 %21, i32 1, i1 false) #6
  %27 = load i64, i64* %.pre3, align 8, !tbaa !65
  %28 = add i64 %27, %21
  store i64 %28, i64* %.pre3, align 8, !tbaa !65
  call void @llvm.lifetime.end(i64 1000, i8* %20) #6
  br label %29

; <label>:29                                      ; preds = %0, %._crit_edge
  %.0 = phi i32 [ 1, %._crit_edge ], [ 0, %0 ]
  call void @llvm.lifetime.end(i64 1000, i8* %1) #6
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define internal fastcc void @send_mime(%struct.httpd_conn* %hc, i32 %status, i8* %title, i8* %encodings, i8* nocapture readonly %extraheads, i8* nocapture readonly %type, i64 %length, i64 %mod) unnamed_addr #8 {
  %1 = alloca i64, align 8
  %now = alloca i64, align 8
  %expires = alloca i64, align 8
  %nowbuf = alloca [100 x i8], align 16
  %modbuf = alloca [100 x i8], align 16
  %expbuf = alloca [100 x i8], align 16
  %fixed_type = alloca [500 x i8], align 16
  %buf = alloca [1000 x i8], align 16
  store i64 %mod, i64* %1, align 8, !tbaa !16
  %2 = bitcast i64* %now to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #6
  %3 = bitcast i64* %expires to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #6
  %4 = getelementptr inbounds [100 x i8], [100 x i8]* %nowbuf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 100, i8* %4) #6
  %5 = getelementptr inbounds [100 x i8], [100 x i8]* %modbuf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 100, i8* %5) #6
  %6 = getelementptr inbounds [100 x i8], [100 x i8]* %expbuf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 100, i8* %6) #6
  %7 = getelementptr inbounds [500 x i8], [500 x i8]* %fixed_type, i64 0, i64 0
  call void @llvm.lifetime.start(i64 500, i8* %7) #6
  %8 = getelementptr inbounds [1000 x i8], [1000 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 1000, i8* %8) #6
  %9 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 9
  store i32 %status, i32* %9, align 8, !tbaa !93
  %10 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 10
  store i64 %length, i64* %10, align 8, !tbaa !59
  %11 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 51
  %12 = load i32, i32* %11, align 8, !tbaa !144
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %178, label %14

; <label>:14                                      ; preds = %0
  %15 = icmp eq i32 %status, 200
  %16 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 53
  br i1 %15, label %17, label %._crit_edge

; <label>:17                                      ; preds = %14
  %18 = load i32, i32* %16, align 8, !tbaa !54
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %._crit_edge, label %20

; <label>:20                                      ; preds = %17
  %21 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 56
  %22 = load i64, i64* %21, align 8, !tbaa !57
  %23 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 55
  %24 = load i64, i64* %23, align 8, !tbaa !55
  %25 = icmp slt i64 %22, %24
  br i1 %25, label %._crit_edge, label %26

; <label>:26                                      ; preds = %20
  %27 = add nsw i64 %length, -1
  %28 = icmp eq i64 %22, %27
  %29 = icmp eq i64 %24, 0
  %or.cond4 = and i1 %28, %29
  br i1 %or.cond4, label %._crit_edge, label %30

; <label>:30                                      ; preds = %26
  %31 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 47
  %32 = load i64, i64* %31, align 8, !tbaa !145
  %33 = icmp eq i64 %32, -1
  br i1 %33, label %38, label %34

; <label>:34                                      ; preds = %30
  %35 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 59, i32 12, i32 0
  %36 = load i64, i64* %35, align 8, !tbaa !146
  %37 = icmp eq i64 %32, %36
  br i1 %37, label %38, label %._crit_edge

; <label>:38                                      ; preds = %34, %30
  store i32 206, i32* %9, align 8, !tbaa !93
  br label %39

._crit_edge:                                      ; preds = %14, %26, %20, %17, %34
  store i32 0, i32* %16, align 8, !tbaa !54
  br label %39

; <label>:39                                      ; preds = %._crit_edge, %38
  %.02 = phi i8* [ getelementptr inbounds ([16 x i8], [16 x i8]* @.str.81.117, i64 0, i64 0), %38 ], [ %title, %._crit_edge ]
  %partial_content.0 = phi i32 [ 1, %38 ], [ 0, %._crit_edge ]
  %.0 = phi i32 [ 206, %38 ], [ %status, %._crit_edge ]
  %40 = tail call i64 @time(i64* null) #6
  store i64 %40, i64* %now, align 8, !tbaa !16
  %41 = icmp eq i64 %mod, 0
  br i1 %41, label %42, label %43

; <label>:42                                      ; preds = %39
  store i64 %40, i64* %1, align 8, !tbaa !16
  br label %43

; <label>:43                                      ; preds = %42, %39
  %44 = call %struct.tm* @gmtime(i64* nonnull %now) #6
  %45 = call i64 @strftime(i8* %4, i64 100, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.72, i64 0, i64 0), %struct.tm* %44) #6
  %46 = call %struct.tm* @gmtime(i64* nonnull %1) #6
  %47 = call i64 @strftime(i8* %5, i64 100, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.72, i64 0, i64 0), %struct.tm* %46) #6
  %48 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 1
  %49 = load %struct.httpd_server*, %struct.httpd_server** %48, align 8, !tbaa !79
  %50 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %49, i64 0, i32 6
  %51 = load i8*, i8** %50, align 8, !tbaa !122
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %7, i64 500, i8* %type, i8* %51)
  %52 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 14
  %53 = load i8*, i8** %52, align 8, !tbaa !92
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %8, i64 1000, i8* nonnull getelementptr inbounds ([114 x i8], [114 x i8]* @.str.73, i64 0, i64 0), i8* %53, i32 %.0, i8* %.02, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8.97, i64 0, i64 0), i8* %7, i8* %4, i8* %5)
  %54 = call i64 @strlen(i8* %8) #13
  %55 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 32
  %56 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 44
  %57 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 45
  %58 = load i64, i64* %57, align 8, !tbaa !65
  %59 = add i64 %58, %54
  call void @httpd_realloc_str(i8** %55, i64* %56, i64 %59) #6
  %60 = load i64, i64* %57, align 8, !tbaa !65
  %61 = load i8*, i8** %55, align 8, !tbaa !66
  %62 = getelementptr inbounds i8, i8* %61, i64 %60
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %62, i8* %8, i64 %54, i32 1, i1 false) #6
  %63 = load i64, i64* %57, align 8, !tbaa !65
  %64 = add i64 %63, %54
  store i64 %64, i64* %57, align 8, !tbaa !65
  %.0.off = add i32 %.0, -200
  %65 = icmp ugt i32 %.0.off, 99
  %.0.off3 = add i32 %.0, -300
  %66 = icmp ugt i32 %.0.off3, 99
  %or.cond = and i1 %65, %66
  br i1 %or.cond, label %67, label %76

; <label>:67                                      ; preds = %43
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %8, i64 1000, i8* nonnull getelementptr inbounds ([35 x i8], [35 x i8]* @.str.74, i64 0, i64 0))
  %68 = call i64 @strlen(i8* %8) #13
  %69 = load i64, i64* %57, align 8, !tbaa !65
  %70 = add i64 %69, %68
  call void @httpd_realloc_str(i8** %55, i64* %56, i64 %70) #6
  %71 = load i64, i64* %57, align 8, !tbaa !65
  %72 = load i8*, i8** %55, align 8, !tbaa !66
  %73 = getelementptr inbounds i8, i8* %72, i64 %71
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %73, i8* %8, i64 %68, i32 1, i1 false) #6
  %74 = load i64, i64* %57, align 8, !tbaa !65
  %75 = add i64 %74, %68
  store i64 %75, i64* %57, align 8, !tbaa !65
  br label %76

; <label>:76                                      ; preds = %67, %43
  %77 = phi i64 [ %75, %67 ], [ %64, %43 ]
  %78 = load i8, i8* %encodings, align 1, !tbaa !1
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %89, label %80

; <label>:80                                      ; preds = %76
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %8, i64 1000, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.75.118, i64 0, i64 0), i8* nonnull %encodings)
  %81 = call i64 @strlen(i8* %8) #13
  %82 = load i64, i64* %57, align 8, !tbaa !65
  %83 = add i64 %82, %81
  call void @httpd_realloc_str(i8** %55, i64* %56, i64 %83) #6
  %84 = load i64, i64* %57, align 8, !tbaa !65
  %85 = load i8*, i8** %55, align 8, !tbaa !66
  %86 = getelementptr inbounds i8, i8* %85, i64 %84
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %86, i8* %8, i64 %81, i32 1, i1 false) #6
  %87 = load i64, i64* %57, align 8, !tbaa !65
  %88 = add i64 %87, %81
  store i64 %88, i64* %57, align 8, !tbaa !65
  br label %89

; <label>:89                                      ; preds = %76, %80
  %90 = phi i64 [ %77, %76 ], [ %88, %80 ]
  %91 = icmp eq i32 %partial_content.0, 0
  br i1 %91, label %107, label %92

; <label>:92                                      ; preds = %89
  %93 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 55
  %94 = load i64, i64* %93, align 8, !tbaa !55
  %95 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 56
  %96 = load i64, i64* %95, align 8, !tbaa !57
  %97 = sub i64 1, %94
  %98 = add i64 %97, %96
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %8, i64 1000, i8* nonnull getelementptr inbounds ([60 x i8], [60 x i8]* @.str.76.119, i64 0, i64 0), i64 %94, i64 %96, i64 %length, i64 %98)
  %99 = call i64 @strlen(i8* %8) #13
  %100 = load i64, i64* %57, align 8, !tbaa !65
  %101 = add i64 %100, %99
  call void @httpd_realloc_str(i8** %55, i64* %56, i64 %101) #6
  %102 = load i64, i64* %57, align 8, !tbaa !65
  %103 = load i8*, i8** %55, align 8, !tbaa !66
  %104 = getelementptr inbounds i8, i8* %103, i64 %102
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %104, i8* %8, i64 %99, i32 1, i1 false) #6
  %105 = load i64, i64* %57, align 8, !tbaa !65
  %106 = add i64 %105, %99
  store i64 %106, i64* %57, align 8, !tbaa !65
  br label %118

; <label>:107                                     ; preds = %89
  %108 = icmp sgt i64 %length, -1
  br i1 %108, label %109, label %118

; <label>:109                                     ; preds = %107
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %8, i64 1000, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.77.120, i64 0, i64 0), i64 %length)
  %110 = call i64 @strlen(i8* %8) #13
  %111 = load i64, i64* %57, align 8, !tbaa !65
  %112 = add i64 %111, %110
  call void @httpd_realloc_str(i8** %55, i64* %56, i64 %112) #6
  %113 = load i64, i64* %57, align 8, !tbaa !65
  %114 = load i8*, i8** %55, align 8, !tbaa !66
  %115 = getelementptr inbounds i8, i8* %114, i64 %113
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %115, i8* %8, i64 %110, i32 1, i1 false) #6
  %116 = load i64, i64* %57, align 8, !tbaa !65
  %117 = add i64 %116, %110
  store i64 %117, i64* %57, align 8, !tbaa !65
  br label %118

; <label>:118                                     ; preds = %107, %109, %92
  %119 = phi i64 [ %90, %107 ], [ %117, %109 ], [ %106, %92 ]
  %120 = load %struct.httpd_server*, %struct.httpd_server** %48, align 8, !tbaa !79
  %121 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %120, i64 0, i32 7
  %122 = load i8*, i8** %121, align 8, !tbaa !123
  %123 = load i8, i8* %122, align 1, !tbaa !1
  %124 = icmp eq i8 %123, 0
  br i1 %124, label %134, label %125

; <label>:125                                     ; preds = %118
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %8, i64 1000, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.78.121, i64 0, i64 0), i8* %122)
  %126 = call i64 @strlen(i8* %8) #13
  %127 = load i64, i64* %57, align 8, !tbaa !65
  %128 = add i64 %127, %126
  call void @httpd_realloc_str(i8** nonnull %55, i64* nonnull %56, i64 %128) #6
  %129 = load i64, i64* %57, align 8, !tbaa !65
  %130 = load i8*, i8** %55, align 8, !tbaa !66
  %131 = getelementptr inbounds i8, i8* %130, i64 %129
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %131, i8* %8, i64 %126, i32 1, i1 false) #6
  %132 = load i64, i64* %57, align 8, !tbaa !65
  %133 = add i64 %132, %126
  store i64 %133, i64* %57, align 8, !tbaa !65
  %.pre = load %struct.httpd_server*, %struct.httpd_server** %48, align 8, !tbaa !79
  br label %134

; <label>:134                                     ; preds = %118, %125
  %135 = phi i64 [ %119, %118 ], [ %133, %125 ]
  %136 = phi %struct.httpd_server* [ %120, %118 ], [ %.pre, %125 ]
  %137 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %136, i64 0, i32 8
  %138 = load i32, i32* %137, align 8, !tbaa !131
  %139 = icmp sgt i32 %138, -1
  br i1 %139, label %140, label %157

; <label>:140                                     ; preds = %134
  %141 = load i64, i64* %now, align 8, !tbaa !16
  %142 = sext i32 %138 to i64
  %143 = add nsw i64 %141, %142
  store i64 %143, i64* %expires, align 8, !tbaa !16
  %144 = call %struct.tm* @gmtime(i64* nonnull %expires) #6
  %145 = call i64 @strftime(i8* %6, i64 100, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.72, i64 0, i64 0), %struct.tm* %144) #6
  %146 = load %struct.httpd_server*, %struct.httpd_server** %48, align 8, !tbaa !79
  %147 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %146, i64 0, i32 8
  %148 = load i32, i32* %147, align 8, !tbaa !131
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %8, i64 1000, i8* nonnull getelementptr inbounds ([41 x i8], [41 x i8]* @.str.79.122, i64 0, i64 0), i32 %148, i8* %6)
  %149 = call i64 @strlen(i8* %8) #13
  %150 = load i64, i64* %57, align 8, !tbaa !65
  %151 = add i64 %150, %149
  call void @httpd_realloc_str(i8** nonnull %55, i64* nonnull %56, i64 %151) #6
  %152 = load i64, i64* %57, align 8, !tbaa !65
  %153 = load i8*, i8** %55, align 8, !tbaa !66
  %154 = getelementptr inbounds i8, i8* %153, i64 %152
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %154, i8* %8, i64 %149, i32 1, i1 false) #6
  %155 = load i64, i64* %57, align 8, !tbaa !65
  %156 = add i64 %155, %149
  store i64 %156, i64* %57, align 8, !tbaa !65
  br label %157

; <label>:157                                     ; preds = %140, %134
  %158 = phi i64 [ %156, %140 ], [ %135, %134 ]
  %159 = load i8, i8* %extraheads, align 1, !tbaa !1
  %160 = icmp eq i8 %159, 0
  br i1 %160, label %169, label %161

; <label>:161                                     ; preds = %157
  %162 = call i64 @strlen(i8* nonnull %extraheads) #13
  %163 = add i64 %162, %158
  call void @httpd_realloc_str(i8** nonnull %55, i64* nonnull %56, i64 %163) #6
  %164 = load i64, i64* %57, align 8, !tbaa !65
  %165 = load i8*, i8** %55, align 8, !tbaa !66
  %166 = getelementptr inbounds i8, i8* %165, i64 %164
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %166, i8* nonnull %extraheads, i64 %162, i32 1, i1 false) #6
  %167 = load i64, i64* %57, align 8, !tbaa !65
  %168 = add i64 %167, %162
  store i64 %168, i64* %57, align 8, !tbaa !65
  br label %169

; <label>:169                                     ; preds = %157, %161
  %170 = phi i64 [ %158, %157 ], [ %168, %161 ]
  %171 = add i64 %170, 2
  call void @httpd_realloc_str(i8** nonnull %55, i64* nonnull %56, i64 %171) #6
  %172 = load i64, i64* %57, align 8, !tbaa !65
  %173 = load i8*, i8** %55, align 8, !tbaa !66
  %174 = getelementptr inbounds i8, i8* %173, i64 %172
  %175 = bitcast i8* %174 to i16*
  store i16 2573, i16* %175, align 1
  %176 = load i64, i64* %57, align 8, !tbaa !65
  %177 = add i64 %176, 2
  store i64 %177, i64* %57, align 8, !tbaa !65
  br label %178

; <label>:178                                     ; preds = %0, %169
  call void @llvm.lifetime.end(i64 1000, i8* %8) #6
  call void @llvm.lifetime.end(i64 500, i8* %7) #6
  call void @llvm.lifetime.end(i64 100, i8* %6) #6
  call void @llvm.lifetime.end(i64 100, i8* %5) #6
  call void @llvm.lifetime.end(i64 100, i8* %4) #6
  call void @llvm.lifetime.end(i64 8, i8* %3) #6
  call void @llvm.lifetime.end(i64 8, i8* %2) #6
  ret void
}

; Function Attrs: nounwind
declare %struct.tm* @gmtime(i64*) #2

; Function Attrs: nounwind uwtable
define void @httpd_realloc_str(i8** nocapture %strP, i64* nocapture %maxsizeP, i64 %size) #8 {
  %1 = load i64, i64* %maxsizeP, align 8, !tbaa !16
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %3, label %13

; <label>:3                                       ; preds = %0
  %4 = add i64 %size, 100
  %5 = icmp ult i64 %4, 200
  %6 = select i1 %5, i64 200, i64 %4
  store i64 %6, i64* %maxsizeP, align 8, !tbaa !16
  %7 = add i64 %6, 1
  %8 = tail call noalias i8* @malloc(i64 %7) #6
  store i8* %8, i8** %strP, align 8, !tbaa !4
  %9 = load i32, i32* @str_alloc_count, align 4, !tbaa !8
  %10 = add nsw i32 %9, 1
  store i32 %10, i32* @str_alloc_count, align 4, !tbaa !8
  %11 = load i64, i64* @str_alloc_size, align 8, !tbaa !16
  %12 = add i64 %11, %6
  br label %28

; <label>:13                                      ; preds = %0
  %14 = icmp ult i64 %1, %size
  br i1 %14, label %15, label %33

; <label>:15                                      ; preds = %13
  %16 = load i64, i64* @str_alloc_size, align 8, !tbaa !16
  %17 = sub i64 %16, %1
  store i64 %17, i64* @str_alloc_size, align 8, !tbaa !16
  %18 = shl i64 %1, 1
  %19 = mul i64 %size, 5
  %20 = lshr i64 %19, 2
  %21 = icmp ugt i64 %18, %20
  %. = select i1 %21, i64 %18, i64 %20
  store i64 %., i64* %maxsizeP, align 8, !tbaa !16
  %22 = load i8*, i8** %strP, align 8, !tbaa !4
  %23 = add i64 %., 1
  %24 = tail call i8* @realloc(i8* %22, i64 %23) #6
  store i8* %24, i8** %strP, align 8, !tbaa !4
  %25 = load i64, i64* %maxsizeP, align 8, !tbaa !16
  %26 = load i64, i64* @str_alloc_size, align 8, !tbaa !16
  %27 = add i64 %26, %25
  br label %28

; <label>:28                                      ; preds = %15, %3
  %29 = phi i64 [ %25, %15 ], [ %6, %3 ]
  %30 = phi i8* [ %24, %15 ], [ %8, %3 ]
  %storemerge = phi i64 [ %27, %15 ], [ %12, %3 ]
  store i64 %storemerge, i64* @str_alloc_size, align 8, !tbaa !16
  %31 = icmp eq i8* %30, null
  br i1 %31, label %32, label %33

; <label>:32                                      ; preds = %28
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([49 x i8], [49 x i8]* @.str.16, i64 0, i64 0), i64 %29) #6
  tail call void @exit(i32 1) #18
  unreachable

; <label>:33                                      ; preds = %13, %28
  ret void
}

; Function Attrs: nounwind
declare i64 @fread(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #2

; Function Attrs: nounwind uwtable
define internal fastcc void @send_response(%struct.httpd_conn* %hc, i32 %status, i8* %title, i8* nocapture readonly %extraheads, i8* nocapture readonly %form, i8* nocapture readonly %arg) unnamed_addr #8 {
  %buf.i = alloca [1000 x i8], align 16
  %defanged_arg = alloca [1000 x i8], align 16
  %buf = alloca [2000 x i8], align 16
  %1 = getelementptr inbounds [1000 x i8], [1000 x i8]* %defanged_arg, i64 0, i64 0
  call void @llvm.lifetime.start(i64 1000, i8* %1) #6
  %2 = getelementptr inbounds [2000 x i8], [2000 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 2000, i8* %2) #6
  tail call fastcc void @send_mime(%struct.httpd_conn* %hc, i32 %status, i8* %title, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %extraheads, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.66, i64 0, i64 0), i64 -1, i64 0)
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %2, i64 2000, i8* getelementptr inbounds ([322 x i8], [322 x i8]* @.str.67.126, i64 0, i64 0), i32 %status, i8* %title, i32 %status, i8* %title)
  %3 = call i64 @strlen(i8* %2) #13
  %4 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 32
  %5 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 44
  %6 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 45
  %7 = load i64, i64* %6, align 8, !tbaa !65
  %8 = add i64 %7, %3
  tail call void @httpd_realloc_str(i8** %4, i64* %5, i64 %8) #6
  %9 = load i64, i64* %6, align 8, !tbaa !65
  %10 = load i8*, i8** %4, align 8, !tbaa !66
  %11 = getelementptr inbounds i8, i8* %10, i64 %9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %2, i64 %3, i32 1, i1 false) #6
  %12 = load i64, i64* %6, align 8, !tbaa !65
  %13 = add i64 %12, %3
  store i64 %13, i64* %6, align 8, !tbaa !65
  %14 = load i8, i8* %arg, align 1, !tbaa !1
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %defang.exit, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %0
  %16 = ptrtoint [1000 x i8]* %defanged_arg to i64
  br label %17

; <label>:17                                      ; preds = %32, %.lr.ph.i
  %.in.i = phi i8 [ %14, %.lr.ph.i ], [ %35, %32 ]
  %cp2.02.i = phi i8* [ %1, %.lr.ph.i ], [ %34, %32 ]
  %cp1.01.i = phi i8* [ %arg, %.lr.ph.i ], [ %33, %32 ]
  %18 = ptrtoint i8* %cp2.02.i to i64
  %19 = sub i64 %18, %16
  %20 = icmp slt i64 %19, 995
  br i1 %20, label %21, label %defang.exit.loopexit

; <label>:21                                      ; preds = %17
  %22 = sext i8 %.in.i to i32
  switch i32 %22, label %31 [
    i32 60, label %23
    i32 62, label %27
  ]

; <label>:23                                      ; preds = %21
  %24 = getelementptr inbounds i8, i8* %cp2.02.i, i64 1
  store i8 38, i8* %cp2.02.i, align 1, !tbaa !1
  %25 = getelementptr inbounds i8, i8* %cp2.02.i, i64 2
  store i8 108, i8* %24, align 1, !tbaa !1
  %26 = getelementptr inbounds i8, i8* %cp2.02.i, i64 3
  store i8 116, i8* %25, align 1, !tbaa !1
  store i8 59, i8* %26, align 1, !tbaa !1
  br label %32

; <label>:27                                      ; preds = %21
  %28 = getelementptr inbounds i8, i8* %cp2.02.i, i64 1
  store i8 38, i8* %cp2.02.i, align 1, !tbaa !1
  %29 = getelementptr inbounds i8, i8* %cp2.02.i, i64 2
  store i8 103, i8* %28, align 1, !tbaa !1
  %30 = getelementptr inbounds i8, i8* %cp2.02.i, i64 3
  store i8 116, i8* %29, align 1, !tbaa !1
  store i8 59, i8* %30, align 1, !tbaa !1
  br label %32

; <label>:31                                      ; preds = %21
  store i8 %.in.i, i8* %cp2.02.i, align 1, !tbaa !1
  br label %32

; <label>:32                                      ; preds = %31, %27, %23
  %cp2.1.i = phi i8* [ %cp2.02.i, %31 ], [ %30, %27 ], [ %26, %23 ]
  %33 = getelementptr inbounds i8, i8* %cp1.01.i, i64 1
  %34 = getelementptr inbounds i8, i8* %cp2.1.i, i64 1
  %35 = load i8, i8* %33, align 1, !tbaa !1
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %defang.exit.loopexit, label %17

defang.exit.loopexit:                             ; preds = %32, %17
  %cp2.0.lcssa.i.ph = phi i8* [ %cp2.02.i, %17 ], [ %34, %32 ]
  br label %defang.exit

defang.exit:                                      ; preds = %defang.exit.loopexit, %0
  %cp2.0.lcssa.i = phi i8* [ %1, %0 ], [ %cp2.0.lcssa.i.ph, %defang.exit.loopexit ]
  store i8 0, i8* %cp2.0.lcssa.i, align 1, !tbaa !1
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %2, i64 2000, i8* %form, i8* %1)
  %37 = call i64 @strlen(i8* %2) #13
  %38 = load i64, i64* %6, align 8, !tbaa !65
  %39 = add i64 %38, %37
  call void @httpd_realloc_str(i8** %4, i64* %5, i64 %39) #6
  %40 = load i64, i64* %6, align 8, !tbaa !65
  %41 = load i8*, i8** %4, align 8, !tbaa !66
  %42 = getelementptr inbounds i8, i8* %41, i64 %40
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %42, i8* %2, i64 %37, i32 1, i1 false) #6
  %43 = load i64, i64* %6, align 8, !tbaa !65
  %44 = add i64 %43, %37
  store i64 %44, i64* %6, align 8, !tbaa !65
  %45 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 21
  %46 = load i8*, i8** %45, align 8, !tbaa !95
  %47 = call fastcc i32 @match_one(i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.68, i64 0, i64 0), i32 8, i8* %46) #6
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %98, label %match.exit.thread

match.exit.thread:                                ; preds = %defang.exit
  %49 = add i64 %44, 5
  call void @httpd_realloc_str(i8** nonnull %4, i64* nonnull %5, i64 %49) #6
  %50 = load i64, i64* %6, align 8, !tbaa !65
  %51 = load i8*, i8** %4, align 8, !tbaa !66
  %52 = getelementptr inbounds i8, i8* %51, i64 %50
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %52, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.69.127, i64 0, i64 0), i64 5, i32 1, i1 false) #6
  %53 = load i64, i64* %6, align 8, !tbaa !65
  %54 = add i64 %53, 5
  store i64 %54, i64* %6, align 8, !tbaa !65
  %55 = add i64 %53, 83
  call void @httpd_realloc_str(i8** nonnull %4, i64* nonnull %5, i64 %55) #6
  %56 = load i64, i64* %6, align 8, !tbaa !65
  %57 = load i8*, i8** %4, align 8, !tbaa !66
  %58 = getelementptr inbounds i8, i8* %57, i64 %56
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %58, i8* nonnull getelementptr inbounds ([79 x i8], [79 x i8]* @.str.70, i64 0, i64 0), i64 78, i32 1, i1 false) #6
  %59 = load i64, i64* %6, align 8, !tbaa !65
  %60 = add i64 %59, 78
  store i64 %60, i64* %6, align 8, !tbaa !65
  %61 = add i64 %59, 156
  call void @httpd_realloc_str(i8** nonnull %4, i64* nonnull %5, i64 %61) #6
  %62 = load i64, i64* %6, align 8, !tbaa !65
  %63 = load i8*, i8** %4, align 8, !tbaa !66
  %64 = getelementptr inbounds i8, i8* %63, i64 %62
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %64, i8* nonnull getelementptr inbounds ([79 x i8], [79 x i8]* @.str.70, i64 0, i64 0), i64 78, i32 1, i1 false) #6
  %65 = load i64, i64* %6, align 8, !tbaa !65
  %66 = add i64 %65, 78
  store i64 %66, i64* %6, align 8, !tbaa !65
  %67 = add i64 %65, 156
  call void @httpd_realloc_str(i8** nonnull %4, i64* nonnull %5, i64 %67) #6
  %68 = load i64, i64* %6, align 8, !tbaa !65
  %69 = load i8*, i8** %4, align 8, !tbaa !66
  %70 = getelementptr inbounds i8, i8* %69, i64 %68
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %70, i8* nonnull getelementptr inbounds ([79 x i8], [79 x i8]* @.str.70, i64 0, i64 0), i64 78, i32 1, i1 false) #6
  %71 = load i64, i64* %6, align 8, !tbaa !65
  %72 = add i64 %71, 78
  store i64 %72, i64* %6, align 8, !tbaa !65
  %73 = add i64 %71, 156
  call void @httpd_realloc_str(i8** nonnull %4, i64* nonnull %5, i64 %73) #6
  %74 = load i64, i64* %6, align 8, !tbaa !65
  %75 = load i8*, i8** %4, align 8, !tbaa !66
  %76 = getelementptr inbounds i8, i8* %75, i64 %74
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %76, i8* nonnull getelementptr inbounds ([79 x i8], [79 x i8]* @.str.70, i64 0, i64 0), i64 78, i32 1, i1 false) #6
  %77 = load i64, i64* %6, align 8, !tbaa !65
  %78 = add i64 %77, 78
  store i64 %78, i64* %6, align 8, !tbaa !65
  %79 = add i64 %77, 156
  call void @httpd_realloc_str(i8** nonnull %4, i64* nonnull %5, i64 %79) #6
  %80 = load i64, i64* %6, align 8, !tbaa !65
  %81 = load i8*, i8** %4, align 8, !tbaa !66
  %82 = getelementptr inbounds i8, i8* %81, i64 %80
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %82, i8* nonnull getelementptr inbounds ([79 x i8], [79 x i8]* @.str.70, i64 0, i64 0), i64 78, i32 1, i1 false) #6
  %83 = load i64, i64* %6, align 8, !tbaa !65
  %84 = add i64 %83, 78
  store i64 %84, i64* %6, align 8, !tbaa !65
  %85 = add i64 %83, 156
  call void @httpd_realloc_str(i8** nonnull %4, i64* nonnull %5, i64 %85) #6
  %86 = load i64, i64* %6, align 8, !tbaa !65
  %87 = load i8*, i8** %4, align 8, !tbaa !66
  %88 = getelementptr inbounds i8, i8* %87, i64 %86
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %88, i8* nonnull getelementptr inbounds ([79 x i8], [79 x i8]* @.str.70, i64 0, i64 0), i64 78, i32 1, i1 false) #6
  %89 = load i64, i64* %6, align 8, !tbaa !65
  %90 = add i64 %89, 78
  store i64 %90, i64* %6, align 8, !tbaa !65
  %91 = add i64 %89, 82
  call void @httpd_realloc_str(i8** nonnull %4, i64* nonnull %5, i64 %91) #6
  %92 = load i64, i64* %6, align 8, !tbaa !65
  %93 = load i8*, i8** %4, align 8, !tbaa !66
  %94 = getelementptr inbounds i8, i8* %93, i64 %92
  %95 = bitcast i8* %94 to i32*
  store i32 171846957, i32* %95, align 1
  %96 = load i64, i64* %6, align 8, !tbaa !65
  %97 = add i64 %96, 4
  store i64 %97, i64* %6, align 8, !tbaa !65
  br label %98

; <label>:98                                      ; preds = %defang.exit, %match.exit.thread
  %99 = getelementptr inbounds [1000 x i8], [1000 x i8]* %buf.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 1000, i8* %99) #6
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %99, i64 1000, i8* nonnull getelementptr inbounds ([74 x i8], [74 x i8]* @.str.82.123, i64 0, i64 0), i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.83.124, i64 0, i64 0), i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8.97, i64 0, i64 0)) #6
  %100 = call i64 @strlen(i8* %99) #13
  %101 = load i64, i64* %6, align 8, !tbaa !65
  %102 = add i64 %101, %100
  call void @httpd_realloc_str(i8** nonnull %4, i64* nonnull %5, i64 %102) #6
  %103 = load i64, i64* %6, align 8, !tbaa !65
  %104 = load i8*, i8** %4, align 8, !tbaa !66
  %105 = getelementptr inbounds i8, i8* %104, i64 %103
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %105, i8* %99, i64 %100, i32 1, i1 false) #6
  %106 = load i64, i64* %6, align 8, !tbaa !65
  %107 = add i64 %106, %100
  store i64 %107, i64* %6, align 8, !tbaa !65
  call void @llvm.lifetime.end(i64 1000, i8* %99) #6
  call void @llvm.lifetime.end(i64 2000, i8* %2) #6
  call void @llvm.lifetime.end(i64 1000, i8* %1) #6
  ret void
}

; Function Attrs: nounwind readonly uwtable
define i32 @match(i8* %pattern, i8* nocapture readonly %string) #11 {
  %1 = tail call i8* @strchr(i8* %pattern, i32 124) #6
  %2 = icmp eq i8* %1, null
  br i1 %2, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %0
  br label %.lr.ph

; <label>:3                                       ; preds = %.lr.ph
  %4 = tail call i8* @strchr(i8* %16, i32 124) #6
  %5 = icmp eq i8* %4, null
  br i1 %5, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %3
  %.lcssa6 = phi i8* [ %16, %3 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  %.01.lcssa = phi i8* [ %pattern, %0 ], [ %.lcssa6, %._crit_edge.loopexit ]
  %6 = tail call i64 @strlen(i8* %.01.lcssa) #13
  %7 = trunc i64 %6 to i32
  %8 = tail call fastcc i32 @match_one(i8* %.01.lcssa, i32 %7, i8* %string)
  br label %.loopexit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %3
  %9 = phi i8* [ %4, %3 ], [ %1, %.lr.ph.preheader ]
  %.013 = phi i8* [ %16, %3 ], [ %pattern, %.lr.ph.preheader ]
  %10 = ptrtoint i8* %9 to i64
  %11 = ptrtoint i8* %.013 to i64
  %12 = sub i64 %10, %11
  %13 = trunc i64 %12 to i32
  %14 = tail call fastcc i32 @match_one(i8* %.013, i32 %13, i8* %string)
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds i8, i8* %9, i64 1
  br i1 %15, label %3, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %.lr.ph
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %._crit_edge
  %.0 = phi i32 [ %8, %._crit_edge ], [ 1, %.loopexit.loopexit ]
  ret i32 %.0
}

; Function Attrs: nounwind readonly uwtable
define internal fastcc i32 @match_one(i8* %pattern, i32 %patternlen, i8* nocapture readonly %string) unnamed_addr #11 {
  %1 = ptrtoint i8* %pattern to i64
  %2 = sext i32 %patternlen to i64
  %3 = icmp sgt i32 %patternlen, 0
  br i1 %3, label %.lr.ph19.preheader, label %._crit_edge

.lr.ph19.preheader:                               ; preds = %0
  br label %.lr.ph19

.lr.ph19:                                         ; preds = %.lr.ph19.preheader, %32
  %.0117 = phi i8* [ %34, %32 ], [ %string, %.lr.ph19.preheader ]
  %p.015 = phi i8* [ %33, %32 ], [ %pattern, %.lr.ph19.preheader ]
  %4 = load i8, i8* %p.015, align 1, !tbaa !1
  switch i8 %4, label %.lr.ph19.thread-pre-split.thread_crit_edge [
    i8 63, label %5
    i8 42, label %8
  ]

.lr.ph19.thread-pre-split.thread_crit_edge:       ; preds = %.lr.ph19
  %.pre = load i8, i8* %.0117, align 1, !tbaa !1
  br label %thread-pre-split.thread

; <label>:5                                       ; preds = %.lr.ph19
  %6 = load i8, i8* %.0117, align 1, !tbaa !1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %thread-pre-split.thread, label %32

; <label>:8                                       ; preds = %.lr.ph19
  %p.015.lcssa = phi i8* [ %p.015, %.lr.ph19 ]
  %.0117.lcssa = phi i8* [ %.0117, %.lr.ph19 ]
  %9 = getelementptr inbounds i8, i8* %p.015.lcssa, i64 1
  %10 = load i8, i8* %9, align 1, !tbaa !1
  %11 = icmp eq i8 %10, 42
  br i1 %11, label %12, label %.preheader.preheader

.preheader.preheader:                             ; preds = %8
  br label %.preheader

; <label>:12                                      ; preds = %8
  %13 = getelementptr inbounds i8, i8* %p.015.lcssa, i64 2
  %14 = tail call i64 @strlen(i8* %.0117.lcssa) #13
  br label %__strcspn_c1.exit

.preheader:                                       ; preds = %.preheader.preheader, %.preheader
  %__result.0.i = phi i64 [ %17, %.preheader ], [ 0, %.preheader.preheader ]
  %15 = getelementptr inbounds i8, i8* %.0117.lcssa, i64 %__result.0.i
  %16 = load i8, i8* %15, align 1, !tbaa !1
  %17 = add i64 %__result.0.i, 1
  switch i8 %16, label %.preheader [
    i8 47, label %__strcspn_c1.exit.loopexit
    i8 0, label %__strcspn_c1.exit.loopexit
  ]

__strcspn_c1.exit.loopexit:                       ; preds = %.preheader, %.preheader
  %__result.0.i.lcssa = phi i64 [ %__result.0.i, %.preheader ], [ %__result.0.i, %.preheader ]
  br label %__strcspn_c1.exit

__strcspn_c1.exit:                                ; preds = %__strcspn_c1.exit.loopexit, %12
  %.sink = phi i64 [ %14, %12 ], [ %__result.0.i.lcssa, %__strcspn_c1.exit.loopexit ]
  %p.1 = phi i8* [ %13, %12 ], [ %9, %__strcspn_c1.exit.loopexit ]
  %18 = trunc i64 %.sink to i32
  %19 = ptrtoint i8* %p.1 to i64
  %20 = add i64 %2, %1
  %21 = sub i64 %20, %19
  %22 = trunc i64 %21 to i32
  %23 = icmp sgt i32 %18, -1
  br i1 %23, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %__strcspn_c1.exit
  %sext = shl i64 %.sink, 32
  %24 = ashr exact i64 %sext, 32
  br label %.lr.ph

; <label>:25                                      ; preds = %.lr.ph
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %26 = icmp sgt i64 %indvars.iv, 0
  br i1 %26, label %.lr.ph, label %.loopexit.loopexit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %25
  %indvars.iv = phi i64 [ %24, %.lr.ph.preheader ], [ %indvars.iv.next, %25 ]
  %27 = getelementptr inbounds i8, i8* %.0117.lcssa, i64 %indvars.iv
  %28 = tail call fastcc i32 @match_one(i8* %p.1, i32 %22, i8* %27)
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %25, label %.loopexit.loopexit

thread-pre-split.thread:                          ; preds = %.lr.ph19.thread-pre-split.thread_crit_edge, %5
  %30 = phi i8 [ %.pre, %.lr.ph19.thread-pre-split.thread_crit_edge ], [ 0, %5 ]
  %31 = icmp eq i8 %4, %30
  br i1 %31, label %32, label %.loopexit.loopexit21

; <label>:32                                      ; preds = %5, %thread-pre-split.thread
  %33 = getelementptr inbounds i8, i8* %p.015, i64 1
  %34 = getelementptr inbounds i8, i8* %.0117, i64 1
  %35 = ptrtoint i8* %33 to i64
  %36 = sub i64 %35, %1
  %37 = icmp slt i64 %36, %2
  br i1 %37, label %.lr.ph19, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %32
  %.lcssa = phi i8* [ %34, %32 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  %.01.lcssa = phi i8* [ %string, %0 ], [ %.lcssa, %._crit_edge.loopexit ]
  %38 = load i8, i8* %.01.lcssa, align 1, !tbaa !1
  %39 = icmp eq i8 %38, 0
  %. = zext i1 %39 to i32
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %.lr.ph, %25
  %.1.ph = phi i32 [ 0, %25 ], [ 1, %.lr.ph ]
  br label %.loopexit

.loopexit.loopexit21:                             ; preds = %thread-pre-split.thread
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit21, %.loopexit.loopexit, %__strcspn_c1.exit, %._crit_edge
  %.1 = phi i32 [ %., %._crit_edge ], [ 0, %__strcspn_c1.exit ], [ %.1.ph, %.loopexit.loopexit ], [ 0, %.loopexit.loopexit21 ]
  ret i32 %.1
}

; Function Attrs: nounwind uwtable
define void @httpd_write_response(%struct.httpd_conn* nocapture %hc) #8 {
  %.b = load i1, i1* @sub_process, align 1
  br i1 %.b, label %1, label %httpd_clear_ndelay.exit

; <label>:1                                       ; preds = %0
  %2 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 60
  %3 = load i32, i32* %2, align 8, !tbaa !38
  %4 = tail call i32 (i32, i32, ...) @fcntl(i32 %3, i32 3, i32 0) #6
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %httpd_clear_ndelay.exit, label %6

; <label>:6                                       ; preds = %1
  %7 = and i32 %4, -2049
  %8 = icmp eq i32 %7, %4
  br i1 %8, label %httpd_clear_ndelay.exit, label %9

; <label>:9                                       ; preds = %6
  %10 = tail call i32 (i32, i32, ...) @fcntl(i32 %3, i32 4, i32 %7) #6
  br label %httpd_clear_ndelay.exit

httpd_clear_ndelay.exit:                          ; preds = %9, %6, %1, %0
  %11 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 45
  %12 = load i64, i64* %11, align 8, !tbaa !65
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %34, label %14

; <label>:14                                      ; preds = %httpd_clear_ndelay.exit
  %15 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 60
  %16 = load i32, i32* %15, align 8, !tbaa !38
  %17 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 32
  %18 = load i8*, i8** %17, align 8, !tbaa !66
  br label %.outer.i

.outer.i:                                         ; preds = %._crit_edge, %14
  %nwritten.0.ph.i = phi i32 [ %nwritten.0..i, %._crit_edge ], [ 0, %14 ]
  %19 = sext i32 %nwritten.0.ph.i to i64
  %20 = icmp ugt i64 %12, %19
  br i1 %20, label %.lr.ph.i, label %httpd_write_fully.exit.loopexit9

.lr.ph.i:                                         ; preds = %.outer.i
  %21 = getelementptr inbounds i8, i8* %18, i64 %19
  %22 = sub i64 %12, %19
  %23 = tail call i64 @write(i32 %16, i8* %21, i64 %22) #6
  %24 = trunc i64 %23 to i32
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph.i
  %26 = tail call i32* @__errno_location() #21
  br label %27

; <label>:27                                      ; preds = %.lr.ph, %.thread2.i
  %28 = load i32, i32* %26, align 4, !tbaa !8
  switch i32 %28, label %httpd_write_fully.exit.loopexit [
    i32 4, label %.thread2.i
    i32 11, label %.thread2.i
  ]

.thread2.i:                                       ; preds = %27, %27
  %29 = tail call i32 @sleep(i32 1) #6
  %30 = tail call i64 @write(i32 %16, i8* %21, i64 %22) #6
  %31 = trunc i64 %30 to i32
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %27, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.thread2.i
  %.lcssa11 = phi i32 [ %31, %.thread2.i ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.lr.ph.i
  %.lcssa = phi i32 [ %24, %.lr.ph.i ], [ %.lcssa11, %._crit_edge.loopexit ]
  %33 = icmp eq i32 %.lcssa, 0
  %nwritten.0..i = add nsw i32 %.lcssa, %nwritten.0.ph.i
  br i1 %33, label %httpd_write_fully.exit.loopexit9, label %.outer.i

httpd_write_fully.exit.loopexit:                  ; preds = %27
  br label %httpd_write_fully.exit

httpd_write_fully.exit.loopexit9:                 ; preds = %._crit_edge, %.outer.i
  br label %httpd_write_fully.exit

httpd_write_fully.exit:                           ; preds = %httpd_write_fully.exit.loopexit9, %httpd_write_fully.exit.loopexit
  store i64 0, i64* %11, align 8, !tbaa !65
  br label %34

; <label>:34                                      ; preds = %httpd_clear_ndelay.exit, %httpd_write_fully.exit
  ret void
}

declare i64 @write(i32, i8* nocapture readonly, i64) #5

declare i32 @sleep(i32) #5

; Function Attrs: nounwind uwtable
define internal fastcc void @clear_connection(%struct.connecttab* %c, %struct.timeval* %tvP) unnamed_addr #8 {
  %1 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %c, i64 0, i32 9
  %2 = load %struct.TimerStruct*, %struct.TimerStruct** %1, align 8, !tbaa !70
  %3 = icmp eq %struct.TimerStruct* %2, null
  br i1 %3, label %33, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %2, i64 0, i32 5
  %6 = load %struct.TimerStruct*, %struct.TimerStruct** %5, align 8, !tbaa !76
  %7 = icmp eq %struct.TimerStruct* %6, null
  %8 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %2, i64 0, i32 6
  %9 = bitcast %struct.TimerStruct** %8 to i64*
  %10 = load i64, i64* %9, align 8, !tbaa !77
  %11 = ptrtoint %struct.TimerStruct* %6 to i64
  br i1 %7, label %12, label %19

; <label>:12                                      ; preds = %4
  %13 = inttoptr i64 %10 to %struct.TimerStruct*
  %14 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %2, i64 0, i32 7
  %15 = load i32, i32* %14, align 8, !tbaa !78
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %16
  %18 = bitcast %struct.TimerStruct** %17 to i64*
  store i64 %10, i64* %18, align 8, !tbaa !4
  br label %22

; <label>:19                                      ; preds = %4
  %20 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %6, i64 0, i32 6
  %21 = bitcast %struct.TimerStruct** %20 to i64*
  store i64 %10, i64* %21, align 8, !tbaa !77
  %.pre.i.i = load %struct.TimerStruct*, %struct.TimerStruct** %8, align 8, !tbaa !77
  br label %22

; <label>:22                                      ; preds = %19, %12
  %23 = phi %struct.TimerStruct* [ %.pre.i.i, %19 ], [ %13, %12 ]
  %24 = icmp eq %struct.TimerStruct* %23, null
  br i1 %24, label %tmr_cancel.exit, label %25

; <label>:25                                      ; preds = %22
  %26 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %23, i64 0, i32 5
  %27 = bitcast %struct.TimerStruct** %26 to i64*
  store i64 %11, i64* %27, align 8, !tbaa !76
  br label %tmr_cancel.exit

tmr_cancel.exit:                                  ; preds = %22, %25
  %28 = load i32, i32* @active_count, align 4, !tbaa !8
  %29 = add nsw i32 %28, -1
  store i32 %29, i32* @active_count, align 4, !tbaa !8
  %30 = load i64, i64* bitcast (%struct.TimerStruct** @free_timers to i64*), align 8, !tbaa !4
  store i64 %30, i64* %9, align 8, !tbaa !77
  store %struct.TimerStruct* %2, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %31 = load i32, i32* @free_count.580, align 4, !tbaa !8
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* @free_count.580, align 4, !tbaa !8
  store %struct.TimerStruct* null, %struct.TimerStruct** %5, align 8, !tbaa !76
  store %struct.TimerStruct* null, %struct.TimerStruct** %1, align 8, !tbaa !70
  br label %33

; <label>:33                                      ; preds = %0, %tmr_cancel.exit
  %34 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %c, i64 0, i32 0
  %35 = load i32, i32* %34, align 8, !tbaa !22
  %36 = icmp eq i32 %35, 4
  br i1 %36, label %.thread, label %70

.thread:                                          ; preds = %33
  %37 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %c, i64 0, i32 10
  %38 = load %struct.TimerStruct*, %struct.TimerStruct** %37, align 8, !tbaa !147
  %39 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %38, i64 0, i32 5
  %40 = load %struct.TimerStruct*, %struct.TimerStruct** %39, align 8, !tbaa !76
  %41 = icmp eq %struct.TimerStruct* %40, null
  %42 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %38, i64 0, i32 6
  %43 = bitcast %struct.TimerStruct** %42 to i64*
  %44 = load i64, i64* %43, align 8, !tbaa !77
  %45 = ptrtoint %struct.TimerStruct* %40 to i64
  br i1 %41, label %46, label %53

; <label>:46                                      ; preds = %.thread
  %47 = inttoptr i64 %44 to %struct.TimerStruct*
  %48 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %38, i64 0, i32 7
  %49 = load i32, i32* %48, align 8, !tbaa !78
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %50
  %52 = bitcast %struct.TimerStruct** %51 to i64*
  store i64 %44, i64* %52, align 8, !tbaa !4
  br label %56

; <label>:53                                      ; preds = %.thread
  %54 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %40, i64 0, i32 6
  %55 = bitcast %struct.TimerStruct** %54 to i64*
  store i64 %44, i64* %55, align 8, !tbaa !77
  %.pre.i.i1 = load %struct.TimerStruct*, %struct.TimerStruct** %42, align 8, !tbaa !77
  br label %56

; <label>:56                                      ; preds = %53, %46
  %57 = phi %struct.TimerStruct* [ %.pre.i.i1, %53 ], [ %47, %46 ]
  %58 = icmp eq %struct.TimerStruct* %57, null
  br i1 %58, label %tmr_cancel.exit2, label %59

; <label>:59                                      ; preds = %56
  %60 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %57, i64 0, i32 5
  %61 = bitcast %struct.TimerStruct** %60 to i64*
  store i64 %45, i64* %61, align 8, !tbaa !76
  br label %tmr_cancel.exit2

tmr_cancel.exit2:                                 ; preds = %56, %59
  %62 = load i32, i32* @active_count, align 4, !tbaa !8
  %63 = add nsw i32 %62, -1
  store i32 %63, i32* @active_count, align 4, !tbaa !8
  %64 = load i64, i64* bitcast (%struct.TimerStruct** @free_timers to i64*), align 8, !tbaa !4
  store i64 %64, i64* %43, align 8, !tbaa !77
  store %struct.TimerStruct* %38, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %65 = load i32, i32* @free_count.580, align 4, !tbaa !8
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* @free_count.580, align 4, !tbaa !8
  store %struct.TimerStruct* null, %struct.TimerStruct** %39, align 8, !tbaa !76
  store %struct.TimerStruct* null, %struct.TimerStruct** %37, align 8, !tbaa !147
  %67 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %c, i64 0, i32 2
  %68 = load %struct.httpd_conn*, %struct.httpd_conn** %67, align 8, !tbaa !25
  %69 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %68, i64 0, i32 58
  store i32 0, i32* %69, align 4, !tbaa !148
  br label %120

; <label>:70                                      ; preds = %33
  %.phi.trans.insert = getelementptr inbounds %struct.connecttab, %struct.connecttab* %c, i64 0, i32 2
  %.pre = load %struct.httpd_conn*, %struct.httpd_conn** %.phi.trans.insert, align 8, !tbaa !25
  %.phi.trans.insert1 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %.pre, i64 0, i32 58
  %.pre2 = load i32, i32* %.phi.trans.insert1, align 4, !tbaa !148
  %phitmp = icmp eq i32 %.pre2, 0
  br i1 %phitmp, label %120, label %71

; <label>:71                                      ; preds = %70
  %72 = icmp eq i32 %35, 3
  br i1 %72, label %76, label %73

; <label>:73                                      ; preds = %71
  %74 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %.pre, i64 0, i32 60
  %75 = load i32, i32* %74, align 8, !tbaa !38
  tail call void @fdwatch_del_fd(i32 %75) #6
  %.pre3 = load %struct.httpd_conn*, %struct.httpd_conn** %.phi.trans.insert, align 8, !tbaa !25
  br label %76

; <label>:76                                      ; preds = %71, %73
  %77 = phi %struct.httpd_conn* [ %.pre, %71 ], [ %.pre3, %73 ]
  store i32 4, i32* %34, align 8, !tbaa !22
  %78 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %77, i64 0, i32 60
  %79 = load i32, i32* %78, align 8, !tbaa !38
  %80 = tail call i32 @shutdown(i32 %79, i32 1) #6
  %81 = load %struct.httpd_conn*, %struct.httpd_conn** %.phi.trans.insert, align 8, !tbaa !25
  %82 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %81, i64 0, i32 60
  %83 = load i32, i32* %82, align 8, !tbaa !38
  %84 = bitcast %struct.connecttab* %c to i8*
  %85 = icmp sgt i32 %83, -1
  %86 = load i32, i32* @nfiles, align 4
  %87 = icmp sgt i32 %86, %83
  %or.cond.i = and i1 %85, %87
  br i1 %or.cond.i, label %88, label %94

; <label>:88                                      ; preds = %76
  %89 = sext i32 %83 to i64
  %90 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  %91 = getelementptr inbounds i32, i32* %90, i64 %89
  %92 = load i32, i32* %91, align 4, !tbaa !8
  %93 = icmp eq i32 %92, -1
  br i1 %93, label %95, label %94

; <label>:94                                      ; preds = %88, %76
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.535, i64 0, i64 0), i32 %83) #6
  br label %fdwatch_add_fd.exit

; <label>:95                                      ; preds = %88
  %96 = load i32, i32* @npoll_fds, align 4, !tbaa !8
  %97 = icmp slt i32 %96, %86
  br i1 %97, label %99, label %98

; <label>:98                                      ; preds = %95
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5.536, i64 0, i64 0)) #6
  %.pre.i = load i32*, i32** @fd_rw, align 8, !tbaa !4
  br label %poll_add_fd.exit.i

; <label>:99                                      ; preds = %95
  %100 = sext i32 %96 to i64
  %101 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8, !tbaa !4
  %102 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %101, i64 %100, i32 0
  store i32 %83, i32* %102, align 4, !tbaa !28
  %103 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %101, i64 %100, i32 1
  store i16 1, i16* %103, align 4, !tbaa !30
  %104 = load i32*, i32** @poll_fdidx, align 8, !tbaa !4
  %105 = getelementptr inbounds i32, i32* %104, i64 %89
  store i32 %96, i32* %105, align 4, !tbaa !8
  %106 = add nsw i32 %96, 1
  store i32 %106, i32* @npoll_fds, align 4, !tbaa !8
  br label %poll_add_fd.exit.i

poll_add_fd.exit.i:                               ; preds = %99, %98
  %107 = phi i32* [ %.pre.i, %98 ], [ %90, %99 ]
  %108 = getelementptr inbounds i32, i32* %107, i64 %89
  store i32 0, i32* %108, align 4, !tbaa !8
  %109 = load i8**, i8*** @fd_data, align 8, !tbaa !4
  %110 = getelementptr inbounds i8*, i8** %109, i64 %89
  %111 = bitcast i8** %110 to %struct.connecttab**
  store %struct.connecttab* %c, %struct.connecttab** %111, align 8, !tbaa !4
  br label %fdwatch_add_fd.exit

fdwatch_add_fd.exit:                              ; preds = %94, %poll_add_fd.exit.i
  %112 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %c, i64 0, i32 10
  %113 = load %struct.TimerStruct*, %struct.TimerStruct** %112, align 8, !tbaa !147
  %114 = icmp eq %struct.TimerStruct* %113, null
  br i1 %114, label %116, label %115

; <label>:115                                     ; preds = %fdwatch_add_fd.exit
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.133, i64 0, i64 0)) #6
  br label %116

; <label>:116                                     ; preds = %fdwatch_add_fd.exit, %115
  %117 = tail call %struct.TimerStruct* @tmr_create(%struct.timeval* %tvP, void (i8*, %struct.timeval*)* nonnull @linger_clear_connection, i8* nonnull %84, i64 500, i32 0) #6
  store %struct.TimerStruct* %117, %struct.TimerStruct** %112, align 8, !tbaa !147
  %118 = icmp eq %struct.TimerStruct* %117, null
  br i1 %118, label %119, label %121

; <label>:119                                     ; preds = %116
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([43 x i8], [43 x i8]* @.str.134, i64 0, i64 0)) #6
  tail call void @exit(i32 1) #18
  unreachable

; <label>:120                                     ; preds = %tmr_cancel.exit2, %70
  tail call fastcc void @really_clear_connection(%struct.connecttab* nonnull %c, %struct.timeval* %tvP)
  br label %121

; <label>:121                                     ; preds = %116, %120
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define void @tmr_cancel(%struct.TimerStruct* %t) #10 {
  %1 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t, i64 0, i32 5
  %2 = load %struct.TimerStruct*, %struct.TimerStruct** %1, align 8, !tbaa !76
  %3 = icmp eq %struct.TimerStruct* %2, null
  %4 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t, i64 0, i32 6
  %5 = bitcast %struct.TimerStruct** %4 to i64*
  %6 = load i64, i64* %5, align 8, !tbaa !77
  %7 = ptrtoint %struct.TimerStruct* %2 to i64
  br i1 %3, label %8, label %15

; <label>:8                                       ; preds = %0
  %9 = inttoptr i64 %6 to %struct.TimerStruct*
  %10 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t, i64 0, i32 7
  %11 = load i32, i32* %10, align 8, !tbaa !78
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %12
  %14 = bitcast %struct.TimerStruct** %13 to i64*
  store i64 %6, i64* %14, align 8, !tbaa !4
  br label %18

; <label>:15                                      ; preds = %0
  %16 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %2, i64 0, i32 6
  %17 = bitcast %struct.TimerStruct** %16 to i64*
  store i64 %6, i64* %17, align 8, !tbaa !77
  %.pre.i = load %struct.TimerStruct*, %struct.TimerStruct** %4, align 8, !tbaa !77
  br label %18

; <label>:18                                      ; preds = %15, %8
  %19 = phi %struct.TimerStruct* [ %.pre.i, %15 ], [ %9, %8 ]
  %20 = icmp eq %struct.TimerStruct* %19, null
  br i1 %20, label %l_remove.exit, label %21

; <label>:21                                      ; preds = %18
  %22 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %19, i64 0, i32 5
  %23 = bitcast %struct.TimerStruct** %22 to i64*
  store i64 %7, i64* %23, align 8, !tbaa !76
  br label %l_remove.exit

l_remove.exit:                                    ; preds = %18, %21
  %24 = load i32, i32* @active_count, align 4, !tbaa !8
  %25 = add nsw i32 %24, -1
  store i32 %25, i32* @active_count, align 4, !tbaa !8
  %26 = load i64, i64* bitcast (%struct.TimerStruct** @free_timers to i64*), align 8, !tbaa !4
  store i64 %26, i64* %5, align 8, !tbaa !77
  store %struct.TimerStruct* %t, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %27 = load i32, i32* @free_count.580, align 4, !tbaa !8
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* @free_count.580, align 4, !tbaa !8
  store %struct.TimerStruct* null, %struct.TimerStruct** %1, align 8, !tbaa !76
  ret void
}

; Function Attrs: nounwind
declare i32 @shutdown(i32, i32) #2

; Function Attrs: nounwind uwtable
define void @fdwatch_add_fd(i32 %fd, i8* %client_data, i32 %rw) #8 {
  %1 = icmp sgt i32 %fd, -1
  %2 = load i32, i32* @nfiles, align 4
  %3 = icmp sgt i32 %2, %fd
  %or.cond = and i1 %1, %3
  br i1 %or.cond, label %4, label %10

; <label>:4                                       ; preds = %0
  %5 = sext i32 %fd to i64
  %6 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  %7 = getelementptr inbounds i32, i32* %6, i64 %5
  %8 = load i32, i32* %7, align 4, !tbaa !8
  %9 = icmp eq i32 %8, -1
  br i1 %9, label %11, label %10

; <label>:10                                      ; preds = %0, %4
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.535, i64 0, i64 0), i32 %fd) #6
  br label %31

; <label>:11                                      ; preds = %4
  %12 = load i32, i32* @npoll_fds, align 4, !tbaa !8
  %13 = icmp slt i32 %12, %2
  br i1 %13, label %15, label %14

; <label>:14                                      ; preds = %11
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5.536, i64 0, i64 0)) #6
  %.pre = load i32*, i32** @fd_rw, align 8, !tbaa !4
  br label %poll_add_fd.exit

; <label>:15                                      ; preds = %11
  %16 = sext i32 %12 to i64
  %17 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8, !tbaa !4
  %18 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %17, i64 %16, i32 0
  store i32 %fd, i32* %18, align 4, !tbaa !28
  switch i32 %rw, label %23 [
    i32 0, label %19
    i32 1, label %21
  ]

; <label>:19                                      ; preds = %15
  %20 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %17, i64 %16, i32 1
  store i16 1, i16* %20, align 4, !tbaa !30
  br label %23

; <label>:21                                      ; preds = %15
  %22 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %17, i64 %16, i32 1
  store i16 4, i16* %22, align 4, !tbaa !30
  br label %23

; <label>:23                                      ; preds = %21, %19, %15
  %24 = load i32*, i32** @poll_fdidx, align 8, !tbaa !4
  %25 = getelementptr inbounds i32, i32* %24, i64 %5
  store i32 %12, i32* %25, align 4, !tbaa !8
  %26 = add nsw i32 %12, 1
  store i32 %26, i32* @npoll_fds, align 4, !tbaa !8
  br label %poll_add_fd.exit

poll_add_fd.exit:                                 ; preds = %14, %23
  %27 = phi i32* [ %.pre, %14 ], [ %6, %23 ]
  %28 = getelementptr inbounds i32, i32* %27, i64 %5
  store i32 %rw, i32* %28, align 4, !tbaa !8
  %29 = load i8**, i8*** @fd_data, align 8, !tbaa !4
  %30 = getelementptr inbounds i8*, i8** %29, i64 %5
  store i8* %client_data, i8** %30, align 8, !tbaa !4
  br label %31

; <label>:31                                      ; preds = %poll_add_fd.exit, %10
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @linger_clear_connection(i8* %client_data.coerce, %struct.timeval* readonly %nowP) #8 {
  %1 = bitcast i8* %client_data.coerce to %struct.connecttab*
  %2 = getelementptr inbounds i8, i8* %client_data.coerce, i64 104
  %3 = bitcast i8* %2 to %struct.TimerStruct**
  store %struct.TimerStruct* null, %struct.TimerStruct** %3, align 8, !tbaa !147
  tail call fastcc void @really_clear_connection(%struct.connecttab* %1, %struct.timeval* %nowP)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @really_clear_connection(%struct.connecttab* %c, %struct.timeval* readonly %tvP) unnamed_addr #8 {
  %1 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %c, i64 0, i32 2
  %2 = load %struct.httpd_conn*, %struct.httpd_conn** %1, align 8, !tbaa !25
  %3 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %2, i64 0, i32 11
  %4 = load i64, i64* %3, align 8, !tbaa !61
  %5 = load i64, i64* @stats_bytes, align 8, !tbaa !16
  %6 = add nsw i64 %5, %4
  store i64 %6, i64* @stats_bytes, align 8, !tbaa !16
  %7 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %c, i64 0, i32 0
  %8 = load i32, i32* %7, align 8, !tbaa !22
  %9 = icmp eq i32 %8, 3
  br i1 %9, label %13, label %10

; <label>:10                                      ; preds = %0
  %11 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %2, i64 0, i32 60
  %12 = load i32, i32* %11, align 8, !tbaa !38
  tail call void @fdwatch_del_fd(i32 %12) #6
  %.pre = load %struct.httpd_conn*, %struct.httpd_conn** %1, align 8, !tbaa !25
  br label %13

; <label>:13                                      ; preds = %0, %10
  %14 = phi %struct.httpd_conn* [ %2, %0 ], [ %.pre, %10 ]
  tail call void @httpd_close_conn(%struct.httpd_conn* %14, %struct.timeval* %tvP) #6
  %15 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %c, i64 0, i32 4
  %16 = load i32, i32* %15, align 8, !tbaa !47
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %.lr.ph.i, label %clear_throttles.exit

.lr.ph.i:                                         ; preds = %13
  %18 = load %struct.throttletab*, %struct.throttletab** @throttles, align 8
  %19 = sext i32 %16 to i64
  %xtraiter = and i32 %16, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph.i.split, label %20

; <label>:20                                      ; preds = %.lr.ph.i
  %21 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %c, i64 0, i32 3, i64 0
  %22 = load i32, i32* %21, align 4, !tbaa !8
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %18, i64 %23, i32 5
  %25 = load i32, i32* %24, align 8, !tbaa !50
  %26 = add nsw i32 %25, -1
  store i32 %26, i32* %24, align 8, !tbaa !50
  br label %.lr.ph.i.split

.lr.ph.i.split:                                   ; preds = %.lr.ph.i, %20
  %indvars.iv.i.unr = phi i64 [ 0, %.lr.ph.i ], [ 1, %20 ]
  %27 = icmp eq i32 %16, 1
  br i1 %27, label %clear_throttles.exit, label %.lr.ph.i.split.split.preheader

.lr.ph.i.split.split.preheader:                   ; preds = %.lr.ph.i.split
  br label %.lr.ph.i.split.split

.lr.ph.i.split.split:                             ; preds = %.lr.ph.i.split.split.preheader, %.lr.ph.i.split.split
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i.1, %.lr.ph.i.split.split ], [ %indvars.iv.i.unr, %.lr.ph.i.split.split.preheader ]
  %28 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %c, i64 0, i32 3, i64 %indvars.iv.i
  %29 = load i32, i32* %28, align 4, !tbaa !8
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %18, i64 %30, i32 5
  %32 = load i32, i32* %31, align 8, !tbaa !50
  %33 = add nsw i32 %32, -1
  store i32 %33, i32* %31, align 8, !tbaa !50
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %34 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %c, i64 0, i32 3, i64 %indvars.iv.next.i
  %35 = load i32, i32* %34, align 4, !tbaa !8
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %18, i64 %36, i32 5
  %38 = load i32, i32* %37, align 8, !tbaa !50
  %39 = add nsw i32 %38, -1
  store i32 %39, i32* %37, align 8, !tbaa !50
  %indvars.iv.next.i.1 = add nuw nsw i64 %indvars.iv.i, 2
  %exitcond.1 = icmp eq i64 %indvars.iv.next.i.1, %19
  br i1 %exitcond.1, label %clear_throttles.exit.loopexit, label %.lr.ph.i.split.split

clear_throttles.exit.loopexit:                    ; preds = %.lr.ph.i.split.split
  br label %clear_throttles.exit

clear_throttles.exit:                             ; preds = %clear_throttles.exit.loopexit, %.lr.ph.i.split, %13
  %40 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %c, i64 0, i32 10
  %41 = load %struct.TimerStruct*, %struct.TimerStruct** %40, align 8, !tbaa !147
  %42 = icmp eq %struct.TimerStruct* %41, null
  br i1 %42, label %72, label %43

; <label>:43                                      ; preds = %clear_throttles.exit
  %44 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %41, i64 0, i32 5
  %45 = load %struct.TimerStruct*, %struct.TimerStruct** %44, align 8, !tbaa !76
  %46 = icmp eq %struct.TimerStruct* %45, null
  %47 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %41, i64 0, i32 6
  %48 = bitcast %struct.TimerStruct** %47 to i64*
  %49 = load i64, i64* %48, align 8, !tbaa !77
  %50 = ptrtoint %struct.TimerStruct* %45 to i64
  br i1 %46, label %51, label %58

; <label>:51                                      ; preds = %43
  %52 = inttoptr i64 %49 to %struct.TimerStruct*
  %53 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %41, i64 0, i32 7
  %54 = load i32, i32* %53, align 8, !tbaa !78
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %55
  %57 = bitcast %struct.TimerStruct** %56 to i64*
  store i64 %49, i64* %57, align 8, !tbaa !4
  br label %61

; <label>:58                                      ; preds = %43
  %59 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %45, i64 0, i32 6
  %60 = bitcast %struct.TimerStruct** %59 to i64*
  store i64 %49, i64* %60, align 8, !tbaa !77
  %.pre.i.i = load %struct.TimerStruct*, %struct.TimerStruct** %47, align 8, !tbaa !77
  br label %61

; <label>:61                                      ; preds = %58, %51
  %62 = phi %struct.TimerStruct* [ %.pre.i.i, %58 ], [ %52, %51 ]
  %63 = icmp eq %struct.TimerStruct* %62, null
  br i1 %63, label %tmr_cancel.exit, label %64

; <label>:64                                      ; preds = %61
  %65 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %62, i64 0, i32 5
  %66 = bitcast %struct.TimerStruct** %65 to i64*
  store i64 %50, i64* %66, align 8, !tbaa !76
  br label %tmr_cancel.exit

tmr_cancel.exit:                                  ; preds = %61, %64
  %67 = load i32, i32* @active_count, align 4, !tbaa !8
  %68 = add nsw i32 %67, -1
  store i32 %68, i32* @active_count, align 4, !tbaa !8
  %69 = load i64, i64* bitcast (%struct.TimerStruct** @free_timers to i64*), align 8, !tbaa !4
  store i64 %69, i64* %48, align 8, !tbaa !77
  store %struct.TimerStruct* %41, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %70 = load i32, i32* @free_count.580, align 4, !tbaa !8
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* @free_count.580, align 4, !tbaa !8
  store %struct.TimerStruct* null, %struct.TimerStruct** %44, align 8, !tbaa !76
  store %struct.TimerStruct* null, %struct.TimerStruct** %40, align 8, !tbaa !147
  br label %72

; <label>:72                                      ; preds = %clear_throttles.exit, %tmr_cancel.exit
  store i32 0, i32* %7, align 8, !tbaa !22
  %73 = load i32, i32* @first_free_connect, align 4, !tbaa !8
  %74 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %c, i64 0, i32 1
  store i32 %73, i32* %74, align 4, !tbaa !24
  %75 = load i64, i64* bitcast (%struct.connecttab** @connects to i64*), align 8, !tbaa !4
  %76 = ptrtoint %struct.connecttab* %c to i64
  %77 = sub i64 %76, %75
  %78 = sdiv exact i64 %77, 144
  %79 = trunc i64 %78 to i32
  store i32 %79, i32* @first_free_connect, align 4, !tbaa !8
  %80 = load i32, i32* @num_connects, align 4, !tbaa !8
  %81 = add nsw i32 %80, -1
  store i32 %81, i32* @num_connects, align 4, !tbaa !8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @update_throttles(i8* nocapture readnone %client_data.coerce, %struct.timeval* nocapture readnone %nowP) #8 {
  %1 = load i32, i32* @numthrottles, align 4, !tbaa !8
  %2 = icmp sgt i32 %1, 0
  br i1 %2, label %.lr.ph6.preheader, label %.preheader

.lr.ph6.preheader:                                ; preds = %0
  br label %.lr.ph6

.preheader.loopexit:                              ; preds = %47
  br label %.preheader

.preheader:                                       ; preds = %.preheader.loopexit, %0
  %3 = load i32, i32* @max_connects, align 4, !tbaa !8
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %.lr.ph3, label %._crit_edge

.lr.ph3:                                          ; preds = %.preheader
  %5 = load %struct.connecttab*, %struct.connecttab** @connects, align 8
  %6 = load %struct.throttletab*, %struct.throttletab** @throttles, align 8
  %7 = sext i32 %3 to i64
  br label %51

.lr.ph6:                                          ; preds = %.lr.ph6.preheader, %47
  %indvars.iv9 = phi i64 [ %indvars.iv.next10, %47 ], [ 0, %.lr.ph6.preheader ]
  %8 = load %struct.throttletab*, %struct.throttletab** @throttles, align 8, !tbaa !4
  %9 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %8, i64 %indvars.iv9, i32 3
  %10 = load i64, i64* %9, align 8, !tbaa !49
  %11 = shl i64 %10, 1
  %12 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %8, i64 %indvars.iv9, i32 4
  %13 = load i64, i64* %12, align 8, !tbaa !62
  %14 = sdiv i64 %13, 2
  %15 = add nsw i64 %14, %11
  %16 = sdiv i64 %15, 3
  store i64 %16, i64* %9, align 8, !tbaa !49
  store i64 0, i64* %12, align 8, !tbaa !62
  %17 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %8, i64 %indvars.iv9, i32 1
  %18 = load i64, i64* %17, align 8, !tbaa !20
  %19 = icmp sgt i64 %16, %18
  br i1 %19, label %20, label %32

; <label>:20                                      ; preds = %.lr.ph6
  %21 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %8, i64 %indvars.iv9, i32 5
  %22 = load i32, i32* %21, align 8, !tbaa !50
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %32, label %24

; <label>:24                                      ; preds = %20
  %25 = shl nsw i64 %18, 1
  %26 = icmp sgt i64 %16, %25
  %27 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %8, i64 %indvars.iv9, i32 0
  %28 = load i8*, i8** %27, align 8, !tbaa !18
  %29 = trunc i64 %indvars.iv9 to i32
  br i1 %26, label %30, label %31

; <label>:30                                      ; preds = %24
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([70 x i8], [70 x i8]* @.str.130, i64 0, i64 0), i32 %29, i8* %28, i64 %16, i64 %18, i32 %22) #6
  br label %32

; <label>:31                                      ; preds = %24
  tail call void (i32, i8*, ...) @syslog(i32 6, i8* nonnull getelementptr inbounds ([62 x i8], [62 x i8]* @.str.131, i64 0, i64 0), i32 %29, i8* %28, i64 %16, i64 %18, i32 %22) #6
  br label %32

; <label>:32                                      ; preds = %20, %30, %31, %.lr.ph6
  %33 = load %struct.throttletab*, %struct.throttletab** @throttles, align 8, !tbaa !4
  %34 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %33, i64 %indvars.iv9, i32 3
  %35 = load i64, i64* %34, align 8, !tbaa !49
  %36 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %33, i64 %indvars.iv9, i32 2
  %37 = load i64, i64* %36, align 8, !tbaa !21
  %38 = icmp slt i64 %35, %37
  br i1 %38, label %39, label %47

; <label>:39                                      ; preds = %32
  %40 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %33, i64 %indvars.iv9, i32 5
  %41 = load i32, i32* %40, align 8, !tbaa !50
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

; <label>:43                                      ; preds = %39
  %44 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %33, i64 %indvars.iv9, i32 0
  %45 = load i8*, i8** %44, align 8, !tbaa !18
  %46 = trunc i64 %indvars.iv9 to i32
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.132, i64 0, i64 0), i32 %46, i8* %45, i64 %35, i64 %37, i32 %41) #6
  br label %47

; <label>:47                                      ; preds = %39, %32, %43
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1
  %48 = load i32, i32* @numthrottles, align 4, !tbaa !8
  %49 = sext i32 %48 to i64
  %50 = icmp slt i64 %indvars.iv.next10, %49
  br i1 %50, label %.lr.ph6, label %.preheader.loopexit

; <label>:51                                      ; preds = %.loopexit, %.lr.ph3
  %indvars.iv7 = phi i64 [ 0, %.lr.ph3 ], [ %indvars.iv.next8, %.loopexit ]
  %52 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %5, i64 %indvars.iv7, i32 0
  %53 = load i32, i32* %52, align 8, !tbaa !22
  %54 = and i32 %53, -2
  %switch = icmp eq i32 %54, 2
  br i1 %switch, label %55, label %.loopexit

; <label>:55                                      ; preds = %51
  %56 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %5, i64 %indvars.iv7, i32 5
  store i64 -1, i64* %56, align 8, !tbaa !51
  %57 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %5, i64 %indvars.iv7, i32 4
  %58 = load i32, i32* %57, align 8, !tbaa !47
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %55
  %60 = sext i32 %58 to i64
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
  %61 = phi i64 [ %storemerge, %.lr.ph ], [ -1, %.lr.ph.preheader ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %62 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %5, i64 %indvars.iv7, i32 3, i64 %indvars.iv
  %63 = load i32, i32* %62, align 4, !tbaa !8
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %6, i64 %64, i32 1
  %66 = load i64, i64* %65, align 8, !tbaa !20
  %67 = getelementptr inbounds %struct.throttletab, %struct.throttletab* %6, i64 %64, i32 5
  %68 = load i32, i32* %67, align 8, !tbaa !50
  %69 = sext i32 %68 to i64
  %70 = sdiv i64 %66, %69
  %71 = icmp eq i64 %61, -1
  %72 = icmp slt i64 %61, %70
  %. = select i1 %72, i64 %61, i64 %70
  %storemerge = select i1 %71, i64 %70, i64 %.
  store i64 %storemerge, i64* %56, align 8, !tbaa !51
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %60
  br i1 %exitcond, label %.loopexit.loopexit, label %.lr.ph

.loopexit.loopexit:                               ; preds = %.lr.ph
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %55, %51
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond1 = icmp eq i64 %indvars.iv.next8, %7
  br i1 %exitcond1, label %._crit_edge.loopexit, label %51

._crit_edge.loopexit:                             ; preds = %.loopexit
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @show_stats(i8* nocapture readnone %client_data.coerce, %struct.timeval* readonly %nowP) #8 {
  tail call fastcc void @logstats(%struct.timeval* %nowP)
  ret void
}

; Function Attrs: nounwind
declare i32 @setgroups(i64, i32*) #2

; Function Attrs: nounwind
declare i32 @setgid(i32) #2

declare i32 @initgroups(i8*, i32) #5

; Function Attrs: nounwind
declare i32 @setuid(i32) #2

; Function Attrs: nounwind uwtable
define void @httpd_set_logfp(%struct.httpd_server* nocapture %hs, %struct._IO_FILE* %logfp) #8 {
  %1 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 13
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %1, align 8, !tbaa !32
  %3 = icmp eq %struct._IO_FILE* %2, null
  br i1 %3, label %6, label %4

; <label>:4                                       ; preds = %0
  %5 = tail call i32 @fclose(%struct._IO_FILE* nonnull %2)
  br label %6

; <label>:6                                       ; preds = %0, %4
  store %struct._IO_FILE* %logfp, %struct._IO_FILE** %1, align 8, !tbaa !32
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define i64 @tmr_mstimeout(%struct.timeval* nocapture readonly %nowP) #12 {
  %1 = getelementptr inbounds %struct.timeval, %struct.timeval* %nowP, i64 0, i32 0
  %2 = getelementptr inbounds %struct.timeval, %struct.timeval* %nowP, i64 0, i32 1
  br label %3

; <label>:3                                       ; preds = %22, %0
  %indvars.iv = phi i64 [ 0, %0 ], [ %indvars.iv.next, %22 ]
  %msecs.03 = phi i64 [ 0, %0 ], [ %msecs.1, %22 ]
  %gotone.02 = phi i32 [ 0, %0 ], [ %gotone.1, %22 ]
  %4 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %indvars.iv
  %5 = load %struct.TimerStruct*, %struct.TimerStruct** %4, align 8, !tbaa !4
  %6 = icmp eq %struct.TimerStruct* %5, null
  br i1 %6, label %22, label %7

; <label>:7                                       ; preds = %3
  %8 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %5, i64 0, i32 4, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !33
  %10 = load i64, i64* %1, align 8, !tbaa !45
  %11 = sub nsw i64 %9, %10
  %12 = mul nsw i64 %11, 1000
  %13 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %5, i64 0, i32 4, i32 1
  %14 = load i64, i64* %13, align 8, !tbaa !36
  %15 = load i64, i64* %2, align 8, !tbaa !149
  %16 = sub nsw i64 %14, %15
  %17 = sdiv i64 %16, 1000
  %18 = add nsw i64 %17, %12
  %19 = icmp eq i32 %gotone.02, 0
  br i1 %19, label %22, label %20

; <label>:20                                      ; preds = %7
  %21 = icmp slt i64 %18, %msecs.03
  %.msecs.0 = select i1 %21, i64 %18, i64 %msecs.03
  br label %22

; <label>:22                                      ; preds = %20, %7, %3
  %gotone.1 = phi i32 [ %gotone.02, %3 ], [ 1, %7 ], [ %gotone.02, %20 ]
  %msecs.1 = phi i64 [ %msecs.03, %3 ], [ %18, %7 ], [ %.msecs.0, %20 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 67
  br i1 %exitcond, label %23, label %3

; <label>:23                                      ; preds = %22
  %msecs.1.lcssa = phi i64 [ %msecs.1, %22 ]
  %gotone.1.lcssa = phi i32 [ %gotone.1, %22 ]
  %24 = icmp eq i32 %gotone.1.lcssa, 0
  %25 = icmp sgt i64 %msecs.1.lcssa, 0
  %.msecs.01 = select i1 %25, i64 %msecs.1.lcssa, i64 0
  %.0 = select i1 %24, i64 -1, i64 %.msecs.01
  ret i64 %.0
}

; Function Attrs: nounwind uwtable
define i32 @fdwatch(i64 %timeout_msecs) #8 {
  %1 = load i64, i64* @nwatches, align 8, !tbaa !16
  %2 = add nsw i64 %1, 1
  store i64 %2, i64* @nwatches, align 8, !tbaa !16
  %3 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8, !tbaa !4
  %4 = load i32, i32* @npoll_fds, align 4, !tbaa !8
  %5 = sext i32 %4 to i64
  %6 = trunc i64 %timeout_msecs to i32
  %7 = tail call i32 @poll(%struct.pollfd* %3, i64 %5, i32 %6) #6
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %poll_watch.exit, label %.preheader.i

.preheader.i:                                     ; preds = %0
  %9 = load i32, i32* @npoll_fds, align 4, !tbaa !8
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %.lr.ph.i, label %poll_watch.exit

.lr.ph.i:                                         ; preds = %.preheader.i
  %11 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8
  %12 = load i32*, i32** @poll_rfdidx, align 8
  %13 = sext i32 %9 to i64
  br label %14

; <label>:14                                      ; preds = %26, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %.lr.ph.i ], [ %indvars.iv.next.i, %26 ]
  %ridx.01.i = phi i32 [ 0, %.lr.ph.i ], [ %ridx.1.i, %26 ]
  %15 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %11, i64 %indvars.iv.i, i32 2
  %16 = load i16, i16* %15, align 2, !tbaa !37
  %17 = and i16 %16, 61
  %18 = icmp eq i16 %17, 0
  br i1 %18, label %26, label %19

; <label>:19                                      ; preds = %14
  %20 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %11, i64 %indvars.iv.i, i32 0
  %21 = load i32, i32* %20, align 4, !tbaa !28
  %22 = add nsw i32 %ridx.01.i, 1
  %23 = sext i32 %ridx.01.i to i64
  %24 = getelementptr inbounds i32, i32* %12, i64 %23
  store i32 %21, i32* %24, align 4, !tbaa !8
  %25 = icmp eq i32 %22, %7
  br i1 %25, label %poll_watch.exit.loopexit, label %26

; <label>:26                                      ; preds = %19, %14
  %ridx.1.i = phi i32 [ %22, %19 ], [ %ridx.01.i, %14 ]
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %27 = icmp slt i64 %indvars.iv.next.i, %13
  br i1 %27, label %14, label %poll_watch.exit.loopexit

poll_watch.exit.loopexit:                         ; preds = %26, %19
  %.0.i.ph = phi i32 [ %ridx.1.i, %26 ], [ %7, %19 ]
  br label %poll_watch.exit

poll_watch.exit:                                  ; preds = %poll_watch.exit.loopexit, %0, %.preheader.i
  %.0.i = phi i32 [ %7, %0 ], [ 0, %.preheader.i ], [ %.0.i.ph, %poll_watch.exit.loopexit ]
  store i32 %.0.i, i32* @nreturned, align 4, !tbaa !8
  store i32 0, i32* @next_ridx, align 4, !tbaa !8
  ret i32 %.0.i
}

declare i32 @poll(%struct.pollfd*, i64, i32) #5

; Function Attrs: nounwind uwtable
define void @tmr_run(%struct.timeval* %nowP) #8 {
  %1 = getelementptr inbounds %struct.timeval, %struct.timeval* %nowP, i64 0, i32 0
  %2 = getelementptr inbounds %struct.timeval, %struct.timeval* %nowP, i64 0, i32 1
  br label %3

; <label>:3                                       ; preds = %._crit_edge, %0
  %indvars.iv = phi i64 [ 0, %0 ], [ %indvars.iv.next, %._crit_edge ]
  %4 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %indvars.iv
  %5 = load %struct.TimerStruct*, %struct.TimerStruct** %4, align 8, !tbaa !4
  %6 = icmp eq %struct.TimerStruct* %5, null
  br i1 %6, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %3
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.backedge
  %t.01 = phi %struct.TimerStruct* [ %8, %.backedge ], [ %5, %.lr.ph.preheader ]
  %7 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.01, i64 0, i32 6
  %8 = load %struct.TimerStruct*, %struct.TimerStruct** %7, align 8, !tbaa !77
  %9 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.01, i64 0, i32 4, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !33
  %11 = load i64, i64* %1, align 8, !tbaa !45
  %12 = icmp sgt i64 %10, %11
  br i1 %12, label %._crit_edge.loopexit, label %13

; <label>:13                                      ; preds = %.lr.ph
  %14 = icmp eq i64 %10, %11
  br i1 %14, label %15, label %20

; <label>:15                                      ; preds = %13
  %16 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.01, i64 0, i32 4, i32 1
  %17 = load i64, i64* %16, align 8, !tbaa !36
  %18 = load i64, i64* %2, align 8, !tbaa !149
  %19 = icmp sgt i64 %17, %18
  br i1 %19, label %._crit_edge.loopexit, label %20

; <label>:20                                      ; preds = %15, %13
  %21 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.01, i64 0, i32 0
  %22 = load void (i8*, %struct.timeval*)*, void (i8*, %struct.timeval*)** %21, align 8, !tbaa !140
  %23 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.01, i64 0, i32 1, i32 0
  %24 = load i8*, i8** %23, align 8
  tail call void %22(i8* %24, %struct.timeval* nonnull %nowP) #6
  %25 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.01, i64 0, i32 3
  %26 = load i32, i32* %25, align 8, !tbaa !142
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %46, label %28

; <label>:28                                      ; preds = %20
  %29 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.01, i64 0, i32 2
  %30 = load i64, i64* %29, align 8, !tbaa !141
  %31 = sdiv i64 %30, 1000
  %32 = load i64, i64* %9, align 8, !tbaa !33
  %33 = add nsw i64 %32, %31
  store i64 %33, i64* %9, align 8, !tbaa !33
  %34 = srem i64 %30, 1000
  %35 = mul nsw i64 %34, 1000
  %36 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.01, i64 0, i32 4, i32 1
  %37 = load i64, i64* %36, align 8, !tbaa !36
  %38 = add nsw i64 %37, %35
  store i64 %38, i64* %36, align 8, !tbaa !36
  %39 = icmp sgt i64 %38, 999999
  br i1 %39, label %40, label %44

; <label>:40                                      ; preds = %28
  %41 = sdiv i64 %38, 1000000
  %42 = add nsw i64 %41, %33
  store i64 %42, i64* %9, align 8, !tbaa !33
  %43 = srem i64 %38, 1000000
  store i64 %43, i64* %36, align 8, !tbaa !36
  br label %44

; <label>:44                                      ; preds = %40, %28
  tail call fastcc void @l_resort(%struct.TimerStruct* nonnull %t.01)
  br label %.backedge

.backedge:                                        ; preds = %44, %tmr_cancel.exit
  %45 = icmp eq %struct.TimerStruct* %8, null
  br i1 %45, label %._crit_edge.loopexit, label %.lr.ph

; <label>:46                                      ; preds = %20
  %47 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.01, i64 0, i32 5
  %48 = load %struct.TimerStruct*, %struct.TimerStruct** %47, align 8, !tbaa !76
  %49 = icmp eq %struct.TimerStruct* %48, null
  %50 = bitcast %struct.TimerStruct** %7 to i64*
  %51 = load i64, i64* %50, align 8, !tbaa !77
  %52 = ptrtoint %struct.TimerStruct* %48 to i64
  br i1 %49, label %53, label %60

; <label>:53                                      ; preds = %46
  %54 = inttoptr i64 %51 to %struct.TimerStruct*
  %55 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t.01, i64 0, i32 7
  %56 = load i32, i32* %55, align 8, !tbaa !78
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %57
  %59 = bitcast %struct.TimerStruct** %58 to i64*
  store i64 %51, i64* %59, align 8, !tbaa !4
  br label %63

; <label>:60                                      ; preds = %46
  %61 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %48, i64 0, i32 6
  %62 = bitcast %struct.TimerStruct** %61 to i64*
  store i64 %51, i64* %62, align 8, !tbaa !77
  %.pre.i.i = load %struct.TimerStruct*, %struct.TimerStruct** %7, align 8, !tbaa !77
  br label %63

; <label>:63                                      ; preds = %60, %53
  %64 = phi %struct.TimerStruct* [ %.pre.i.i, %60 ], [ %54, %53 ]
  %65 = icmp eq %struct.TimerStruct* %64, null
  br i1 %65, label %tmr_cancel.exit, label %66

; <label>:66                                      ; preds = %63
  %67 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %64, i64 0, i32 5
  %68 = bitcast %struct.TimerStruct** %67 to i64*
  store i64 %52, i64* %68, align 8, !tbaa !76
  br label %tmr_cancel.exit

tmr_cancel.exit:                                  ; preds = %63, %66
  %69 = load i32, i32* @active_count, align 4, !tbaa !8
  %70 = add nsw i32 %69, -1
  store i32 %70, i32* @active_count, align 4, !tbaa !8
  %71 = load i64, i64* bitcast (%struct.TimerStruct** @free_timers to i64*), align 8, !tbaa !4
  store i64 %71, i64* %50, align 8, !tbaa !77
  store %struct.TimerStruct* %t.01, %struct.TimerStruct** @free_timers, align 8, !tbaa !4
  %72 = load i32, i32* @free_count.580, align 4, !tbaa !8
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* @free_count.580, align 4, !tbaa !8
  store %struct.TimerStruct* null, %struct.TimerStruct** %47, align 8, !tbaa !76
  br label %.backedge

._crit_edge.loopexit:                             ; preds = %.backedge, %15, %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 67
  br i1 %exitcond, label %74, label %3

; <label>:74                                      ; preds = %._crit_edge
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @l_resort(%struct.TimerStruct* %t) unnamed_addr #10 {
  %1 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t, i64 0, i32 5
  %2 = load %struct.TimerStruct*, %struct.TimerStruct** %1, align 8, !tbaa !76
  %3 = icmp eq %struct.TimerStruct* %2, null
  %4 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t, i64 0, i32 6
  %5 = bitcast %struct.TimerStruct** %4 to i64*
  %6 = load i64, i64* %5, align 8, !tbaa !77
  %7 = ptrtoint %struct.TimerStruct* %2 to i64
  br i1 %3, label %8, label %15

; <label>:8                                       ; preds = %0
  %9 = inttoptr i64 %6 to %struct.TimerStruct*
  %10 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t, i64 0, i32 7
  %11 = load i32, i32* %10, align 8, !tbaa !78
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %12
  %14 = bitcast %struct.TimerStruct** %13 to i64*
  store i64 %6, i64* %14, align 8, !tbaa !4
  br label %18

; <label>:15                                      ; preds = %0
  %16 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %2, i64 0, i32 6
  %17 = bitcast %struct.TimerStruct** %16 to i64*
  store i64 %6, i64* %17, align 8, !tbaa !77
  %.pre.i = load %struct.TimerStruct*, %struct.TimerStruct** %4, align 8, !tbaa !77
  br label %18

; <label>:18                                      ; preds = %15, %8
  %19 = phi %struct.TimerStruct* [ %.pre.i, %15 ], [ %9, %8 ]
  %20 = icmp eq %struct.TimerStruct* %19, null
  br i1 %20, label %l_remove.exit, label %21

; <label>:21                                      ; preds = %18
  %22 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %19, i64 0, i32 5
  %23 = bitcast %struct.TimerStruct** %22 to i64*
  store i64 %7, i64* %23, align 8, !tbaa !76
  br label %l_remove.exit

l_remove.exit:                                    ; preds = %18, %21
  %24 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t, i64 0, i32 4, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !33
  %26 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t, i64 0, i32 4, i32 1
  %27 = load i64, i64* %26, align 8, !tbaa !36
  %28 = xor i64 %27, %25
  %29 = trunc i64 %28 to i32
  %30 = urem i32 %29, 67
  %31 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t, i64 0, i32 7
  store i32 %30, i32* %31, align 8, !tbaa !78
  %32 = zext i32 %30 to i64
  %33 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %32
  %34 = load %struct.TimerStruct*, %struct.TimerStruct** %33, align 8, !tbaa !4
  %35 = icmp eq %struct.TimerStruct* %34, null
  br i1 %35, label %36, label %38

; <label>:36                                      ; preds = %l_remove.exit
  store %struct.TimerStruct* %t, %struct.TimerStruct** %33, align 8, !tbaa !4
  %37 = bitcast %struct.TimerStruct** %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %37, i8 0, i64 16, i32 8, i1 false) #6
  br label %l_add.exit

; <label>:38                                      ; preds = %l_remove.exit
  %39 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %34, i64 0, i32 4, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !33
  %41 = icmp slt i64 %25, %40
  br i1 %41, label %49, label %42

; <label>:42                                      ; preds = %38
  %43 = icmp eq i64 %25, %40
  br i1 %43, label %45, label %.preheader.i

.preheader.i:                                     ; preds = %45, %42
  %t2.0.in4.i = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %34, i64 0, i32 6
  %t2.05.i = load %struct.TimerStruct*, %struct.TimerStruct** %t2.0.in4.i, align 8, !tbaa !77
  %44 = icmp eq %struct.TimerStruct* %t2.05.i, null
  br i1 %44, label %._crit_edge.i, label %.lr.ph.i.preheader

.lr.ph.i.preheader:                               ; preds = %.preheader.i
  br label %.lr.ph.i

; <label>:45                                      ; preds = %42
  %46 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %34, i64 0, i32 4, i32 1
  %47 = load i64, i64* %46, align 8, !tbaa !36
  %48 = icmp sgt i64 %27, %47
  br i1 %48, label %.preheader.i, label %49

; <label>:49                                      ; preds = %45, %38
  store %struct.TimerStruct* %t, %struct.TimerStruct** %33, align 8, !tbaa !4
  store %struct.TimerStruct* null, %struct.TimerStruct** %1, align 8, !tbaa !76
  store %struct.TimerStruct* %34, %struct.TimerStruct** %4, align 8, !tbaa !77
  %50 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %34, i64 0, i32 5
  store %struct.TimerStruct* %t, %struct.TimerStruct** %50, align 8, !tbaa !76
  br label %l_add.exit

.lr.ph.i:                                         ; preds = %.lr.ph.i.preheader, %.backedge.i
  %t2.08.i = phi %struct.TimerStruct* [ %t2.0.i, %.backedge.i ], [ %t2.05.i, %.lr.ph.i.preheader ]
  %t2.0.in7.i = phi %struct.TimerStruct** [ %t2.0.in.i, %.backedge.i ], [ %t2.0.in4.i, %.lr.ph.i.preheader ]
  %.pn6.i = phi %struct.TimerStruct* [ %t2.08.i, %.backedge.i ], [ %34, %.lr.ph.i.preheader ]
  %51 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t2.08.i, i64 0, i32 4, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !33
  %53 = icmp slt i64 %25, %52
  br i1 %53, label %61, label %54

; <label>:54                                      ; preds = %.lr.ph.i
  %55 = icmp eq i64 %25, %52
  br i1 %55, label %56, label %.backedge.i

; <label>:56                                      ; preds = %54
  %57 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t2.08.i, i64 0, i32 4, i32 1
  %58 = load i64, i64* %57, align 8, !tbaa !36
  %59 = icmp sgt i64 %27, %58
  br i1 %59, label %.backedge.i, label %61

.backedge.i:                                      ; preds = %56, %54
  %t2.0.in.i = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t2.08.i, i64 0, i32 6
  %t2.0.i = load %struct.TimerStruct*, %struct.TimerStruct** %t2.0.in.i, align 8, !tbaa !77
  %60 = icmp eq %struct.TimerStruct* %t2.0.i, null
  br i1 %60, label %._crit_edge.i.loopexit, label %.lr.ph.i

; <label>:61                                      ; preds = %56, %.lr.ph.i
  %.pn6.i.lcssa = phi %struct.TimerStruct* [ %.pn6.i, %56 ], [ %.pn6.i, %.lr.ph.i ]
  %t2.0.in7.i.lcssa = phi %struct.TimerStruct** [ %t2.0.in7.i, %56 ], [ %t2.0.in7.i, %.lr.ph.i ]
  %t2.08.i.lcssa = phi %struct.TimerStruct* [ %t2.08.i, %56 ], [ %t2.08.i, %.lr.ph.i ]
  store %struct.TimerStruct* %t, %struct.TimerStruct** %t2.0.in7.i.lcssa, align 8, !tbaa !77
  store %struct.TimerStruct* %.pn6.i.lcssa, %struct.TimerStruct** %1, align 8, !tbaa !76
  store %struct.TimerStruct* %t2.08.i.lcssa, %struct.TimerStruct** %4, align 8, !tbaa !77
  %62 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t2.08.i.lcssa, i64 0, i32 5
  store %struct.TimerStruct* %t, %struct.TimerStruct** %62, align 8, !tbaa !76
  br label %l_add.exit

._crit_edge.i.loopexit:                           ; preds = %.backedge.i
  %t2.0.in.i.lcssa = phi %struct.TimerStruct** [ %t2.0.in.i, %.backedge.i ]
  %t2.08.i.lcssa16 = phi %struct.TimerStruct* [ %t2.08.i, %.backedge.i ]
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i.loopexit, %.preheader.i
  %t2.0.in.lcssa.i = phi %struct.TimerStruct** [ %t2.0.in4.i, %.preheader.i ], [ %t2.0.in.i.lcssa, %._crit_edge.i.loopexit ]
  %.pn.lcssa.i = phi %struct.TimerStruct* [ %34, %.preheader.i ], [ %t2.08.i.lcssa16, %._crit_edge.i.loopexit ]
  store %struct.TimerStruct* %t, %struct.TimerStruct** %t2.0.in.lcssa.i, align 8, !tbaa !77
  store %struct.TimerStruct* %.pn.lcssa.i, %struct.TimerStruct** %1, align 8, !tbaa !76
  store %struct.TimerStruct* null, %struct.TimerStruct** %4, align 8, !tbaa !77
  br label %l_add.exit

l_add.exit:                                       ; preds = %36, %49, %61, %._crit_edge.i
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @fdwatch_check_fd(i32 %fd) #8 {
  %1 = icmp sgt i32 %fd, -1
  %2 = load i32, i32* @nfiles, align 4
  %3 = icmp sgt i32 %2, %fd
  %or.cond = and i1 %1, %3
  br i1 %or.cond, label %4, label %10

; <label>:4                                       ; preds = %0
  %5 = sext i32 %fd to i64
  %6 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  %7 = getelementptr inbounds i32, i32* %6, i64 %5
  %8 = load i32, i32* %7, align 4, !tbaa !8
  %9 = icmp eq i32 %8, -1
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %0, %4
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2.545, i64 0, i64 0), i32 %fd) #6
  br label %poll_check_fd.exit

; <label>:11                                      ; preds = %4
  %12 = load i32*, i32** @poll_fdidx, align 8, !tbaa !4
  %13 = getelementptr inbounds i32, i32* %12, i64 %5
  %14 = load i32, i32* %13, align 4, !tbaa !8
  %15 = icmp sgt i32 %14, -1
  %16 = icmp slt i32 %14, %2
  %or.cond.i = and i1 %15, %16
  br i1 %or.cond.i, label %18, label %17

; <label>:17                                      ; preds = %11
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7.546, i64 0, i64 0), i32 %14) #6
  br label %poll_check_fd.exit

; <label>:18                                      ; preds = %11
  %19 = sext i32 %14 to i64
  %20 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8, !tbaa !4
  %21 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %20, i64 %19, i32 2
  %22 = load i16, i16* %21, align 2, !tbaa !37
  %23 = sext i16 %22 to i32
  %24 = and i32 %23, 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %poll_check_fd.exit

; <label>:26                                      ; preds = %18
  switch i32 %8, label %poll_check_fd.exit [
    i32 0, label %27
    i32 1, label %29
  ]

; <label>:27                                      ; preds = %26
  %28 = and i32 %23, 49
  br label %poll_check_fd.exit

; <label>:29                                      ; preds = %26
  %30 = and i32 %23, 52
  br label %poll_check_fd.exit

poll_check_fd.exit:                               ; preds = %29, %27, %26, %18, %17, %10
  %.0 = phi i32 [ 0, %10 ], [ 0, %17 ], [ %30, %29 ], [ %28, %27 ], [ 0, %18 ], [ 0, %26 ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @handle_newconnect(%struct.timeval* %tvP, i32 %listen_fd) unnamed_addr #8 {
  %1 = load i32, i32* @num_connects, align 4, !tbaa !8
  %2 = load i32, i32* @max_connects, align 4, !tbaa !8
  %3 = icmp slt i32 %1, %2
  br i1 %3, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %4 = getelementptr inbounds %struct.timeval, %struct.timeval* %tvP, i64 0, i32 0
  br label %5

._crit_edge.loopexit:                             ; preds = %.backedge
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  tail call void (i32, i8*, ...) @syslog(i32 4, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.123, i64 0, i64 0)) #6
  tail call void @tmr_run(%struct.timeval* %tvP) #6
  br label %.loopexit

; <label>:5                                       ; preds = %.lr.ph, %.backedge
  %6 = load i32, i32* @first_free_connect, align 4, !tbaa !8
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %15, label %8

; <label>:8                                       ; preds = %5
  %9 = sext i32 %6 to i64
  %10 = load %struct.connecttab*, %struct.connecttab** @connects, align 8, !tbaa !4
  %11 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %10, i64 %9
  %12 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %11, i64 0, i32 0
  %13 = load i32, i32* %12, align 8, !tbaa !22
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

; <label>:15                                      ; preds = %8, %5
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.124, i64 0, i64 0)) #6
  tail call void @exit(i32 1) #18
  unreachable

; <label>:16                                      ; preds = %8
  %17 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %10, i64 %9, i32 2
  %18 = load %struct.httpd_conn*, %struct.httpd_conn** %17, align 8, !tbaa !25
  %19 = icmp eq %struct.httpd_conn* %18, null
  br i1 %19, label %20, label %30

; <label>:20                                      ; preds = %16
  %21 = tail call noalias i8* @malloc(i64 720) #6
  %22 = bitcast %struct.httpd_conn** %17 to i8**
  store i8* %21, i8** %22, align 8, !tbaa !25
  %23 = icmp eq i8* %21, null
  br i1 %23, label %24, label %25

; <label>:24                                      ; preds = %20
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([39 x i8], [39 x i8]* @.str.125, i64 0, i64 0)) #6
  tail call void @exit(i32 1) #18
  unreachable

; <label>:25                                      ; preds = %20
  %26 = bitcast i8* %21 to %struct.httpd_conn*
  %27 = bitcast i8* %21 to i32*
  store i32 0, i32* %27, align 8, !tbaa !109
  %28 = load i32, i32* @httpd_conn_count, align 4, !tbaa !8
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* @httpd_conn_count, align 4, !tbaa !8
  br label %30

; <label>:30                                      ; preds = %25, %16
  %31 = phi %struct.httpd_conn* [ %26, %25 ], [ %18, %16 ]
  %32 = load %struct.httpd_server*, %struct.httpd_server** @hs, align 8, !tbaa !4
  %33 = tail call i32 @httpd_get_conn(%struct.httpd_server* %32, i32 %listen_fd, %struct.httpd_conn* %31) #6
  switch i32 %33, label %35 [
    i32 0, label %34
    i32 2, label %.loopexit.loopexit
  ]

; <label>:34                                      ; preds = %30
  tail call void @tmr_run(%struct.timeval* %tvP) #6
  br label %.loopexit

; <label>:35                                      ; preds = %30
  store i32 1, i32* %12, align 8, !tbaa !22
  %36 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %10, i64 %9, i32 1
  %37 = load i32, i32* %36, align 4, !tbaa !24
  store i32 %37, i32* @first_free_connect, align 4, !tbaa !8
  store i32 -1, i32* %36, align 4, !tbaa !24
  %38 = load i32, i32* @num_connects, align 4, !tbaa !8
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* @num_connects, align 4, !tbaa !8
  %40 = load i64, i64* %4, align 8, !tbaa !45
  %41 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %10, i64 %9, i32 8
  store i64 %40, i64* %41, align 8, !tbaa !46
  %42 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %10, i64 %9, i32 9
  %43 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %10, i64 %9, i32 14
  store i64 0, i64* %43, align 8, !tbaa !56
  %44 = getelementptr inbounds %struct.connecttab, %struct.connecttab* %10, i64 %9, i32 4
  store i32 0, i32* %44, align 8, !tbaa !47
  %45 = bitcast %struct.TimerStruct** %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %45, i8 0, i64 16, i32 8, i1 false)
  %46 = load %struct.httpd_conn*, %struct.httpd_conn** %17, align 8, !tbaa !25
  %47 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %46, i64 0, i32 60
  %48 = load i32, i32* %47, align 8, !tbaa !38
  %49 = tail call i32 (i32, i32, ...) @fcntl(i32 %48, i32 3, i32 0) #6
  %50 = icmp eq i32 %49, -1
  br i1 %50, label %httpd_set_ndelay.exit, label %51

; <label>:51                                      ; preds = %35
  %52 = or i32 %49, 2048
  %53 = icmp eq i32 %52, %49
  br i1 %53, label %httpd_set_ndelay.exit, label %54

; <label>:54                                      ; preds = %51
  %55 = tail call i32 (i32, i32, ...) @fcntl(i32 %48, i32 4, i32 %52) #6
  br label %httpd_set_ndelay.exit

httpd_set_ndelay.exit:                            ; preds = %35, %51, %54
  %56 = load %struct.httpd_conn*, %struct.httpd_conn** %17, align 8, !tbaa !25
  %57 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %56, i64 0, i32 60
  %58 = load i32, i32* %57, align 8, !tbaa !38
  %59 = icmp sgt i32 %58, -1
  %60 = load i32, i32* @nfiles, align 4
  %61 = icmp sgt i32 %60, %58
  %or.cond.i = and i1 %59, %61
  br i1 %or.cond.i, label %62, label %68

; <label>:62                                      ; preds = %httpd_set_ndelay.exit
  %63 = sext i32 %58 to i64
  %64 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  %65 = getelementptr inbounds i32, i32* %64, i64 %63
  %66 = load i32, i32* %65, align 4, !tbaa !8
  %67 = icmp eq i32 %66, -1
  br i1 %67, label %69, label %68

; <label>:68                                      ; preds = %62, %httpd_set_ndelay.exit
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.535, i64 0, i64 0), i32 %58) #6
  br label %fdwatch_add_fd.exit

; <label>:69                                      ; preds = %62
  %70 = load i32, i32* @npoll_fds, align 4, !tbaa !8
  %71 = icmp slt i32 %70, %60
  br i1 %71, label %73, label %72

; <label>:72                                      ; preds = %69
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5.536, i64 0, i64 0)) #6
  %.pre.i = load i32*, i32** @fd_rw, align 8, !tbaa !4
  br label %poll_add_fd.exit.i

; <label>:73                                      ; preds = %69
  %74 = sext i32 %70 to i64
  %75 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8, !tbaa !4
  %76 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %75, i64 %74, i32 0
  store i32 %58, i32* %76, align 4, !tbaa !28
  %77 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %75, i64 %74, i32 1
  store i16 1, i16* %77, align 4, !tbaa !30
  %78 = load i32*, i32** @poll_fdidx, align 8, !tbaa !4
  %79 = getelementptr inbounds i32, i32* %78, i64 %63
  store i32 %70, i32* %79, align 4, !tbaa !8
  %80 = add nsw i32 %70, 1
  store i32 %80, i32* @npoll_fds, align 4, !tbaa !8
  br label %poll_add_fd.exit.i

poll_add_fd.exit.i:                               ; preds = %73, %72
  %81 = phi i32* [ %.pre.i, %72 ], [ %64, %73 ]
  %82 = getelementptr inbounds i32, i32* %81, i64 %63
  store i32 0, i32* %82, align 4, !tbaa !8
  %83 = load i8**, i8*** @fd_data, align 8, !tbaa !4
  %84 = getelementptr inbounds i8*, i8** %83, i64 %63
  %85 = bitcast i8** %84 to %struct.connecttab**
  store %struct.connecttab* %11, %struct.connecttab** %85, align 8, !tbaa !4
  br label %fdwatch_add_fd.exit

fdwatch_add_fd.exit:                              ; preds = %68, %poll_add_fd.exit.i
  %86 = load i64, i64* @stats_connections, align 8, !tbaa !16
  %87 = add nsw i64 %86, 1
  store i64 %87, i64* @stats_connections, align 8, !tbaa !16
  %88 = load i32, i32* @num_connects, align 4, !tbaa !8
  %89 = load i32, i32* @stats_simultaneous, align 4, !tbaa !8
  %90 = icmp sgt i32 %88, %89
  br i1 %90, label %91, label %.backedge

; <label>:91                                      ; preds = %fdwatch_add_fd.exit
  store i32 %88, i32* @stats_simultaneous, align 4, !tbaa !8
  br label %.backedge

.backedge:                                        ; preds = %91, %fdwatch_add_fd.exit
  %92 = load i32, i32* @max_connects, align 4, !tbaa !8
  %93 = icmp slt i32 %88, %92
  br i1 %93, label %5, label %._crit_edge.loopexit

.loopexit.loopexit:                               ; preds = %30
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %34, %._crit_edge
  %.0 = phi i32 [ 0, %._crit_edge ], [ 0, %34 ], [ 1, %.loopexit.loopexit ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i32 @httpd_get_conn(%struct.httpd_server* %hs, i32 %listen_fd, %struct.httpd_conn* %hc) #8 {
  %sa = alloca %union.httpd_sockaddr, align 8
  %sz = alloca i32, align 4
  %1 = bitcast %union.httpd_sockaddr* %sa to i8*
  call void @llvm.lifetime.start(i64 128, i8* %1) #6
  %2 = bitcast i32* %sz to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #6
  %3 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 0
  %4 = load i32, i32* %3, align 8, !tbaa !109
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %34

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 4
  store i64 0, i64* %7, align 8, !tbaa !43
  %8 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 3
  tail call void @httpd_realloc_str(i8** %8, i64* %7, i64 500)
  %9 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 44
  %10 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 43
  %11 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 42
  %12 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 41
  %13 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 40
  %14 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 39
  %15 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 38
  %16 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 37
  %17 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 36
  %18 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 35
  %19 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 34
  %20 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 33
  %21 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 13
  %22 = bitcast i64* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 96, i32 8, i1 false)
  tail call void @httpd_realloc_str(i8** %21, i64* %20, i64 1)
  %23 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 15
  tail call void @httpd_realloc_str(i8** %23, i64* %19, i64 1)
  %24 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 16
  tail call void @httpd_realloc_str(i8** %24, i64* %18, i64 0)
  %25 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 17
  tail call void @httpd_realloc_str(i8** %25, i64* %17, i64 0)
  %26 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 18
  tail call void @httpd_realloc_str(i8** %26, i64* %16, i64 0)
  %27 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 19
  tail call void @httpd_realloc_str(i8** %27, i64* %15, i64 0)
  %28 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 22
  tail call void @httpd_realloc_str(i8** %28, i64* %14, i64 0)
  %29 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 23
  tail call void @httpd_realloc_str(i8** %29, i64* %13, i64 0)
  %30 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 27
  tail call void @httpd_realloc_str(i8** %30, i64* %12, i64 0)
  %31 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 29
  tail call void @httpd_realloc_str(i8** %31, i64* %11, i64 0)
  %32 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 31
  tail call void @httpd_realloc_str(i8** %32, i64* %10, i64 0)
  %33 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 32
  tail call void @httpd_realloc_str(i8** %33, i64* %9, i64 0)
  store i32 1, i32* %3, align 8, !tbaa !109
  br label %34

; <label>:34                                      ; preds = %0, %6
  store i32 128, i32* %sz, align 4, !tbaa !8
  %35 = bitcast %union.httpd_sockaddr* %sa to %struct.sockaddr*
  %36 = call i32 @accept(i32 %listen_fd, %struct.sockaddr* %35, i32* nonnull %sz) #6
  %37 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 60
  store i32 %36, i32* %37, align 8, !tbaa !38
  %38 = icmp slt i32 %36, 0
  br i1 %38, label %39, label %44

; <label>:39                                      ; preds = %34
  %40 = tail call i32* @__errno_location() #21
  %41 = load i32, i32* %40, align 4, !tbaa !8
  switch i32 %41, label %42 [
    i32 11, label %105
    i32 103, label %43
  ]

; <label>:42                                      ; preds = %39
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24.134, i64 0, i64 0)) #6
  br label %43

; <label>:43                                      ; preds = %39, %42
  br label %105

; <label>:44                                      ; preds = %34
  %45 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %sa, i64 0, i32 0, i32 0
  %46 = load i16, i16* %45, align 8, !tbaa !88
  %47 = zext i16 %46 to i32
  switch i32 %47, label %48 [
    i32 2, label %sockaddr_check.exit
    i32 10, label %sockaddr_check.exit
  ]

; <label>:48                                      ; preds = %44
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.25.135, i64 0, i64 0)) #6
  %49 = load i32, i32* %37, align 8, !tbaa !38
  %50 = call i32 @close(i32 %49) #6
  store i32 -1, i32* %37, align 8, !tbaa !38
  br label %105

sockaddr_check.exit:                              ; preds = %44, %44
  %51 = call i32 (i32, i32, ...) @fcntl(i32 %36, i32 2, i32 1) #6
  %52 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 1
  store %struct.httpd_server* %hs, %struct.httpd_server** %52, align 8, !tbaa !79
  %53 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %54 = bitcast %union.httpd_sockaddr* %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* %54, i8 0, i64 128, i32 8, i1 false)
  %55 = load i16, i16* %45, align 8, !tbaa !88
  %switch.selectcmp.i = icmp eq i16 %55, 10
  %switch.select.i = select i1 %switch.selectcmp.i, i64 28, i64 0
  %switch.selectcmp1.i = icmp eq i16 %55, 2
  %switch.select2.i = select i1 %switch.selectcmp1.i, i64 16, i64 %switch.select.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %54, i8* nonnull %1, i64 %switch.select2.i, i32 8, i1 false)
  %56 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 5
  %57 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 10
  %58 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %59 = bitcast i64* %56 to i8*
  call void @llvm.memset.p0i8.i64(i8* %59, i8 0, i64 28, i32 8, i1 false)
  %60 = bitcast i64* %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* %60, i8 0, i64 16, i32 8, i1 false)
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8** %58, align 8, !tbaa !53
  %61 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 13
  %62 = load i8*, i8** %61, align 8, !tbaa !110
  store i8 0, i8* %62, align 1, !tbaa !1
  %63 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 14
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23.131, i64 0, i64 0), i8** %63, align 8, !tbaa !92
  %64 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 15
  %65 = load i8*, i8** %64, align 8, !tbaa !111
  store i8 0, i8* %65, align 1, !tbaa !1
  %66 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 16
  %67 = load i8*, i8** %66, align 8, !tbaa !48
  store i8 0, i8* %67, align 1, !tbaa !1
  %68 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 17
  %69 = load i8*, i8** %68, align 8, !tbaa !112
  store i8 0, i8* %69, align 1, !tbaa !1
  %70 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 18
  %71 = load i8*, i8** %70, align 8, !tbaa !113
  store i8 0, i8* %71, align 1, !tbaa !1
  %72 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 19
  %73 = load i8*, i8** %72, align 8, !tbaa !114
  store i8 0, i8* %73, align 1, !tbaa !1
  %74 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 20
  %75 = bitcast i8** %74 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0)>, <2 x i8*>* %75, align 8, !tbaa !4
  %76 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 22
  %77 = load i8*, i8** %76, align 8, !tbaa !115
  store i8 0, i8* %77, align 1, !tbaa !1
  %78 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 23
  %79 = load i8*, i8** %78, align 8, !tbaa !116
  store i8 0, i8* %79, align 1, !tbaa !1
  %80 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 24
  %81 = bitcast i8** %80 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0)>, <2 x i8*>* %81, align 8, !tbaa !4
  %82 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 26
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8** %82, align 8, !tbaa !150
  %83 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 27
  %84 = load i8*, i8** %83, align 8, !tbaa !117
  store i8 0, i8* %84, align 1, !tbaa !1
  %85 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 28
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8** %85, align 8, !tbaa !151
  %86 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 29
  %87 = load i8*, i8** %86, align 8, !tbaa !118
  store i8 0, i8* %87, align 1, !tbaa !1
  %88 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 30
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8** %88, align 8, !tbaa !152
  %89 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 31
  %90 = load i8*, i8** %89, align 8, !tbaa !81
  store i8 0, i8* %90, align 1, !tbaa !1
  %91 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 32
  %92 = load i8*, i8** %91, align 8, !tbaa !66
  store i8 0, i8* %92, align 1, !tbaa !1
  %93 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 45
  store i64 0, i64* %93, align 8, !tbaa !65
  %94 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 46
  %95 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 49
  %96 = bitcast i64* %94 to i8*
  call void @llvm.memset.p0i8.i64(i8* %96, i8 -1, i64 24, i32 8, i1 false)
  %97 = bitcast i8** %95 to <2 x i8*>*
  store <2 x i8*> <i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* null>, <2 x i8*>* %97, align 8, !tbaa !4
  %98 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 51
  store i32 1, i32* %98, align 8, !tbaa !144
  %99 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 52
  %100 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 56
  %101 = bitcast i32* %99 to i8*
  call void @llvm.memset.p0i8.i64(i8* %101, i8 0, i64 20, i32 4, i1 false)
  store i64 -1, i64* %100, align 8, !tbaa !57
  %102 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 57
  store i32 0, i32* %102, align 8, !tbaa !153
  %103 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 58
  store i32 0, i32* %103, align 4, !tbaa !148
  %104 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 61
  store i8* null, i8** %104, align 8, !tbaa !60
  br label %105

; <label>:105                                     ; preds = %39, %sockaddr_check.exit, %48, %43
  %.0 = phi i32 [ 0, %43 ], [ 1, %sockaddr_check.exit ], [ 0, %48 ], [ 2, %39 ]
  call void @llvm.lifetime.end(i64 4, i8* nonnull %2) #6
  call void @llvm.lifetime.end(i64 128, i8* %1) #6
  ret i32 %.0
}

declare i32 @accept(i32, %struct.sockaddr*, i32*) #5

; Function Attrs: nounwind uwtable
define void @httpd_set_ndelay(i32 %fd) #8 {
  %1 = tail call i32 (i32, i32, ...) @fcntl(i32 %fd, i32 3, i32 0) #6
  %2 = icmp eq i32 %1, -1
  br i1 %2, label %8, label %3

; <label>:3                                       ; preds = %0
  %4 = or i32 %1, 2048
  %5 = icmp eq i32 %4, %1
  br i1 %5, label %8, label %6

; <label>:6                                       ; preds = %3
  %7 = tail call i32 (i32, i32, ...) @fcntl(i32 %fd, i32 4, i32 %4) #6
  br label %8

; <label>:8                                       ; preds = %3, %0, %6
  ret void
}

; Function Attrs: nounwind uwtable
define i8* @fdwatch_get_next_client_data() #8 {
  %1 = load i32, i32* @next_ridx, align 4, !tbaa !8
  %2 = load i32, i32* @nreturned, align 4, !tbaa !8
  %3 = icmp slt i32 %1, %2
  br i1 %3, label %4, label %20

; <label>:4                                       ; preds = %0
  %5 = add nsw i32 %1, 1
  store i32 %5, i32* @next_ridx, align 4, !tbaa !8
  %6 = icmp sgt i32 %1, -1
  %7 = load i32, i32* @nfiles, align 4
  %8 = icmp sgt i32 %7, %1
  %or.cond.i = and i1 %6, %8
  br i1 %or.cond.i, label %poll_get_fd.exit, label %poll_get_fd.exit.thread

poll_get_fd.exit.thread:                          ; preds = %4
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8.549, i64 0, i64 0), i32 %1) #6
  br label %20

poll_get_fd.exit:                                 ; preds = %4
  %9 = sext i32 %1 to i64
  %10 = load i32*, i32** @poll_rfdidx, align 8, !tbaa !4
  %11 = getelementptr inbounds i32, i32* %10, i64 %9
  %12 = load i32, i32* %11, align 4, !tbaa !8
  %13 = icmp sgt i32 %12, -1
  %14 = icmp slt i32 %12, %7
  %or.cond = and i1 %13, %14
  br i1 %or.cond, label %15, label %20

; <label>:15                                      ; preds = %poll_get_fd.exit
  %16 = sext i32 %12 to i64
  %17 = load i8**, i8*** @fd_data, align 8, !tbaa !4
  %18 = getelementptr inbounds i8*, i8** %17, i64 %16
  %19 = load i8*, i8** %18, align 8, !tbaa !4
  br label %20

; <label>:20                                      ; preds = %poll_get_fd.exit.thread, %poll_get_fd.exit, %0, %15
  %.0 = phi i8* [ %19, %15 ], [ inttoptr (i64 -1 to i8*), %0 ], [ null, %poll_get_fd.exit ], [ null, %poll_get_fd.exit.thread ]
  ret i8* %.0
}

declare i64 @read(i32, i8* nocapture, i64) #5

; Function Attrs: norecurse nounwind uwtable
define i32 @httpd_got_request(%struct.httpd_conn* %hc) #10 {
  %1 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 6
  %2 = load i64, i64* %1, align 8, !tbaa !154
  %3 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 5
  %4 = load i64, i64* %3, align 8, !tbaa !42
  %5 = icmp ult i64 %2, %4
  br i1 %5, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %0
  %6 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 3
  %7 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 7
  %.pre = load i8*, i8** %6, align 8, !tbaa !44
  %.pre20 = load i32, i32* %7, align 8, !tbaa !155
  br label %8

; <label>:8                                       ; preds = %.lr.ph, %57
  %9 = phi i32 [ %.pre20, %.lr.ph ], [ %58, %57 ]
  %10 = phi i64 [ %2, %.lr.ph ], [ %59, %57 ]
  %11 = getelementptr inbounds i8, i8* %.pre, i64 %10
  %12 = load i8, i8* %11, align 1, !tbaa !1
  switch i32 %9, label %57 [
    i32 0, label %13
    i32 1, label %17
    i32 2, label %21
    i32 3, label %24
    i32 4, label %28
    i32 5, label %33
    i32 6, label %38
    i32 7, label %42
    i32 8, label %46
    i32 9, label %50
    i32 10, label %54
    i32 11, label %.loopexit.loopexit
  ]

; <label>:13                                      ; preds = %8
  %14 = sext i8 %12 to i32
  switch i32 %14, label %57 [
    i32 32, label %15
    i32 9, label %15
    i32 10, label %16
    i32 13, label %16
  ]

; <label>:15                                      ; preds = %13, %13
  store i32 1, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:16                                      ; preds = %13, %13
  store i32 11, i32* %7, align 8, !tbaa !155
  br label %.loopexit

; <label>:17                                      ; preds = %8
  %18 = sext i8 %12 to i32
  switch i32 %18, label %20 [
    i32 32, label %57
    i32 9, label %57
    i32 10, label %19
    i32 13, label %19
  ]

; <label>:19                                      ; preds = %17, %17
  store i32 11, i32* %7, align 8, !tbaa !155
  br label %.loopexit

; <label>:20                                      ; preds = %17
  store i32 2, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:21                                      ; preds = %8
  %22 = sext i8 %12 to i32
  switch i32 %22, label %57 [
    i32 32, label %23
    i32 9, label %23
    i32 10, label %.loopexit.loopexit
    i32 13, label %.loopexit.loopexit
  ]

; <label>:23                                      ; preds = %21, %21
  store i32 3, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:24                                      ; preds = %8
  %25 = sext i8 %12 to i32
  switch i32 %25, label %27 [
    i32 32, label %57
    i32 9, label %57
    i32 10, label %26
    i32 13, label %26
  ]

; <label>:26                                      ; preds = %24, %24
  store i32 11, i32* %7, align 8, !tbaa !155
  br label %.loopexit

; <label>:27                                      ; preds = %24
  store i32 4, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:28                                      ; preds = %8
  %29 = sext i8 %12 to i32
  switch i32 %29, label %57 [
    i32 32, label %30
    i32 9, label %30
    i32 10, label %31
    i32 13, label %32
  ]

; <label>:30                                      ; preds = %28, %28
  store i32 5, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:31                                      ; preds = %28
  store i32 7, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:32                                      ; preds = %28
  store i32 8, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:33                                      ; preds = %8
  %34 = sext i8 %12 to i32
  switch i32 %34, label %37 [
    i32 32, label %57
    i32 9, label %57
    i32 10, label %35
    i32 13, label %36
  ]

; <label>:35                                      ; preds = %33
  store i32 7, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:36                                      ; preds = %33
  store i32 8, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:37                                      ; preds = %33
  store i32 11, i32* %7, align 8, !tbaa !155
  br label %.loopexit

; <label>:38                                      ; preds = %8
  %39 = sext i8 %12 to i32
  switch i32 %39, label %57 [
    i32 10, label %40
    i32 13, label %41
  ]

; <label>:40                                      ; preds = %38
  store i32 7, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:41                                      ; preds = %38
  store i32 8, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:42                                      ; preds = %8
  %43 = sext i8 %12 to i32
  switch i32 %43, label %45 [
    i32 10, label %.loopexit.loopexit
    i32 13, label %44
  ]

; <label>:44                                      ; preds = %42
  store i32 8, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:45                                      ; preds = %42
  store i32 6, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:46                                      ; preds = %8
  %47 = sext i8 %12 to i32
  switch i32 %47, label %49 [
    i32 10, label %48
    i32 13, label %.loopexit.loopexit
  ]

; <label>:48                                      ; preds = %46
  store i32 9, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:49                                      ; preds = %46
  store i32 6, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:50                                      ; preds = %8
  %51 = sext i8 %12 to i32
  switch i32 %51, label %53 [
    i32 10, label %.loopexit.loopexit
    i32 13, label %52
  ]

; <label>:52                                      ; preds = %50
  store i32 10, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:53                                      ; preds = %50
  store i32 6, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:54                                      ; preds = %8
  %55 = sext i8 %12 to i32
  switch i32 %55, label %56 [
    i32 10, label %.loopexit.loopexit
    i32 13, label %.loopexit.loopexit
  ]

; <label>:56                                      ; preds = %54
  store i32 6, i32* %7, align 8, !tbaa !155
  br label %57

; <label>:57                                      ; preds = %56, %8, %13, %15, %17, %17, %20, %21, %23, %24, %24, %27, %28, %32, %31, %30, %33, %33, %36, %35, %38, %41, %40, %45, %44, %49, %48, %53, %52
  %58 = phi i32 [ 6, %56 ], [ %9, %8 ], [ 0, %13 ], [ 1, %15 ], [ 1, %17 ], [ 1, %17 ], [ 2, %20 ], [ 2, %21 ], [ 3, %23 ], [ 3, %24 ], [ 3, %24 ], [ 4, %27 ], [ 4, %28 ], [ 8, %32 ], [ 7, %31 ], [ 5, %30 ], [ 5, %33 ], [ 5, %33 ], [ 8, %36 ], [ 7, %35 ], [ 6, %38 ], [ 8, %41 ], [ 7, %40 ], [ 6, %45 ], [ 8, %44 ], [ 6, %49 ], [ 9, %48 ], [ 6, %53 ], [ 10, %52 ]
  %59 = add nuw i64 %10, 1
  store i64 %59, i64* %1, align 8, !tbaa !154
  %60 = icmp ult i64 %59, %4
  br i1 %60, label %8, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %57, %8, %54, %54, %50, %46, %42, %21, %21
  %.0.ph = phi i32 [ 1, %21 ], [ 1, %21 ], [ 1, %42 ], [ 1, %46 ], [ 1, %50 ], [ 1, %54 ], [ 1, %54 ], [ 2, %8 ], [ 0, %57 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %0, %37, %26, %19, %16
  %.0 = phi i32 [ 2, %37 ], [ 2, %26 ], [ 2, %19 ], [ 2, %16 ], [ 0, %0 ], [ %.0.ph, %.loopexit.loopexit ]
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define i32 @httpd_parse_request(%struct.httpd_conn* %hc) #8 {
  %sa.i = alloca %union.httpd_sockaddr, align 8
  %sz.i = alloca i32, align 4
  %pi = alloca i8*, align 8
  %1 = bitcast i8** %pi to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #6
  %2 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 6
  store i64 0, i64* %2, align 8, !tbaa !154
  %3 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 5
  %4 = load i64, i64* %3, align 8, !tbaa !42
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %bufgets.exit, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %0
  %6 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 3
  %.pre.i = load i8*, i8** %6, align 8, !tbaa !44
  br label %7

; <label>:7                                       ; preds = %28, %.lr.ph.i
  %8 = phi i64 [ 0, %.lr.ph.i ], [ %29, %28 ]
  %9 = getelementptr inbounds i8, i8* %.pre.i, i64 %8
  %10 = load i8, i8* %9, align 1, !tbaa !1
  switch i8 %10, label %28 [
    i8 10, label %11
    i8 13, label %11
  ]

; <label>:11                                      ; preds = %7, %7
  %.lcssa123 = phi i8 [ %10, %7 ], [ %10, %7 ]
  %.lcssa121 = phi i8* [ %9, %7 ], [ %9, %7 ]
  store i8 0, i8* %.lcssa121, align 1, !tbaa !1
  %12 = load i64, i64* %2, align 8, !tbaa !154
  %13 = add i64 %12, 1
  store i64 %13, i64* %2, align 8, !tbaa !154
  %14 = icmp eq i8 %.lcssa123, 13
  br i1 %14, label %15, label %26

; <label>:15                                      ; preds = %11
  %16 = load i64, i64* %3, align 8, !tbaa !42
  %17 = icmp ult i64 %13, %16
  br i1 %17, label %18, label %26

; <label>:18                                      ; preds = %15
  %19 = load i8*, i8** %6, align 8, !tbaa !44
  %20 = getelementptr inbounds i8, i8* %19, i64 %13
  %21 = load i8, i8* %20, align 1, !tbaa !1
  %22 = icmp eq i8 %21, 10
  br i1 %22, label %23, label %26

; <label>:23                                      ; preds = %18
  store i8 0, i8* %20, align 1, !tbaa !1
  %24 = load i64, i64* %2, align 8, !tbaa !154
  %25 = add i64 %24, 1
  store i64 %25, i64* %2, align 8, !tbaa !154
  br label %26

; <label>:26                                      ; preds = %23, %18, %15, %11
  %27 = load i8*, i8** %6, align 8, !tbaa !44
  br label %bufgets.exit

; <label>:28                                      ; preds = %7
  %29 = add nuw i64 %8, 1
  store i64 %29, i64* %2, align 8, !tbaa !154
  %30 = icmp ult i64 %29, %4
  br i1 %30, label %7, label %bufgets.exit.loopexit

bufgets.exit.loopexit:                            ; preds = %28
  br label %bufgets.exit

bufgets.exit:                                     ; preds = %bufgets.exit.loopexit, %0, %26
  %.0.i = phi i8* [ %27, %26 ], [ null, %0 ], [ null, %bufgets.exit.loopexit ]
  %31 = tail call i8* @strpbrk(i8* %.0.i, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27.140, i64 0, i64 0)) #6
  %32 = icmp eq i8* %31, null
  br i1 %32, label %33, label %36

; <label>:33                                      ; preds = %bufgets.exit
  %34 = load i8*, i8** @httpd_err400title, align 8, !tbaa !4
  %35 = load i8*, i8** @httpd_err400form, align 8, !tbaa !4
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 400, i8* %34, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %35, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0))
  br label %821

; <label>:36                                      ; preds = %bufgets.exit
  %37 = getelementptr inbounds i8, i8* %31, i64 1
  store i8 0, i8* %31, align 1, !tbaa !1
  %38 = tail call i64 @strspn(i8* %37, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27.140, i64 0, i64 0)) #6
  %39 = getelementptr inbounds i8, i8* %37, i64 %38
  %40 = tail call i8* @strpbrk(i8* %39, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27.140, i64 0, i64 0)) #6
  %41 = icmp eq i8* %40, null
  br i1 %41, label %42, label %44

; <label>:42                                      ; preds = %36
  %43 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 51
  store i32 0, i32* %43, align 8, !tbaa !144
  br label %59

; <label>:44                                      ; preds = %36
  %45 = getelementptr inbounds i8, i8* %40, i64 1
  store i8 0, i8* %40, align 1, !tbaa !1
  %46 = tail call i64 @strspn(i8* %45, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27.140, i64 0, i64 0)) #6
  %47 = getelementptr inbounds i8, i8* %45, i64 %46
  %48 = load i8, i8* %47, align 1, !tbaa !1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %59, label %50

; <label>:50                                      ; preds = %44
  %51 = tail call i8* @strpbrk(i8* %47, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27.140, i64 0, i64 0)) #6
  %52 = icmp eq i8* %51, null
  br i1 %52, label %54, label %53

; <label>:53                                      ; preds = %50
  store i8 0, i8* %51, align 1, !tbaa !1
  br label %54

; <label>:54                                      ; preds = %50, %53
  %55 = tail call i32 @strcasecmp(i8* %47, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.29.141, i64 0, i64 0)) #13
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %59, label %57

; <label>:57                                      ; preds = %54
  %58 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 52
  store i32 1, i32* %58, align 4, !tbaa !156
  br label %59

; <label>:59                                      ; preds = %54, %44, %57, %42
  %protocol.0 = phi i8* [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.142, i64 0, i64 0), %42 ], [ %47, %57 ], [ %47, %54 ], [ %47, %44 ]
  %60 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 14
  store i8* %protocol.0, i8** %60, align 8, !tbaa !92
  %61 = tail call i32 @strncasecmp(i8* %39, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.30.143, i64 0, i64 0), i64 7) #13
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %91

; <label>:63                                      ; preds = %59
  %64 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 52
  %65 = load i32, i32* %64, align 4, !tbaa !156
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %70

; <label>:67                                      ; preds = %63
  %68 = load i8*, i8** @httpd_err400title, align 8, !tbaa !4
  %69 = load i8*, i8** @httpd_err400form, align 8, !tbaa !4
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 400, i8* %68, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %69, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0))
  br label %821

; <label>:70                                      ; preds = %63
  %71 = getelementptr inbounds i8, i8* %39, i64 7
  %72 = tail call i8* @strchr(i8* %71, i32 47) #6
  %73 = icmp eq i8* %72, null
  br i1 %73, label %74, label %77

; <label>:74                                      ; preds = %70
  %75 = load i8*, i8** @httpd_err400title, align 8, !tbaa !4
  %76 = load i8*, i8** @httpd_err400form, align 8, !tbaa !4
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 400, i8* %75, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %76, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0))
  br label %821

; <label>:77                                      ; preds = %70
  store i8 0, i8* %72, align 1, !tbaa !1
  %78 = tail call i8* @strchr(i8* %71, i32 47) #6
  %79 = icmp eq i8* %78, null
  br i1 %79, label %80, label %83

; <label>:80                                      ; preds = %77
  %81 = load i8, i8* %71, align 1, !tbaa !1
  %82 = icmp eq i8 %81, 46
  br i1 %82, label %83, label %.thread

; <label>:83                                      ; preds = %77, %80
  %84 = load i8*, i8** @httpd_err400title, align 8, !tbaa !4
  %85 = load i8*, i8** @httpd_err400form, align 8, !tbaa !4
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 400, i8* %84, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %85, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0))
  br label %821

.thread:                                          ; preds = %80
  %86 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 27
  %87 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 41
  %88 = tail call i64 @strlen(i8* nonnull %71) #13
  tail call void @httpd_realloc_str(i8** %86, i64* %87, i64 %88)
  %89 = load i8*, i8** %86, align 8, !tbaa !117
  %90 = tail call i8* @strcpy(i8* %89, i8* nonnull %71) #6
  store i8 47, i8* %72, align 1, !tbaa !1
  br label %96

; <label>:91                                      ; preds = %59
  %.pre = load i8, i8* %39, align 1, !tbaa !1
  %92 = icmp eq i8 %.pre, 47
  br i1 %92, label %96, label %93

; <label>:93                                      ; preds = %91
  %94 = load i8*, i8** @httpd_err400title, align 8, !tbaa !4
  %95 = load i8*, i8** @httpd_err400form, align 8, !tbaa !4
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 400, i8* %94, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %95, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0))
  br label %821

; <label>:96                                      ; preds = %.thread, %91
  %url.0160 = phi i8* [ %72, %.thread ], [ %39, %91 ]
  %97 = tail call i32 @strcasecmp(i8* %.0.i, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20.128, i64 0, i64 0)) #13
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %101

; <label>:99                                      ; preds = %96
  %100 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 8
  store i32 1, i32* %100, align 4, !tbaa !91
  br label %112

; <label>:101                                     ; preds = %96
  %102 = tail call i32 @strcasecmp(i8* %.0.i, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21.129, i64 0, i64 0)) #13
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %106

; <label>:104                                     ; preds = %101
  %105 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 8
  store i32 2, i32* %105, align 4, !tbaa !91
  br label %112

; <label>:106                                     ; preds = %101
  %107 = tail call i32 @strcasecmp(i8* %.0.i, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22.130, i64 0, i64 0)) #13
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %111

; <label>:109                                     ; preds = %106
  %110 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 8
  store i32 3, i32* %110, align 4, !tbaa !91
  br label %112

; <label>:111                                     ; preds = %106
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 501, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.85.144, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.86.145, i64 0, i64 0), i8* %.0.i)
  br label %821

; <label>:112                                     ; preds = %104, %109, %99
  %113 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  store i8* %url.0160, i8** %113, align 8, !tbaa !53
  %114 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 13
  %115 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 33
  %116 = tail call i64 @strlen(i8* nonnull %url.0160) #13
  tail call void @httpd_realloc_str(i8** %114, i64* %115, i64 %116)
  %117 = load i8*, i8** %114, align 8, !tbaa !110
  %118 = load i8*, i8** %113, align 8, !tbaa !53
  br label %119

; <label>:119                                     ; preds = %160, %112
  %.01.i = phi i8* [ %117, %112 ], [ %161, %160 ]
  %.0.i53 = phi i8* [ %118, %112 ], [ %162, %160 ]
  %120 = load i8, i8* %.0.i53, align 1, !tbaa !1
  switch i8 %120, label %160 [
    i8 0, label %strdecode.exit
    i8 37, label %121
  ]

; <label>:121                                     ; preds = %119
  %122 = getelementptr inbounds i8, i8* %.0.i53, i64 1
  %123 = load i8, i8* %122, align 1, !tbaa !1
  %124 = sext i8 %123 to i64
  %125 = tail call i16** @__ctype_b_loc() #21
  %126 = load i16*, i16** %125, align 8, !tbaa !4
  %127 = getelementptr inbounds i16, i16* %126, i64 %124
  %128 = load i16, i16* %127, align 2, !tbaa !6
  %129 = and i16 %128, 4096
  %130 = icmp eq i16 %129, 0
  br i1 %130, label %160, label %131

; <label>:131                                     ; preds = %121
  %132 = getelementptr inbounds i8, i8* %.0.i53, i64 2
  %133 = load i8, i8* %132, align 1, !tbaa !1
  %134 = sext i8 %133 to i64
  %135 = getelementptr inbounds i16, i16* %126, i64 %134
  %136 = load i16, i16* %135, align 2, !tbaa !6
  %137 = and i16 %136, 4096
  %138 = icmp eq i16 %137, 0
  br i1 %138, label %160, label %139

; <label>:139                                     ; preds = %131
  %c.off.i55 = add i8 %123, -48
  %140 = icmp ult i8 %c.off.i55, 10
  br i1 %140, label %hexit.exit60, label %141

; <label>:141                                     ; preds = %139
  %c.off3.i56 = add i8 %123, -97
  %142 = icmp ult i8 %c.off3.i56, 6
  br i1 %142, label %143, label %145

; <label>:143                                     ; preds = %141
  %144 = add i8 %123, -87
  br label %hexit.exit60

; <label>:145                                     ; preds = %141
  %c.off4.i57 = add i8 %123, -65
  %146 = icmp ult i8 %c.off4.i57, 6
  %147 = add i8 %123, -55
  %..i58 = select i1 %146, i8 %147, i8 0
  br label %hexit.exit60

hexit.exit60:                                     ; preds = %139, %143, %145
  %148 = phi i8 [ %..i58, %145 ], [ %144, %143 ], [ %c.off.i55, %139 ]
  %149 = shl i8 %148, 4
  %c.off.i = add i8 %133, -48
  %150 = icmp ult i8 %c.off.i, 10
  br i1 %150, label %hexit.exit, label %151

; <label>:151                                     ; preds = %hexit.exit60
  %c.off3.i = add i8 %133, -97
  %152 = icmp ult i8 %c.off3.i, 6
  br i1 %152, label %153, label %155

; <label>:153                                     ; preds = %151
  %154 = add i8 %133, -87
  br label %hexit.exit

; <label>:155                                     ; preds = %151
  %c.off4.i = add i8 %133, -65
  %156 = icmp ult i8 %c.off4.i, 6
  %157 = add i8 %133, -55
  %..i = select i1 %156, i8 %157, i8 0
  br label %hexit.exit

hexit.exit:                                       ; preds = %hexit.exit60, %153, %155
  %158 = phi i8 [ %..i, %155 ], [ %154, %153 ], [ %c.off.i, %hexit.exit60 ]
  %159 = add i8 %158, %149
  br label %160

; <label>:160                                     ; preds = %hexit.exit, %131, %121, %119
  %storemerge.i = phi i8 [ %159, %hexit.exit ], [ %120, %119 ], [ 37, %131 ], [ 37, %121 ]
  %.1.i = phi i8* [ %132, %hexit.exit ], [ %.0.i53, %119 ], [ %.0.i53, %131 ], [ %.0.i53, %121 ]
  store i8 %storemerge.i, i8* %.01.i, align 1, !tbaa !1
  %161 = getelementptr inbounds i8, i8* %.01.i, i64 1
  %162 = getelementptr inbounds i8, i8* %.1.i, i64 1
  br label %119

strdecode.exit:                                   ; preds = %119
  %.01.i.lcssa = phi i8* [ %.01.i, %119 ]
  store i8 0, i8* %.01.i.lcssa, align 1, !tbaa !1
  %163 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 15
  %164 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 34
  %165 = load i8*, i8** %114, align 8, !tbaa !110
  %166 = tail call i64 @strlen(i8* %165) #13
  tail call void @httpd_realloc_str(i8** %163, i64* %164, i64 %166)
  %167 = load i8*, i8** %163, align 8, !tbaa !111
  %168 = load i8*, i8** %114, align 8, !tbaa !110
  %169 = getelementptr inbounds i8, i8* %168, i64 1
  %170 = tail call i8* @strcpy(i8* %167, i8* %169) #6
  %171 = load i8*, i8** %163, align 8, !tbaa !111
  %172 = load i8, i8* %171, align 1, !tbaa !1
  %173 = icmp eq i8 %172, 0
  br i1 %173, label %174, label %176

; <label>:174                                     ; preds = %strdecode.exit
  %175 = bitcast i8* %171 to i16*
  store i16 46, i16* %175, align 1
  br label %176

; <label>:176                                     ; preds = %174, %strdecode.exit
  %177 = load i8*, i8** %113, align 8, !tbaa !53
  %178 = tail call i8* @strchr(i8* %177, i32 63) #6
  %179 = icmp eq i8* %178, null
  br i1 %179, label %191, label %180

; <label>:180                                     ; preds = %176
  %181 = getelementptr inbounds i8, i8* %178, i64 1
  %182 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 19
  %183 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 38
  %184 = tail call i64 @strlen(i8* %181) #13
  tail call void @httpd_realloc_str(i8** %182, i64* %183, i64 %184)
  %185 = load i8*, i8** %182, align 8, !tbaa !114
  %186 = tail call i8* @strcpy(i8* %185, i8* %181) #6
  %187 = load i8*, i8** %163, align 8, !tbaa !111
  %188 = tail call i8* @strchr(i8* %187, i32 63) #6
  %189 = icmp eq i8* %188, null
  br i1 %189, label %191, label %190

; <label>:190                                     ; preds = %180
  store i8 0, i8* %188, align 1, !tbaa !1
  br label %191

; <label>:191                                     ; preds = %180, %176, %190
  %192 = load i8*, i8** %163, align 8, !tbaa !111
  %193 = tail call i8* @strstr(i8* %192, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.95.146, i64 0, i64 0)) #13
  %194 = icmp eq i8* %193, null
  br i1 %194, label %.preheader14.i, label %.lr.ph19.i.preheader

.lr.ph19.i.preheader:                             ; preds = %191
  br label %.lr.ph19.i

.preheader14.i.loopexit:                          ; preds = %204
  br label %.preheader14.i

.preheader14.i:                                   ; preds = %.preheader14.i.loopexit, %191
  %195 = tail call i32 @strncmp(i8* %192, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.96.147, i64 0, i64 0), i64 2) #13
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %.lr.ph18.i, label %.preheader13.i

.lr.ph18.i:                                       ; preds = %.preheader14.i
  %197 = getelementptr inbounds i8, i8* %192, i64 2
  br label %212

.lr.ph19.i:                                       ; preds = %.lr.ph19.i.preheader, %204
  %198 = phi i8* [ %208, %204 ], [ %193, %.lr.ph19.i.preheader ]
  %199 = getelementptr inbounds i8, i8* %198, i64 2
  br label %200

; <label>:200                                     ; preds = %200, %.lr.ph19.i
  %cp2.0.i = phi i8* [ %199, %.lr.ph19.i ], [ %203, %200 ]
  %201 = load i8, i8* %cp2.0.i, align 1, !tbaa !1
  %202 = icmp eq i8 %201, 47
  %203 = getelementptr inbounds i8, i8* %cp2.0.i, i64 1
  br i1 %202, label %200, label %204

; <label>:204                                     ; preds = %200
  %cp2.0.i.lcssa = phi i8* [ %cp2.0.i, %200 ]
  %205 = getelementptr inbounds i8, i8* %198, i64 1
  %206 = tail call i64 @strlen(i8* %cp2.0.i.lcssa) #13
  %207 = add i64 %206, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %205, i8* %cp2.0.i.lcssa, i64 %207, i32 1, i1 false) #6
  %208 = tail call i8* @strstr(i8* %192, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.95.146, i64 0, i64 0)) #13
  %209 = icmp eq i8* %208, null
  br i1 %209, label %.preheader14.i.loopexit, label %.lr.ph19.i

.preheader13.i.loopexit:                          ; preds = %212
  br label %.preheader13.i

.preheader13.i:                                   ; preds = %.preheader13.i.loopexit, %.preheader14.i
  %210 = tail call i8* @strstr(i8* %192, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.97.148, i64 0, i64 0)) #13
  %211 = icmp eq i8* %210, null
  br i1 %211, label %.preheader12.i, label %.lr.ph17.i.preheader

.lr.ph17.i.preheader:                             ; preds = %.preheader13.i
  br label %.lr.ph17.i

; <label>:212                                     ; preds = %212, %.lr.ph18.i
  %213 = tail call i64 @strlen(i8* %197) #13
  %214 = add i64 %213, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %192, i8* %197, i64 %214, i32 1, i1 false) #6
  %215 = tail call i32 @strncmp(i8* %192, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.96.147, i64 0, i64 0), i64 2) #13
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %212, label %.preheader13.i.loopexit

.preheader12.i.loopexit:                          ; preds = %.lr.ph17.i
  br label %.preheader12.i

.preheader12.i:                                   ; preds = %.preheader12.i.loopexit, %.preheader13.i
  %217 = getelementptr inbounds i8, i8* %192, i64 3
  br label %.backedge.i

.lr.ph17.i:                                       ; preds = %.lr.ph17.i.preheader, %.lr.ph17.i
  %218 = phi i8* [ %222, %.lr.ph17.i ], [ %210, %.lr.ph17.i.preheader ]
  %219 = getelementptr inbounds i8, i8* %218, i64 2
  %220 = tail call i64 @strlen(i8* %219) #13
  %221 = add i64 %220, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull %218, i8* %219, i64 %221, i32 1, i1 false) #6
  %222 = tail call i8* @strstr(i8* %192, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.97.148, i64 0, i64 0)) #13
  %223 = icmp eq i8* %222, null
  br i1 %223, label %.preheader12.i.loopexit, label %.lr.ph17.i

.backedge.i:                                      ; preds = %.backedge.i.backedge, %.preheader12.i
  %224 = tail call i32 @strncmp(i8* %192, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.98.149, i64 0, i64 0), i64 3) #13
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %226, label %229

; <label>:226                                     ; preds = %.backedge.i
  %227 = tail call i64 @strlen(i8* %217) #13
  %228 = add i64 %227, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %192, i8* %217, i64 %228, i32 1, i1 false) #6
  br label %.backedge.i.backedge

.backedge.i.backedge:                             ; preds = %226, %.critedge.i
  br label %.backedge.i

; <label>:229                                     ; preds = %.backedge.i
  %230 = tail call i8* @strstr(i8* %192, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.99.150, i64 0, i64 0)) #13
  %231 = icmp eq i8* %230, null
  br i1 %231, label %.preheader9.i, label %.preheader11.i.preheader

.preheader11.i.preheader:                         ; preds = %229
  br label %.preheader11.i

.preheader9.i:                                    ; preds = %229
  %232 = tail call i64 @strlen(i8* %192) #13
  %233 = trunc i64 %232 to i32
  %234 = icmp sgt i32 %233, 3
  br i1 %234, label %.lr.ph.i62.preheader, label %de_dotdot.exit

.lr.ph.i62.preheader:                             ; preds = %.preheader9.i
  br label %.lr.ph.i62

.preheader11.i:                                   ; preds = %.preheader11.i.preheader, %236
  %.pn.i = phi i8* [ %cp2.1.i, %236 ], [ %230, %.preheader11.i.preheader ]
  %cp2.1.i = getelementptr inbounds i8, i8* %.pn.i, i64 -1
  %235 = icmp ult i8* %cp2.1.i, %192
  br i1 %235, label %.critedge.i, label %236

; <label>:236                                     ; preds = %.preheader11.i
  %237 = load i8, i8* %cp2.1.i, align 1, !tbaa !1
  %238 = icmp eq i8 %237, 47
  br i1 %238, label %.critedge.i, label %.preheader11.i

.critedge.i:                                      ; preds = %236, %.preheader11.i
  %.pn.i.lcssa = phi i8* [ %.pn.i, %236 ], [ %.pn.i, %.preheader11.i ]
  %239 = getelementptr inbounds i8, i8* %230, i64 4
  %240 = tail call i64 @strlen(i8* %239) #13
  %241 = add i64 %240, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull %.pn.i.lcssa, i8* %239, i64 %241, i32 1, i1 false) #6
  br label %.backedge.i.backedge

.lr.ph.i62:                                       ; preds = %.lr.ph.i62.preheader, %264
  %242 = phi i64 [ %265, %264 ], [ %232, %.lr.ph.i62.preheader ]
  %sext.i61 = shl i64 %242, 32
  %243 = ashr exact i64 %sext.i61, 32
  %244 = getelementptr inbounds i8, i8* %192, i64 %243
  %245 = getelementptr inbounds i8, i8* %244, i64 -3
  %246 = load i8, i8* %245, align 1, !tbaa !1
  %247 = icmp eq i8 %246, 47
  br i1 %247, label %248, label %de_dotdot.exit.loopexit86

; <label>:248                                     ; preds = %.lr.ph.i62
  %249 = getelementptr inbounds i8, i8* %245, i64 1
  %250 = load i8, i8* %249, align 1, !tbaa !1
  %251 = icmp eq i8 %250, 46
  br i1 %251, label %252, label %de_dotdot.exit.loopexit86

; <label>:252                                     ; preds = %248
  %253 = getelementptr inbounds i8, i8* %245, i64 2
  %254 = load i8, i8* %253, align 1, !tbaa !1
  %255 = icmp eq i8 %254, 46
  br i1 %255, label %256, label %de_dotdot.exit.loopexit86

; <label>:256                                     ; preds = %252
  %257 = getelementptr inbounds i8, i8* %245, i64 3
  %258 = load i8, i8* %257, align 1, !tbaa !1
  %259 = icmp eq i8 %258, 0
  br i1 %259, label %.preheader.i.preheader, label %de_dotdot.exit.loopexit86

.preheader.i.preheader:                           ; preds = %256
  br label %.preheader.i

.preheader.i:                                     ; preds = %.preheader.i.preheader, %261
  %cp.0.pn.i = phi i8* [ %cp2.2.i, %261 ], [ %245, %.preheader.i.preheader ]
  %cp2.2.i = getelementptr inbounds i8, i8* %cp.0.pn.i, i64 -1
  %260 = icmp ult i8* %cp2.2.i, %192
  br i1 %260, label %de_dotdot.exit.loopexit, label %261

; <label>:261                                     ; preds = %.preheader.i
  %262 = load i8, i8* %cp2.2.i, align 1, !tbaa !1
  %263 = icmp eq i8 %262, 47
  br i1 %263, label %264, label %.preheader.i

; <label>:264                                     ; preds = %261
  %cp2.2.i.lcssa120 = phi i8* [ %cp2.2.i, %261 ]
  store i8 0, i8* %cp2.2.i.lcssa120, align 1, !tbaa !1
  %265 = tail call i64 @strlen(i8* %192) #13
  %266 = trunc i64 %265 to i32
  %267 = icmp sgt i32 %266, 3
  br i1 %267, label %.lr.ph.i62, label %de_dotdot.exit.loopexit86

de_dotdot.exit.loopexit:                          ; preds = %.preheader.i
  br label %de_dotdot.exit

de_dotdot.exit.loopexit86:                        ; preds = %264, %256, %252, %248, %.lr.ph.i62
  br label %de_dotdot.exit

de_dotdot.exit:                                   ; preds = %de_dotdot.exit.loopexit86, %de_dotdot.exit.loopexit, %.preheader9.i
  %268 = load i8*, i8** %163, align 8, !tbaa !111
  %269 = load i8, i8* %268, align 1, !tbaa !1
  switch i8 %269, label %280 [
    i8 47, label %277
    i8 46, label %270
  ]

; <label>:270                                     ; preds = %de_dotdot.exit
  %271 = getelementptr inbounds i8, i8* %268, i64 1
  %272 = load i8, i8* %271, align 1, !tbaa !1
  %273 = icmp eq i8 %272, 46
  br i1 %273, label %274, label %280

; <label>:274                                     ; preds = %270
  %275 = getelementptr inbounds i8, i8* %268, i64 2
  %276 = load i8, i8* %275, align 1, !tbaa !1
  switch i8 %276, label %280 [
    i8 0, label %277
    i8 47, label %277
  ]

; <label>:277                                     ; preds = %274, %274, %de_dotdot.exit
  %278 = load i8*, i8** @httpd_err400title, align 8, !tbaa !4
  %279 = load i8*, i8** @httpd_err400form, align 8, !tbaa !4
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 400, i8* %278, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %279, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0))
  br label %821

; <label>:280                                     ; preds = %274, %de_dotdot.exit, %270
  %281 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 51
  %282 = load i32, i32* %281, align 8, !tbaa !144
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %bufgets.exit67.thread, label %.preheader

.preheader:                                       ; preds = %280
  %284 = load i64, i64* %2, align 8, !tbaa !154
  %285 = load i64, i64* %3, align 8, !tbaa !42
  %286 = icmp ult i64 %284, %285
  br i1 %286, label %.lr.ph.i64.lr.ph, label %bufgets.exit67.thread

.lr.ph.i64.lr.ph:                                 ; preds = %.preheader
  %287 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 3
  %288 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 20
  %289 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 21
  %290 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 28
  %291 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 22
  %292 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 39
  %293 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %294 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 23
  %295 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 40
  %296 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 24
  %297 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 46
  %298 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 25
  %299 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 53
  %300 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 55
  %301 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 56
  %302 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 47
  %303 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 26
  %304 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 48
  %305 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 30
  %306 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 57
  %307 = bitcast %union.httpd_sockaddr* %293 to %struct.sockaddr*
  %308 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %293, i64 0, i32 0, i32 0
  %309 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2, i32 0, i32 1
  %310 = bitcast i64* %309 to i32*
  %311 = bitcast i64* %309 to [4 x i32]*
  %312 = getelementptr inbounds [4 x i32], [4 x i32]* %311, i64 0, i64 1
  %313 = getelementptr inbounds i64, i64* %309, i64 1
  %314 = bitcast i64* %313 to i32*
  br label %.lr.ph.i64

.lr.ph.i64:                                       ; preds = %.lr.ph.i64.lr.ph, %.backedge113
  %315 = phi i64 [ %285, %.lr.ph.i64.lr.ph ], [ %434, %.backedge113 ]
  %316 = phi i64 [ %284, %.lr.ph.i64.lr.ph ], [ %433, %.backedge113 ]
  %.pre.i63 = load i8*, i8** %287, align 8, !tbaa !44
  br label %317

; <label>:317                                     ; preds = %336, %.lr.ph.i64
  %318 = phi i64 [ %316, %.lr.ph.i64 ], [ %337, %336 ]
  %319 = getelementptr inbounds i8, i8* %.pre.i63, i64 %318
  %320 = load i8, i8* %319, align 1, !tbaa !1
  switch i8 %320, label %336 [
    i8 10, label %321
    i8 13, label %321
  ]

; <label>:321                                     ; preds = %317, %317
  %.lcssa107 = phi i8 [ %320, %317 ], [ %320, %317 ]
  %.lcssa = phi i8* [ %319, %317 ], [ %319, %317 ]
  store i8 0, i8* %.lcssa, align 1, !tbaa !1
  %322 = load i64, i64* %2, align 8, !tbaa !154
  %323 = add i64 %322, 1
  store i64 %323, i64* %2, align 8, !tbaa !154
  %324 = icmp eq i8 %.lcssa107, 13
  br i1 %324, label %325, label %bufgets.exit67

; <label>:325                                     ; preds = %321
  %326 = load i64, i64* %3, align 8, !tbaa !42
  %327 = icmp ult i64 %323, %326
  br i1 %327, label %328, label %bufgets.exit67

; <label>:328                                     ; preds = %325
  %329 = load i8*, i8** %287, align 8, !tbaa !44
  %330 = getelementptr inbounds i8, i8* %329, i64 %323
  %331 = load i8, i8* %330, align 1, !tbaa !1
  %332 = icmp eq i8 %331, 10
  br i1 %332, label %333, label %bufgets.exit67

; <label>:333                                     ; preds = %328
  store i8 0, i8* %330, align 1, !tbaa !1
  %334 = load i64, i64* %2, align 8, !tbaa !154
  %335 = add i64 %334, 1
  store i64 %335, i64* %2, align 8, !tbaa !154
  br label %bufgets.exit67

; <label>:336                                     ; preds = %317
  %337 = add i64 %318, 1
  store i64 %337, i64* %2, align 8, !tbaa !154
  %338 = icmp ult i64 %337, %315
  br i1 %338, label %317, label %bufgets.exit67.thread.loopexit

bufgets.exit67:                                   ; preds = %321, %325, %328, %333
  %sext.i65 = shl i64 %316, 32
  %339 = ashr exact i64 %sext.i65, 32
  %340 = load i8*, i8** %287, align 8, !tbaa !44
  %341 = getelementptr inbounds i8, i8* %340, i64 %339
  %342 = icmp eq i8* %341, null
  br i1 %342, label %bufgets.exit67.thread.loopexit85, label %343

; <label>:343                                     ; preds = %bufgets.exit67
  %344 = load i8, i8* %341, align 1, !tbaa !1
  %345 = icmp eq i8 %344, 0
  br i1 %345, label %bufgets.exit67.thread.loopexit85, label %346

; <label>:346                                     ; preds = %343
  %347 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32.151, i64 0, i64 0), i64 8) #13
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %355

; <label>:349                                     ; preds = %346
  %350 = getelementptr inbounds i8, i8* %341, i64 8
  br label %.backedge

.backedge:                                        ; preds = %.backedge.backedge, %349
  %__result.0.i = phi i64 [ 0, %349 ], [ %354, %.backedge.backedge ]
  %351 = getelementptr inbounds i8, i8* %350, i64 %__result.0.i
  %352 = load i8, i8* %351, align 1, !tbaa !1
  %353 = sext i8 %352 to i32
  %354 = add i64 %__result.0.i, 1
  switch i32 %353, label %__strspn_c2.exit [
    i32 32, label %.backedge.backedge
    i32 9, label %.backedge.backedge
  ]

.backedge.backedge:                               ; preds = %.backedge, %.backedge
  br label %.backedge

__strspn_c2.exit:                                 ; preds = %.backedge
  %.lcssa119 = phi i8* [ %351, %.backedge ]
  store i8* %.lcssa119, i8** %288, align 8, !tbaa !94
  br label %.backedge113

; <label>:355                                     ; preds = %346
  %356 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.34.152, i64 0, i64 0), i64 9) #13
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %358, label %364

; <label>:358                                     ; preds = %355
  %359 = getelementptr inbounds i8, i8* %341, i64 9
  br label %.backedge102

.backedge102:                                     ; preds = %.backedge102.backedge, %358
  %__result.0.i69 = phi i64 [ 0, %358 ], [ %363, %.backedge102.backedge ]
  %360 = getelementptr inbounds i8, i8* %359, i64 %__result.0.i69
  %361 = load i8, i8* %360, align 1, !tbaa !1
  %362 = sext i8 %361 to i32
  %363 = add i64 %__result.0.i69, 1
  switch i32 %362, label %__strspn_c2.exit71 [
    i32 32, label %.backedge102.backedge
    i32 9, label %.backedge102.backedge
  ]

.backedge102.backedge:                            ; preds = %.backedge102, %.backedge102
  br label %.backedge102

__strspn_c2.exit71:                               ; preds = %.backedge102
  %.lcssa118 = phi i8* [ %360, %.backedge102 ]
  store i8* %.lcssa118, i8** %288, align 8, !tbaa !94
  br label %.backedge113

; <label>:364                                     ; preds = %355
  %365 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.35.153, i64 0, i64 0), i64 11) #13
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %367, label %373

; <label>:367                                     ; preds = %364
  %368 = getelementptr inbounds i8, i8* %341, i64 11
  br label %.backedge103

.backedge103:                                     ; preds = %.backedge103.backedge, %367
  %__result.0.i72 = phi i64 [ 0, %367 ], [ %372, %.backedge103.backedge ]
  %369 = getelementptr inbounds i8, i8* %368, i64 %__result.0.i72
  %370 = load i8, i8* %369, align 1, !tbaa !1
  %371 = sext i8 %370 to i32
  %372 = add i64 %__result.0.i72, 1
  switch i32 %371, label %__strspn_c2.exit74 [
    i32 32, label %.backedge103.backedge
    i32 9, label %.backedge103.backedge
  ]

.backedge103.backedge:                            ; preds = %.backedge103, %.backedge103
  br label %.backedge103

__strspn_c2.exit74:                               ; preds = %.backedge103
  %.lcssa117 = phi i8* [ %369, %.backedge103 ]
  store i8* %.lcssa117, i8** %289, align 8, !tbaa !95
  br label %.backedge113

; <label>:373                                     ; preds = %364
  %374 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.36.154, i64 0, i64 0), i64 5) #13
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %376, label %395

; <label>:376                                     ; preds = %373
  %377 = getelementptr inbounds i8, i8* %341, i64 5
  br label %.backedge104

.backedge104:                                     ; preds = %.backedge104.backedge, %376
  %__result.0.i75 = phi i64 [ 0, %376 ], [ %381, %.backedge104.backedge ]
  %378 = getelementptr inbounds i8, i8* %377, i64 %__result.0.i75
  %379 = load i8, i8* %378, align 1, !tbaa !1
  %380 = sext i8 %379 to i32
  %381 = add i64 %__result.0.i75, 1
  switch i32 %380, label %__strspn_c2.exit77 [
    i32 32, label %.backedge104.backedge
    i32 9, label %.backedge104.backedge
  ]

.backedge104.backedge:                            ; preds = %.backedge104, %.backedge104
  br label %.backedge104

__strspn_c2.exit77:                               ; preds = %.backedge104
  %.lcssa116 = phi i8* [ %378, %.backedge104 ]
  store i8* %.lcssa116, i8** %290, align 8, !tbaa !151
  %382 = tail call i8* @strchr(i8* %.lcssa116, i32 58) #6
  %383 = icmp eq i8* %382, null
  br i1 %383, label %385, label %384

; <label>:384                                     ; preds = %__strspn_c2.exit77
  store i8 0, i8* %382, align 1, !tbaa !1
  %.pre156 = load i8*, i8** %290, align 8, !tbaa !151
  br label %385

; <label>:385                                     ; preds = %__strspn_c2.exit77, %384
  %386 = phi i8* [ %.lcssa116, %__strspn_c2.exit77 ], [ %.pre156, %384 ]
  %387 = tail call i8* @strchr(i8* %386, i32 47) #6
  %388 = icmp eq i8* %387, null
  br i1 %388, label %389, label %392

; <label>:389                                     ; preds = %385
  %390 = load i8, i8* %386, align 1, !tbaa !1
  %391 = icmp eq i8 %390, 46
  br i1 %391, label %392, label %.backedge113

; <label>:392                                     ; preds = %385, %389
  %393 = load i8*, i8** @httpd_err400title, align 8, !tbaa !4
  %394 = load i8*, i8** @httpd_err400form, align 8, !tbaa !4
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 400, i8* %393, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %394, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0))
  br label %821

; <label>:395                                     ; preds = %373
  %396 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.37.155, i64 0, i64 0), i64 7) #13
  %397 = icmp eq i32 %396, 0
  br i1 %397, label %398, label %446

; <label>:398                                     ; preds = %395
  %399 = getelementptr inbounds i8, i8* %341, i64 7
  br label %.backedge105

.backedge105:                                     ; preds = %.backedge105.backedge, %398
  %__result.0.i78 = phi i64 [ 0, %398 ], [ %403, %.backedge105.backedge ]
  %400 = getelementptr inbounds i8, i8* %399, i64 %__result.0.i78
  %401 = load i8, i8* %400, align 1, !tbaa !1
  %402 = sext i8 %401 to i32
  %403 = add i64 %__result.0.i78, 1
  switch i32 %402, label %__strspn_c2.exit80 [
    i32 32, label %.backedge105.backedge
    i32 9, label %.backedge105.backedge
  ]

.backedge105.backedge:                            ; preds = %.backedge105, %.backedge105
  br label %.backedge105

__strspn_c2.exit80:                               ; preds = %.backedge105
  %.lcssa115 = phi i8* [ %400, %.backedge105 ]
  %404 = load i8*, i8** %291, align 8, !tbaa !115
  %405 = load i8, i8* %404, align 1, !tbaa !1
  %406 = icmp eq i8 %405, 0
  br i1 %406, label %441, label %407

; <label>:407                                     ; preds = %__strspn_c2.exit80
  %408 = tail call i64 @strlen(i8* %404) #13
  %409 = icmp ugt i64 %408, 5000
  br i1 %409, label %410, label %436

; <label>:410                                     ; preds = %407
  %411 = load i16, i16* %308, align 8, !tbaa !88
  %switch.selectcmp.i.i = icmp eq i16 %411, 10
  %switch.selectcmp1.i.i = icmp eq i16 %411, 2
  %412 = select i1 %switch.selectcmp.i.i, i32 28, i32 0
  %413 = select i1 %switch.selectcmp1.i.i, i32 16, i32 %412
  %414 = tail call i32 @getnameinfo(%struct.sockaddr* nonnull %307, i32 %413, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %415 = icmp eq i32 %414, 0
  br i1 %415, label %417, label %416

; <label>:416                                     ; preds = %410
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit

; <label>:417                                     ; preds = %410
  %418 = load i32, i32* %310, align 4, !tbaa !8
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %420, label %httpd_ntoa.exit

; <label>:420                                     ; preds = %417
  %421 = load i32, i32* %312, align 4, !tbaa !8
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %423, label %httpd_ntoa.exit

; <label>:423                                     ; preds = %420
  %424 = load i32, i32* %314, align 4, !tbaa !8
  %425 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %426 = icmp eq i32 %424, %425
  br i1 %426, label %427, label %httpd_ntoa.exit

; <label>:427                                     ; preds = %423
  %428 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %429 = icmp eq i32 %428, 0
  br i1 %429, label %430, label %httpd_ntoa.exit

; <label>:430                                     ; preds = %427
  %431 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %432 = add i64 %431, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %432, i32 1, i1 false) #6
  br label %httpd_ntoa.exit

httpd_ntoa.exit:                                  ; preds = %416, %417, %420, %423, %427, %430
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.38.156, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0)) #6
  br label %.backedge113

.backedge113:                                     ; preds = %httpd_ntoa.exit, %httpd_ntoa.exit5, %__strspn_c2.exit71, %389, %491, %510, %506, %523, %__strspn_c2.exit92, %__strspn_c2.exit95, %__strspn_c2.exit98, %595, %584, %572, %555, %559, %__strspn_c2.exit89, %__strspn_c2.exit86, %443, %__strspn_c2.exit74, %__strspn_c2.exit, %534, %529, %526, %546
  %433 = load i64, i64* %2, align 8, !tbaa !154
  %434 = load i64, i64* %3, align 8, !tbaa !42
  %435 = icmp ult i64 %433, %434
  br i1 %435, label %.lr.ph.i64, label %bufgets.exit67.thread.loopexit85

; <label>:436                                     ; preds = %407
  %437 = add i64 %408, 2
  %438 = tail call i64 @strlen(i8* %.lcssa115) #13
  %439 = add i64 %437, %438
  tail call void @httpd_realloc_str(i8** nonnull %291, i64* nonnull %292, i64 %439)
  %440 = load i8*, i8** %291, align 8, !tbaa !115
  %strlen50 = tail call i64 @strlen(i8* %440)
  %endptr51 = getelementptr i8, i8* %440, i64 %strlen50
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %endptr51, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39.157, i64 0, i64 0), i64 3, i32 1, i1 false)
  br label %443

; <label>:441                                     ; preds = %__strspn_c2.exit80
  %442 = tail call i64 @strlen(i8* %.lcssa115) #13
  tail call void @httpd_realloc_str(i8** nonnull %291, i64* nonnull %292, i64 %442)
  br label %443

; <label>:443                                     ; preds = %441, %436
  %444 = load i8*, i8** %291, align 8, !tbaa !115
  %445 = tail call i8* @strcat(i8* %444, i8* %.lcssa115) #6
  br label %.backedge113

; <label>:446                                     ; preds = %395
  %447 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.40.158, i64 0, i64 0), i64 16) #13
  %448 = icmp eq i32 %447, 0
  br i1 %448, label %449, label %494

; <label>:449                                     ; preds = %446
  %450 = getelementptr inbounds i8, i8* %341, i64 16
  br label %.backedge106

.backedge106:                                     ; preds = %.backedge106.backedge, %449
  %__result.0.i81 = phi i64 [ 0, %449 ], [ %454, %.backedge106.backedge ]
  %451 = getelementptr inbounds i8, i8* %450, i64 %__result.0.i81
  %452 = load i8, i8* %451, align 1, !tbaa !1
  %453 = sext i8 %452 to i32
  %454 = add i64 %__result.0.i81, 1
  switch i32 %453, label %__strspn_c2.exit83 [
    i32 32, label %.backedge106.backedge
    i32 9, label %.backedge106.backedge
  ]

.backedge106.backedge:                            ; preds = %.backedge106, %.backedge106
  br label %.backedge106

__strspn_c2.exit83:                               ; preds = %.backedge106
  %.lcssa114 = phi i8* [ %451, %.backedge106 ]
  %455 = load i8*, i8** %294, align 8, !tbaa !116
  %456 = load i8, i8* %455, align 1, !tbaa !1
  %457 = icmp eq i8 %456, 0
  br i1 %457, label %489, label %458

; <label>:458                                     ; preds = %__strspn_c2.exit83
  %459 = tail call i64 @strlen(i8* %455) #13
  %460 = icmp ugt i64 %459, 5000
  br i1 %460, label %461, label %484

; <label>:461                                     ; preds = %458
  %462 = load i16, i16* %308, align 8, !tbaa !88
  %switch.selectcmp.i.i2 = icmp eq i16 %462, 10
  %switch.selectcmp1.i.i3 = icmp eq i16 %462, 2
  %463 = select i1 %switch.selectcmp.i.i2, i32 28, i32 0
  %464 = select i1 %switch.selectcmp1.i.i3, i32 16, i32 %463
  %465 = tail call i32 @getnameinfo(%struct.sockaddr* nonnull %307, i32 %464, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %468, label %467

; <label>:467                                     ; preds = %461
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit5

; <label>:468                                     ; preds = %461
  %469 = load i32, i32* %310, align 4, !tbaa !8
  %470 = icmp eq i32 %469, 0
  br i1 %470, label %471, label %httpd_ntoa.exit5

; <label>:471                                     ; preds = %468
  %472 = load i32, i32* %312, align 4, !tbaa !8
  %473 = icmp eq i32 %472, 0
  br i1 %473, label %474, label %httpd_ntoa.exit5

; <label>:474                                     ; preds = %471
  %475 = load i32, i32* %314, align 4, !tbaa !8
  %476 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %477 = icmp eq i32 %475, %476
  br i1 %477, label %478, label %httpd_ntoa.exit5

; <label>:478                                     ; preds = %474
  %479 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %480 = icmp eq i32 %479, 0
  br i1 %480, label %481, label %httpd_ntoa.exit5

; <label>:481                                     ; preds = %478
  %482 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %483 = add i64 %482, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %483, i32 1, i1 false) #6
  br label %httpd_ntoa.exit5

httpd_ntoa.exit5:                                 ; preds = %467, %468, %471, %474, %478, %481
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([41 x i8], [41 x i8]* @.str.41.159, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0)) #6
  br label %.backedge113

; <label>:484                                     ; preds = %458
  %485 = add i64 %459, 2
  %486 = tail call i64 @strlen(i8* %.lcssa114) #13
  %487 = add i64 %485, %486
  tail call void @httpd_realloc_str(i8** nonnull %294, i64* nonnull %295, i64 %487)
  %488 = load i8*, i8** %294, align 8, !tbaa !116
  %strlen = tail call i64 @strlen(i8* %488)
  %endptr = getelementptr i8, i8* %488, i64 %strlen
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %endptr, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39.157, i64 0, i64 0), i64 3, i32 1, i1 false)
  br label %491

; <label>:489                                     ; preds = %__strspn_c2.exit83
  %490 = tail call i64 @strlen(i8* %.lcssa114) #13
  tail call void @httpd_realloc_str(i8** nonnull %294, i64* nonnull %295, i64 %490)
  br label %491

; <label>:491                                     ; preds = %489, %484
  %492 = load i8*, i8** %294, align 8, !tbaa !116
  %493 = tail call i8* @strcpy(i8* %492, i8* %.lcssa114) #6
  br label %.backedge113

; <label>:494                                     ; preds = %446
  %495 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.42.160, i64 0, i64 0), i64 16) #13
  %496 = icmp eq i32 %495, 0
  br i1 %496, label %497, label %503

; <label>:497                                     ; preds = %494
  %498 = getelementptr inbounds i8, i8* %341, i64 16
  br label %.backedge107

.backedge107:                                     ; preds = %.backedge107.backedge, %497
  %__result.0.i84 = phi i64 [ 0, %497 ], [ %502, %.backedge107.backedge ]
  %499 = getelementptr inbounds i8, i8* %498, i64 %__result.0.i84
  %500 = load i8, i8* %499, align 1, !tbaa !1
  %501 = sext i8 %500 to i32
  %502 = add i64 %__result.0.i84, 1
  switch i32 %501, label %__strspn_c2.exit86 [
    i32 32, label %.backedge107.backedge
    i32 9, label %.backedge107.backedge
  ]

.backedge107.backedge:                            ; preds = %.backedge107, %.backedge107
  br label %.backedge107

__strspn_c2.exit86:                               ; preds = %.backedge107
  %.lcssa113 = phi i8* [ %499, %.backedge107 ]
  store i8* %.lcssa113, i8** %296, align 8, !tbaa !157
  br label %.backedge113

; <label>:503                                     ; preds = %494
  %504 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.43.161, i64 0, i64 0), i64 18) #13
  %505 = icmp eq i32 %504, 0
  br i1 %505, label %506, label %511

; <label>:506                                     ; preds = %503
  %507 = getelementptr inbounds i8, i8* %341, i64 18
  %508 = tail call i64 @tdate_parse(i8* %507) #6
  store i64 %508, i64* %297, align 8, !tbaa !158
  %509 = icmp eq i64 %508, -1
  br i1 %509, label %510, label %.backedge113

; <label>:510                                     ; preds = %506
  tail call void (i32, i8*, ...) @syslog(i32 7, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.44.162, i64 0, i64 0), i8* %507) #6
  br label %.backedge113

; <label>:511                                     ; preds = %503
  %512 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45.163, i64 0, i64 0), i64 7) #13
  %513 = icmp eq i32 %512, 0
  br i1 %513, label %514, label %520

; <label>:514                                     ; preds = %511
  %515 = getelementptr inbounds i8, i8* %341, i64 7
  br label %.backedge108

.backedge108:                                     ; preds = %.backedge108.backedge, %514
  %__result.0.i87 = phi i64 [ 0, %514 ], [ %519, %.backedge108.backedge ]
  %516 = getelementptr inbounds i8, i8* %515, i64 %__result.0.i87
  %517 = load i8, i8* %516, align 1, !tbaa !1
  %518 = sext i8 %517 to i32
  %519 = add i64 %__result.0.i87, 1
  switch i32 %518, label %__strspn_c2.exit89 [
    i32 32, label %.backedge108.backedge
    i32 9, label %.backedge108.backedge
  ]

.backedge108.backedge:                            ; preds = %.backedge108, %.backedge108
  br label %.backedge108

__strspn_c2.exit89:                               ; preds = %.backedge108
  %.lcssa112 = phi i8* [ %516, %.backedge108 ]
  store i8* %.lcssa112, i8** %298, align 8, !tbaa !159
  br label %.backedge113

; <label>:520                                     ; preds = %511
  %521 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.46.164, i64 0, i64 0), i64 6) #13
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %523, label %549

; <label>:523                                     ; preds = %520
  %524 = tail call i8* @strchr(i8* nonnull %341, i32 44) #6
  %525 = icmp eq i8* %524, null
  br i1 %525, label %526, label %.backedge113

; <label>:526                                     ; preds = %523
  %527 = tail call i8* @strchr(i8* nonnull %341, i32 61) #6
  %528 = icmp eq i8* %527, null
  br i1 %528, label %.backedge113, label %529

; <label>:529                                     ; preds = %526
  %530 = getelementptr inbounds i8, i8* %527, i64 1
  %531 = tail call i8* @strchr(i8* %530, i32 45) #6
  %532 = icmp eq i8* %531, null
  %533 = icmp eq i8* %531, %530
  %or.cond = or i1 %532, %533
  br i1 %or.cond, label %.backedge113, label %534

; <label>:534                                     ; preds = %529
  store i8 0, i8* %531, align 1, !tbaa !1
  store i32 1, i32* %299, align 8, !tbaa !54
  %535 = tail call i64 @strtoll(i8* nocapture nonnull %530, i8** null, i32 10) #6
  %536 = icmp slt i64 %535, 0
  %. = select i1 %536, i64 0, i64 %535
  store i64 %., i64* %300, align 8, !tbaa !55
  %537 = getelementptr inbounds i8, i8* %531, i64 1
  %538 = load i8, i8* %537, align 1, !tbaa !1
  %539 = sext i8 %538 to i64
  %540 = tail call i16** @__ctype_b_loc() #21
  %541 = load i16*, i16** %540, align 8, !tbaa !4
  %542 = getelementptr inbounds i16, i16* %541, i64 %539
  %543 = load i16, i16* %542, align 2, !tbaa !6
  %544 = and i16 %543, 2048
  %545 = icmp eq i16 %544, 0
  br i1 %545, label %.backedge113, label %546

; <label>:546                                     ; preds = %534
  %547 = tail call i64 @strtoll(i8* nocapture nonnull %537, i8** null, i32 10) #6
  %548 = icmp sgt i64 %547, -1
  %.52 = select i1 %548, i64 %547, i64 -1
  store i64 %.52, i64* %301, align 8
  br label %.backedge113

; <label>:549                                     ; preds = %520
  %550 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48.165, i64 0, i64 0), i64 9) #13
  %551 = icmp eq i32 %550, 0
  br i1 %551, label %555, label %552

; <label>:552                                     ; preds = %549
  %553 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.49.166, i64 0, i64 0), i64 9) #13
  %554 = icmp eq i32 %553, 0
  br i1 %554, label %555, label %560

; <label>:555                                     ; preds = %552, %549
  %556 = getelementptr inbounds i8, i8* %341, i64 9
  %557 = tail call i64 @tdate_parse(i8* %556) #6
  store i64 %557, i64* %302, align 8, !tbaa !145
  %558 = icmp eq i64 %557, -1
  br i1 %558, label %559, label %.backedge113

; <label>:559                                     ; preds = %555
  tail call void (i32, i8*, ...) @syslog(i32 7, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.44.162, i64 0, i64 0), i8* %556) #6
  br label %.backedge113

; <label>:560                                     ; preds = %552
  %561 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.50.167, i64 0, i64 0), i64 13) #13
  %562 = icmp eq i32 %561, 0
  br i1 %562, label %563, label %569

; <label>:563                                     ; preds = %560
  %564 = getelementptr inbounds i8, i8* %341, i64 13
  br label %.backedge109

.backedge109:                                     ; preds = %.backedge109.backedge, %563
  %__result.0.i90 = phi i64 [ 0, %563 ], [ %568, %.backedge109.backedge ]
  %565 = getelementptr inbounds i8, i8* %564, i64 %__result.0.i90
  %566 = load i8, i8* %565, align 1, !tbaa !1
  %567 = sext i8 %566 to i32
  %568 = add i64 %__result.0.i90, 1
  switch i32 %567, label %__strspn_c2.exit92 [
    i32 32, label %.backedge109.backedge
    i32 9, label %.backedge109.backedge
  ]

.backedge109.backedge:                            ; preds = %.backedge109, %.backedge109
  br label %.backedge109

__strspn_c2.exit92:                               ; preds = %.backedge109
  %.lcssa111 = phi i8* [ %565, %.backedge109 ]
  store i8* %.lcssa111, i8** %303, align 8, !tbaa !150
  br label %.backedge113

; <label>:569                                     ; preds = %560
  %570 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.51, i64 0, i64 0), i64 15) #13
  %571 = icmp eq i32 %570, 0
  br i1 %571, label %572, label %575

; <label>:572                                     ; preds = %569
  %573 = getelementptr inbounds i8, i8* %341, i64 15
  %574 = tail call i64 @strtol(i8* nocapture nonnull %573, i8** null, i32 10) #6
  store i64 %574, i64* %304, align 8, !tbaa !160
  br label %.backedge113

; <label>:575                                     ; preds = %569
  %576 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.52.168, i64 0, i64 0), i64 14) #13
  %577 = icmp eq i32 %576, 0
  br i1 %577, label %578, label %584

; <label>:578                                     ; preds = %575
  %579 = getelementptr inbounds i8, i8* %341, i64 14
  br label %.backedge110

.backedge110:                                     ; preds = %.backedge110.backedge, %578
  %__result.0.i93 = phi i64 [ 0, %578 ], [ %583, %.backedge110.backedge ]
  %580 = getelementptr inbounds i8, i8* %579, i64 %__result.0.i93
  %581 = load i8, i8* %580, align 1, !tbaa !1
  %582 = sext i8 %581 to i32
  %583 = add i64 %__result.0.i93, 1
  switch i32 %582, label %__strspn_c2.exit95 [
    i32 32, label %.backedge110.backedge
    i32 9, label %.backedge110.backedge
  ]

.backedge110.backedge:                            ; preds = %.backedge110, %.backedge110
  br label %.backedge110

__strspn_c2.exit95:                               ; preds = %.backedge110
  %.lcssa110 = phi i8* [ %580, %.backedge110 ]
  store i8* %.lcssa110, i8** %305, align 8, !tbaa !152
  br label %.backedge113

; <label>:584                                     ; preds = %575
  %585 = tail call i32 @strncasecmp(i8* nonnull %341, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.53, i64 0, i64 0), i64 11) #13
  %586 = icmp eq i32 %585, 0
  br i1 %586, label %587, label %.backedge113

; <label>:587                                     ; preds = %584
  %588 = getelementptr inbounds i8, i8* %341, i64 11
  br label %.backedge111

.backedge111:                                     ; preds = %.backedge111.backedge, %587
  %__result.0.i96 = phi i64 [ 0, %587 ], [ %592, %.backedge111.backedge ]
  %589 = getelementptr inbounds i8, i8* %588, i64 %__result.0.i96
  %590 = load i8, i8* %589, align 1, !tbaa !1
  %591 = sext i8 %590 to i32
  %592 = add i64 %__result.0.i96, 1
  switch i32 %591, label %__strspn_c2.exit98 [
    i32 32, label %.backedge111.backedge
    i32 9, label %.backedge111.backedge
  ]

.backedge111.backedge:                            ; preds = %.backedge111, %.backedge111
  br label %.backedge111

__strspn_c2.exit98:                               ; preds = %.backedge111
  %.lcssa109 = phi i8* [ %589, %.backedge111 ]
  %593 = tail call i32 @strcasecmp(i8* %.lcssa109, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.54, i64 0, i64 0)) #13
  %594 = icmp eq i32 %593, 0
  br i1 %594, label %595, label %.backedge113

; <label>:595                                     ; preds = %__strspn_c2.exit98
  store i32 1, i32* %306, align 8, !tbaa !153
  br label %.backedge113

bufgets.exit67.thread.loopexit:                   ; preds = %336
  br label %bufgets.exit67.thread

bufgets.exit67.thread.loopexit85:                 ; preds = %.backedge113, %bufgets.exit67, %343
  br label %bufgets.exit67.thread

bufgets.exit67.thread:                            ; preds = %bufgets.exit67.thread.loopexit85, %bufgets.exit67.thread.loopexit, %.preheader, %280
  %596 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 52
  %597 = load i32, i32* %596, align 4, !tbaa !156
  %598 = icmp eq i32 %597, 0
  br i1 %598, label %618, label %599

; <label>:599                                     ; preds = %bufgets.exit67.thread
  %600 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 27
  %601 = load i8*, i8** %600, align 8, !tbaa !117
  %602 = load i8, i8* %601, align 1, !tbaa !1
  %603 = icmp eq i8 %602, 0
  br i1 %603, label %604, label %612

; <label>:604                                     ; preds = %599
  %605 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 28
  %606 = load i8*, i8** %605, align 8, !tbaa !151
  %607 = load i8, i8* %606, align 1, !tbaa !1
  %608 = icmp eq i8 %607, 0
  br i1 %608, label %609, label %612

; <label>:609                                     ; preds = %604
  %610 = load i8*, i8** @httpd_err400title, align 8, !tbaa !4
  %611 = load i8*, i8** @httpd_err400form, align 8, !tbaa !4
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 400, i8* %610, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %611, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0))
  br label %821

; <label>:612                                     ; preds = %604, %599
  %613 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 57
  %614 = load i32, i32* %613, align 8, !tbaa !153
  %615 = icmp eq i32 %614, 0
  br i1 %615, label %618, label %616

; <label>:616                                     ; preds = %612
  %617 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 58
  store i32 1, i32* %617, align 4, !tbaa !148
  br label %618

; <label>:618                                     ; preds = %612, %bufgets.exit67.thread, %616
  %619 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 16
  %620 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 35
  %621 = load i8*, i8** %163, align 8, !tbaa !111
  %622 = tail call i64 @strlen(i8* %621) #13
  tail call void @httpd_realloc_str(i8** %619, i64* %620, i64 %622)
  %623 = load i8*, i8** %619, align 8, !tbaa !48
  %624 = load i8*, i8** %163, align 8, !tbaa !111
  %625 = tail call i8* @strcpy(i8* %623, i8* %624) #6
  %626 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 1
  %627 = load %struct.httpd_server*, %struct.httpd_server** %626, align 8, !tbaa !79
  %628 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %627, i64 0, i32 15
  %629 = load i32, i32* %628, align 4, !tbaa !82
  %630 = icmp eq i32 %629, 0
  br i1 %630, label %._crit_edge158, label %631

._crit_edge158:                                   ; preds = %618
  %.pre159 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 54
  br label %734

; <label>:631                                     ; preds = %618
  %632 = bitcast %union.httpd_sockaddr* %sa.i to i8*
  call void @llvm.lifetime.start(i64 128, i8* %632) #6
  %633 = bitcast i32* %sz.i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %633) #6
  %634 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 27
  %635 = load i8*, i8** %634, align 8, !tbaa !117
  %636 = load i8, i8* %635, align 1, !tbaa !1
  %637 = icmp eq i8 %636, 0
  br i1 %637, label %640, label %638

; <label>:638                                     ; preds = %631
  %639 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 50
  store i8* %635, i8** %639, align 8, !tbaa !84
  br label %680

; <label>:640                                     ; preds = %631
  %641 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 28
  %642 = load i8*, i8** %641, align 8, !tbaa !151
  %643 = load i8, i8* %642, align 1, !tbaa !1
  %644 = icmp eq i8 %643, 0
  br i1 %644, label %647, label %645

; <label>:645                                     ; preds = %640
  %646 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 50
  store i8* %642, i8** %646, align 8, !tbaa !84
  br label %680

; <label>:647                                     ; preds = %640
  store i32 128, i32* %sz.i, align 4, !tbaa !8
  %648 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 60
  %649 = load i32, i32* %648, align 8, !tbaa !38
  %650 = bitcast %union.httpd_sockaddr* %sa.i to %struct.sockaddr*
  %651 = call i32 @getsockname(i32 %649, %struct.sockaddr* %650, i32* nonnull %sz.i) #6
  %652 = icmp slt i32 %651, 0
  br i1 %652, label %732, label %653

; <label>:653                                     ; preds = %647
  %654 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %sa.i, i64 0, i32 0, i32 0
  %655 = load i16, i16* %654, align 8, !tbaa !88
  %switch.selectcmp.i.i6 = icmp eq i16 %655, 10
  %switch.selectcmp1.i.i7 = icmp eq i16 %655, 2
  %656 = select i1 %switch.selectcmp.i.i6, i32 28, i32 0
  %657 = select i1 %switch.selectcmp1.i.i7, i32 16, i32 %656
  %658 = call i32 @getnameinfo(%struct.sockaddr* %650, i32 %657, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %659 = icmp eq i32 %658, 0
  br i1 %659, label %661, label %660

; <label>:660                                     ; preds = %653
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit9

; <label>:661                                     ; preds = %653
  %662 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %sa.i, i64 0, i32 0, i32 1
  %663 = load i64, i64* %662, align 8
  %664 = trunc i64 %663 to i32
  %665 = icmp eq i32 %664, 0
  %666 = icmp ult i64 %663, 4294967296
  %or.cond77 = and i1 %666, %665
  br i1 %or.cond77, label %667, label %httpd_ntoa.exit9

; <label>:667                                     ; preds = %661
  %668 = getelementptr inbounds i64, i64* %662, i64 1
  %669 = bitcast i64* %668 to i32*
  %670 = load i32, i32* %669, align 8, !tbaa !8
  %671 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %672 = icmp eq i32 %670, %671
  br i1 %672, label %673, label %httpd_ntoa.exit9

; <label>:673                                     ; preds = %667
  %674 = call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %675 = icmp eq i32 %674, 0
  br i1 %675, label %676, label %httpd_ntoa.exit9

; <label>:676                                     ; preds = %673
  %677 = call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %678 = add i64 %677, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %678, i32 1, i1 false) #6
  br label %httpd_ntoa.exit9

httpd_ntoa.exit9:                                 ; preds = %660, %661, %667, %673, %676
  %679 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 50
  store i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8** %679, align 8, !tbaa !84
  br label %680

; <label>:680                                     ; preds = %httpd_ntoa.exit9, %645, %638
  %.pre-phi.i = phi i8** [ %646, %645 ], [ %679, %httpd_ntoa.exit9 ], [ %639, %638 ]
  %681 = phi i8* [ %642, %645 ], [ getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), %httpd_ntoa.exit9 ], [ %635, %638 ]
  %682 = load i8, i8* %681, align 1, !tbaa !1
  %683 = icmp eq i8 %682, 0
  br i1 %683, label %._crit_edge.i, label %.lr.ph.i99

.lr.ph.i99:                                       ; preds = %680
  %684 = tail call i16** @__ctype_b_loc() #21
  br label %685

; <label>:685                                     ; preds = %699, %.lr.ph.i99
  %686 = phi i8 [ %682, %.lr.ph.i99 ], [ %701, %699 ]
  %cp1.01.i = phi i8* [ %681, %.lr.ph.i99 ], [ %700, %699 ]
  %687 = sext i8 %686 to i64
  %688 = load i16*, i16** %684, align 8, !tbaa !4
  %689 = getelementptr inbounds i16, i16* %688, i64 %687
  %690 = load i16, i16* %689, align 2, !tbaa !6
  %691 = and i16 %690, 256
  %692 = icmp eq i16 %691, 0
  br i1 %692, label %699, label %693

; <label>:693                                     ; preds = %685
  %694 = tail call i32** @__ctype_tolower_loc() #21
  %695 = load i32*, i32** %694, align 8, !tbaa !4
  %696 = getelementptr inbounds i32, i32* %695, i64 %687
  %697 = load i32, i32* %696, align 4, !tbaa !8
  %698 = trunc i32 %697 to i8
  store i8 %698, i8* %cp1.01.i, align 1, !tbaa !1
  br label %699

; <label>:699                                     ; preds = %693, %685
  %700 = getelementptr inbounds i8, i8* %cp1.01.i, i64 1
  %701 = load i8, i8* %700, align 1, !tbaa !1
  %702 = icmp eq i8 %701, 0
  br i1 %702, label %._crit_edge.i.loopexit, label %685

._crit_edge.i.loopexit:                           ; preds = %699
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i.loopexit, %680
  %703 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 54
  %704 = load i32, i32* %703, align 4, !tbaa !83
  %705 = icmp eq i32 %704, 0
  br i1 %705, label %706, label %vhost_map.exit.thread

; <label>:706                                     ; preds = %._crit_edge.i
  %707 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 29
  %708 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 42
  %709 = load i8*, i8** %.pre-phi.i, align 8, !tbaa !84
  %710 = call i64 @strlen(i8* %709) #13
  call void @httpd_realloc_str(i8** %707, i64* %708, i64 %710) #6
  %711 = load i8*, i8** %707, align 8, !tbaa !118
  %712 = load i8*, i8** %.pre-phi.i, align 8, !tbaa !84
  %713 = call i8* @strcpy(i8* %711, i8* %712) #6
  %714 = load i8*, i8** %619, align 8, !tbaa !48
  %715 = call i64 @strlen(i8* %714) #13
  %sext.i100 = shl i64 %715, 32
  %716 = ashr exact i64 %sext.i100, 32
  call void @httpd_realloc_str(i8** nonnull @vhost_map.tempfilename, i64* nonnull @vhost_map.maxtempfilename, i64 %716) #6
  %717 = load i8*, i8** @vhost_map.tempfilename, align 8, !tbaa !4
  %718 = load i8*, i8** %619, align 8, !tbaa !48
  %719 = call i8* @strcpy(i8* %717, i8* %718) #6
  %720 = load i8*, i8** %707, align 8, !tbaa !118
  %721 = call i64 @strlen(i8* %720) #13
  %722 = add nsw i64 %716, 1
  %723 = add i64 %722, %721
  call void @httpd_realloc_str(i8** nonnull %619, i64* nonnull %620, i64 %723) #6
  %724 = load i8*, i8** %619, align 8, !tbaa !48
  %725 = load i8*, i8** %707, align 8, !tbaa !118
  %726 = call i8* @strcpy(i8* %724, i8* %725) #6
  %727 = load i8*, i8** %619, align 8, !tbaa !48
  %strlen.i = call i64 @strlen(i8* %727) #6
  %endptr.i = getelementptr i8, i8* %727, i64 %strlen.i
  %728 = bitcast i8* %endptr.i to i16*
  store i16 47, i16* %728, align 1
  %729 = load i8*, i8** %619, align 8, !tbaa !48
  %730 = load i8*, i8** @vhost_map.tempfilename, align 8, !tbaa !4
  %731 = call i8* @strcat(i8* %729, i8* %730) #6
  br label %vhost_map.exit.thread

vhost_map.exit.thread:                            ; preds = %706, %._crit_edge.i
  call void @llvm.lifetime.end(i64 4, i8* %633) #6
  call void @llvm.lifetime.end(i64 128, i8* %632) #6
  %.pre157 = load %struct.httpd_server*, %struct.httpd_server** %626, align 8, !tbaa !79
  br label %734

; <label>:732                                     ; preds = %647
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.87.169, i64 0, i64 0)) #6
  call void @llvm.lifetime.end(i64 4, i8* nonnull %633) #6
  call void @llvm.lifetime.end(i64 128, i8* %632) #6
  %733 = load i8*, i8** %113, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 500, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89.170, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.90.171, i64 0, i64 0), i8* %733)
  br label %821

; <label>:734                                     ; preds = %._crit_edge158, %vhost_map.exit.thread
  %.pre-phi = phi i32* [ %.pre159, %._crit_edge158 ], [ %703, %vhost_map.exit.thread ]
  %735 = phi %struct.httpd_server* [ %627, %._crit_edge158 ], [ %.pre157, %vhost_map.exit.thread ]
  %736 = load i8*, i8** %619, align 8, !tbaa !48
  %737 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %735, i64 0, i32 14
  %738 = load i32, i32* %737, align 8, !tbaa !132
  %739 = load i32, i32* %.pre-phi, align 4, !tbaa !83
  %740 = call fastcc i8* @expand_symlinks(i8* %736, i8** nonnull %pi, i32 %738, i32 %739)
  %741 = icmp eq i8* %740, null
  br i1 %741, label %742, label %744

; <label>:742                                     ; preds = %734
  %743 = load i8*, i8** %113, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 500, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89.170, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.90.171, i64 0, i64 0), i8* %743)
  br label %821

; <label>:744                                     ; preds = %734
  %745 = call i64 @strlen(i8* nonnull %740) #13
  call void @httpd_realloc_str(i8** nonnull %619, i64* nonnull %620, i64 %745)
  %746 = load i8*, i8** %619, align 8, !tbaa !48
  %747 = call i8* @strcpy(i8* %746, i8* nonnull %740) #6
  %748 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 18
  %749 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 37
  %750 = load i8*, i8** %pi, align 8, !tbaa !4
  %751 = call i64 @strlen(i8* %750) #13
  call void @httpd_realloc_str(i8** %748, i64* %749, i64 %751)
  %752 = load i8*, i8** %748, align 8, !tbaa !113
  %753 = call i8* @strcpy(i8* %752, i8* %750) #6
  %754 = load i8*, i8** %748, align 8, !tbaa !113
  %755 = load i8, i8* %754, align 1, !tbaa !1
  %756 = icmp eq i8 %755, 0
  br i1 %756, label %772, label %757

; <label>:757                                     ; preds = %744
  %758 = load i8*, i8** %163, align 8, !tbaa !111
  %759 = call i64 @strlen(i8* %758) #13
  %760 = call i64 @strlen(i8* %754) #13
  %761 = sub i64 %759, %760
  %762 = trunc i64 %761 to i32
  %763 = icmp sgt i32 %762, 0
  br i1 %763, label %764, label %772

; <label>:764                                     ; preds = %757
  %sext = shl i64 %761, 32
  %765 = ashr exact i64 %sext, 32
  %766 = getelementptr inbounds i8, i8* %758, i64 %765
  %767 = call i32 @strcmp(i8* %766, i8* %754) #6
  %768 = icmp eq i32 %767, 0
  br i1 %768, label %769, label %772

; <label>:769                                     ; preds = %764
  %sext49 = add i64 %sext, -4294967296
  %770 = ashr exact i64 %sext49, 32
  %771 = getelementptr inbounds i8, i8* %758, i64 %770
  store i8 0, i8* %771, align 1, !tbaa !1
  br label %772

; <label>:772                                     ; preds = %757, %764, %769, %744
  %773 = load i8*, i8** %619, align 8, !tbaa !48
  %774 = load i8, i8* %773, align 1, !tbaa !1
  %775 = icmp eq i8 %774, 47
  br i1 %775, label %776, label %821

; <label>:776                                     ; preds = %772
  %777 = load %struct.httpd_server*, %struct.httpd_server** %626, align 8, !tbaa !79
  %778 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %777, i64 0, i32 9
  %779 = load i8*, i8** %778, align 8, !tbaa !120
  %780 = call i64 @strlen(i8* %779) #13
  %781 = call i32 @strncmp(i8* %773, i8* %779, i64 %780) #13
  %782 = icmp eq i32 %781, 0
  br i1 %782, label %783, label %787

; <label>:783                                     ; preds = %776
  %784 = getelementptr inbounds i8, i8* %773, i64 %780
  %785 = call i64 @strlen(i8* %784) #13
  %786 = add i64 %785, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %773, i8* %784, i64 %786, i32 1, i1 false)
  br label %821

; <label>:787                                     ; preds = %776
  %788 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %789 = bitcast %union.httpd_sockaddr* %788 to %struct.sockaddr*
  %790 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %788, i64 0, i32 0, i32 0
  %791 = load i16, i16* %790, align 8, !tbaa !88
  %switch.selectcmp.i.i10 = icmp eq i16 %791, 10
  %switch.selectcmp1.i.i11 = icmp eq i16 %791, 2
  %792 = select i1 %switch.selectcmp.i.i10, i32 28, i32 0
  %793 = select i1 %switch.selectcmp1.i.i11, i32 16, i32 %792
  %794 = call i32 @getnameinfo(%struct.sockaddr* %789, i32 %793, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %795 = icmp eq i32 %794, 0
  br i1 %795, label %797, label %796

; <label>:796                                     ; preds = %787
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit13

; <label>:797                                     ; preds = %787
  %798 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2, i32 0, i32 1
  %799 = bitcast i64* %798 to i32*
  %800 = load i32, i32* %799, align 4, !tbaa !8
  %801 = icmp eq i32 %800, 0
  br i1 %801, label %802, label %httpd_ntoa.exit13

; <label>:802                                     ; preds = %797
  %803 = bitcast i64* %798 to [4 x i32]*
  %804 = getelementptr inbounds [4 x i32], [4 x i32]* %803, i64 0, i64 1
  %805 = load i32, i32* %804, align 4, !tbaa !8
  %806 = icmp eq i32 %805, 0
  br i1 %806, label %807, label %httpd_ntoa.exit13

; <label>:807                                     ; preds = %802
  %808 = getelementptr inbounds i64, i64* %798, i64 1
  %809 = bitcast i64* %808 to i32*
  %810 = load i32, i32* %809, align 4, !tbaa !8
  %811 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %812 = icmp eq i32 %810, %811
  br i1 %812, label %813, label %httpd_ntoa.exit13

; <label>:813                                     ; preds = %807
  %814 = call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %815 = icmp eq i32 %814, 0
  br i1 %815, label %816, label %httpd_ntoa.exit13

; <label>:816                                     ; preds = %813
  %817 = call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %818 = add i64 %817, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %818, i32 1, i1 false) #6
  br label %httpd_ntoa.exit13

httpd_ntoa.exit13:                                ; preds = %796, %797, %802, %807, %813, %816
  %819 = load i8*, i8** %113, align 8, !tbaa !53
  call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([44 x i8], [44 x i8]* @.str.55, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* %819) #6
  %820 = load i8*, i8** %113, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 403, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94.175, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([95 x i8], [95 x i8]* @.str.56, i64 0, i64 0), i8* %820)
  br label %821

; <label>:821                                     ; preds = %772, %783, %httpd_ntoa.exit13, %742, %732, %609, %392, %277, %111, %93, %83, %74, %67, %33
  %.0 = phi i32 [ -1, %33 ], [ -1, %74 ], [ -1, %83 ], [ -1, %93 ], [ -1, %277 ], [ -1, %609 ], [ -1, %742 ], [ -1, %httpd_ntoa.exit13 ], [ -1, %732 ], [ -1, %392 ], [ -1, %111 ], [ -1, %67 ], [ 0, %783 ], [ 0, %772 ]
  call void @llvm.lifetime.end(i64 8, i8* %1) #6
  ret i32 %.0
}

; Function Attrs: nounwind readonly
declare i8* @strpbrk(i8*, i8* nocapture) #0

; Function Attrs: nounwind readonly
declare i32 @strcasecmp(i8* nocapture, i8* nocapture) #0

; Function Attrs: nounwind readonly
declare i32 @strncasecmp(i8* nocapture, i8* nocapture, i64) #0

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8* nocapture readonly) #2

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() #9

; Function Attrs: nounwind
declare i8* @strcat(i8*, i8* nocapture readonly) #2

; Function Attrs: nounwind uwtable
define i64 @tdate_parse(i8* nocapture readonly %str) #8 {
  %str_mon = alloca [500 x i8], align 16
  %str_wday = alloca [500 x i8], align 16
  %tm_sec = alloca i32, align 4
  %tm_min = alloca i32, align 4
  %tm_hour = alloca i32, align 4
  %tm_mday = alloca i32, align 4
  %tm_year = alloca i32, align 4
  %1 = getelementptr inbounds [500 x i8], [500 x i8]* %str_mon, i64 0, i64 0
  call void @llvm.lifetime.start(i64 500, i8* %1) #6
  %2 = getelementptr inbounds [500 x i8], [500 x i8]* %str_wday, i64 0, i64 0
  call void @llvm.lifetime.start(i64 500, i8* %2) #6
  %3 = bitcast i32* %tm_sec to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #6
  %4 = bitcast i32* %tm_min to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #6
  %5 = bitcast i32* %tm_hour to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #6
  %6 = bitcast i32* %tm_mday to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #6
  %7 = bitcast i32* %tm_year to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #6
  br label %8

; <label>:8                                       ; preds = %.critedge, %0
  %cp.0 = phi i8* [ %str, %0 ], [ %10, %.critedge ]
  %9 = load i8, i8* %cp.0, align 1, !tbaa !1
  switch i8 %9, label %11 [
    i8 32, label %.critedge
    i8 9, label %.critedge
  ]

.critedge:                                        ; preds = %8, %8
  %10 = getelementptr inbounds i8, i8* %cp.0, i64 1
  br label %8

; <label>:11                                      ; preds = %8
  %cp.0.lcssa = phi i8* [ %cp.0, %8 ]
  %12 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %cp.0.lcssa, i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.602, i64 0, i64 0), i32* nonnull %tm_mday, i8* %1, i32* nonnull %tm_year, i32* nonnull %tm_hour, i32* nonnull %tm_min, i32* nonnull %tm_sec) #6
  %13 = icmp eq i32 %12, 6
  br i1 %13, label %14, label %scan_mon.exit.thread

; <label>:14                                      ; preds = %11
  %.b.i = load i1, i1* @scan_mon.sorted, align 1
  br i1 %.b.i, label %16, label %15

; <label>:15                                      ; preds = %14
  call void @qsort(i8* nonnull bitcast ([23 x %struct.iovec]* @scan_mon.mon_tab to i8*), i64 23, i64 16, i32 (i8*, i8*)* nonnull @strlong_compare) #6
  store i1 true, i1* @scan_mon.sorted, align 1
  br label %16

; <label>:16                                      ; preds = %15, %14
  %17 = load i8, i8* %1, align 16, !tbaa !1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %pound_case.exit68.preheader, label %.lr.ph.i63

.lr.ph.i63:                                       ; preds = %16
  %19 = tail call i16** @__ctype_b_loc() #21
  br label %20

; <label>:20                                      ; preds = %37, %.lr.ph.i63
  %.in.i64 = phi i8 [ %17, %.lr.ph.i63 ], [ %39, %37 ]
  %.01.i65 = phi i8* [ %1, %.lr.ph.i63 ], [ %38, %37 ]
  %21 = sext i8 %.in.i64 to i32
  %22 = sext i8 %.in.i64 to i64
  %23 = load i16*, i16** %19, align 8, !tbaa !4
  %24 = getelementptr inbounds i16, i16* %23, i64 %22
  %25 = load i16, i16* %24, align 2, !tbaa !6
  %26 = and i16 %25, 256
  %27 = icmp eq i16 %26, 0
  br i1 %27, label %37, label %28

; <label>:28                                      ; preds = %20
  %__c.off.i.i66 = add nsw i32 %21, 128
  %29 = icmp ult i32 %__c.off.i.i66, 384
  br i1 %29, label %30, label %tolower.exit.i67

; <label>:30                                      ; preds = %28
  %31 = tail call i32** @__ctype_tolower_loc() #21
  %32 = load i32*, i32** %31, align 8, !tbaa !4
  %33 = getelementptr inbounds i32, i32* %32, i64 %22
  %34 = load i32, i32* %33, align 4, !tbaa !8
  br label %tolower.exit.i67

tolower.exit.i67:                                 ; preds = %30, %28
  %35 = phi i32 [ %34, %30 ], [ %21, %28 ]
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %.01.i65, align 1, !tbaa !1
  br label %37

; <label>:37                                      ; preds = %tolower.exit.i67, %20
  %38 = getelementptr inbounds i8, i8* %.01.i65, i64 1
  %39 = load i8, i8* %38, align 1, !tbaa !1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %pound_case.exit68.preheader.loopexit, label %20

pound_case.exit68.preheader.loopexit:             ; preds = %37
  br label %pound_case.exit68.preheader

pound_case.exit68.preheader:                      ; preds = %pound_case.exit68.preheader.loopexit, %16
  br label %pound_case.exit68

pound_case.exit68:                                ; preds = %pound_case.exit68.preheader, %54
  %l.0.i.i = phi i32 [ %l.1.i.i, %54 ], [ 0, %pound_case.exit68.preheader ]
  %h.0.i.i = phi i32 [ %h.1.i.i, %54 ], [ 22, %pound_case.exit68.preheader ]
  %41 = add nsw i32 %h.0.i.i, %l.0.i.i
  %42 = sdiv i32 %41, 2
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [23 x %struct.iovec], [23 x %struct.iovec]* @scan_mon.mon_tab, i64 0, i64 %43, i32 0
  %45 = load i8*, i8** %44, align 16, !tbaa !161
  %46 = call i32 @strcmp(i8* %1, i8* %45) #6
  %47 = icmp slt i32 %46, 0
  br i1 %47, label %48, label %50

; <label>:48                                      ; preds = %pound_case.exit68
  %49 = add nsw i32 %42, -1
  br label %54

; <label>:50                                      ; preds = %pound_case.exit68
  %51 = icmp sgt i32 %46, 0
  br i1 %51, label %52, label %56

; <label>:52                                      ; preds = %50
  %53 = add nsw i32 %42, 1
  br label %54

; <label>:54                                      ; preds = %52, %48
  %l.1.i.i = phi i32 [ %l.0.i.i, %48 ], [ %53, %52 ]
  %h.1.i.i = phi i32 [ %49, %48 ], [ %h.0.i.i, %52 ]
  %55 = icmp slt i32 %h.1.i.i, %l.1.i.i
  br i1 %55, label %scan_mon.exit.thread.loopexit, label %pound_case.exit68

; <label>:56                                      ; preds = %50
  %.lcssa92 = phi i64 [ %43, %50 ]
  %57 = getelementptr inbounds [23 x %struct.iovec], [23 x %struct.iovec]* @scan_mon.mon_tab, i64 0, i64 %.lcssa92, i32 1
  br label %460

scan_mon.exit.thread.loopexit:                    ; preds = %54
  br label %scan_mon.exit.thread

scan_mon.exit.thread:                             ; preds = %scan_mon.exit.thread.loopexit, %11
  %58 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %cp.0.lcssa, i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1.626, i64 0, i64 0), i32* nonnull %tm_mday, i8* %1, i32* nonnull %tm_year, i32* nonnull %tm_hour, i32* nonnull %tm_min, i32* nonnull %tm_sec) #6
  %59 = icmp eq i32 %58, 6
  br i1 %59, label %60, label %scan_mon.exit7.thread

; <label>:60                                      ; preds = %scan_mon.exit.thread
  %.b.i1 = load i1, i1* @scan_mon.sorted, align 1
  br i1 %.b.i1, label %62, label %61

; <label>:61                                      ; preds = %60
  call void @qsort(i8* nonnull bitcast ([23 x %struct.iovec]* @scan_mon.mon_tab to i8*), i64 23, i64 16, i32 (i8*, i8*)* nonnull @strlong_compare) #6
  store i1 true, i1* @scan_mon.sorted, align 1
  br label %62

; <label>:62                                      ; preds = %61, %60
  %63 = load i8, i8* %1, align 16, !tbaa !1
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %pound_case.exit74.preheader, label %.lr.ph.i69

.lr.ph.i69:                                       ; preds = %62
  %65 = tail call i16** @__ctype_b_loc() #21
  br label %66

; <label>:66                                      ; preds = %83, %.lr.ph.i69
  %.in.i70 = phi i8 [ %63, %.lr.ph.i69 ], [ %85, %83 ]
  %.01.i71 = phi i8* [ %1, %.lr.ph.i69 ], [ %84, %83 ]
  %67 = sext i8 %.in.i70 to i32
  %68 = sext i8 %.in.i70 to i64
  %69 = load i16*, i16** %65, align 8, !tbaa !4
  %70 = getelementptr inbounds i16, i16* %69, i64 %68
  %71 = load i16, i16* %70, align 2, !tbaa !6
  %72 = and i16 %71, 256
  %73 = icmp eq i16 %72, 0
  br i1 %73, label %83, label %74

; <label>:74                                      ; preds = %66
  %__c.off.i.i72 = add nsw i32 %67, 128
  %75 = icmp ult i32 %__c.off.i.i72, 384
  br i1 %75, label %76, label %tolower.exit.i73

; <label>:76                                      ; preds = %74
  %77 = tail call i32** @__ctype_tolower_loc() #21
  %78 = load i32*, i32** %77, align 8, !tbaa !4
  %79 = getelementptr inbounds i32, i32* %78, i64 %68
  %80 = load i32, i32* %79, align 4, !tbaa !8
  br label %tolower.exit.i73

tolower.exit.i73:                                 ; preds = %76, %74
  %81 = phi i32 [ %80, %76 ], [ %67, %74 ]
  %82 = trunc i32 %81 to i8
  store i8 %82, i8* %.01.i71, align 1, !tbaa !1
  br label %83

; <label>:83                                      ; preds = %tolower.exit.i73, %66
  %84 = getelementptr inbounds i8, i8* %.01.i71, i64 1
  %85 = load i8, i8* %84, align 1, !tbaa !1
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %pound_case.exit74.preheader.loopexit, label %66

pound_case.exit74.preheader.loopexit:             ; preds = %83
  br label %pound_case.exit74.preheader

pound_case.exit74.preheader:                      ; preds = %pound_case.exit74.preheader.loopexit, %62
  br label %pound_case.exit74

pound_case.exit74:                                ; preds = %pound_case.exit74.preheader, %100
  %l.0.i.i2 = phi i32 [ %l.1.i.i4, %100 ], [ 0, %pound_case.exit74.preheader ]
  %h.0.i.i3 = phi i32 [ %h.1.i.i5, %100 ], [ 22, %pound_case.exit74.preheader ]
  %87 = add nsw i32 %h.0.i.i3, %l.0.i.i2
  %88 = sdiv i32 %87, 2
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [23 x %struct.iovec], [23 x %struct.iovec]* @scan_mon.mon_tab, i64 0, i64 %89, i32 0
  %91 = load i8*, i8** %90, align 16, !tbaa !161
  %92 = call i32 @strcmp(i8* %1, i8* %91) #6
  %93 = icmp slt i32 %92, 0
  br i1 %93, label %94, label %96

; <label>:94                                      ; preds = %pound_case.exit74
  %95 = add nsw i32 %88, -1
  br label %100

; <label>:96                                      ; preds = %pound_case.exit74
  %97 = icmp sgt i32 %92, 0
  br i1 %97, label %98, label %102

; <label>:98                                      ; preds = %96
  %99 = add nsw i32 %88, 1
  br label %100

; <label>:100                                     ; preds = %98, %94
  %l.1.i.i4 = phi i32 [ %l.0.i.i2, %94 ], [ %99, %98 ]
  %h.1.i.i5 = phi i32 [ %95, %94 ], [ %h.0.i.i3, %98 ]
  %101 = icmp slt i32 %h.1.i.i5, %l.1.i.i4
  br i1 %101, label %scan_mon.exit7.thread.loopexit, label %pound_case.exit74

; <label>:102                                     ; preds = %96
  %.lcssa90 = phi i64 [ %89, %96 ]
  %103 = getelementptr inbounds [23 x %struct.iovec], [23 x %struct.iovec]* @scan_mon.mon_tab, i64 0, i64 %.lcssa90, i32 1
  br label %460

scan_mon.exit7.thread.loopexit:                   ; preds = %100
  br label %scan_mon.exit7.thread

scan_mon.exit7.thread:                            ; preds = %scan_mon.exit7.thread.loopexit, %scan_mon.exit.thread
  %104 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %cp.0.lcssa, i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2.627, i64 0, i64 0), i32* nonnull %tm_hour, i32* nonnull %tm_min, i32* nonnull %tm_sec, i32* nonnull %tm_mday, i8* %1, i32* nonnull %tm_year) #6
  %105 = icmp eq i32 %104, 6
  br i1 %105, label %106, label %scan_mon.exit14.thread

; <label>:106                                     ; preds = %scan_mon.exit7.thread
  %.b.i8 = load i1, i1* @scan_mon.sorted, align 1
  br i1 %.b.i8, label %108, label %107

; <label>:107                                     ; preds = %106
  call void @qsort(i8* nonnull bitcast ([23 x %struct.iovec]* @scan_mon.mon_tab to i8*), i64 23, i64 16, i32 (i8*, i8*)* nonnull @strlong_compare) #6
  store i1 true, i1* @scan_mon.sorted, align 1
  br label %108

; <label>:108                                     ; preds = %107, %106
  %109 = load i8, i8* %1, align 16, !tbaa !1
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %pound_case.exit80.preheader, label %.lr.ph.i75

.lr.ph.i75:                                       ; preds = %108
  %111 = tail call i16** @__ctype_b_loc() #21
  br label %112

; <label>:112                                     ; preds = %129, %.lr.ph.i75
  %.in.i76 = phi i8 [ %109, %.lr.ph.i75 ], [ %131, %129 ]
  %.01.i77 = phi i8* [ %1, %.lr.ph.i75 ], [ %130, %129 ]
  %113 = sext i8 %.in.i76 to i32
  %114 = sext i8 %.in.i76 to i64
  %115 = load i16*, i16** %111, align 8, !tbaa !4
  %116 = getelementptr inbounds i16, i16* %115, i64 %114
  %117 = load i16, i16* %116, align 2, !tbaa !6
  %118 = and i16 %117, 256
  %119 = icmp eq i16 %118, 0
  br i1 %119, label %129, label %120

; <label>:120                                     ; preds = %112
  %__c.off.i.i78 = add nsw i32 %113, 128
  %121 = icmp ult i32 %__c.off.i.i78, 384
  br i1 %121, label %122, label %tolower.exit.i79

; <label>:122                                     ; preds = %120
  %123 = tail call i32** @__ctype_tolower_loc() #21
  %124 = load i32*, i32** %123, align 8, !tbaa !4
  %125 = getelementptr inbounds i32, i32* %124, i64 %114
  %126 = load i32, i32* %125, align 4, !tbaa !8
  br label %tolower.exit.i79

tolower.exit.i79:                                 ; preds = %122, %120
  %127 = phi i32 [ %126, %122 ], [ %113, %120 ]
  %128 = trunc i32 %127 to i8
  store i8 %128, i8* %.01.i77, align 1, !tbaa !1
  br label %129

; <label>:129                                     ; preds = %tolower.exit.i79, %112
  %130 = getelementptr inbounds i8, i8* %.01.i77, i64 1
  %131 = load i8, i8* %130, align 1, !tbaa !1
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %pound_case.exit80.preheader.loopexit, label %112

pound_case.exit80.preheader.loopexit:             ; preds = %129
  br label %pound_case.exit80.preheader

pound_case.exit80.preheader:                      ; preds = %pound_case.exit80.preheader.loopexit, %108
  br label %pound_case.exit80

pound_case.exit80:                                ; preds = %pound_case.exit80.preheader, %146
  %l.0.i.i9 = phi i32 [ %l.1.i.i11, %146 ], [ 0, %pound_case.exit80.preheader ]
  %h.0.i.i10 = phi i32 [ %h.1.i.i12, %146 ], [ 22, %pound_case.exit80.preheader ]
  %133 = add nsw i32 %h.0.i.i10, %l.0.i.i9
  %134 = sdiv i32 %133, 2
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds [23 x %struct.iovec], [23 x %struct.iovec]* @scan_mon.mon_tab, i64 0, i64 %135, i32 0
  %137 = load i8*, i8** %136, align 16, !tbaa !161
  %138 = call i32 @strcmp(i8* %1, i8* %137) #6
  %139 = icmp slt i32 %138, 0
  br i1 %139, label %140, label %142

; <label>:140                                     ; preds = %pound_case.exit80
  %141 = add nsw i32 %134, -1
  br label %146

; <label>:142                                     ; preds = %pound_case.exit80
  %143 = icmp sgt i32 %138, 0
  br i1 %143, label %144, label %148

; <label>:144                                     ; preds = %142
  %145 = add nsw i32 %134, 1
  br label %146

; <label>:146                                     ; preds = %144, %140
  %l.1.i.i11 = phi i32 [ %l.0.i.i9, %140 ], [ %145, %144 ]
  %h.1.i.i12 = phi i32 [ %141, %140 ], [ %h.0.i.i10, %144 ]
  %147 = icmp slt i32 %h.1.i.i12, %l.1.i.i11
  br i1 %147, label %scan_mon.exit14.thread.loopexit, label %pound_case.exit80

; <label>:148                                     ; preds = %142
  %.lcssa88 = phi i64 [ %135, %142 ]
  %149 = getelementptr inbounds [23 x %struct.iovec], [23 x %struct.iovec]* @scan_mon.mon_tab, i64 0, i64 %.lcssa88, i32 1
  br label %460

scan_mon.exit14.thread.loopexit:                  ; preds = %146
  br label %scan_mon.exit14.thread

scan_mon.exit14.thread:                           ; preds = %scan_mon.exit14.thread.loopexit, %scan_mon.exit7.thread
  %150 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %cp.0.lcssa, i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3.628, i64 0, i64 0), i32* nonnull %tm_hour, i32* nonnull %tm_min, i32* nonnull %tm_sec, i32* nonnull %tm_mday, i8* %1, i32* nonnull %tm_year) #6
  %151 = icmp eq i32 %150, 6
  br i1 %151, label %152, label %scan_mon.exit21.thread

; <label>:152                                     ; preds = %scan_mon.exit14.thread
  %.b.i15 = load i1, i1* @scan_mon.sorted, align 1
  br i1 %.b.i15, label %154, label %153

; <label>:153                                     ; preds = %152
  call void @qsort(i8* nonnull bitcast ([23 x %struct.iovec]* @scan_mon.mon_tab to i8*), i64 23, i64 16, i32 (i8*, i8*)* nonnull @strlong_compare) #6
  store i1 true, i1* @scan_mon.sorted, align 1
  br label %154

; <label>:154                                     ; preds = %153, %152
  %155 = load i8, i8* %1, align 16, !tbaa !1
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %pound_case.exit86.preheader, label %.lr.ph.i81

.lr.ph.i81:                                       ; preds = %154
  %157 = tail call i16** @__ctype_b_loc() #21
  br label %158

; <label>:158                                     ; preds = %175, %.lr.ph.i81
  %.in.i82 = phi i8 [ %155, %.lr.ph.i81 ], [ %177, %175 ]
  %.01.i83 = phi i8* [ %1, %.lr.ph.i81 ], [ %176, %175 ]
  %159 = sext i8 %.in.i82 to i32
  %160 = sext i8 %.in.i82 to i64
  %161 = load i16*, i16** %157, align 8, !tbaa !4
  %162 = getelementptr inbounds i16, i16* %161, i64 %160
  %163 = load i16, i16* %162, align 2, !tbaa !6
  %164 = and i16 %163, 256
  %165 = icmp eq i16 %164, 0
  br i1 %165, label %175, label %166

; <label>:166                                     ; preds = %158
  %__c.off.i.i84 = add nsw i32 %159, 128
  %167 = icmp ult i32 %__c.off.i.i84, 384
  br i1 %167, label %168, label %tolower.exit.i85

; <label>:168                                     ; preds = %166
  %169 = tail call i32** @__ctype_tolower_loc() #21
  %170 = load i32*, i32** %169, align 8, !tbaa !4
  %171 = getelementptr inbounds i32, i32* %170, i64 %160
  %172 = load i32, i32* %171, align 4, !tbaa !8
  br label %tolower.exit.i85

tolower.exit.i85:                                 ; preds = %168, %166
  %173 = phi i32 [ %172, %168 ], [ %159, %166 ]
  %174 = trunc i32 %173 to i8
  store i8 %174, i8* %.01.i83, align 1, !tbaa !1
  br label %175

; <label>:175                                     ; preds = %tolower.exit.i85, %158
  %176 = getelementptr inbounds i8, i8* %.01.i83, i64 1
  %177 = load i8, i8* %176, align 1, !tbaa !1
  %178 = icmp eq i8 %177, 0
  br i1 %178, label %pound_case.exit86.preheader.loopexit, label %158

pound_case.exit86.preheader.loopexit:             ; preds = %175
  br label %pound_case.exit86.preheader

pound_case.exit86.preheader:                      ; preds = %pound_case.exit86.preheader.loopexit, %154
  br label %pound_case.exit86

pound_case.exit86:                                ; preds = %pound_case.exit86.preheader, %192
  %l.0.i.i16 = phi i32 [ %l.1.i.i18, %192 ], [ 0, %pound_case.exit86.preheader ]
  %h.0.i.i17 = phi i32 [ %h.1.i.i19, %192 ], [ 22, %pound_case.exit86.preheader ]
  %179 = add nsw i32 %h.0.i.i17, %l.0.i.i16
  %180 = sdiv i32 %179, 2
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds [23 x %struct.iovec], [23 x %struct.iovec]* @scan_mon.mon_tab, i64 0, i64 %181, i32 0
  %183 = load i8*, i8** %182, align 16, !tbaa !161
  %184 = call i32 @strcmp(i8* %1, i8* %183) #6
  %185 = icmp slt i32 %184, 0
  br i1 %185, label %186, label %188

; <label>:186                                     ; preds = %pound_case.exit86
  %187 = add nsw i32 %180, -1
  br label %192

; <label>:188                                     ; preds = %pound_case.exit86
  %189 = icmp sgt i32 %184, 0
  br i1 %189, label %190, label %194

; <label>:190                                     ; preds = %188
  %191 = add nsw i32 %180, 1
  br label %192

; <label>:192                                     ; preds = %190, %186
  %l.1.i.i18 = phi i32 [ %l.0.i.i16, %186 ], [ %191, %190 ]
  %h.1.i.i19 = phi i32 [ %187, %186 ], [ %h.0.i.i17, %190 ]
  %193 = icmp slt i32 %h.1.i.i19, %l.1.i.i18
  br i1 %193, label %scan_mon.exit21.thread.loopexit, label %pound_case.exit86

; <label>:194                                     ; preds = %188
  %.lcssa86 = phi i64 [ %181, %188 ]
  %195 = getelementptr inbounds [23 x %struct.iovec], [23 x %struct.iovec]* @scan_mon.mon_tab, i64 0, i64 %.lcssa86, i32 1
  br label %460

scan_mon.exit21.thread.loopexit:                  ; preds = %192
  br label %scan_mon.exit21.thread

scan_mon.exit21.thread:                           ; preds = %scan_mon.exit21.thread.loopexit, %scan_mon.exit14.thread
  %196 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %cp.0.lcssa, i8* nonnull getelementptr inbounds ([46 x i8], [46 x i8]* @.str.4.629, i64 0, i64 0), i8* %2, i32* nonnull %tm_mday, i8* %1, i32* nonnull %tm_year, i32* nonnull %tm_hour, i32* nonnull %tm_min, i32* nonnull %tm_sec) #6
  %197 = icmp eq i32 %196, 7
  br i1 %197, label %198, label %scan_wday.exit.thread

; <label>:198                                     ; preds = %scan_mon.exit21.thread
  %.b.i22 = load i1, i1* @scan_wday.sorted, align 1
  br i1 %.b.i22, label %200, label %199

; <label>:199                                     ; preds = %198
  call void @qsort(i8* nonnull bitcast ([14 x %struct.iovec]* @scan_wday.wday_tab to i8*), i64 14, i64 16, i32 (i8*, i8*)* nonnull @strlong_compare) #6
  store i1 true, i1* @scan_wday.sorted, align 1
  br label %200

; <label>:200                                     ; preds = %199, %198
  %201 = load i8, i8* %2, align 16, !tbaa !1
  %202 = icmp eq i8 %201, 0
  br i1 %202, label %pound_case.exit92.preheader, label %.lr.ph.i87

.lr.ph.i87:                                       ; preds = %200
  %203 = tail call i16** @__ctype_b_loc() #21
  br label %204

; <label>:204                                     ; preds = %221, %.lr.ph.i87
  %.in.i88 = phi i8 [ %201, %.lr.ph.i87 ], [ %223, %221 ]
  %.01.i89 = phi i8* [ %2, %.lr.ph.i87 ], [ %222, %221 ]
  %205 = sext i8 %.in.i88 to i32
  %206 = sext i8 %.in.i88 to i64
  %207 = load i16*, i16** %203, align 8, !tbaa !4
  %208 = getelementptr inbounds i16, i16* %207, i64 %206
  %209 = load i16, i16* %208, align 2, !tbaa !6
  %210 = and i16 %209, 256
  %211 = icmp eq i16 %210, 0
  br i1 %211, label %221, label %212

; <label>:212                                     ; preds = %204
  %__c.off.i.i90 = add nsw i32 %205, 128
  %213 = icmp ult i32 %__c.off.i.i90, 384
  br i1 %213, label %214, label %tolower.exit.i91

; <label>:214                                     ; preds = %212
  %215 = tail call i32** @__ctype_tolower_loc() #21
  %216 = load i32*, i32** %215, align 8, !tbaa !4
  %217 = getelementptr inbounds i32, i32* %216, i64 %206
  %218 = load i32, i32* %217, align 4, !tbaa !8
  br label %tolower.exit.i91

tolower.exit.i91:                                 ; preds = %214, %212
  %219 = phi i32 [ %218, %214 ], [ %205, %212 ]
  %220 = trunc i32 %219 to i8
  store i8 %220, i8* %.01.i89, align 1, !tbaa !1
  br label %221

; <label>:221                                     ; preds = %tolower.exit.i91, %204
  %222 = getelementptr inbounds i8, i8* %.01.i89, i64 1
  %223 = load i8, i8* %222, align 1, !tbaa !1
  %224 = icmp eq i8 %223, 0
  br i1 %224, label %pound_case.exit92.preheader.loopexit, label %204

pound_case.exit92.preheader.loopexit:             ; preds = %221
  br label %pound_case.exit92.preheader

pound_case.exit92.preheader:                      ; preds = %pound_case.exit92.preheader.loopexit, %200
  br label %pound_case.exit92

pound_case.exit92:                                ; preds = %pound_case.exit92.preheader, %238
  %l.0.i.i23 = phi i32 [ %l.1.i.i25, %238 ], [ 0, %pound_case.exit92.preheader ]
  %h.0.i.i24 = phi i32 [ %h.1.i.i26, %238 ], [ 13, %pound_case.exit92.preheader ]
  %225 = add nsw i32 %h.0.i.i24, %l.0.i.i23
  %226 = sdiv i32 %225, 2
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds [14 x %struct.iovec], [14 x %struct.iovec]* @scan_wday.wday_tab, i64 0, i64 %227, i32 0
  %229 = load i8*, i8** %228, align 16, !tbaa !161
  %230 = call i32 @strcmp(i8* %2, i8* %229) #6
  %231 = icmp slt i32 %230, 0
  br i1 %231, label %232, label %234

; <label>:232                                     ; preds = %pound_case.exit92
  %233 = add nsw i32 %226, -1
  br label %238

; <label>:234                                     ; preds = %pound_case.exit92
  %235 = icmp sgt i32 %230, 0
  br i1 %235, label %236, label %240

; <label>:236                                     ; preds = %234
  %237 = add nsw i32 %226, 1
  br label %238

; <label>:238                                     ; preds = %236, %232
  %l.1.i.i25 = phi i32 [ %l.0.i.i23, %232 ], [ %237, %236 ]
  %h.1.i.i26 = phi i32 [ %233, %232 ], [ %h.0.i.i24, %236 ]
  %239 = icmp slt i32 %h.1.i.i26, %l.1.i.i25
  br i1 %239, label %scan_wday.exit.thread.loopexit67, label %pound_case.exit92

; <label>:240                                     ; preds = %234
  %.b.i28 = load i1, i1* @scan_mon.sorted, align 1
  br i1 %.b.i28, label %242, label %241

; <label>:241                                     ; preds = %240
  call void @qsort(i8* nonnull bitcast ([23 x %struct.iovec]* @scan_mon.mon_tab to i8*), i64 23, i64 16, i32 (i8*, i8*)* nonnull @strlong_compare) #6
  store i1 true, i1* @scan_mon.sorted, align 1
  br label %242

; <label>:242                                     ; preds = %241, %240
  %243 = load i8, i8* %1, align 16, !tbaa !1
  %244 = icmp eq i8 %243, 0
  br i1 %244, label %pound_case.exit98.preheader, label %.lr.ph.i93

.lr.ph.i93:                                       ; preds = %242
  %245 = tail call i16** @__ctype_b_loc() #21
  br label %246

; <label>:246                                     ; preds = %263, %.lr.ph.i93
  %.in.i94 = phi i8 [ %243, %.lr.ph.i93 ], [ %265, %263 ]
  %.01.i95 = phi i8* [ %1, %.lr.ph.i93 ], [ %264, %263 ]
  %247 = sext i8 %.in.i94 to i32
  %248 = sext i8 %.in.i94 to i64
  %249 = load i16*, i16** %245, align 8, !tbaa !4
  %250 = getelementptr inbounds i16, i16* %249, i64 %248
  %251 = load i16, i16* %250, align 2, !tbaa !6
  %252 = and i16 %251, 256
  %253 = icmp eq i16 %252, 0
  br i1 %253, label %263, label %254

; <label>:254                                     ; preds = %246
  %__c.off.i.i96 = add nsw i32 %247, 128
  %255 = icmp ult i32 %__c.off.i.i96, 384
  br i1 %255, label %256, label %tolower.exit.i97

; <label>:256                                     ; preds = %254
  %257 = tail call i32** @__ctype_tolower_loc() #21
  %258 = load i32*, i32** %257, align 8, !tbaa !4
  %259 = getelementptr inbounds i32, i32* %258, i64 %248
  %260 = load i32, i32* %259, align 4, !tbaa !8
  br label %tolower.exit.i97

tolower.exit.i97:                                 ; preds = %256, %254
  %261 = phi i32 [ %260, %256 ], [ %247, %254 ]
  %262 = trunc i32 %261 to i8
  store i8 %262, i8* %.01.i95, align 1, !tbaa !1
  br label %263

; <label>:263                                     ; preds = %tolower.exit.i97, %246
  %264 = getelementptr inbounds i8, i8* %.01.i95, i64 1
  %265 = load i8, i8* %264, align 1, !tbaa !1
  %266 = icmp eq i8 %265, 0
  br i1 %266, label %pound_case.exit98.preheader.loopexit, label %246

pound_case.exit98.preheader.loopexit:             ; preds = %263
  br label %pound_case.exit98.preheader

pound_case.exit98.preheader:                      ; preds = %pound_case.exit98.preheader.loopexit, %242
  br label %pound_case.exit98

pound_case.exit98:                                ; preds = %pound_case.exit98.preheader, %280
  %l.0.i.i29 = phi i32 [ %l.1.i.i31, %280 ], [ 0, %pound_case.exit98.preheader ]
  %h.0.i.i30 = phi i32 [ %h.1.i.i32, %280 ], [ 22, %pound_case.exit98.preheader ]
  %267 = add nsw i32 %h.0.i.i30, %l.0.i.i29
  %268 = sdiv i32 %267, 2
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds [23 x %struct.iovec], [23 x %struct.iovec]* @scan_mon.mon_tab, i64 0, i64 %269, i32 0
  %271 = load i8*, i8** %270, align 16, !tbaa !161
  %272 = call i32 @strcmp(i8* %1, i8* %271) #6
  %273 = icmp slt i32 %272, 0
  br i1 %273, label %274, label %276

; <label>:274                                     ; preds = %pound_case.exit98
  %275 = add nsw i32 %268, -1
  br label %280

; <label>:276                                     ; preds = %pound_case.exit98
  %277 = icmp sgt i32 %272, 0
  br i1 %277, label %278, label %282

; <label>:278                                     ; preds = %276
  %279 = add nsw i32 %268, 1
  br label %280

; <label>:280                                     ; preds = %278, %274
  %l.1.i.i31 = phi i32 [ %l.0.i.i29, %274 ], [ %279, %278 ]
  %h.1.i.i32 = phi i32 [ %275, %274 ], [ %h.0.i.i30, %278 ]
  %281 = icmp slt i32 %h.1.i.i32, %l.1.i.i31
  br i1 %281, label %scan_wday.exit.thread.loopexit, label %pound_case.exit98

; <label>:282                                     ; preds = %276
  %.lcssa84 = phi i64 [ %269, %276 ]
  %283 = getelementptr inbounds [23 x %struct.iovec], [23 x %struct.iovec]* @scan_mon.mon_tab, i64 0, i64 %.lcssa84, i32 1
  br label %460

scan_wday.exit.thread.loopexit:                   ; preds = %280
  br label %scan_wday.exit.thread

scan_wday.exit.thread.loopexit67:                 ; preds = %238
  br label %scan_wday.exit.thread

scan_wday.exit.thread:                            ; preds = %scan_wday.exit.thread.loopexit67, %scan_wday.exit.thread.loopexit, %scan_mon.exit21.thread
  %284 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %cp.0.lcssa, i8* nonnull getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5.644, i64 0, i64 0), i8* %2, i32* nonnull %tm_mday, i8* %1, i32* nonnull %tm_year, i32* nonnull %tm_hour, i32* nonnull %tm_min, i32* nonnull %tm_sec) #6
  %285 = icmp eq i32 %284, 7
  br i1 %285, label %286, label %scan_wday.exit41.thread

; <label>:286                                     ; preds = %scan_wday.exit.thread
  %.b.i35 = load i1, i1* @scan_wday.sorted, align 1
  br i1 %.b.i35, label %288, label %287

; <label>:287                                     ; preds = %286
  call void @qsort(i8* nonnull bitcast ([14 x %struct.iovec]* @scan_wday.wday_tab to i8*), i64 14, i64 16, i32 (i8*, i8*)* nonnull @strlong_compare) #6
  store i1 true, i1* @scan_wday.sorted, align 1
  br label %288

; <label>:288                                     ; preds = %287, %286
  %289 = load i8, i8* %2, align 16, !tbaa !1
  %290 = icmp eq i8 %289, 0
  br i1 %290, label %pound_case.exit104.preheader, label %.lr.ph.i99

.lr.ph.i99:                                       ; preds = %288
  %291 = tail call i16** @__ctype_b_loc() #21
  br label %292

; <label>:292                                     ; preds = %309, %.lr.ph.i99
  %.in.i100 = phi i8 [ %289, %.lr.ph.i99 ], [ %311, %309 ]
  %.01.i101 = phi i8* [ %2, %.lr.ph.i99 ], [ %310, %309 ]
  %293 = sext i8 %.in.i100 to i32
  %294 = sext i8 %.in.i100 to i64
  %295 = load i16*, i16** %291, align 8, !tbaa !4
  %296 = getelementptr inbounds i16, i16* %295, i64 %294
  %297 = load i16, i16* %296, align 2, !tbaa !6
  %298 = and i16 %297, 256
  %299 = icmp eq i16 %298, 0
  br i1 %299, label %309, label %300

; <label>:300                                     ; preds = %292
  %__c.off.i.i102 = add nsw i32 %293, 128
  %301 = icmp ult i32 %__c.off.i.i102, 384
  br i1 %301, label %302, label %tolower.exit.i103

; <label>:302                                     ; preds = %300
  %303 = tail call i32** @__ctype_tolower_loc() #21
  %304 = load i32*, i32** %303, align 8, !tbaa !4
  %305 = getelementptr inbounds i32, i32* %304, i64 %294
  %306 = load i32, i32* %305, align 4, !tbaa !8
  br label %tolower.exit.i103

tolower.exit.i103:                                ; preds = %302, %300
  %307 = phi i32 [ %306, %302 ], [ %293, %300 ]
  %308 = trunc i32 %307 to i8
  store i8 %308, i8* %.01.i101, align 1, !tbaa !1
  br label %309

; <label>:309                                     ; preds = %tolower.exit.i103, %292
  %310 = getelementptr inbounds i8, i8* %.01.i101, i64 1
  %311 = load i8, i8* %310, align 1, !tbaa !1
  %312 = icmp eq i8 %311, 0
  br i1 %312, label %pound_case.exit104.preheader.loopexit, label %292

pound_case.exit104.preheader.loopexit:            ; preds = %309
  br label %pound_case.exit104.preheader

pound_case.exit104.preheader:                     ; preds = %pound_case.exit104.preheader.loopexit, %288
  br label %pound_case.exit104

pound_case.exit104:                               ; preds = %pound_case.exit104.preheader, %326
  %l.0.i.i36 = phi i32 [ %l.1.i.i38, %326 ], [ 0, %pound_case.exit104.preheader ]
  %h.0.i.i37 = phi i32 [ %h.1.i.i39, %326 ], [ 13, %pound_case.exit104.preheader ]
  %313 = add nsw i32 %h.0.i.i37, %l.0.i.i36
  %314 = sdiv i32 %313, 2
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds [14 x %struct.iovec], [14 x %struct.iovec]* @scan_wday.wday_tab, i64 0, i64 %315, i32 0
  %317 = load i8*, i8** %316, align 16, !tbaa !161
  %318 = call i32 @strcmp(i8* %2, i8* %317) #6
  %319 = icmp slt i32 %318, 0
  br i1 %319, label %320, label %322

; <label>:320                                     ; preds = %pound_case.exit104
  %321 = add nsw i32 %314, -1
  br label %326

; <label>:322                                     ; preds = %pound_case.exit104
  %323 = icmp sgt i32 %318, 0
  br i1 %323, label %324, label %328

; <label>:324                                     ; preds = %322
  %325 = add nsw i32 %314, 1
  br label %326

; <label>:326                                     ; preds = %324, %320
  %l.1.i.i38 = phi i32 [ %l.0.i.i36, %320 ], [ %325, %324 ]
  %h.1.i.i39 = phi i32 [ %321, %320 ], [ %h.0.i.i37, %324 ]
  %327 = icmp slt i32 %h.1.i.i39, %l.1.i.i38
  br i1 %327, label %scan_wday.exit41.thread.loopexit66, label %pound_case.exit104

; <label>:328                                     ; preds = %322
  %.b.i42 = load i1, i1* @scan_mon.sorted, align 1
  br i1 %.b.i42, label %330, label %329

; <label>:329                                     ; preds = %328
  call void @qsort(i8* nonnull bitcast ([23 x %struct.iovec]* @scan_mon.mon_tab to i8*), i64 23, i64 16, i32 (i8*, i8*)* nonnull @strlong_compare) #6
  store i1 true, i1* @scan_mon.sorted, align 1
  br label %330

; <label>:330                                     ; preds = %329, %328
  %331 = load i8, i8* %1, align 16, !tbaa !1
  %332 = icmp eq i8 %331, 0
  br i1 %332, label %pound_case.exit110.preheader, label %.lr.ph.i105

.lr.ph.i105:                                      ; preds = %330
  %333 = tail call i16** @__ctype_b_loc() #21
  br label %334

; <label>:334                                     ; preds = %351, %.lr.ph.i105
  %.in.i106 = phi i8 [ %331, %.lr.ph.i105 ], [ %353, %351 ]
  %.01.i107 = phi i8* [ %1, %.lr.ph.i105 ], [ %352, %351 ]
  %335 = sext i8 %.in.i106 to i32
  %336 = sext i8 %.in.i106 to i64
  %337 = load i16*, i16** %333, align 8, !tbaa !4
  %338 = getelementptr inbounds i16, i16* %337, i64 %336
  %339 = load i16, i16* %338, align 2, !tbaa !6
  %340 = and i16 %339, 256
  %341 = icmp eq i16 %340, 0
  br i1 %341, label %351, label %342

; <label>:342                                     ; preds = %334
  %__c.off.i.i108 = add nsw i32 %335, 128
  %343 = icmp ult i32 %__c.off.i.i108, 384
  br i1 %343, label %344, label %tolower.exit.i109

; <label>:344                                     ; preds = %342
  %345 = tail call i32** @__ctype_tolower_loc() #21
  %346 = load i32*, i32** %345, align 8, !tbaa !4
  %347 = getelementptr inbounds i32, i32* %346, i64 %336
  %348 = load i32, i32* %347, align 4, !tbaa !8
  br label %tolower.exit.i109

tolower.exit.i109:                                ; preds = %344, %342
  %349 = phi i32 [ %348, %344 ], [ %335, %342 ]
  %350 = trunc i32 %349 to i8
  store i8 %350, i8* %.01.i107, align 1, !tbaa !1
  br label %351

; <label>:351                                     ; preds = %tolower.exit.i109, %334
  %352 = getelementptr inbounds i8, i8* %.01.i107, i64 1
  %353 = load i8, i8* %352, align 1, !tbaa !1
  %354 = icmp eq i8 %353, 0
  br i1 %354, label %pound_case.exit110.preheader.loopexit, label %334

pound_case.exit110.preheader.loopexit:            ; preds = %351
  br label %pound_case.exit110.preheader

pound_case.exit110.preheader:                     ; preds = %pound_case.exit110.preheader.loopexit, %330
  br label %pound_case.exit110

pound_case.exit110:                               ; preds = %pound_case.exit110.preheader, %368
  %l.0.i.i43 = phi i32 [ %l.1.i.i45, %368 ], [ 0, %pound_case.exit110.preheader ]
  %h.0.i.i44 = phi i32 [ %h.1.i.i46, %368 ], [ 22, %pound_case.exit110.preheader ]
  %355 = add nsw i32 %h.0.i.i44, %l.0.i.i43
  %356 = sdiv i32 %355, 2
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds [23 x %struct.iovec], [23 x %struct.iovec]* @scan_mon.mon_tab, i64 0, i64 %357, i32 0
  %359 = load i8*, i8** %358, align 16, !tbaa !161
  %360 = call i32 @strcmp(i8* %1, i8* %359) #6
  %361 = icmp slt i32 %360, 0
  br i1 %361, label %362, label %364

; <label>:362                                     ; preds = %pound_case.exit110
  %363 = add nsw i32 %356, -1
  br label %368

; <label>:364                                     ; preds = %pound_case.exit110
  %365 = icmp sgt i32 %360, 0
  br i1 %365, label %366, label %370

; <label>:366                                     ; preds = %364
  %367 = add nsw i32 %356, 1
  br label %368

; <label>:368                                     ; preds = %366, %362
  %l.1.i.i45 = phi i32 [ %l.0.i.i43, %362 ], [ %367, %366 ]
  %h.1.i.i46 = phi i32 [ %363, %362 ], [ %h.0.i.i44, %366 ]
  %369 = icmp slt i32 %h.1.i.i46, %l.1.i.i45
  br i1 %369, label %scan_wday.exit41.thread.loopexit, label %pound_case.exit110

; <label>:370                                     ; preds = %364
  %.lcssa82 = phi i64 [ %357, %364 ]
  %371 = getelementptr inbounds [23 x %struct.iovec], [23 x %struct.iovec]* @scan_mon.mon_tab, i64 0, i64 %.lcssa82, i32 1
  br label %460

scan_wday.exit41.thread.loopexit:                 ; preds = %368
  br label %scan_wday.exit41.thread

scan_wday.exit41.thread.loopexit66:               ; preds = %326
  br label %scan_wday.exit41.thread

scan_wday.exit41.thread:                          ; preds = %scan_wday.exit41.thread.loopexit66, %scan_wday.exit41.thread.loopexit, %scan_wday.exit.thread
  %372 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %cp.0.lcssa, i8* nonnull getelementptr inbounds ([45 x i8], [45 x i8]* @.str.6.645, i64 0, i64 0), i8* %2, i8* %1, i32* nonnull %tm_mday, i32* nonnull %tm_hour, i32* nonnull %tm_min, i32* nonnull %tm_sec, i32* nonnull %tm_year) #6
  %373 = icmp eq i32 %372, 7
  br i1 %373, label %374, label %scan_wday.exit55.thread

; <label>:374                                     ; preds = %scan_wday.exit41.thread
  %.b.i49 = load i1, i1* @scan_wday.sorted, align 1
  br i1 %.b.i49, label %376, label %375

; <label>:375                                     ; preds = %374
  call void @qsort(i8* nonnull bitcast ([14 x %struct.iovec]* @scan_wday.wday_tab to i8*), i64 14, i64 16, i32 (i8*, i8*)* nonnull @strlong_compare) #6
  store i1 true, i1* @scan_wday.sorted, align 1
  br label %376

; <label>:376                                     ; preds = %375, %374
  %377 = load i8, i8* %2, align 16, !tbaa !1
  %378 = icmp eq i8 %377, 0
  br i1 %378, label %pound_case.exit116.preheader, label %.lr.ph.i111

.lr.ph.i111:                                      ; preds = %376
  %379 = tail call i16** @__ctype_b_loc() #21
  br label %380

; <label>:380                                     ; preds = %397, %.lr.ph.i111
  %.in.i112 = phi i8 [ %377, %.lr.ph.i111 ], [ %399, %397 ]
  %.01.i113 = phi i8* [ %2, %.lr.ph.i111 ], [ %398, %397 ]
  %381 = sext i8 %.in.i112 to i32
  %382 = sext i8 %.in.i112 to i64
  %383 = load i16*, i16** %379, align 8, !tbaa !4
  %384 = getelementptr inbounds i16, i16* %383, i64 %382
  %385 = load i16, i16* %384, align 2, !tbaa !6
  %386 = and i16 %385, 256
  %387 = icmp eq i16 %386, 0
  br i1 %387, label %397, label %388

; <label>:388                                     ; preds = %380
  %__c.off.i.i114 = add nsw i32 %381, 128
  %389 = icmp ult i32 %__c.off.i.i114, 384
  br i1 %389, label %390, label %tolower.exit.i115

; <label>:390                                     ; preds = %388
  %391 = tail call i32** @__ctype_tolower_loc() #21
  %392 = load i32*, i32** %391, align 8, !tbaa !4
  %393 = getelementptr inbounds i32, i32* %392, i64 %382
  %394 = load i32, i32* %393, align 4, !tbaa !8
  br label %tolower.exit.i115

tolower.exit.i115:                                ; preds = %390, %388
  %395 = phi i32 [ %394, %390 ], [ %381, %388 ]
  %396 = trunc i32 %395 to i8
  store i8 %396, i8* %.01.i113, align 1, !tbaa !1
  br label %397

; <label>:397                                     ; preds = %tolower.exit.i115, %380
  %398 = getelementptr inbounds i8, i8* %.01.i113, i64 1
  %399 = load i8, i8* %398, align 1, !tbaa !1
  %400 = icmp eq i8 %399, 0
  br i1 %400, label %pound_case.exit116.preheader.loopexit, label %380

pound_case.exit116.preheader.loopexit:            ; preds = %397
  br label %pound_case.exit116.preheader

pound_case.exit116.preheader:                     ; preds = %pound_case.exit116.preheader.loopexit, %376
  br label %pound_case.exit116

pound_case.exit116:                               ; preds = %pound_case.exit116.preheader, %414
  %l.0.i.i50 = phi i32 [ %l.1.i.i52, %414 ], [ 0, %pound_case.exit116.preheader ]
  %h.0.i.i51 = phi i32 [ %h.1.i.i53, %414 ], [ 13, %pound_case.exit116.preheader ]
  %401 = add nsw i32 %h.0.i.i51, %l.0.i.i50
  %402 = sdiv i32 %401, 2
  %403 = sext i32 %402 to i64
  %404 = getelementptr inbounds [14 x %struct.iovec], [14 x %struct.iovec]* @scan_wday.wday_tab, i64 0, i64 %403, i32 0
  %405 = load i8*, i8** %404, align 16, !tbaa !161
  %406 = call i32 @strcmp(i8* %2, i8* %405) #6
  %407 = icmp slt i32 %406, 0
  br i1 %407, label %408, label %410

; <label>:408                                     ; preds = %pound_case.exit116
  %409 = add nsw i32 %402, -1
  br label %414

; <label>:410                                     ; preds = %pound_case.exit116
  %411 = icmp sgt i32 %406, 0
  br i1 %411, label %412, label %416

; <label>:412                                     ; preds = %410
  %413 = add nsw i32 %402, 1
  br label %414

; <label>:414                                     ; preds = %412, %408
  %l.1.i.i52 = phi i32 [ %l.0.i.i50, %408 ], [ %413, %412 ]
  %h.1.i.i53 = phi i32 [ %409, %408 ], [ %h.0.i.i51, %412 ]
  %415 = icmp slt i32 %h.1.i.i53, %l.1.i.i52
  br i1 %415, label %scan_wday.exit55.thread.loopexit65, label %pound_case.exit116

; <label>:416                                     ; preds = %410
  %.b.i56 = load i1, i1* @scan_mon.sorted, align 1
  br i1 %.b.i56, label %418, label %417

; <label>:417                                     ; preds = %416
  call void @qsort(i8* nonnull bitcast ([23 x %struct.iovec]* @scan_mon.mon_tab to i8*), i64 23, i64 16, i32 (i8*, i8*)* nonnull @strlong_compare) #6
  store i1 true, i1* @scan_mon.sorted, align 1
  br label %418

; <label>:418                                     ; preds = %417, %416
  %419 = load i8, i8* %1, align 16, !tbaa !1
  %420 = icmp eq i8 %419, 0
  br i1 %420, label %pound_case.exit.preheader, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %418
  %421 = tail call i16** @__ctype_b_loc() #21
  br label %422

; <label>:422                                     ; preds = %439, %.lr.ph.i
  %.in.i = phi i8 [ %419, %.lr.ph.i ], [ %441, %439 ]
  %.01.i = phi i8* [ %1, %.lr.ph.i ], [ %440, %439 ]
  %423 = sext i8 %.in.i to i32
  %424 = sext i8 %.in.i to i64
  %425 = load i16*, i16** %421, align 8, !tbaa !4
  %426 = getelementptr inbounds i16, i16* %425, i64 %424
  %427 = load i16, i16* %426, align 2, !tbaa !6
  %428 = and i16 %427, 256
  %429 = icmp eq i16 %428, 0
  br i1 %429, label %439, label %430

; <label>:430                                     ; preds = %422
  %__c.off.i.i = add nsw i32 %423, 128
  %431 = icmp ult i32 %__c.off.i.i, 384
  br i1 %431, label %432, label %tolower.exit.i

; <label>:432                                     ; preds = %430
  %433 = tail call i32** @__ctype_tolower_loc() #21
  %434 = load i32*, i32** %433, align 8, !tbaa !4
  %435 = getelementptr inbounds i32, i32* %434, i64 %424
  %436 = load i32, i32* %435, align 4, !tbaa !8
  br label %tolower.exit.i

tolower.exit.i:                                   ; preds = %432, %430
  %437 = phi i32 [ %436, %432 ], [ %423, %430 ]
  %438 = trunc i32 %437 to i8
  store i8 %438, i8* %.01.i, align 1, !tbaa !1
  br label %439

; <label>:439                                     ; preds = %tolower.exit.i, %422
  %440 = getelementptr inbounds i8, i8* %.01.i, i64 1
  %441 = load i8, i8* %440, align 1, !tbaa !1
  %442 = icmp eq i8 %441, 0
  br i1 %442, label %pound_case.exit.preheader.loopexit, label %422

pound_case.exit.preheader.loopexit:               ; preds = %439
  br label %pound_case.exit.preheader

pound_case.exit.preheader:                        ; preds = %pound_case.exit.preheader.loopexit, %418
  br label %pound_case.exit

pound_case.exit:                                  ; preds = %pound_case.exit.preheader, %456
  %l.0.i.i57 = phi i32 [ %l.1.i.i59, %456 ], [ 0, %pound_case.exit.preheader ]
  %h.0.i.i58 = phi i32 [ %h.1.i.i60, %456 ], [ 22, %pound_case.exit.preheader ]
  %443 = add nsw i32 %h.0.i.i58, %l.0.i.i57
  %444 = sdiv i32 %443, 2
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds [23 x %struct.iovec], [23 x %struct.iovec]* @scan_mon.mon_tab, i64 0, i64 %445, i32 0
  %447 = load i8*, i8** %446, align 16, !tbaa !161
  %448 = call i32 @strcmp(i8* %1, i8* %447) #6
  %449 = icmp slt i32 %448, 0
  br i1 %449, label %450, label %452

; <label>:450                                     ; preds = %pound_case.exit
  %451 = add nsw i32 %444, -1
  br label %456

; <label>:452                                     ; preds = %pound_case.exit
  %453 = icmp sgt i32 %448, 0
  br i1 %453, label %454, label %458

; <label>:454                                     ; preds = %452
  %455 = add nsw i32 %444, 1
  br label %456

; <label>:456                                     ; preds = %454, %450
  %l.1.i.i59 = phi i32 [ %l.0.i.i57, %450 ], [ %455, %454 ]
  %h.1.i.i60 = phi i32 [ %451, %450 ], [ %h.0.i.i58, %454 ]
  %457 = icmp slt i32 %h.1.i.i60, %l.1.i.i59
  br i1 %457, label %scan_wday.exit55.thread.loopexit, label %pound_case.exit

; <label>:458                                     ; preds = %452
  %.lcssa = phi i64 [ %445, %452 ]
  %459 = getelementptr inbounds [23 x %struct.iovec], [23 x %struct.iovec]* @scan_mon.mon_tab, i64 0, i64 %.lcssa, i32 1
  br label %460

; <label>:460                                     ; preds = %102, %194, %370, %458, %282, %148, %56
  %tm.sroa.35.0.in.in = phi i64* [ %459, %458 ], [ %371, %370 ], [ %283, %282 ], [ %195, %194 ], [ %149, %148 ], [ %103, %102 ], [ %57, %56 ]
  %tm.sroa.35.0.in = load i64, i64* %tm.sroa.35.0.in.in, align 8, !tbaa !163
  %tm.sroa.0.0 = load i32, i32* %tm_sec, align 4, !tbaa !8
  %tm.sroa.11.0 = load i32, i32* %tm_min, align 4, !tbaa !8
  %tm.sroa.19.0 = load i32, i32* %tm_hour, align 4, !tbaa !8
  %tm.sroa.27.0 = load i32, i32* %tm_mday, align 4, !tbaa !8
  %tm.sroa.35.0 = trunc i64 %tm.sroa.35.0.in to i32
  %tm.sroa.43.0 = load i32, i32* %tm_year, align 4, !tbaa !8
  %461 = icmp sgt i32 %tm.sroa.43.0, 1900
  br i1 %461, label %462, label %464

; <label>:462                                     ; preds = %460
  %463 = add nsw i32 %tm.sroa.43.0, -1900
  br label %467

; <label>:464                                     ; preds = %460
  %465 = icmp slt i32 %tm.sroa.43.0, 70
  %466 = add nsw i32 %tm.sroa.43.0, 100
  %.tm.sroa.43.0 = select i1 %465, i32 %466, i32 %tm.sroa.43.0
  br label %467

; <label>:467                                     ; preds = %464, %462
  %tm.sroa.43.1 = phi i32 [ %463, %462 ], [ %.tm.sroa.43.0, %464 ]
  %468 = mul i32 %tm.sroa.43.1, 365
  %469 = add i32 %468, -25550
  %470 = sext i32 %469 to i64
  %471 = add nsw i32 %tm.sroa.43.1, -69
  %472 = sdiv i32 %471, 4
  %473 = sext i32 %472 to i64
  %sext = shl i64 %tm.sroa.35.0.in, 32
  %474 = ashr exact i64 %sext, 32
  %475 = getelementptr inbounds [12 x i32], [12 x i32]* @tm_to_time.monthtab, i64 0, i64 %474
  %476 = load i32, i32* %475, align 4, !tbaa !8
  %477 = sext i32 %476 to i64
  %478 = add nsw i64 %473, %477
  %479 = add nsw i64 %478, %470
  %480 = icmp sgt i32 %tm.sroa.35.0, 1
  br i1 %480, label %481, label %tm_to_time.exit

; <label>:481                                     ; preds = %467
  %482 = add nsw i32 %tm.sroa.43.1, 1900
  %483 = srem i32 %482, 400
  %484 = icmp eq i32 %483, 0
  br i1 %484, label %is_leap.exit.i, label %485

; <label>:485                                     ; preds = %481
  %486 = srem i32 %482, 100
  %487 = icmp eq i32 %486, 0
  br i1 %487, label %is_leap.exit.i, label %488

; <label>:488                                     ; preds = %485
  %489 = and i32 %482, 3
  %phitmp.i = icmp ne i32 %489, 0
  br label %is_leap.exit.i

is_leap.exit.i:                                   ; preds = %488, %485, %481
  %490 = phi i1 [ %phitmp.i, %488 ], [ true, %485 ], [ false, %481 ]
  %491 = zext i1 %490 to i64
  %492 = xor i64 %491, 1
  %..i = add nsw i64 %492, %479
  br label %tm_to_time.exit

tm_to_time.exit:                                  ; preds = %467, %is_leap.exit.i
  %t.0.i = phi i64 [ %479, %467 ], [ %..i, %is_leap.exit.i ]
  %493 = add nsw i32 %tm.sroa.27.0, -1
  %494 = sext i32 %493 to i64
  %495 = add nsw i64 %t.0.i, %494
  %496 = mul nsw i64 %495, 24
  %497 = sext i32 %tm.sroa.19.0 to i64
  %498 = add nsw i64 %496, %497
  %499 = mul nsw i64 %498, 60
  %500 = sext i32 %tm.sroa.11.0 to i64
  %501 = add nsw i64 %499, %500
  %502 = mul nsw i64 %501, 60
  %503 = sext i32 %tm.sroa.0.0 to i64
  %504 = add nsw i64 %502, %503
  br label %scan_wday.exit55.thread

scan_wday.exit55.thread.loopexit:                 ; preds = %456
  br label %scan_wday.exit55.thread

scan_wday.exit55.thread.loopexit65:               ; preds = %414
  br label %scan_wday.exit55.thread

scan_wday.exit55.thread:                          ; preds = %scan_wday.exit55.thread.loopexit65, %scan_wday.exit55.thread.loopexit, %scan_wday.exit41.thread, %tm_to_time.exit
  %.0 = phi i64 [ %504, %tm_to_time.exit ], [ -1, %scan_wday.exit41.thread ], [ -1, %scan_wday.exit55.thread.loopexit ], [ -1, %scan_wday.exit55.thread.loopexit65 ]
  call void @llvm.lifetime.end(i64 4, i8* %7) #6
  call void @llvm.lifetime.end(i64 4, i8* %6) #6
  call void @llvm.lifetime.end(i64 4, i8* %5) #6
  call void @llvm.lifetime.end(i64 4, i8* %4) #6
  call void @llvm.lifetime.end(i64 4, i8* %3) #6
  call void @llvm.lifetime.end(i64 500, i8* %2) #6
  call void @llvm.lifetime.end(i64 500, i8* %1) #6
  ret i64 %.0
}

; Function Attrs: nounwind readonly uwtable
define internal i32 @strlong_compare(i8* nocapture readonly %v1, i8* nocapture readonly %v2) #11 {
  %1 = bitcast i8* %v1 to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !161
  %3 = bitcast i8* %v2 to i8**
  %4 = load i8*, i8** %3, align 8, !tbaa !161
  %5 = tail call i32 @strcmp(i8* %2, i8* %4) #6
  ret i32 %5
}

; Function Attrs: nounwind readnone
declare i32** @__ctype_tolower_loc() #9

; Function Attrs: nounwind
declare i64 @strtoll(i8* readonly, i8** nocapture, i32) #2

; Function Attrs: nounwind
declare i32 @getsockname(i32, %struct.sockaddr*, i32*) #2

; Function Attrs: nounwind uwtable
define internal fastcc i8* @expand_symlinks(i8* %path, i8** nocapture %restP, i32 %no_symlink_check, i32 %tildemapped) unnamed_addr #8 {
  %lnk = alloca [5000 x i8], align 16
  %sb = alloca %struct.stat, align 8
  %1 = getelementptr inbounds [5000 x i8], [5000 x i8]* %lnk, i64 0, i64 0
  call void @llvm.lifetime.start(i64 5000, i8* %1) #6
  %2 = icmp eq i32 %no_symlink_check, 0
  br i1 %2, label %27, label %3

; <label>:3                                       ; preds = %0
  %4 = bitcast %struct.stat* %sb to i8*
  call void @llvm.lifetime.start(i64 144, i8* %4) #6
  %5 = call i32 @__xstat(i32 1, i8* nonnull %path, %struct.stat* nonnull %sb) #6
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %.thread, label %7

.thread:                                          ; preds = %3
  call void @llvm.lifetime.end(i64 144, i8* %4) #6
  br label %27

; <label>:7                                       ; preds = %3
  %8 = call i64 @strlen(i8* %path) #13
  call void @httpd_realloc_str(i8** nonnull @expand_symlinks.checked, i64* nonnull @expand_symlinks.maxchecked, i64 %8)
  %9 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  %10 = call i8* @strcpy(i8* %9, i8* %path) #6
  %11 = add i64 %8, -1
  %12 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  %13 = getelementptr inbounds i8, i8* %12, i64 %11
  %14 = load i8, i8* %13, align 1, !tbaa !1
  %15 = icmp eq i8 %14, 47
  br i1 %15, label %.lr.ph40.preheader, label %._crit_edge41

.lr.ph40.preheader:                               ; preds = %7
  br label %.lr.ph40

.lr.ph40:                                         ; preds = %.lr.ph40.preheader, %.lr.ph40
  %16 = phi i8* [ %20, %.lr.ph40 ], [ %13, %.lr.ph40.preheader ]
  %17 = phi i64 [ %18, %.lr.ph40 ], [ %11, %.lr.ph40.preheader ]
  store i8 0, i8* %16, align 1, !tbaa !1
  %18 = add i64 %17, -1
  %19 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  %20 = getelementptr inbounds i8, i8* %19, i64 %18
  %21 = load i8, i8* %20, align 1, !tbaa !1
  %22 = icmp eq i8 %21, 47
  br i1 %22, label %.lr.ph40, label %._crit_edge41.loopexit

._crit_edge41.loopexit:                           ; preds = %.lr.ph40
  br label %._crit_edge41

._crit_edge41:                                    ; preds = %._crit_edge41.loopexit, %7
  call void @httpd_realloc_str(i8** nonnull @expand_symlinks.rest, i64* nonnull @expand_symlinks.maxrest, i64 0)
  %23 = load i8*, i8** @expand_symlinks.rest, align 8, !tbaa !4
  store i8 0, i8* %23, align 1, !tbaa !1
  %24 = load i64, i64* bitcast (i8** @expand_symlinks.rest to i64*), align 8, !tbaa !4
  %25 = bitcast i8** %restP to i64*
  store i64 %24, i64* %25, align 8, !tbaa !4
  %26 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  call void @llvm.lifetime.end(i64 144, i8* %4) #6
  br label %221

; <label>:27                                      ; preds = %.thread, %0
  call void @httpd_realloc_str(i8** nonnull @expand_symlinks.checked, i64* nonnull @expand_symlinks.maxchecked, i64 1)
  %28 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  store i8 0, i8* %28, align 1, !tbaa !1
  %29 = call i64 @strlen(i8* %path) #13
  call void @httpd_realloc_str(i8** nonnull @expand_symlinks.rest, i64* nonnull @expand_symlinks.maxrest, i64 %29)
  %30 = load i8*, i8** @expand_symlinks.rest, align 8, !tbaa !4
  %31 = call i8* @strcpy(i8* %30, i8* %path) #6
  %32 = add i64 %29, -1
  %33 = load i8*, i8** @expand_symlinks.rest, align 8, !tbaa !4
  %34 = getelementptr inbounds i8, i8* %33, i64 %32
  %35 = load i8, i8* %34, align 1, !tbaa !1
  %36 = icmp eq i8 %35, 47
  br i1 %36, label %37, label %38

; <label>:37                                      ; preds = %27
  store i8 0, i8* %34, align 1, !tbaa !1
  %.pre = load i8*, i8** @expand_symlinks.rest, align 8, !tbaa !4
  br label %38

; <label>:38                                      ; preds = %37, %27
  %39 = phi i8* [ %.pre, %37 ], [ %33, %27 ]
  %restlen.0 = phi i64 [ %32, %37 ], [ %29, %27 ]
  %40 = icmp eq i32 %tildemapped, 0
  br i1 %40, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %38
  %41 = load i8, i8* %39, align 1, !tbaa !1
  %42 = icmp eq i8 %41, 47
  br i1 %42, label %.lr.ph37.preheader, label %.loopexit

.lr.ph37.preheader:                               ; preds = %.preheader
  br label %.lr.ph37

.lr.ph37:                                         ; preds = %.lr.ph37.preheader, %.lr.ph37
  %43 = phi i8* [ %48, %.lr.ph37 ], [ %39, %.lr.ph37.preheader ]
  %restlen.136 = phi i64 [ %47, %.lr.ph37 ], [ %restlen.0, %.lr.ph37.preheader ]
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  %45 = call i64 @strlen(i8* %44) #13
  %46 = add i64 %45, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %43, i8* %44, i64 %46, i32 1, i1 false)
  %47 = add i64 %restlen.136, -1
  %48 = load i8*, i8** @expand_symlinks.rest, align 8, !tbaa !4
  %49 = load i8, i8* %48, align 1, !tbaa !1
  %50 = icmp eq i8 %49, 47
  br i1 %50, label %.lr.ph37, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %.lr.ph37
  %.lcssa101 = phi i8* [ %48, %.lr.ph37 ]
  %.lcssa100 = phi i64 [ %47, %.lr.ph37 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %38, %.preheader
  %51 = phi i8* [ %39, %.preheader ], [ %39, %38 ], [ %.lcssa101, %.loopexit.loopexit ]
  %restlen.2 = phi i64 [ %restlen.0, %.preheader ], [ %restlen.0, %38 ], [ %.lcssa100, %.loopexit.loopexit ]
  %52 = icmp eq i64 %restlen.2, 0
  br i1 %52, label %.outer._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %.loopexit
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.outer.backedge
  %checkedlen.1.ph34 = phi i64 [ %checkedlen.1.ph.be, %.outer.backedge ], [ 0, %.lr.ph.preheader ]
  %restlen.3.ph33 = phi i64 [ %restlen.5, %.outer.backedge ], [ %restlen.2, %.lr.ph.preheader ]
  %nlinks.0.ph32 = phi i32 [ %172, %.outer.backedge ], [ 0, %.lr.ph.preheader ]
  %r.0.ph31 = phi i8* [ %r.2, %.outer.backedge ], [ %51, %.lr.ph.preheader ]
  br label %53

; <label>:53                                      ; preds = %.lr.ph, %.backedge
  %checkedlen.125 = phi i64 [ %checkedlen.1.ph34, %.lr.ph ], [ %checkedlen.7, %.backedge ]
  %restlen.324 = phi i64 [ %restlen.3.ph33, %.lr.ph ], [ %restlen.4, %.backedge ]
  %r.023 = phi i8* [ %r.0.ph31, %.lr.ph ], [ %r.1, %.backedge ]
  %54 = call i8* @strchr(i8* %r.023, i32 47) #6
  %55 = icmp eq i8* %54, null
  br i1 %55, label %106, label %56

; <label>:56                                      ; preds = %53
  %57 = ptrtoint i8* %54 to i64
  %58 = ptrtoint i8* %r.023 to i64
  %59 = sub i64 %57, %58
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %67

; <label>:62                                      ; preds = %56
  %63 = add i64 %checkedlen.125, 1
  call void @httpd_realloc_str(i8** nonnull @expand_symlinks.checked, i64* nonnull @expand_symlinks.maxchecked, i64 %63)
  %64 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  %65 = getelementptr inbounds i8, i8* %64, i64 %checkedlen.125
  %66 = call i8* @strncpy(i8* %65, i8* %r.023, i64 1) #6
  %.pre59 = shl i64 %59, 32
  br label %101

; <label>:67                                      ; preds = %56
  %68 = icmp sgt i32 %60, 2
  %.op = shl i64 %59, 32
  %.op.op = ashr exact i64 %.op, 32
  %69 = select i1 %68, i64 %.op.op, i64 2
  %70 = call i32 @strncmp(i8* %r.023, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.91.172, i64 0, i64 0), i64 %69) #13
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %84

; <label>:72                                      ; preds = %67
  %73 = icmp eq i64 %checkedlen.125, 0
  br i1 %73, label %101, label %74

; <label>:74                                      ; preds = %72
  %75 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  %76 = call i8* @strrchr(i8* %75, i32 47) #13
  %77 = icmp eq i8* %76, null
  br i1 %77, label %101, label %78

; <label>:78                                      ; preds = %74
  %79 = icmp eq i8* %76, %75
  br i1 %79, label %101, label %80

; <label>:80                                      ; preds = %78
  %81 = ptrtoint i8* %76 to i64
  %82 = ptrtoint i8* %75 to i64
  %83 = sub i64 %81, %82
  br label %101

; <label>:84                                      ; preds = %67
  %85 = add i64 %checkedlen.125, 1
  %86 = add i64 %.op.op, %85
  call void @httpd_realloc_str(i8** nonnull @expand_symlinks.checked, i64* nonnull @expand_symlinks.maxchecked, i64 %86)
  %87 = icmp eq i64 %checkedlen.125, 0
  br i1 %87, label %96, label %88

; <label>:88                                      ; preds = %84
  %89 = add i64 %checkedlen.125, -1
  %90 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  %91 = getelementptr inbounds i8, i8* %90, i64 %89
  %92 = load i8, i8* %91, align 1, !tbaa !1
  %93 = icmp eq i8 %92, 47
  br i1 %93, label %96, label %94

; <label>:94                                      ; preds = %88
  %95 = getelementptr inbounds i8, i8* %90, i64 %checkedlen.125
  store i8 47, i8* %95, align 1, !tbaa !1
  br label %96

; <label>:96                                      ; preds = %88, %84, %94
  %checkedlen.2 = phi i64 [ %85, %94 ], [ %checkedlen.125, %88 ], [ 0, %84 ]
  %97 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  %98 = getelementptr inbounds i8, i8* %97, i64 %checkedlen.2
  %99 = call i8* @strncpy(i8* %98, i8* %r.023, i64 %.op.op) #6
  %100 = add i64 %checkedlen.2, %.op.op
  br label %101

; <label>:101                                     ; preds = %78, %74, %72, %96, %80, %62
  %.pre-phi = phi i64 [ %.op, %78 ], [ %.op, %74 ], [ %.op, %72 ], [ %.op, %96 ], [ %.op, %80 ], [ %.pre59, %62 ]
  %checkedlen.3 = phi i64 [ 1, %78 ], [ 0, %74 ], [ 0, %72 ], [ %100, %96 ], [ %83, %80 ], [ %63, %62 ]
  %102 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  %103 = getelementptr inbounds i8, i8* %102, i64 %checkedlen.3
  store i8 0, i8* %103, align 1, !tbaa !1
  %sext7 = add i64 %.pre-phi, 4294967296
  %104 = ashr exact i64 %sext7, 32
  %105 = sub i64 %restlen.324, %104
  br label %147

; <label>:106                                     ; preds = %53
  %107 = load i8, i8* %r.023, align 1, !tbaa !1
  %108 = icmp eq i8 %107, 46
  br i1 %108, label %109, label %.thread60

; <label>:109                                     ; preds = %106
  %110 = getelementptr inbounds i8, i8* %r.023, i64 1
  %111 = load i8, i8* %110, align 1, !tbaa !1
  %112 = icmp eq i8 %111, 46
  br i1 %112, label %113, label %.thread60

; <label>:113                                     ; preds = %109
  %114 = getelementptr inbounds i8, i8* %r.023, i64 2
  %115 = load i8, i8* %114, align 1, !tbaa !1
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %117, label %.thread60

; <label>:117                                     ; preds = %113
  %118 = icmp eq i64 %checkedlen.125, 0
  br i1 %118, label %147, label %119

; <label>:119                                     ; preds = %117
  %120 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  %121 = call i8* @strrchr(i8* %120, i32 47) #13
  %122 = icmp eq i8* %121, null
  br i1 %122, label %129, label %123

; <label>:123                                     ; preds = %119
  %124 = icmp eq i8* %121, %120
  br i1 %124, label %129, label %125

; <label>:125                                     ; preds = %123
  %126 = ptrtoint i8* %121 to i64
  %127 = ptrtoint i8* %120 to i64
  %128 = sub i64 %126, %127
  br label %129

; <label>:129                                     ; preds = %123, %119, %125
  %checkedlen.4 = phi i64 [ %128, %125 ], [ 0, %119 ], [ 1, %123 ]
  %130 = getelementptr inbounds i8, i8* %120, i64 %checkedlen.4
  store i8 0, i8* %130, align 1, !tbaa !1
  br label %147

.thread60:                                        ; preds = %106, %109, %113
  %131 = add i64 %checkedlen.125, 1
  %132 = add i64 %131, %restlen.324
  call void @httpd_realloc_str(i8** nonnull @expand_symlinks.checked, i64* nonnull @expand_symlinks.maxchecked, i64 %132)
  %133 = icmp eq i64 %checkedlen.125, 0
  br i1 %133, label %142, label %134

; <label>:134                                     ; preds = %.thread60
  %135 = add i64 %checkedlen.125, -1
  %136 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  %137 = getelementptr inbounds i8, i8* %136, i64 %135
  %138 = load i8, i8* %137, align 1, !tbaa !1
  %139 = icmp eq i8 %138, 47
  br i1 %139, label %142, label %140

; <label>:140                                     ; preds = %134
  %141 = getelementptr inbounds i8, i8* %136, i64 %checkedlen.125
  store i8 47, i8* %141, align 1, !tbaa !1
  br label %142

; <label>:142                                     ; preds = %134, %.thread60, %140
  %checkedlen.5 = phi i64 [ %131, %140 ], [ %checkedlen.125, %134 ], [ 0, %.thread60 ]
  %143 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  %144 = getelementptr inbounds i8, i8* %143, i64 %checkedlen.5
  %145 = call i8* @strcpy(i8* %144, i8* nonnull %r.023) #6
  %146 = add i64 %checkedlen.5, %restlen.324
  br label %147

; <label>:147                                     ; preds = %142, %129, %117, %101
  %.pn = phi i64 [ %104, %101 ], [ %restlen.324, %117 ], [ %restlen.324, %129 ], [ %restlen.324, %142 ]
  %restlen.4 = phi i64 [ %105, %101 ], [ 0, %117 ], [ 0, %129 ], [ 0, %142 ]
  %checkedlen.7 = phi i64 [ %checkedlen.3, %101 ], [ 0, %117 ], [ %checkedlen.4, %129 ], [ %146, %142 ]
  %r.1 = getelementptr inbounds i8, i8* %r.023, i64 %.pn
  %148 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  %149 = load i8, i8* %148, align 1, !tbaa !1
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %.backedge, label %152

.backedge:                                        ; preds = %147, %155
  %151 = icmp eq i64 %restlen.4, 0
  br i1 %151, label %.outer._crit_edge.loopexit, label %53

; <label>:152                                     ; preds = %147
  %153 = call i64 @readlink(i8* %148, i8* %1, i64 4999) #6
  %154 = icmp eq i64 %153, -1
  br i1 %154, label %155, label %171

; <label>:155                                     ; preds = %152
  %156 = tail call i32* @__errno_location() #21
  %157 = load i32, i32* %156, align 4, !tbaa !8
  switch i32 %157, label %169 [
    i32 22, label %.backedge
    i32 13, label %158
    i32 2, label %158
    i32 20, label %158
  ]

; <label>:158                                     ; preds = %155, %155, %155
  %r.1.lcssa96 = phi i8* [ %r.1, %155 ], [ %r.1, %155 ], [ %r.1, %155 ]
  %restlen.4.lcssa93 = phi i64 [ %restlen.4, %155 ], [ %restlen.4, %155 ], [ %restlen.4, %155 ]
  %restlen.324.lcssa90 = phi i64 [ %restlen.324, %155 ], [ %restlen.324, %155 ], [ %restlen.324, %155 ]
  %checkedlen.125.lcssa87 = phi i64 [ %checkedlen.125, %155 ], [ %checkedlen.125, %155 ], [ %checkedlen.125, %155 ]
  %159 = sub i64 %restlen.4.lcssa93, %restlen.324.lcssa90
  %160 = getelementptr inbounds i8, i8* %r.1.lcssa96, i64 %159
  store i8* %160, i8** %restP, align 8, !tbaa !4
  %161 = icmp eq i64 %checkedlen.125.lcssa87, 0
  br i1 %161, label %162, label %164

; <label>:162                                     ; preds = %158
  %163 = load i16*, i16** bitcast (i8** @expand_symlinks.checked to i16**), align 8, !tbaa !4
  store i16 46, i16* %163, align 1
  br label %167

; <label>:164                                     ; preds = %158
  %165 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  %166 = getelementptr inbounds i8, i8* %165, i64 %checkedlen.125.lcssa87
  store i8 0, i8* %166, align 1, !tbaa !1
  br label %167

; <label>:167                                     ; preds = %164, %162
  %168 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  br label %221

; <label>:169                                     ; preds = %155
  %170 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.92.173, i64 0, i64 0), i8* %170) #6
  br label %221

; <label>:171                                     ; preds = %152
  %.lcssa = phi i64 [ %153, %152 ]
  %r.1.lcssa = phi i8* [ %r.1, %152 ]
  %restlen.4.lcssa = phi i64 [ %restlen.4, %152 ]
  %checkedlen.125.lcssa = phi i64 [ %checkedlen.125, %152 ]
  %172 = add nuw nsw i32 %nlinks.0.ph32, 1
  %173 = icmp sgt i32 %nlinks.0.ph32, 31
  br i1 %173, label %174, label %175

; <label>:174                                     ; preds = %171
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.93.174, i64 0, i64 0), i8* %path) #6
  br label %221

; <label>:175                                     ; preds = %171
  %176 = getelementptr inbounds [5000 x i8], [5000 x i8]* %lnk, i64 0, i64 %.lcssa
  store i8 0, i8* %176, align 1, !tbaa !1
  %177 = add i64 %.lcssa, -1
  %178 = getelementptr inbounds [5000 x i8], [5000 x i8]* %lnk, i64 0, i64 %177
  %179 = load i8, i8* %178, align 1, !tbaa !1
  %180 = icmp eq i8 %179, 47
  br i1 %180, label %181, label %182

; <label>:181                                     ; preds = %175
  store i8 0, i8* %178, align 1, !tbaa !1
  br label %182

; <label>:182                                     ; preds = %181, %175
  %linklen.0 = phi i64 [ %177, %181 ], [ %.lcssa, %175 ]
  %183 = icmp eq i64 %restlen.4.lcssa, 0
  br i1 %183, label %205, label %184

; <label>:184                                     ; preds = %182
  %185 = load i8*, i8** @expand_symlinks.rest, align 8, !tbaa !4
  %186 = call i64 @strlen(i8* %r.1.lcssa) #13
  %187 = add i64 %186, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %185, i8* %r.1.lcssa, i64 %187, i32 1, i1 false)
  %188 = add i64 %restlen.4.lcssa, 1
  %189 = add i64 %188, %linklen.0
  call void @httpd_realloc_str(i8** nonnull @expand_symlinks.rest, i64* nonnull @expand_symlinks.maxrest, i64 %189)
  %190 = trunc i64 %restlen.4.lcssa to i32
  %191 = icmp sgt i32 %190, -1
  br i1 %191, label %.lr.ph29, label %._crit_edge30

.lr.ph29:                                         ; preds = %184
  %192 = add i64 %linklen.0, 1
  %sext = shl i64 %restlen.4.lcssa, 32
  %193 = ashr exact i64 %sext, 32
  br label %194

; <label>:194                                     ; preds = %.lr.ph29, %194
  %indvars.iv = phi i64 [ %193, %.lr.ph29 ], [ %indvars.iv.next, %194 ]
  %195 = load i8*, i8** @expand_symlinks.rest, align 8, !tbaa !4
  %196 = getelementptr inbounds i8, i8* %195, i64 %indvars.iv
  %197 = load i8, i8* %196, align 1, !tbaa !1
  %198 = add i64 %192, %indvars.iv
  %199 = getelementptr inbounds i8, i8* %195, i64 %198
  store i8 %197, i8* %199, align 1, !tbaa !1
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %200 = icmp sgt i64 %indvars.iv, 0
  br i1 %200, label %194, label %._crit_edge30.loopexit

._crit_edge30.loopexit:                           ; preds = %194
  br label %._crit_edge30

._crit_edge30:                                    ; preds = %._crit_edge30.loopexit, %184
  %201 = load i8*, i8** @expand_symlinks.rest, align 8, !tbaa !4
  %202 = call i8* @strcpy(i8* %201, i8* %1) #6
  %203 = load i8*, i8** @expand_symlinks.rest, align 8, !tbaa !4
  %204 = getelementptr inbounds i8, i8* %203, i64 %linklen.0
  store i8 47, i8* %204, align 1, !tbaa !1
  br label %208

; <label>:205                                     ; preds = %182
  call void @httpd_realloc_str(i8** nonnull @expand_symlinks.rest, i64* nonnull @expand_symlinks.maxrest, i64 %linklen.0)
  %206 = load i8*, i8** @expand_symlinks.rest, align 8, !tbaa !4
  %207 = call i8* @strcpy(i8* %206, i8* nonnull %1) #6
  br label %208

; <label>:208                                     ; preds = %205, %._crit_edge30
  %restlen.5 = phi i64 [ %189, %._crit_edge30 ], [ %linklen.0, %205 ]
  %r.2 = load i8*, i8** @expand_symlinks.rest, align 8, !tbaa !4
  %209 = load i8, i8* %r.2, align 1, !tbaa !1
  %210 = icmp eq i8 %209, 47
  %211 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  br i1 %210, label %212, label %214

; <label>:212                                     ; preds = %208
  store i8 0, i8* %211, align 1, !tbaa !1
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %212, %214
  %checkedlen.1.ph.be = phi i64 [ %checkedlen.125.lcssa, %214 ], [ 0, %212 ]
  %213 = icmp eq i64 %restlen.5, 0
  br i1 %213, label %.outer._crit_edge.loopexit69, label %.lr.ph

; <label>:214                                     ; preds = %208
  %215 = getelementptr inbounds i8, i8* %211, i64 %checkedlen.125.lcssa
  store i8 0, i8* %215, align 1, !tbaa !1
  br label %.outer.backedge

.outer._crit_edge.loopexit:                       ; preds = %.backedge
  %r.1.lcssa97 = phi i8* [ %r.1, %.backedge ]
  br label %.outer._crit_edge

.outer._crit_edge.loopexit69:                     ; preds = %.outer.backedge
  %r.2.lcssa = phi i8* [ %r.2, %.outer.backedge ]
  br label %.outer._crit_edge

.outer._crit_edge:                                ; preds = %.outer._crit_edge.loopexit69, %.outer._crit_edge.loopexit, %.loopexit
  %r.0.lcssa = phi i8* [ %51, %.loopexit ], [ %r.1.lcssa97, %.outer._crit_edge.loopexit ], [ %r.2.lcssa, %.outer._crit_edge.loopexit69 ]
  store i8* %r.0.lcssa, i8** %restP, align 8, !tbaa !4
  %216 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  %217 = load i8, i8* %216, align 1, !tbaa !1
  %218 = icmp eq i8 %217, 0
  br i1 %218, label %219, label %221

; <label>:219                                     ; preds = %.outer._crit_edge
  %220 = bitcast i8* %216 to i16*
  store i16 46, i16* %220, align 1
  %.pre58 = load i8*, i8** @expand_symlinks.checked, align 8, !tbaa !4
  br label %221

; <label>:221                                     ; preds = %.outer._crit_edge, %219, %._crit_edge41, %174, %169, %167
  %.1 = phi i8* [ %168, %167 ], [ null, %169 ], [ null, %174 ], [ %26, %._crit_edge41 ], [ %.pre58, %219 ], [ %216, %.outer._crit_edge ]
  call void @llvm.lifetime.end(i64 5000, i8* %1) #6
  ret i8* %.1
}

; Function Attrs: nounwind
declare i32 @__xstat(i32, i8*, %struct.stat*) #2

; Function Attrs: nounwind
declare i8* @strncpy(i8*, i8* nocapture readonly, i64) #2

; Function Attrs: nounwind
declare i64 @readlink(i8* nocapture readonly, i8* nocapture, i64) #2

; Function Attrs: nounwind uwtable
define i32 @httpd_start_request(%struct.httpd_conn* %hc, %struct.timeval* %nowP) #8 {
  %1 = tail call fastcc i32 @really_start_request(%struct.httpd_conn* %hc, %struct.timeval* %nowP)
  ret i32 %1
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @really_start_request(%struct.httpd_conn* %hc, %struct.timeval* %nowP) unnamed_addr #8 {
  %me_indexes.i = alloca [100 x i32], align 16
  %buf.i.i.i.i = alloca [2 x i8], align 1
  %buf.i3.i.i = alloca [1024 x i8], align 16
  %buf.i.i.i = alloca [256 x i8], align 16
  %p.i.i = alloca [2 x i32], align 4
  %p1.i.i = alloca [2 x i32], align 4
  %sb.i = alloca %struct.stat, align 8
  %lsb.i = alloca %struct.stat, align 8
  %modestr.i = alloca [20 x i8], align 16
  %lnk.i = alloca [4097 x i8], align 16
  %pi = alloca i8*, align 8
  %1 = bitcast i8** %pi to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #6
  %2 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 16
  %3 = load i8*, i8** %2, align 8, !tbaa !48
  %4 = tail call i64 @strlen(i8* %3) #13
  %5 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 8
  %6 = load i32, i32* %5, align 4, !tbaa !91
  %.off = add i32 %6, -1
  %switch = icmp ult i32 %.off, 3
  br i1 %switch, label %7, label %httpd_method_str.exit

httpd_method_str.exit:                            ; preds = %0
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 501, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.85.144, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.86.145, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23.131, i64 0, i64 0))
  br label %cgi.exit

; <label>:7                                       ; preds = %0
  %8 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 59
  %9 = tail call i32 @__xstat(i32 1, i8* nonnull %3, %struct.stat* nonnull %8) #6
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %14

; <label>:11                                      ; preds = %7
  %12 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %13 = load i8*, i8** %12, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 500, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89.170, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.90.171, i64 0, i64 0), i8* %13)
  br label %cgi.exit

; <label>:14                                      ; preds = %7
  %15 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 59, i32 3
  %16 = load i32, i32* %15, align 8, !tbaa !164
  %17 = and i32 %16, 5
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %54

; <label>:19                                      ; preds = %14
  %20 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %21 = bitcast %union.httpd_sockaddr* %20 to %struct.sockaddr*
  %22 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %20, i64 0, i32 0, i32 0
  %23 = load i16, i16* %22, align 8, !tbaa !88
  %switch.selectcmp.i.i = icmp eq i16 %23, 10
  %switch.selectcmp1.i.i = icmp eq i16 %23, 2
  %24 = select i1 %switch.selectcmp.i.i, i32 28, i32 0
  %25 = select i1 %switch.selectcmp1.i.i, i32 16, i32 %24
  %26 = tail call i32 @getnameinfo(%struct.sockaddr* %21, i32 %25, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %29, label %28

; <label>:28                                      ; preds = %19
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit

; <label>:29                                      ; preds = %19
  %30 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2, i32 0, i32 1
  %31 = bitcast i64* %30 to i32*
  %32 = load i32, i32* %31, align 4, !tbaa !8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %httpd_ntoa.exit

; <label>:34                                      ; preds = %29
  %35 = bitcast i64* %30 to [4 x i32]*
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %35, i64 0, i64 1
  %37 = load i32, i32* %36, align 4, !tbaa !8
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %httpd_ntoa.exit

; <label>:39                                      ; preds = %34
  %40 = getelementptr inbounds i64, i64* %30, i64 1
  %41 = bitcast i64* %40 to i32*
  %42 = load i32, i32* %41, align 4, !tbaa !8
  %43 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %44 = icmp eq i32 %42, %43
  br i1 %44, label %45, label %httpd_ntoa.exit

; <label>:45                                      ; preds = %39
  %46 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %httpd_ntoa.exit

; <label>:48                                      ; preds = %45
  %49 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %50 = add i64 %49, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %50, i32 1, i1 false) #6
  br label %httpd_ntoa.exit

httpd_ntoa.exit:                                  ; preds = %28, %29, %34, %39, %45, %48
  %51 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %52 = load i8*, i8** %51, align 8, !tbaa !53
  tail call void (i32, i8*, ...) @syslog(i32 6, i8* nonnull getelementptr inbounds ([56 x i8], [56 x i8]* @.str.441, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* %52) #6
  %53 = load i8*, i8** %51, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 403, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94.175, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([74 x i8], [74 x i8]* @.str.442, i64 0, i64 0), i8* %53)
  br label %cgi.exit

; <label>:54                                      ; preds = %14
  %55 = and i32 %16, 61440
  %56 = icmp eq i32 %55, 16384
  br i1 %56, label %57, label %654

; <label>:57                                      ; preds = %54
  %58 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 18
  %59 = load i8*, i8** %58, align 8, !tbaa !113
  %60 = load i8, i8* %59, align 1, !tbaa !1
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %65, label %62

; <label>:62                                      ; preds = %57
  %63 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %64 = load i8*, i8** %63, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 404, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.454, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([57 x i8], [57 x i8]* @.str.455, i64 0, i64 0), i8* %64)
  br label %cgi.exit

; <label>:65                                      ; preds = %57
  %66 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 15
  %67 = load i8*, i8** %66, align 8, !tbaa !111
  %68 = load i8, i8* %67, align 1, !tbaa !1
  switch i8 %68, label %.thread [
    i8 0, label %.preheader
    i8 46, label %70
  ]

.preheader:                                       ; preds = %65, %.thread, %70
  %69 = add i64 %4, 1
  br label %117

; <label>:70                                      ; preds = %65
  %71 = getelementptr inbounds i8, i8* %67, i64 1
  %72 = load i8, i8* %71, align 1, !tbaa !1
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %.preheader, label %.thread

.thread:                                          ; preds = %65, %70
  %74 = tail call i64 @strlen(i8* %67) #13
  %75 = add i64 %74, -1
  %76 = getelementptr inbounds i8, i8* %67, i64 %75
  %77 = load i8, i8* %76, align 1, !tbaa !1
  %78 = icmp eq i8 %77, 47
  br i1 %78, label %.preheader, label %79

; <label>:79                                      ; preds = %.thread
  %80 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 19
  %81 = load i8*, i8** %80, align 8, !tbaa !114
  %82 = load i8, i8* %81, align 1, !tbaa !1
  %83 = icmp eq i8 %82, 0
  %84 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %85 = load i8*, i8** %84, align 8, !tbaa !53
  br i1 %83, label %101, label %86

; <label>:86                                      ; preds = %79
  %87 = tail call i8* @strchr(i8* %85, i32 63) #6
  %88 = icmp eq i8* %87, null
  br i1 %88, label %90, label %89

; <label>:89                                      ; preds = %86
  store i8 0, i8* %87, align 1, !tbaa !1
  %.pre.i = load i8*, i8** %84, align 8, !tbaa !53
  %.pre1.i = load i8*, i8** %80, align 8, !tbaa !114
  br label %90

; <label>:90                                      ; preds = %89, %86
  %91 = phi i8* [ %81, %86 ], [ %.pre1.i, %89 ]
  %92 = phi i8* [ %85, %86 ], [ %.pre.i, %89 ]
  %93 = tail call i64 @strlen(i8* %92) #13
  %94 = add i64 %93, 2
  %95 = tail call i64 @strlen(i8* %91) #13
  %96 = add i64 %94, %95
  tail call void @httpd_realloc_str(i8** nonnull @send_dirredirect.location, i64* nonnull @send_dirredirect.maxlocation, i64 %96) #6
  %97 = load i8*, i8** @send_dirredirect.location, align 8, !tbaa !4
  %98 = load i64, i64* @send_dirredirect.maxlocation, align 8, !tbaa !16
  %99 = load i8*, i8** %84, align 8, !tbaa !53
  %100 = load i8*, i8** %80, align 8, !tbaa !114
  tail call void (i8*, i64, i8*, ...) @my_snprintf(i8* %97, i64 %98, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.456, i64 0, i64 0), i8* %99, i8* %100) #6
  br label %send_dirredirect.exit

; <label>:101                                     ; preds = %79
  %102 = tail call i64 @strlen(i8* %85) #13
  %103 = add i64 %102, 1
  tail call void @httpd_realloc_str(i8** nonnull @send_dirredirect.location, i64* nonnull @send_dirredirect.maxlocation, i64 %103) #6
  %104 = load i8*, i8** @send_dirredirect.location, align 8, !tbaa !4
  %105 = load i64, i64* @send_dirredirect.maxlocation, align 8, !tbaa !16
  %106 = load i8*, i8** %84, align 8, !tbaa !53
  tail call void (i8*, i64, i8*, ...) @my_snprintf(i8* %104, i64 %105, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.457, i64 0, i64 0), i8* %106) #6
  br label %send_dirredirect.exit

send_dirredirect.exit:                            ; preds = %90, %101
  %107 = load i8*, i8** @send_dirredirect.location, align 8, !tbaa !4
  %108 = tail call i64 @strlen(i8* %107) #13
  %109 = add i64 %108, 11
  tail call void @httpd_realloc_str(i8** nonnull @send_dirredirect.header, i64* nonnull @send_dirredirect.maxheader, i64 %109) #6
  %110 = load i8*, i8** @send_dirredirect.header, align 8, !tbaa !4
  %111 = load i64, i64* @send_dirredirect.maxheader, align 8, !tbaa !16
  %112 = load i8*, i8** @send_dirredirect.location, align 8, !tbaa !4
  tail call void (i8*, i64, i8*, ...) @my_snprintf(i8* %110, i64 %111, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.458, i64 0, i64 0), i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @send_dirredirect.headstr, i64 0, i64 0), i8* %112) #6
  %113 = load i8*, i8** @send_dirredirect.header, align 8, !tbaa !4
  %114 = load i8*, i8** @send_dirredirect.location, align 8, !tbaa !4
  tail call fastcc void @send_response(%struct.httpd_conn* nonnull %hc, i32 302, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.459, i64 0, i64 0), i8* %113, i8* nonnull getelementptr inbounds ([28 x i8], [28 x i8]* @.str.460, i64 0, i64 0), i8* %114) #6
  br label %cgi.exit

; <label>:115                                     ; preds = %.thread175
  %116 = icmp ult i64 %indvars.iv.next, 6
  br i1 %116, label %117, label %153

; <label>:117                                     ; preds = %.preheader, %115
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %115 ]
  %118 = getelementptr inbounds [6 x i8*], [6 x i8*]* @really_start_request.index_names, i64 0, i64 %indvars.iv
  %119 = load i8*, i8** %118, align 8, !tbaa !4
  %120 = tail call i64 @strlen(i8* %119) #13
  %121 = add i64 %69, %120
  tail call void @httpd_realloc_str(i8** nonnull @really_start_request.indexname, i64* nonnull @really_start_request.maxindexname, i64 %121)
  %122 = load i8*, i8** @really_start_request.indexname, align 8, !tbaa !4
  %123 = load i8*, i8** %2, align 8, !tbaa !48
  %124 = tail call i8* @strcpy(i8* %122, i8* %123) #6
  %125 = load i8*, i8** @really_start_request.indexname, align 8, !tbaa !4
  %126 = tail call i64 @strlen(i8* %125) #13
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %133, label %128

; <label>:128                                     ; preds = %117
  %129 = add i64 %126, -1
  %130 = getelementptr inbounds i8, i8* %125, i64 %129
  %131 = load i8, i8* %130, align 1, !tbaa !1
  %132 = icmp eq i8 %131, 47
  br i1 %132, label %135, label %133

; <label>:133                                     ; preds = %128, %117
  %strlen = tail call i64 @strlen(i8* %125)
  %endptr = getelementptr i8, i8* %125, i64 %strlen
  %134 = bitcast i8* %endptr to i16*
  store i16 47, i16* %134, align 1
  %.pre = load i8*, i8** @really_start_request.indexname, align 8, !tbaa !4
  br label %135

; <label>:135                                     ; preds = %128, %133
  %136 = phi i8* [ %125, %128 ], [ %.pre, %133 ]
  %137 = load i8, i8* %136, align 1, !tbaa !1
  %138 = icmp eq i8 %137, 46
  br i1 %138, label %139, label %.thread175

; <label>:139                                     ; preds = %135
  %140 = getelementptr inbounds i8, i8* %136, i64 1
  %141 = load i8, i8* %140, align 1, !tbaa !1
  %142 = icmp eq i8 %141, 47
  br i1 %142, label %143, label %.thread175

; <label>:143                                     ; preds = %139
  %144 = getelementptr inbounds i8, i8* %136, i64 2
  %145 = load i8, i8* %144, align 1, !tbaa !1
  %146 = icmp eq i8 %145, 0
  br i1 %146, label %147, label %.thread175

; <label>:147                                     ; preds = %143
  store i8 0, i8* %136, align 1, !tbaa !1
  %.pre166 = load i8*, i8** @really_start_request.indexname, align 8, !tbaa !4
  br label %.thread175

.thread175:                                       ; preds = %135, %139, %147, %143
  %148 = phi i8* [ %.pre166, %147 ], [ %136, %143 ], [ %136, %139 ], [ %136, %135 ]
  %149 = tail call i8* @strcat(i8* %148, i8* %119) #6
  %150 = load i8*, i8** @really_start_request.indexname, align 8, !tbaa !4
  %151 = tail call i32 @__xstat(i32 1, i8* nonnull %150, %struct.stat* nonnull %8) #6
  %152 = icmp sgt i32 %151, -1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %152, label %594, label %115

; <label>:153                                     ; preds = %115
  %154 = load i32, i32* %15, align 8, !tbaa !164
  %155 = and i32 %154, 4
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %192

; <label>:157                                     ; preds = %153
  %158 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %159 = bitcast %union.httpd_sockaddr* %158 to %struct.sockaddr*
  %160 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %158, i64 0, i32 0, i32 0
  %161 = load i16, i16* %160, align 8, !tbaa !88
  %switch.selectcmp.i.i1 = icmp eq i16 %161, 10
  %switch.selectcmp1.i.i2 = icmp eq i16 %161, 2
  %162 = select i1 %switch.selectcmp.i.i1, i32 28, i32 0
  %163 = select i1 %switch.selectcmp1.i.i2, i32 16, i32 %162
  %164 = tail call i32 @getnameinfo(%struct.sockaddr* %159, i32 %163, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %167, label %166

; <label>:166                                     ; preds = %157
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit3

; <label>:167                                     ; preds = %157
  %168 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2, i32 0, i32 1
  %169 = bitcast i64* %168 to i32*
  %170 = load i32, i32* %169, align 4, !tbaa !8
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %httpd_ntoa.exit3

; <label>:172                                     ; preds = %167
  %173 = bitcast i64* %168 to [4 x i32]*
  %174 = getelementptr inbounds [4 x i32], [4 x i32]* %173, i64 0, i64 1
  %175 = load i32, i32* %174, align 4, !tbaa !8
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %httpd_ntoa.exit3

; <label>:177                                     ; preds = %172
  %178 = getelementptr inbounds i64, i64* %168, i64 1
  %179 = bitcast i64* %178 to i32*
  %180 = load i32, i32* %179, align 4, !tbaa !8
  %181 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %182 = icmp eq i32 %180, %181
  br i1 %182, label %183, label %httpd_ntoa.exit3

; <label>:183                                     ; preds = %177
  %184 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %186, label %httpd_ntoa.exit3

; <label>:186                                     ; preds = %183
  %187 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %188 = add i64 %187, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %188, i32 1, i1 false) #6
  br label %httpd_ntoa.exit3

httpd_ntoa.exit3:                                 ; preds = %166, %167, %172, %177, %183, %186
  %189 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %190 = load i8*, i8** %189, align 8, !tbaa !53
  tail call void (i32, i8*, ...) @syslog(i32 6, i8* nonnull getelementptr inbounds ([68 x i8], [68 x i8]* @.str.443, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* %190) #6
  %191 = load i8*, i8** %189, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 403, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94.175, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([79 x i8], [79 x i8]* @.str.444, i64 0, i64 0), i8* %191)
  br label %cgi.exit

; <label>:192                                     ; preds = %153
  %193 = load i8*, i8** %2, align 8, !tbaa !48
  %194 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 1
  %195 = load %struct.httpd_server*, %struct.httpd_server** %194, align 8, !tbaa !79
  %196 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %195, i64 0, i32 16
  %197 = load i32, i32* %196, align 8, !tbaa !133
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %.thread.i, label %199

; <label>:199                                     ; preds = %192
  %200 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %195, i64 0, i32 15
  %201 = load i32, i32* %200, align 4, !tbaa !82
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %208, label %203

; <label>:203                                     ; preds = %199
  %204 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 29
  %205 = load i8*, i8** %204, align 8, !tbaa !118
  %206 = load i8, i8* %205, align 1, !tbaa !1
  %207 = icmp eq i8 %206, 0
  br i1 %207, label %208, label %209

; <label>:208                                     ; preds = %203, %199
  br label %209

; <label>:209                                     ; preds = %208, %203
  %topdir.0.i = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31.182, i64 0, i64 0), %208 ], [ %205, %203 ]
  %210 = tail call fastcc i32 @auth_check2(%struct.httpd_conn* nonnull %hc, i8* %topdir.0.i) #6
  switch i32 %210, label %.thread.i [
    i32 -1, label %auth_check.exit
    i32 1, label %auth_check.exit
  ]

.thread.i:                                        ; preds = %209, %192
  %211 = tail call fastcc i32 @auth_check2(%struct.httpd_conn* nonnull %hc, i8* %193) #6
  br label %auth_check.exit

auth_check.exit:                                  ; preds = %209, %209, %.thread.i
  %.1.i = phi i32 [ %211, %.thread.i ], [ %210, %209 ], [ %210, %209 ]
  %212 = icmp eq i32 %.1.i, -1
  br i1 %212, label %cgi.exit, label %213

; <label>:213                                     ; preds = %auth_check.exit
  %214 = tail call fastcc i32 @check_referrer(%struct.httpd_conn* %hc)
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %cgi.exit, label %216

; <label>:216                                     ; preds = %213
  %217 = bitcast %struct.stat* %sb.i to i8*
  call void @llvm.lifetime.start(i64 144, i8* %217) #6
  %218 = bitcast %struct.stat* %lsb.i to i8*
  call void @llvm.lifetime.start(i64 144, i8* %218) #6
  %219 = getelementptr inbounds [20 x i8], [20 x i8]* %modestr.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 20, i8* %219) #6
  %220 = getelementptr inbounds [4097 x i8], [4097 x i8]* %lnk.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 4097, i8* %220) #6
  %221 = load i8*, i8** %2, align 8, !tbaa !48
  %222 = tail call %struct.__dirstream* @opendir(i8* %221) #6
  %223 = icmp eq %struct.__dirstream* %222, null
  br i1 %223, label %224, label %228

; <label>:224                                     ; preds = %216
  %225 = load i8*, i8** %2, align 8, !tbaa !48
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.470, i64 0, i64 0), i8* %225) #6
  %226 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %227 = load i8*, i8** %226, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 404, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.454, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([57 x i8], [57 x i8]* @.str.455, i64 0, i64 0), i8* %227) #6
  br label %ls.exit

; <label>:228                                     ; preds = %216
  %229 = load i32, i32* %5, align 4, !tbaa !91
  switch i32 %229, label %588 [
    i32 2, label %230
    i32 1, label %234
  ]

; <label>:230                                     ; preds = %228
  %231 = tail call i32 @closedir(%struct.__dirstream* nonnull %222) #6
  %232 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 59, i32 12, i32 0
  %233 = load i64, i64* %232, align 8, !tbaa !146
  tail call fastcc void @send_mime(%struct.httpd_conn* nonnull %hc, i32 200, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.536, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.66, i64 0, i64 0), i64 -1, i64 %233) #6
  br label %ls.exit

; <label>:234                                     ; preds = %228
  %235 = load %struct.httpd_server*, %struct.httpd_server** %194, align 8, !tbaa !79
  %236 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %235, i64 0, i32 4
  %237 = bitcast i32* %236 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = trunc i64 %238 to i32
  %240 = icmp eq i32 %239, 0
  %241 = lshr i64 %238, 32
  %242 = trunc i64 %241 to i32
  %243 = icmp slt i32 %242, %239
  %or.cond36.i = or i1 %240, %243
  br i1 %or.cond36.i, label %._crit_edge32.i, label %244

; <label>:244                                     ; preds = %234
  %245 = tail call i32 @closedir(%struct.__dirstream* nonnull %222) #6
  %246 = load i8*, i8** @httpd_err503title, align 8, !tbaa !4
  %247 = load i8*, i8** @httpd_err503form, align 8, !tbaa !4
  %248 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %249 = load i8*, i8** %248, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 503, i8* %246, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %247, i8* %249) #6
  br label %ls.exit

._crit_edge32.i:                                  ; preds = %234
  %.pre-phi34.i = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %235, i64 0, i32 5
  %250 = add nsw i32 %242, 1
  store i32 %250, i32* %.pre-phi34.i, align 4, !tbaa !128
  %251 = tail call i32 @fork() #6
  %252 = icmp slt i32 %251, 0
  br i1 %252, label %253, label %257

; <label>:253                                     ; preds = %._crit_edge32.i
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.471, i64 0, i64 0)) #6
  %254 = tail call i32 @closedir(%struct.__dirstream* nonnull %222) #6
  %255 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %256 = load i8*, i8** %255, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 500, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89.170, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.90.171, i64 0, i64 0), i8* %256) #6
  br label %ls.exit

; <label>:257                                     ; preds = %._crit_edge32.i
  %258 = icmp eq i32 %251, 0
  br i1 %258, label %259, label %576

; <label>:259                                     ; preds = %257
  store i1 true, i1* @sub_process, align 1
  %260 = load %struct.httpd_server*, %struct.httpd_server** %194, align 8, !tbaa !79
  %261 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %260, i64 0, i32 10
  %262 = bitcast i32* %261 to i64*
  %263 = load i64, i64* %262, align 8
  %264 = trunc i64 %263 to i32
  %265 = icmp eq i32 %264, -1
  br i1 %265, label %._crit_edge.i.i, label %268

._crit_edge.i.i:                                  ; preds = %259
  %266 = lshr i64 %263, 32
  %267 = trunc i64 %266 to i32
  %.pre1.i.i = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %260, i64 0, i32 11
  br label %270

; <label>:268                                     ; preds = %259
  %269 = tail call i32 @close(i32 %264) #6
  store i32 -1, i32* %261, align 8, !tbaa !26
  %.phi.trans.insert.i.i = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %260, i64 0, i32 11
  %.pre.i.i = load i32, i32* %.phi.trans.insert.i.i, align 4, !tbaa !31
  br label %270

; <label>:270                                     ; preds = %268, %._crit_edge.i.i
  %.pre-phi.i.i = phi i32* [ %.pre1.i.i, %._crit_edge.i.i ], [ %.phi.trans.insert.i.i, %268 ]
  %271 = phi i32 [ %267, %._crit_edge.i.i ], [ %.pre.i.i, %268 ]
  %272 = icmp eq i32 %271, -1
  br i1 %272, label %httpd_unlisten.exit.i, label %273

; <label>:273                                     ; preds = %270
  %274 = tail call i32 @close(i32 %271) #6
  store i32 -1, i32* %.pre-phi.i.i, align 4, !tbaa !31
  br label %httpd_unlisten.exit.i

httpd_unlisten.exit.i:                            ; preds = %273, %270
  %275 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 59, i32 12, i32 0
  %276 = load i64, i64* %275, align 8, !tbaa !146
  tail call fastcc void @send_mime(%struct.httpd_conn* nonnull %hc, i32 200, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.536, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.66, i64 0, i64 0), i64 -1, i64 %276) #6
  tail call void @httpd_write_response(%struct.httpd_conn* nonnull %hc) #6
  %277 = tail call i32 @nice(i32 10) #6
  %278 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 60
  %279 = load i32, i32* %278, align 8, !tbaa !38
  %280 = tail call %struct._IO_FILE* @fdopen(i32 %279, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.472, i64 0, i64 0)) #6
  %281 = icmp eq %struct._IO_FILE* %280, null
  br i1 %281, label %282, label %286

; <label>:282                                     ; preds = %httpd_unlisten.exit.i
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.473, i64 0, i64 0)) #6
  %283 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %284 = load i8*, i8** %283, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 500, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89.170, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.90.171, i64 0, i64 0), i8* %284) #6
  tail call void @httpd_write_response(%struct.httpd_conn* nonnull %hc) #6
  %285 = tail call i32 @closedir(%struct.__dirstream* nonnull %222) #6
  tail call void @exit(i32 1) #18
  unreachable

; <label>:286                                     ; preds = %httpd_unlisten.exit.i
  %287 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %288 = load i8*, i8** %287, align 8, !tbaa !53
  %289 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %280, i8* nonnull getelementptr inbounds ([400 x i8], [400 x i8]* @.str.474, i64 0, i64 0), i8* %288, i8* %288) #6
  %290 = tail call %struct.dirent* @readdir(%struct.__dirstream* nonnull %222) #6
  %291 = icmp eq %struct.dirent* %290, null
  br i1 %291, label %._crit_edge26.i, label %.lr.ph25.i.preheader

.lr.ph25.i.preheader:                             ; preds = %286
  br label %.lr.ph25.i

.lr.ph25.i:                                       ; preds = %.lr.ph25.i.preheader, %.loopexit.i
  %indvars.iv29.i = phi i64 [ %indvars.iv.next30.i, %.loopexit.i ], [ 0, %.lr.ph25.i.preheader ]
  %292 = phi %struct.dirent* [ %363, %.loopexit.i ], [ %290, %.lr.ph25.i.preheader ]
  %293 = load i32, i32* @ls.maxnames, align 4, !tbaa !8
  %294 = sext i32 %293 to i64
  %295 = icmp slt i64 %indvars.iv29.i, %294
  br i1 %295, label %.lr.ph25.i..loopexit.i_crit_edge, label %296

.lr.ph25.i..loopexit.i_crit_edge:                 ; preds = %.lr.ph25.i
  %.pre167 = load i8**, i8*** @ls.nameptrs, align 8, !tbaa !4
  br label %.loopexit.i

; <label>:296                                     ; preds = %.lr.ph25.i
  %297 = icmp eq i32 %293, 0
  br i1 %297, label %298, label %301

; <label>:298                                     ; preds = %296
  store i32 100, i32* @ls.maxnames, align 4, !tbaa !8
  %299 = tail call noalias i8* @malloc(i64 409700) #6
  store i8* %299, i8** @ls.names, align 8, !tbaa !4
  %300 = tail call noalias i8* @malloc(i64 800) #6
  br label %312

; <label>:301                                     ; preds = %296
  %302 = shl nsw i32 %293, 1
  store i32 %302, i32* @ls.maxnames, align 4, !tbaa !8
  %303 = load i8*, i8** @ls.names, align 8, !tbaa !4
  %304 = mul nsw i32 %293, 8194
  %305 = sext i32 %304 to i64
  %306 = tail call i8* @realloc(i8* %303, i64 %305) #6
  store i8* %306, i8** @ls.names, align 8, !tbaa !4
  %307 = load i8*, i8** bitcast (i8*** @ls.nameptrs to i8**), align 8, !tbaa !4
  %308 = load i32, i32* @ls.maxnames, align 4, !tbaa !8
  %309 = sext i32 %308 to i64
  %310 = shl nsw i64 %309, 3
  %311 = tail call i8* @realloc(i8* %307, i64 %310) #6
  %.pre.i46 = load i8*, i8** @ls.names, align 8, !tbaa !4
  br label %312

; <label>:312                                     ; preds = %301, %298
  %313 = phi i8* [ %299, %298 ], [ %.pre.i46, %301 ]
  %storemerge.i = phi i8* [ %300, %298 ], [ %311, %301 ]
  store i8* %storemerge.i, i8** bitcast (i8*** @ls.nameptrs to i8**), align 8, !tbaa !4
  %314 = icmp eq i8* %313, null
  %315 = icmp eq i8* %storemerge.i, null
  %or.cond.i = or i1 %314, %315
  %316 = bitcast i8* %storemerge.i to i8**
  br i1 %or.cond.i, label %327, label %.preheader.i

.preheader.i:                                     ; preds = %312
  %317 = load i32, i32* @ls.maxnames, align 4, !tbaa !8
  %318 = icmp sgt i32 %317, 0
  br i1 %318, label %.lr.ph22.i, label %.loopexit.i

.lr.ph22.i:                                       ; preds = %.preheader.i
  %319 = sext i32 %317 to i64
  %320 = add nsw i64 %319, -1
  %xtraiter = and i64 %319, 7
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %.lr.ph22.i.split, label %.preheader314.preheader

.preheader314.preheader:                          ; preds = %.lr.ph22.i
  br label %.preheader314

.preheader314:                                    ; preds = %.preheader314.preheader, %.preheader314
  %indvars.iv27.i.prol = phi i64 [ %indvars.iv.next28.i.prol, %.preheader314 ], [ 0, %.preheader314.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %.preheader314 ], [ %xtraiter, %.preheader314.preheader ]
  %321 = mul nuw nsw i64 %indvars.iv27.i.prol, 4097
  %322 = getelementptr inbounds i8, i8* %313, i64 %321
  %323 = getelementptr inbounds i8*, i8** %316, i64 %indvars.iv27.i.prol
  store i8* %322, i8** %323, align 8, !tbaa !4
  %indvars.iv.next28.i.prol = add nuw nsw i64 %indvars.iv27.i.prol, 1
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.lr.ph22.i.split.loopexit, label %.preheader314, !llvm.loop !165

.lr.ph22.i.split.loopexit:                        ; preds = %.preheader314
  %324 = zext i32 %317 to i64
  %325 = and i64 %324, 7
  br label %.lr.ph22.i.split

.lr.ph22.i.split:                                 ; preds = %.lr.ph22.i.split.loopexit, %.lr.ph22.i
  %indvars.iv27.i.unr = phi i64 [ 0, %.lr.ph22.i ], [ %325, %.lr.ph22.i.split.loopexit ]
  %326 = icmp ult i64 %320, 7
  br i1 %326, label %.loopexit.i, label %.lr.ph22.i.split.split.preheader

.lr.ph22.i.split.split.preheader:                 ; preds = %.lr.ph22.i.split
  br label %.lr.ph22.i.split.split

; <label>:327                                     ; preds = %312
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([43 x i8], [43 x i8]* @.str.475, i64 0, i64 0)) #6
  tail call void @exit(i32 1) #18
  unreachable

.lr.ph22.i.split.split:                           ; preds = %.lr.ph22.i.split.split.preheader, %.lr.ph22.i.split.split
  %indvars.iv27.i = phi i64 [ %indvars.iv.next28.i.7, %.lr.ph22.i.split.split ], [ %indvars.iv27.i.unr, %.lr.ph22.i.split.split.preheader ]
  %328 = mul nuw nsw i64 %indvars.iv27.i, 4097
  %329 = getelementptr inbounds i8, i8* %313, i64 %328
  %330 = getelementptr inbounds i8*, i8** %316, i64 %indvars.iv27.i
  store i8* %329, i8** %330, align 8, !tbaa !4
  %indvars.iv.next28.i = add nuw nsw i64 %indvars.iv27.i, 1
  %331 = mul nuw nsw i64 %indvars.iv.next28.i, 4097
  %332 = getelementptr inbounds i8, i8* %313, i64 %331
  %333 = getelementptr inbounds i8*, i8** %316, i64 %indvars.iv.next28.i
  store i8* %332, i8** %333, align 8, !tbaa !4
  %indvars.iv.next28.i.1 = add nsw i64 %indvars.iv27.i, 2
  %334 = mul nuw nsw i64 %indvars.iv.next28.i.1, 4097
  %335 = getelementptr inbounds i8, i8* %313, i64 %334
  %336 = getelementptr inbounds i8*, i8** %316, i64 %indvars.iv.next28.i.1
  store i8* %335, i8** %336, align 8, !tbaa !4
  %indvars.iv.next28.i.2 = add nsw i64 %indvars.iv27.i, 3
  %337 = mul nuw nsw i64 %indvars.iv.next28.i.2, 4097
  %338 = getelementptr inbounds i8, i8* %313, i64 %337
  %339 = getelementptr inbounds i8*, i8** %316, i64 %indvars.iv.next28.i.2
  store i8* %338, i8** %339, align 8, !tbaa !4
  %indvars.iv.next28.i.3 = add nsw i64 %indvars.iv27.i, 4
  %340 = mul nuw nsw i64 %indvars.iv.next28.i.3, 4097
  %341 = getelementptr inbounds i8, i8* %313, i64 %340
  %342 = getelementptr inbounds i8*, i8** %316, i64 %indvars.iv.next28.i.3
  store i8* %341, i8** %342, align 8, !tbaa !4
  %indvars.iv.next28.i.4 = add nsw i64 %indvars.iv27.i, 5
  %343 = mul nuw nsw i64 %indvars.iv.next28.i.4, 4097
  %344 = getelementptr inbounds i8, i8* %313, i64 %343
  %345 = getelementptr inbounds i8*, i8** %316, i64 %indvars.iv.next28.i.4
  store i8* %344, i8** %345, align 8, !tbaa !4
  %indvars.iv.next28.i.5 = add nsw i64 %indvars.iv27.i, 6
  %346 = mul nuw nsw i64 %indvars.iv.next28.i.5, 4097
  %347 = getelementptr inbounds i8, i8* %313, i64 %346
  %348 = getelementptr inbounds i8*, i8** %316, i64 %indvars.iv.next28.i.5
  store i8* %347, i8** %348, align 8, !tbaa !4
  %indvars.iv.next28.i.6 = add nsw i64 %indvars.iv27.i, 7
  %349 = mul nuw nsw i64 %indvars.iv.next28.i.6, 4097
  %350 = getelementptr inbounds i8, i8* %313, i64 %349
  %351 = getelementptr inbounds i8*, i8** %316, i64 %indvars.iv.next28.i.6
  store i8* %350, i8** %351, align 8, !tbaa !4
  %indvars.iv.next28.i.7 = add nuw nsw i64 %indvars.iv27.i, 8
  %exitcond165.7 = icmp eq i64 %indvars.iv.next28.i.7, %319
  br i1 %exitcond165.7, label %.loopexit.i.loopexit, label %.lr.ph22.i.split.split

.loopexit.i.loopexit:                             ; preds = %.lr.ph22.i.split.split
  br label %.loopexit.i

.loopexit.i:                                      ; preds = %.loopexit.i.loopexit, %.lr.ph22.i.split, %.lr.ph25.i..loopexit.i_crit_edge, %.preheader.i
  %352 = phi i8** [ %.pre167, %.lr.ph25.i..loopexit.i_crit_edge ], [ %316, %.preheader.i ], [ %316, %.lr.ph22.i.split ], [ %316, %.loopexit.i.loopexit ]
  %353 = getelementptr inbounds %struct.dirent, %struct.dirent* %292, i64 0, i32 4, i64 0
  %354 = tail call i64 @strlen(i8* %353) #13
  %355 = getelementptr inbounds i8*, i8** %352, i64 %indvars.iv29.i
  %356 = load i8*, i8** %355, align 8, !tbaa !4
  %sext18.i = shl i64 %354, 32
  %357 = ashr exact i64 %sext18.i, 32
  %358 = tail call i8* @strncpy(i8* %356, i8* %353, i64 %357) #6
  %359 = load i8**, i8*** @ls.nameptrs, align 8, !tbaa !4
  %360 = getelementptr inbounds i8*, i8** %359, i64 %indvars.iv29.i
  %361 = load i8*, i8** %360, align 8, !tbaa !4
  %362 = getelementptr inbounds i8, i8* %361, i64 %357
  store i8 0, i8* %362, align 1, !tbaa !1
  %indvars.iv.next30.i = add nuw nsw i64 %indvars.iv29.i, 1
  %363 = tail call %struct.dirent* @readdir(%struct.__dirstream* nonnull %222) #6
  %364 = icmp eq %struct.dirent* %363, null
  br i1 %364, label %._crit_edge26.loopexit.i, label %.lr.ph25.i

._crit_edge26.loopexit.i:                         ; preds = %.loopexit.i
  %indvars.iv.next30.i.lcssa = phi i64 [ %indvars.iv.next30.i, %.loopexit.i ]
  %365 = trunc i64 %indvars.iv.next30.i.lcssa to i32
  br label %._crit_edge26.i

._crit_edge26.i:                                  ; preds = %._crit_edge26.loopexit.i, %286
  %nnames.0.lcssa.i = phi i32 [ 0, %286 ], [ %365, %._crit_edge26.loopexit.i ]
  %366 = tail call i32 @closedir(%struct.__dirstream* nonnull %222) #6
  %367 = load i8*, i8** bitcast (i8*** @ls.nameptrs to i8**), align 8, !tbaa !4
  %368 = sext i32 %nnames.0.lcssa.i to i64
  tail call void @qsort(i8* %367, i64 %368, i64 8, i32 (i8*, i8*)* nonnull @name_compare) #6
  %369 = icmp sgt i32 %nnames.0.lcssa.i, 0
  br i1 %369, label %.lr.ph.i, label %._crit_edge.i

.lr.ph.i:                                         ; preds = %._crit_edge26.i
  %370 = getelementptr inbounds %struct.stat, %struct.stat* %lsb.i, i64 0, i32 3
  %371 = getelementptr inbounds [20 x i8], [20 x i8]* %modestr.i, i64 0, i64 1
  %372 = getelementptr inbounds [20 x i8], [20 x i8]* %modestr.i, i64 0, i64 2
  %373 = getelementptr inbounds [20 x i8], [20 x i8]* %modestr.i, i64 0, i64 3
  %374 = getelementptr inbounds [20 x i8], [20 x i8]* %modestr.i, i64 0, i64 4
  %375 = getelementptr inbounds %struct.stat, %struct.stat* %lsb.i, i64 0, i32 12, i32 0
  %376 = getelementptr inbounds %struct.stat, %struct.stat* %sb.i, i64 0, i32 3
  %377 = getelementptr inbounds %struct.stat, %struct.stat* %lsb.i, i64 0, i32 2
  %378 = getelementptr inbounds %struct.stat, %struct.stat* %lsb.i, i64 0, i32 8
  br label %379

; <label>:379                                     ; preds = %573, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %.lr.ph.i ], [ %indvars.iv.next.i, %573 ]
  %380 = load i8*, i8** %2, align 8, !tbaa !48
  %381 = call i64 @strlen(i8* %380) #13
  %382 = add i64 %381, 1
  %383 = load i8**, i8*** @ls.nameptrs, align 8, !tbaa !4
  %384 = getelementptr inbounds i8*, i8** %383, i64 %indvars.iv.i
  %385 = load i8*, i8** %384, align 8, !tbaa !4
  %386 = call i64 @strlen(i8* %385) #13
  %387 = add i64 %382, %386
  call void @httpd_realloc_str(i8** nonnull @ls.name, i64* nonnull @ls.maxname, i64 %387) #6
  %388 = load i8*, i8** %66, align 8, !tbaa !111
  %389 = call i64 @strlen(i8* %388) #13
  %390 = add i64 %389, 1
  %391 = load i8**, i8*** @ls.nameptrs, align 8, !tbaa !4
  %392 = getelementptr inbounds i8*, i8** %391, i64 %indvars.iv.i
  %393 = load i8*, i8** %392, align 8, !tbaa !4
  %394 = call i64 @strlen(i8* %393) #13
  %395 = add i64 %390, %394
  call void @httpd_realloc_str(i8** nonnull @ls.rname, i64* nonnull @ls.maxrname, i64 %395) #6
  %396 = load i8*, i8** %2, align 8, !tbaa !48
  %397 = load i8, i8* %396, align 1, !tbaa !1
  switch i8 %397, label %.thread.i47 [
    i8 0, label %402
    i8 46, label %398
  ]

; <label>:398                                     ; preds = %379
  %399 = getelementptr inbounds i8, i8* %396, i64 1
  %400 = load i8, i8* %399, align 1, !tbaa !1
  %401 = icmp eq i8 %400, 0
  br i1 %401, label %402, label %.thread.i47

; <label>:402                                     ; preds = %379, %398
  %403 = load i8*, i8** @ls.name, align 8, !tbaa !4
  %404 = load i8**, i8*** @ls.nameptrs, align 8, !tbaa !4
  %405 = getelementptr inbounds i8*, i8** %404, i64 %indvars.iv.i
  %406 = load i8*, i8** %405, align 8, !tbaa !4
  %407 = call i8* @strcpy(i8* %403, i8* %406) #6
  %408 = load i8*, i8** @ls.rname, align 8, !tbaa !4
  %409 = load i8**, i8*** @ls.nameptrs, align 8, !tbaa !4
  %410 = getelementptr inbounds i8*, i8** %409, i64 %indvars.iv.i
  %411 = load i8*, i8** %410, align 8, !tbaa !4
  %412 = call i8* @strcpy(i8* %408, i8* %411) #6
  br label %439

.thread.i47:                                      ; preds = %379, %398
  %413 = load i8*, i8** @ls.name, align 8, !tbaa !4
  %414 = load i64, i64* @ls.maxname, align 8, !tbaa !16
  %415 = load i8**, i8*** @ls.nameptrs, align 8, !tbaa !4
  %416 = getelementptr inbounds i8*, i8** %415, i64 %indvars.iv.i
  %417 = load i8*, i8** %416, align 8, !tbaa !4
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %413, i64 %414, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.461, i64 0, i64 0), i8* %396, i8* %417) #6
  %418 = load i8*, i8** %66, align 8, !tbaa !111
  %419 = load i8, i8* %418, align 1, !tbaa !1
  %420 = icmp eq i8 %419, 46
  br i1 %420, label %423, label %.thread35.i

.thread35.i:                                      ; preds = %.thread.i47
  %421 = load i8*, i8** @ls.rname, align 8, !tbaa !4
  %422 = load i64, i64* @ls.maxrname, align 8, !tbaa !16
  br label %433

; <label>:423                                     ; preds = %.thread.i47
  %424 = getelementptr inbounds i8, i8* %418, i64 1
  %425 = load i8, i8* %424, align 1, !tbaa !1
  %426 = icmp eq i8 %425, 0
  %427 = load i8*, i8** @ls.rname, align 8, !tbaa !4
  %428 = load i64, i64* @ls.maxrname, align 8, !tbaa !16
  br i1 %426, label %429, label %433

; <label>:429                                     ; preds = %423
  %430 = load i8**, i8*** @ls.nameptrs, align 8, !tbaa !4
  %431 = getelementptr inbounds i8*, i8** %430, i64 %indvars.iv.i
  %432 = load i8*, i8** %431, align 8, !tbaa !4
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %427, i64 %428, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.476, i64 0, i64 0), i8* %432) #6
  br label %439

; <label>:433                                     ; preds = %423, %.thread35.i
  %434 = phi i64 [ %422, %.thread35.i ], [ %428, %423 ]
  %435 = phi i8* [ %421, %.thread35.i ], [ %427, %423 ]
  %436 = load i8**, i8*** @ls.nameptrs, align 8, !tbaa !4
  %437 = getelementptr inbounds i8*, i8** %436, i64 %indvars.iv.i
  %438 = load i8*, i8** %437, align 8, !tbaa !4
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %435, i64 %434, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.477, i64 0, i64 0), i8* %418, i8* %438) #6
  br label %439

; <label>:439                                     ; preds = %433, %429, %402
  %440 = load i8*, i8** @ls.rname, align 8, !tbaa !4
  %441 = call i64 @strlen(i8* %440) #13
  %442 = mul i64 %441, 3
  %443 = add i64 %442, 1
  call void @httpd_realloc_str(i8** nonnull @ls.encrname, i64* nonnull @ls.maxencrname, i64 %443) #6
  %444 = load i8*, i8** @ls.encrname, align 8, !tbaa !4
  %445 = load i64, i64* @ls.maxencrname, align 8, !tbaa !16
  %446 = trunc i64 %445 to i32
  %447 = load i8*, i8** @ls.rname, align 8, !tbaa !4
  %448 = load i8, i8* %447, align 1, !tbaa !1
  %449 = icmp ne i8 %448, 0
  %450 = icmp sgt i32 %446, 4
  %or.cond3.i.i = and i1 %450, %449
  br i1 %or.cond3.i.i, label %.lr.ph.i.i, label %strencode.exit.i

.lr.ph.i.i:                                       ; preds = %439
  %451 = tail call i16** @__ctype_b_loc() #21
  br label %452

; <label>:452                                     ; preds = %471, %.lr.ph.i.i
  %453 = phi i8 [ %448, %.lr.ph.i.i ], [ %473, %471 ]
  %tolen.06.i.i = phi i32 [ 0, %.lr.ph.i.i ], [ %tolen.1.i.i, %471 ]
  %.05.i.i = phi i8* [ %447, %.lr.ph.i.i ], [ %472, %471 ]
  %.014.i.i = phi i8* [ %444, %.lr.ph.i.i ], [ %.1.i.i, %471 ]
  %454 = sext i8 %453 to i64
  %455 = load i16*, i16** %451, align 8, !tbaa !4
  %456 = getelementptr inbounds i16, i16* %455, i64 %454
  %457 = load i16, i16* %456, align 2, !tbaa !6
  %458 = and i16 %457, 8
  %459 = icmp eq i16 %458, 0
  br i1 %459, label %460, label %463

; <label>:460                                     ; preds = %452
  %461 = sext i8 %453 to i32
  %memchr.i.i = call i8* @memchr(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.485, i64 0, i64 0), i32 %461, i64 6) #6
  %462 = icmp eq i8* %memchr.i.i, null
  br i1 %462, label %466, label %463

; <label>:463                                     ; preds = %460, %452
  store i8 %453, i8* %.014.i.i, align 1, !tbaa !1
  %464 = getelementptr inbounds i8, i8* %.014.i.i, i64 1
  %465 = add nsw i32 %tolen.06.i.i, 1
  br label %471

; <label>:466                                     ; preds = %460
  %467 = zext i8 %453 to i32
  %468 = call i32 (i8*, i8*, ...) @sprintf(i8* %.014.i.i, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.486, i64 0, i64 0), i32 %467) #6
  %469 = getelementptr inbounds i8, i8* %.014.i.i, i64 3
  %470 = add nsw i32 %tolen.06.i.i, 3
  br label %471

; <label>:471                                     ; preds = %466, %463
  %.1.i.i = phi i8* [ %464, %463 ], [ %469, %466 ]
  %tolen.1.i.i = phi i32 [ %465, %463 ], [ %470, %466 ]
  %472 = getelementptr inbounds i8, i8* %.05.i.i, i64 1
  %473 = load i8, i8* %472, align 1, !tbaa !1
  %474 = icmp ne i8 %473, 0
  %475 = add nsw i32 %tolen.1.i.i, 4
  %476 = icmp slt i32 %475, %446
  %or.cond.i.i = and i1 %474, %476
  br i1 %or.cond.i.i, label %452, label %strencode.exit.i.loopexit

strencode.exit.i.loopexit:                        ; preds = %471
  %.1.i.i.lcssa = phi i8* [ %.1.i.i, %471 ]
  br label %strencode.exit.i

strencode.exit.i:                                 ; preds = %strencode.exit.i.loopexit, %439
  %.01.lcssa.i.i = phi i8* [ %444, %439 ], [ %.1.i.i.lcssa, %strencode.exit.i.loopexit ]
  store i8 0, i8* %.01.lcssa.i.i, align 1, !tbaa !1
  %477 = load i8*, i8** @ls.name, align 8, !tbaa !4
  %478 = call i32 @__xstat(i32 1, i8* nonnull %477, %struct.stat* nonnull %sb.i) #6
  %479 = icmp slt i32 %478, 0
  br i1 %479, label %573, label %480

; <label>:480                                     ; preds = %strencode.exit.i
  %481 = load i8*, i8** @ls.name, align 8, !tbaa !4
  %482 = call i32 @__lxstat(i32 1, i8* nonnull %481, %struct.stat* nonnull %lsb.i) #6
  %483 = icmp slt i32 %482, 0
  br i1 %483, label %573, label %484

; <label>:484                                     ; preds = %480
  store i8 0, i8* %220, align 16, !tbaa !1
  %485 = load i32, i32* %370, align 8, !tbaa !166
  %486 = and i32 %485, 61440
  switch i32 %486, label %501 [
    i32 4096, label %487
    i32 8192, label %488
    i32 16384, label %489
    i32 24576, label %490
    i32 32768, label %491
    i32 49152, label %492
    i32 40960, label %493
  ]

; <label>:487                                     ; preds = %484
  store i8 112, i8* %219, align 16, !tbaa !1
  br label %502

; <label>:488                                     ; preds = %484
  store i8 99, i8* %219, align 16, !tbaa !1
  br label %502

; <label>:489                                     ; preds = %484
  store i8 100, i8* %219, align 16, !tbaa !1
  br label %502

; <label>:490                                     ; preds = %484
  store i8 98, i8* %219, align 16, !tbaa !1
  br label %502

; <label>:491                                     ; preds = %484
  store i8 45, i8* %219, align 16, !tbaa !1
  br label %502

; <label>:492                                     ; preds = %484
  store i8 115, i8* %219, align 16, !tbaa !1
  br label %502

; <label>:493                                     ; preds = %484
  store i8 108, i8* %219, align 16, !tbaa !1
  %494 = load i8*, i8** @ls.name, align 8, !tbaa !4
  %495 = call i64 @readlink(i8* %494, i8* nonnull %220, i64 4096) #6
  %496 = trunc i64 %495 to i32
  %497 = icmp eq i32 %496, -1
  br i1 %497, label %502, label %498

; <label>:498                                     ; preds = %493
  %sext.i = shl i64 %495, 32
  %499 = ashr exact i64 %sext.i, 32
  %500 = getelementptr inbounds [4097 x i8], [4097 x i8]* %lnk.i, i64 0, i64 %499
  store i8 0, i8* %500, align 1, !tbaa !1
  br label %502

; <label>:501                                     ; preds = %484
  store i8 63, i8* %219, align 16, !tbaa !1
  br label %502

; <label>:502                                     ; preds = %501, %498, %493, %492, %491, %490, %489, %488, %487
  %linkprefix.0.i = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), %501 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.478, i64 0, i64 0), %498 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), %493 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), %492 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), %491 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), %490 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), %489 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), %488 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), %487 ]
  %503 = load i32, i32* %370, align 8, !tbaa !166
  %504 = and i32 %503, 4
  %505 = icmp ne i32 %504, 0
  %506 = select i1 %505, i8 114, i8 45
  store i8 %506, i8* %371, align 1, !tbaa !1
  %507 = and i32 %503, 2
  %508 = icmp ne i32 %507, 0
  %509 = select i1 %508, i8 119, i8 45
  store i8 %509, i8* %372, align 2, !tbaa !1
  %510 = and i32 %503, 1
  %511 = icmp ne i32 %510, 0
  %512 = select i1 %511, i8 120, i8 45
  store i8 %512, i8* %373, align 1, !tbaa !1
  store i8 0, i8* %374, align 4, !tbaa !1
  %513 = call i64 @time(i64* null) #6
  %514 = call i8* @ctime(i64* nonnull %375) #6
  %515 = getelementptr inbounds i8, i8* %514, i64 4
  %516 = load i8, i8* %515, align 1, !tbaa !1
  store i8 %516, i8* %514, align 1, !tbaa !1
  %517 = getelementptr inbounds i8, i8* %514, i64 5
  %518 = load i8, i8* %517, align 1, !tbaa !1
  %519 = getelementptr inbounds i8, i8* %514, i64 1
  store i8 %518, i8* %519, align 1, !tbaa !1
  %520 = getelementptr inbounds i8, i8* %514, i64 6
  %521 = load i8, i8* %520, align 1, !tbaa !1
  %522 = getelementptr inbounds i8, i8* %514, i64 2
  store i8 %521, i8* %522, align 1, !tbaa !1
  %523 = getelementptr inbounds i8, i8* %514, i64 3
  store i8 32, i8* %523, align 1, !tbaa !1
  %524 = getelementptr inbounds i8, i8* %514, i64 8
  %525 = load i8, i8* %524, align 1, !tbaa !1
  store i8 %525, i8* %515, align 1, !tbaa !1
  %526 = getelementptr inbounds i8, i8* %514, i64 9
  %527 = load i8, i8* %526, align 1, !tbaa !1
  store i8 %527, i8* %517, align 1, !tbaa !1
  store i8 32, i8* %520, align 1, !tbaa !1
  %528 = load i64, i64* %375, align 8, !tbaa !167
  %529 = sub nsw i64 %513, %528
  %530 = icmp sgt i64 %529, 15724800
  br i1 %530, label %531, label %543

; <label>:531                                     ; preds = %502
  %532 = getelementptr inbounds i8, i8* %514, i64 7
  store i8 32, i8* %532, align 1, !tbaa !1
  %533 = getelementptr inbounds i8, i8* %514, i64 20
  %534 = load i8, i8* %533, align 1, !tbaa !1
  store i8 %534, i8* %524, align 1, !tbaa !1
  %535 = getelementptr inbounds i8, i8* %514, i64 21
  %536 = load i8, i8* %535, align 1, !tbaa !1
  store i8 %536, i8* %526, align 1, !tbaa !1
  %537 = getelementptr inbounds i8, i8* %514, i64 22
  %538 = load i8, i8* %537, align 1, !tbaa !1
  %539 = getelementptr inbounds i8, i8* %514, i64 10
  store i8 %538, i8* %539, align 1, !tbaa !1
  %540 = getelementptr inbounds i8, i8* %514, i64 23
  %541 = load i8, i8* %540, align 1, !tbaa !1
  %542 = getelementptr inbounds i8, i8* %514, i64 11
  store i8 %541, i8* %542, align 1, !tbaa !1
  %.pre31.i = getelementptr inbounds i8, i8* %514, i64 12
  br label %554

; <label>:543                                     ; preds = %502
  %544 = getelementptr inbounds i8, i8* %514, i64 11
  %545 = load i8, i8* %544, align 1, !tbaa !1
  %546 = getelementptr inbounds i8, i8* %514, i64 7
  store i8 %545, i8* %546, align 1, !tbaa !1
  %547 = getelementptr inbounds i8, i8* %514, i64 12
  %548 = load i8, i8* %547, align 1, !tbaa !1
  store i8 %548, i8* %524, align 1, !tbaa !1
  store i8 58, i8* %526, align 1, !tbaa !1
  %549 = getelementptr inbounds i8, i8* %514, i64 14
  %550 = load i8, i8* %549, align 1, !tbaa !1
  %551 = getelementptr inbounds i8, i8* %514, i64 10
  store i8 %550, i8* %551, align 1, !tbaa !1
  %552 = getelementptr inbounds i8, i8* %514, i64 15
  %553 = load i8, i8* %552, align 1, !tbaa !1
  store i8 %553, i8* %544, align 1, !tbaa !1
  br label %554

; <label>:554                                     ; preds = %543, %531
  %.pre-phi.i = phi i8* [ %547, %543 ], [ %.pre31.i, %531 ]
  store i8 0, i8* %.pre-phi.i, align 1, !tbaa !1
  %555 = load i32, i32* %376, align 8, !tbaa !166
  %556 = and i32 %555, 61440
  switch i32 %556, label %559 [
    i32 16384, label %563
    i32 49152, label %557
    i32 40960, label %558
  ]

; <label>:557                                     ; preds = %554
  br label %563

; <label>:558                                     ; preds = %554
  br label %563

; <label>:559                                     ; preds = %554
  %560 = and i32 %555, 1
  %561 = icmp ne i32 %560, 0
  %562 = select i1 %561, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.480, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0)
  br label %563

; <label>:563                                     ; preds = %559, %558, %557, %554
  %fileclass.0.i = phi i8* [ %562, %559 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.479, i64 0, i64 0), %558 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.47.183, i64 0, i64 0), %557 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.88.184, i64 0, i64 0), %554 ]
  %564 = load i64, i64* %377, align 8, !tbaa !168
  %565 = load i64, i64* %378, align 8, !tbaa !98
  %566 = load i8*, i8** @ls.encrname, align 8, !tbaa !4
  %567 = icmp eq i32 %556, 16384
  %568 = select i1 %567, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.88.184, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0)
  %569 = load i8**, i8*** @ls.nameptrs, align 8, !tbaa !4
  %570 = getelementptr inbounds i8*, i8** %569, i64 %indvars.iv.i
  %571 = load i8*, i8** %570, align 8, !tbaa !4
  %572 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %280, i8* nonnull getelementptr inbounds ([58 x i8], [58 x i8]* @.str.481, i64 0, i64 0), i8* nonnull %219, i64 %564, i64 %565, i8* nonnull %514, i8* %566, i8* %568, i8* %571, i8* %linkprefix.0.i, i8* nonnull %220, i8* %fileclass.0.i) #6
  br label %573

; <label>:573                                     ; preds = %563, %480, %strencode.exit.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %nnames.0.lcssa.i
  br i1 %exitcond, label %._crit_edge.i.loopexit, label %379

._crit_edge.i.loopexit:                           ; preds = %573
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i.loopexit, %._crit_edge26.i
  %574 = call i64 @fwrite(i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.482, i64 0, i64 0), i64 29, i64 1, %struct._IO_FILE* nonnull %280) #6
  %575 = call i32 @fclose(%struct._IO_FILE* nonnull %280) #6
  call void @exit(i32 0) #18
  unreachable

; <label>:576                                     ; preds = %257
  %577 = tail call i32 @closedir(%struct.__dirstream* nonnull %222) #6
  %578 = load i8*, i8** %2, align 8, !tbaa !48
  tail call void (i32, i8*, ...) @syslog(i32 7, i8* nonnull getelementptr inbounds ([51 x i8], [51 x i8]* @.str.483, i64 0, i64 0), i32 %251, i8* %578) #6
  %579 = zext i32 %251 to i64
  %580 = inttoptr i64 %579 to i8*
  %581 = tail call %struct.TimerStruct* @tmr_create(%struct.timeval* null, void (i8*, %struct.timeval*)* nonnull @cgi_kill, i8* %580, i64 30000, i32 0) #6
  %582 = icmp eq %struct.TimerStruct* %581, null
  br i1 %582, label %583, label %584

; <label>:583                                     ; preds = %576
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.484, i64 0, i64 0)) #6
  tail call void @exit(i32 1) #18
  unreachable

; <label>:584                                     ; preds = %576
  %585 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 9
  store i32 200, i32* %585, align 8, !tbaa !93
  %586 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 11
  store i64 25000, i64* %586, align 8, !tbaa !61
  %587 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 58
  store i32 0, i32* %587, align 4, !tbaa !148
  br label %ls.exit

; <label>:588                                     ; preds = %228
  %589 = tail call i32 @closedir(%struct.__dirstream* nonnull %222) #6
  %590 = load i32, i32* %5, align 4, !tbaa !91
  %switch.tableidx.i.i = add i32 %590, -1
  %591 = icmp ult i32 %switch.tableidx.i.i, 3
  br i1 %591, label %switch.lookup.i.i, label %httpd_method_str.exit.i

switch.lookup.i.i:                                ; preds = %588
  %592 = sext i32 %switch.tableidx.i.i to i64
  %switch.gep.i.i = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table, i64 0, i64 %592
  %switch.load.i.i = load i8*, i8** %switch.gep.i.i, align 8
  br label %httpd_method_str.exit.i

httpd_method_str.exit.i:                          ; preds = %switch.lookup.i.i, %588
  %593 = phi i8* [ %switch.load.i.i, %switch.lookup.i.i ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23.131, i64 0, i64 0), %588 ]
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 501, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.85.144, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.86.145, i64 0, i64 0), i8* %593) #6
  br label %ls.exit

ls.exit:                                          ; preds = %224, %230, %244, %253, %584, %httpd_method_str.exit.i
  %.0.i = phi i32 [ -1, %224 ], [ -1, %244 ], [ -1, %253 ], [ -1, %httpd_method_str.exit.i ], [ 0, %584 ], [ 0, %230 ]
  call void @llvm.lifetime.end(i64 4097, i8* %220) #6
  call void @llvm.lifetime.end(i64 20, i8* %219) #6
  call void @llvm.lifetime.end(i64 144, i8* %218) #6
  call void @llvm.lifetime.end(i64 144, i8* %217) #6
  br label %cgi.exit

; <label>:594                                     ; preds = %.thread175
  %595 = load i8*, i8** @really_start_request.indexname, align 8, !tbaa !4
  %596 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 1
  %597 = load %struct.httpd_server*, %struct.httpd_server** %596, align 8, !tbaa !79
  %598 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %597, i64 0, i32 14
  %599 = load i32, i32* %598, align 8, !tbaa !132
  %600 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 54
  %601 = load i32, i32* %600, align 4, !tbaa !83
  %602 = call fastcc i8* @expand_symlinks(i8* %595, i8** nonnull %pi, i32 %599, i32 %601)
  %603 = icmp eq i8* %602, null
  br i1 %603, label %608, label %604

; <label>:604                                     ; preds = %594
  %605 = load i8*, i8** %pi, align 8, !tbaa !4
  %606 = load i8, i8* %605, align 1, !tbaa !1
  %607 = icmp eq i8 %606, 0
  br i1 %607, label %611, label %608

; <label>:608                                     ; preds = %604, %594
  %609 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %610 = load i8*, i8** %609, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 500, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89.170, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.90.171, i64 0, i64 0), i8* %610)
  br label %cgi.exit

; <label>:611                                     ; preds = %604
  %612 = tail call i64 @strlen(i8* nonnull %602) #13
  %613 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 35
  tail call void @httpd_realloc_str(i8** nonnull %2, i64* %613, i64 %612)
  %614 = load i8*, i8** %2, align 8, !tbaa !48
  %615 = tail call i8* @strcpy(i8* %614, i8* nonnull %602) #6
  %616 = load i32, i32* %15, align 8, !tbaa !164
  %617 = and i32 %616, 5
  %618 = icmp eq i32 %617, 0
  br i1 %618, label %619, label %654

; <label>:619                                     ; preds = %611
  %620 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %621 = bitcast %union.httpd_sockaddr* %620 to %struct.sockaddr*
  %622 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %620, i64 0, i32 0, i32 0
  %623 = load i16, i16* %622, align 8, !tbaa !88
  %switch.selectcmp.i.i4 = icmp eq i16 %623, 10
  %switch.selectcmp1.i.i5 = icmp eq i16 %623, 2
  %624 = select i1 %switch.selectcmp.i.i4, i32 28, i32 0
  %625 = select i1 %switch.selectcmp1.i.i5, i32 16, i32 %624
  %626 = tail call i32 @getnameinfo(%struct.sockaddr* %621, i32 %625, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %627 = icmp eq i32 %626, 0
  br i1 %627, label %629, label %628

; <label>:628                                     ; preds = %619
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit6

; <label>:629                                     ; preds = %619
  %630 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2, i32 0, i32 1
  %631 = bitcast i64* %630 to i32*
  %632 = load i32, i32* %631, align 4, !tbaa !8
  %633 = icmp eq i32 %632, 0
  br i1 %633, label %634, label %httpd_ntoa.exit6

; <label>:634                                     ; preds = %629
  %635 = bitcast i64* %630 to [4 x i32]*
  %636 = getelementptr inbounds [4 x i32], [4 x i32]* %635, i64 0, i64 1
  %637 = load i32, i32* %636, align 4, !tbaa !8
  %638 = icmp eq i32 %637, 0
  br i1 %638, label %639, label %httpd_ntoa.exit6

; <label>:639                                     ; preds = %634
  %640 = getelementptr inbounds i64, i64* %630, i64 1
  %641 = bitcast i64* %640 to i32*
  %642 = load i32, i32* %641, align 4, !tbaa !8
  %643 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %644 = icmp eq i32 %642, %643
  br i1 %644, label %645, label %httpd_ntoa.exit6

; <label>:645                                     ; preds = %639
  %646 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %647 = icmp eq i32 %646, 0
  br i1 %647, label %648, label %httpd_ntoa.exit6

; <label>:648                                     ; preds = %645
  %649 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %650 = add i64 %649, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %650, i32 1, i1 false) #6
  br label %httpd_ntoa.exit6

httpd_ntoa.exit6:                                 ; preds = %628, %629, %634, %639, %645, %648
  %651 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %652 = load i8*, i8** %651, align 8, !tbaa !53
  tail call void (i32, i8*, ...) @syslog(i32 6, i8* nonnull getelementptr inbounds ([62 x i8], [62 x i8]* @.str.445, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* %652) #6
  %653 = load i8*, i8** %651, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 403, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94.175, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([81 x i8], [81 x i8]* @.str.446, i64 0, i64 0), i8* %653)
  br label %cgi.exit

; <label>:654                                     ; preds = %611, %54
  %expnlen.0 = phi i64 [ %612, %611 ], [ %4, %54 ]
  tail call void @httpd_realloc_str(i8** nonnull @really_start_request.dirname, i64* nonnull @really_start_request.maxdirname, i64 %expnlen.0)
  %655 = load i8*, i8** @really_start_request.dirname, align 8, !tbaa !4
  %656 = load i8*, i8** %2, align 8, !tbaa !48
  %657 = tail call i8* @strcpy(i8* %655, i8* %656) #6
  %658 = load i8*, i8** @really_start_request.dirname, align 8, !tbaa !4
  %659 = tail call i8* @strrchr(i8* %658, i32 47) #13
  %660 = icmp eq i8* %659, null
  br i1 %660, label %661, label %663

; <label>:661                                     ; preds = %654
  %662 = bitcast i8* %658 to i16*
  store i16 46, i16* %662, align 1
  br label %664

; <label>:663                                     ; preds = %654
  store i8 0, i8* %659, align 1, !tbaa !1
  br label %664

; <label>:664                                     ; preds = %663, %661
  %665 = load i8*, i8** @really_start_request.dirname, align 8, !tbaa !4
  %666 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 1
  %667 = load %struct.httpd_server*, %struct.httpd_server** %666, align 8, !tbaa !79
  %668 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %667, i64 0, i32 16
  %669 = load i32, i32* %668, align 8, !tbaa !133
  %670 = icmp eq i32 %669, 0
  br i1 %670, label %.thread.i49, label %671

; <label>:671                                     ; preds = %664
  %672 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %667, i64 0, i32 15
  %673 = load i32, i32* %672, align 4, !tbaa !82
  %674 = icmp eq i32 %673, 0
  br i1 %674, label %680, label %675

; <label>:675                                     ; preds = %671
  %676 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 29
  %677 = load i8*, i8** %676, align 8, !tbaa !118
  %678 = load i8, i8* %677, align 1, !tbaa !1
  %679 = icmp eq i8 %678, 0
  br i1 %679, label %680, label %681

; <label>:680                                     ; preds = %675, %671
  br label %681

; <label>:681                                     ; preds = %680, %675
  %topdir.0.i48 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31.182, i64 0, i64 0), %680 ], [ %677, %675 ]
  %682 = tail call fastcc i32 @auth_check2(%struct.httpd_conn* nonnull %hc, i8* %topdir.0.i48) #6
  switch i32 %682, label %.thread.i49 [
    i32 -1, label %auth_check.exit51
    i32 1, label %auth_check.exit51
  ]

.thread.i49:                                      ; preds = %681, %664
  %683 = tail call fastcc i32 @auth_check2(%struct.httpd_conn* nonnull %hc, i8* %665) #6
  br label %auth_check.exit51

auth_check.exit51:                                ; preds = %681, %681, %.thread.i49
  %.1.i50 = phi i32 [ %683, %.thread.i49 ], [ %682, %681 ], [ %682, %681 ]
  %684 = icmp eq i32 %.1.i50, -1
  br i1 %684, label %cgi.exit, label %685

; <label>:685                                     ; preds = %auth_check.exit51
  %686 = icmp eq i64 %expnlen.0, 9
  br i1 %686, label %687, label %726

; <label>:687                                     ; preds = %685
  %688 = load i8*, i8** %2, align 8, !tbaa !48
  %689 = tail call i32 @strcmp(i8* %688, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.447, i64 0, i64 0)) #6
  %690 = icmp eq i32 %689, 0
  br i1 %690, label %691, label %774

; <label>:691                                     ; preds = %687
  %692 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %693 = bitcast %union.httpd_sockaddr* %692 to %struct.sockaddr*
  %694 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %692, i64 0, i32 0, i32 0
  %695 = load i16, i16* %694, align 8, !tbaa !88
  %switch.selectcmp.i.i7 = icmp eq i16 %695, 10
  %switch.selectcmp1.i.i8 = icmp eq i16 %695, 2
  %696 = select i1 %switch.selectcmp.i.i7, i32 28, i32 0
  %697 = select i1 %switch.selectcmp1.i.i8, i32 16, i32 %696
  %698 = tail call i32 @getnameinfo(%struct.sockaddr* %693, i32 %697, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %699 = icmp eq i32 %698, 0
  br i1 %699, label %701, label %700

; <label>:700                                     ; preds = %691
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit9

; <label>:701                                     ; preds = %691
  %702 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2, i32 0, i32 1
  %703 = bitcast i64* %702 to i32*
  %704 = load i32, i32* %703, align 4, !tbaa !8
  %705 = icmp eq i32 %704, 0
  br i1 %705, label %706, label %httpd_ntoa.exit9

; <label>:706                                     ; preds = %701
  %707 = bitcast i64* %702 to [4 x i32]*
  %708 = getelementptr inbounds [4 x i32], [4 x i32]* %707, i64 0, i64 1
  %709 = load i32, i32* %708, align 4, !tbaa !8
  %710 = icmp eq i32 %709, 0
  br i1 %710, label %711, label %httpd_ntoa.exit9

; <label>:711                                     ; preds = %706
  %712 = getelementptr inbounds i64, i64* %702, i64 1
  %713 = bitcast i64* %712 to i32*
  %714 = load i32, i32* %713, align 4, !tbaa !8
  %715 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %716 = icmp eq i32 %714, %715
  br i1 %716, label %717, label %httpd_ntoa.exit9

; <label>:717                                     ; preds = %711
  %718 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %719 = icmp eq i32 %718, 0
  br i1 %719, label %720, label %httpd_ntoa.exit9

; <label>:720                                     ; preds = %717
  %721 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %722 = add i64 %721, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %722, i32 1, i1 false) #6
  br label %httpd_ntoa.exit9

httpd_ntoa.exit9:                                 ; preds = %700, %701, %706, %711, %717, %720
  %723 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %724 = load i8*, i8** %723, align 8, !tbaa !53
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([49 x i8], [49 x i8]* @.str.448, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* %724) #6
  %725 = load i8*, i8** %723, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 403, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94.175, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([85 x i8], [85 x i8]* @.str.449, i64 0, i64 0), i8* %725)
  br label %cgi.exit

; <label>:726                                     ; preds = %685
  %727 = icmp ugt i64 %expnlen.0, 9
  br i1 %727, label %728, label %774

; <label>:728                                     ; preds = %726
  %729 = load i8*, i8** %2, align 8, !tbaa !48
  %730 = add i64 %expnlen.0, -9
  %731 = getelementptr inbounds i8, i8* %729, i64 %730
  %732 = tail call i32 @strcmp(i8* %731, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.447, i64 0, i64 0)) #6
  %733 = icmp eq i32 %732, 0
  br i1 %733, label %734, label %774

; <label>:734                                     ; preds = %728
  %735 = add i64 %expnlen.0, -10
  %736 = getelementptr inbounds i8, i8* %729, i64 %735
  %737 = load i8, i8* %736, align 1, !tbaa !1
  %738 = icmp eq i8 %737, 47
  br i1 %738, label %739, label %774

; <label>:739                                     ; preds = %734
  %740 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %741 = bitcast %union.httpd_sockaddr* %740 to %struct.sockaddr*
  %742 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %740, i64 0, i32 0, i32 0
  %743 = load i16, i16* %742, align 8, !tbaa !88
  %switch.selectcmp.i.i10 = icmp eq i16 %743, 10
  %switch.selectcmp1.i.i11 = icmp eq i16 %743, 2
  %744 = select i1 %switch.selectcmp.i.i10, i32 28, i32 0
  %745 = select i1 %switch.selectcmp1.i.i11, i32 16, i32 %744
  %746 = tail call i32 @getnameinfo(%struct.sockaddr* %741, i32 %745, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %747 = icmp eq i32 %746, 0
  br i1 %747, label %749, label %748

; <label>:748                                     ; preds = %739
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit12

; <label>:749                                     ; preds = %739
  %750 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2, i32 0, i32 1
  %751 = bitcast i64* %750 to i32*
  %752 = load i32, i32* %751, align 4, !tbaa !8
  %753 = icmp eq i32 %752, 0
  br i1 %753, label %754, label %httpd_ntoa.exit12

; <label>:754                                     ; preds = %749
  %755 = bitcast i64* %750 to [4 x i32]*
  %756 = getelementptr inbounds [4 x i32], [4 x i32]* %755, i64 0, i64 1
  %757 = load i32, i32* %756, align 4, !tbaa !8
  %758 = icmp eq i32 %757, 0
  br i1 %758, label %759, label %httpd_ntoa.exit12

; <label>:759                                     ; preds = %754
  %760 = getelementptr inbounds i64, i64* %750, i64 1
  %761 = bitcast i64* %760 to i32*
  %762 = load i32, i32* %761, align 4, !tbaa !8
  %763 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %764 = icmp eq i32 %762, %763
  br i1 %764, label %765, label %httpd_ntoa.exit12

; <label>:765                                     ; preds = %759
  %766 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %767 = icmp eq i32 %766, 0
  br i1 %767, label %768, label %httpd_ntoa.exit12

; <label>:768                                     ; preds = %765
  %769 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %770 = add i64 %769, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %770, i32 1, i1 false) #6
  br label %httpd_ntoa.exit12

httpd_ntoa.exit12:                                ; preds = %748, %749, %754, %759, %765, %768
  %771 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %772 = load i8*, i8** %771, align 8, !tbaa !53
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([49 x i8], [49 x i8]* @.str.448, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* %772) #6
  %773 = load i8*, i8** %771, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 403, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94.175, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([85 x i8], [85 x i8]* @.str.449, i64 0, i64 0), i8* %773)
  br label %cgi.exit

; <label>:774                                     ; preds = %726, %728, %734, %687
  %775 = tail call fastcc i32 @check_referrer(%struct.httpd_conn* %hc)
  %776 = icmp eq i32 %775, 0
  br i1 %776, label %cgi.exit, label %777

; <label>:777                                     ; preds = %774
  %778 = load %struct.httpd_server*, %struct.httpd_server** %666, align 8, !tbaa !79
  %779 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %778, i64 0, i32 3
  %780 = load i8*, i8** %779, align 8, !tbaa !121
  %781 = icmp eq i8* %780, null
  %.pre147 = load i32, i32* %15, align 8, !tbaa !164
  %782 = and i32 %.pre147, 1
  %783 = icmp eq i32 %782, 0
  %or.cond208 = or i1 %781, %783
  br i1 %or.cond208, label %._crit_edge146, label %784

; <label>:784                                     ; preds = %777
  %785 = load i8*, i8** %2, align 8, !tbaa !48
  %786 = tail call i8* @strchr(i8* nonnull %780, i32 124) #6
  %787 = icmp eq i8* %786, null
  br i1 %787, label %match.exit, label %.lr.ph.i14.preheader

.lr.ph.i14.preheader:                             ; preds = %784
  br label %.lr.ph.i14

; <label>:788                                     ; preds = %.lr.ph.i14
  %789 = tail call i8* @strchr(i8* %798, i32 124) #6
  %790 = icmp eq i8* %789, null
  br i1 %790, label %match.exit.loopexit, label %.lr.ph.i14

.lr.ph.i14:                                       ; preds = %.lr.ph.i14.preheader, %788
  %791 = phi i8* [ %789, %788 ], [ %786, %.lr.ph.i14.preheader ]
  %.013.i = phi i8* [ %798, %788 ], [ %780, %.lr.ph.i14.preheader ]
  %792 = ptrtoint i8* %791 to i64
  %793 = ptrtoint i8* %.013.i to i64
  %794 = sub i64 %792, %793
  %795 = trunc i64 %794 to i32
  %796 = tail call fastcc i32 @match_one(i8* %.013.i, i32 %795, i8* %785) #6
  %797 = icmp eq i32 %796, 0
  %798 = getelementptr inbounds i8, i8* %791, i64 1
  br i1 %797, label %788, label %match.exit.thread.loopexit

match.exit.loopexit:                              ; preds = %788
  %.lcssa330 = phi i8* [ %798, %788 ]
  br label %match.exit

match.exit:                                       ; preds = %match.exit.loopexit, %784
  %.01.lcssa.i = phi i8* [ %780, %784 ], [ %.lcssa330, %match.exit.loopexit ]
  %799 = tail call i64 @strlen(i8* %.01.lcssa.i) #13
  %800 = trunc i64 %799 to i32
  %801 = tail call fastcc i32 @match_one(i8* %.01.lcssa.i, i32 %800, i8* %785) #6
  %802 = icmp eq i32 %801, 0
  br i1 %802, label %._crit_edge146, label %match.exit.thread

match.exit.thread.loopexit:                       ; preds = %.lr.ph.i14
  br label %match.exit.thread

match.exit.thread:                                ; preds = %match.exit.thread.loopexit, %match.exit
  %803 = load i32, i32* %5, align 4, !tbaa !91
  switch i32 %803, label %1647 [
    i32 1, label %804
    i32 3, label %804
  ]

; <label>:804                                     ; preds = %match.exit.thread, %match.exit.thread
  %805 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %778, i64 0, i32 4
  %806 = bitcast i32* %805 to i64*
  %807 = load i64, i64* %806, align 8
  %808 = trunc i64 %807 to i32
  %809 = icmp eq i32 %808, 0
  %810 = lshr i64 %807, 32
  %811 = trunc i64 %810 to i32
  %812 = icmp slt i32 %811, %808
  %or.cond.i52 = or i1 %809, %812
  br i1 %or.cond.i52, label %._crit_edge.i54, label %813

; <label>:813                                     ; preds = %804
  %814 = load i8*, i8** @httpd_err503title, align 8, !tbaa !4
  %815 = load i8*, i8** @httpd_err503form, align 8, !tbaa !4
  %816 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %817 = load i8*, i8** %816, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 503, i8* %814, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %815, i8* %817) #6
  br label %cgi.exit

._crit_edge.i54:                                  ; preds = %804
  %.pre-phi.i53 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %778, i64 0, i32 5
  %818 = add nsw i32 %811, 1
  store i32 %818, i32* %.pre-phi.i53, align 4, !tbaa !128
  %819 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 60
  %820 = load i32, i32* %819, align 8, !tbaa !38
  %821 = tail call i32 (i32, i32, ...) @fcntl(i32 %820, i32 3, i32 0) #6
  %822 = icmp eq i32 %821, -1
  br i1 %822, label %httpd_clear_ndelay.exit.i, label %823

; <label>:823                                     ; preds = %._crit_edge.i54
  %824 = and i32 %821, -2049
  %825 = icmp eq i32 %824, %821
  br i1 %825, label %httpd_clear_ndelay.exit.i, label %826

; <label>:826                                     ; preds = %823
  %827 = tail call i32 (i32, i32, ...) @fcntl(i32 %820, i32 4, i32 %824) #6
  br label %httpd_clear_ndelay.exit.i

httpd_clear_ndelay.exit.i:                        ; preds = %826, %823, %._crit_edge.i54
  %828 = tail call i32 @fork() #6
  %829 = icmp slt i32 %828, 0
  br i1 %829, label %830, label %833

; <label>:830                                     ; preds = %httpd_clear_ndelay.exit.i
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.471, i64 0, i64 0)) #6
  %831 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %832 = load i8*, i8** %831, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 500, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89.170, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.90.171, i64 0, i64 0), i8* %832) #6
  br label %cgi.exit

; <label>:833                                     ; preds = %httpd_clear_ndelay.exit.i
  %834 = icmp eq i32 %828, 0
  br i1 %834, label %835, label %1636

; <label>:835                                     ; preds = %833
  store i1 true, i1* @sub_process, align 1
  %836 = load %struct.httpd_server*, %struct.httpd_server** %666, align 8, !tbaa !79
  %837 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %836, i64 0, i32 10
  %838 = bitcast i32* %837 to i64*
  %839 = load i64, i64* %838, align 8
  %840 = trunc i64 %839 to i32
  %841 = icmp eq i32 %840, -1
  br i1 %841, label %._crit_edge.i.i56, label %844

._crit_edge.i.i56:                                ; preds = %835
  %842 = lshr i64 %839, 32
  %843 = trunc i64 %842 to i32
  %.pre1.i.i55 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %836, i64 0, i32 11
  br label %846

; <label>:844                                     ; preds = %835
  %845 = tail call i32 @close(i32 %840) #6
  store i32 -1, i32* %837, align 8, !tbaa !26
  %.phi.trans.insert.i.i57 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %836, i64 0, i32 11
  %.pre.i.i58 = load i32, i32* %.phi.trans.insert.i.i57, align 4, !tbaa !31
  br label %846

; <label>:846                                     ; preds = %844, %._crit_edge.i.i56
  %.pre-phi.i.i59 = phi i32* [ %.pre1.i.i55, %._crit_edge.i.i56 ], [ %.phi.trans.insert.i.i57, %844 ]
  %847 = phi i32 [ %843, %._crit_edge.i.i56 ], [ %.pre.i.i58, %844 ]
  %848 = icmp eq i32 %847, -1
  br i1 %848, label %httpd_unlisten.exit.i60, label %849

; <label>:849                                     ; preds = %846
  %850 = tail call i32 @close(i32 %847) #6
  store i32 -1, i32* %.pre-phi.i.i59, align 4, !tbaa !31
  br label %httpd_unlisten.exit.i60

httpd_unlisten.exit.i60:                          ; preds = %849, %846
  %851 = load i32, i32* %819, align 8, !tbaa !38
  %852 = tail call i32 (i32, i32, ...) @fcntl(i32 %851, i32 2, i32 0) #6
  tail call void @closelog() #6
  %853 = load i32, i32* %819, align 8, !tbaa !38
  %switch.i.i = icmp ult i32 %853, 3
  br i1 %switch.i.i, label %854, label %858

; <label>:854                                     ; preds = %httpd_unlisten.exit.i60
  %855 = tail call i32 @dup2(i32 %853, i32 3) #6
  %856 = icmp sgt i32 %855, -1
  br i1 %856, label %857, label %858

; <label>:857                                     ; preds = %854
  store i32 %855, i32* %819, align 8, !tbaa !38
  br label %858

; <label>:858                                     ; preds = %857, %854, %httpd_unlisten.exit.i60
  %859 = getelementptr inbounds [256 x i8], [256 x i8]* %buf.i.i.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %859) #6
  %860 = tail call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.495, i64 0, i64 0), i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.496, i64 0, i64 0)) #6
  store i8* %860, i8** getelementptr inbounds ([50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 0), align 16, !tbaa !4
  %861 = tail call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.497, i64 0, i64 0), i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8.97, i64 0, i64 0)) #6
  store i8* %861, i8** getelementptr inbounds ([50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 1), align 8, !tbaa !4
  %862 = load %struct.httpd_server*, %struct.httpd_server** %666, align 8, !tbaa !79
  %863 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %862, i64 0, i32 15
  %864 = load i32, i32* %863, align 4, !tbaa !82
  %865 = icmp eq i32 %864, 0
  br i1 %865, label %873, label %866

; <label>:866                                     ; preds = %858
  %867 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 50
  %868 = load i8*, i8** %867, align 8, !tbaa !84
  %869 = icmp eq i8* %868, null
  br i1 %869, label %873, label %870

; <label>:870                                     ; preds = %866
  %871 = load i8, i8* %868, align 1, !tbaa !1
  %872 = icmp eq i8 %871, 0
  br i1 %872, label %873, label %.thread.i.i.i

; <label>:873                                     ; preds = %870, %866, %858
  %874 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 28
  %875 = load i8*, i8** %874, align 8, !tbaa !151
  %876 = icmp eq i8* %875, null
  br i1 %876, label %880, label %877

; <label>:877                                     ; preds = %873
  %878 = load i8, i8* %875, align 1, !tbaa !1
  %879 = icmp eq i8 %878, 0
  br i1 %879, label %880, label %.thread.i.i.i

; <label>:880                                     ; preds = %877, %873
  %881 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 27
  %882 = load i8*, i8** %881, align 8, !tbaa !117
  %883 = icmp eq i8* %882, null
  br i1 %883, label %887, label %884

; <label>:884                                     ; preds = %880
  %885 = load i8, i8* %882, align 1, !tbaa !1
  %886 = icmp eq i8 %885, 0
  br i1 %886, label %887, label %.thread.i.i.i

; <label>:887                                     ; preds = %884, %880
  %888 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %862, i64 0, i32 1
  %889 = load i8*, i8** %888, align 8, !tbaa !85
  %890 = icmp eq i8* %889, null
  br i1 %890, label %892, label %.thread.i.i.i

.thread.i.i.i:                                    ; preds = %887, %884, %877, %870
  %cp.01.i.i.i = phi i8* [ %889, %887 ], [ %882, %884 ], [ %875, %877 ], [ %868, %870 ]
  %891 = tail call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.498, i64 0, i64 0), i8* nonnull %cp.01.i.i.i) #6
  store i8* %891, i8** getelementptr inbounds ([50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 2), align 16, !tbaa !4
  br label %892

; <label>:892                                     ; preds = %.thread.i.i.i, %887
  %envn.0.i.i.i = phi i32 [ 3, %.thread.i.i.i ], [ 2, %887 ]
  %893 = add nuw nsw i32 %envn.0.i.i.i, 1
  %894 = zext i32 %envn.0.i.i.i to i64
  %895 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %894
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.499, i64 0, i64 0), i8** %895, align 8, !tbaa !4
  %896 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 14
  %897 = load i8*, i8** %896, align 8, !tbaa !92
  %898 = tail call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.500, i64 0, i64 0), i8* %897) #6
  %899 = add nuw nsw i32 %envn.0.i.i.i, 2
  %900 = zext i32 %893 to i64
  %901 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %900
  store i8* %898, i8** %901, align 8, !tbaa !4
  %902 = load %struct.httpd_server*, %struct.httpd_server** %666, align 8, !tbaa !79
  %903 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %902, i64 0, i32 2
  %904 = load i16, i16* %903, align 8, !tbaa !129
  %905 = zext i16 %904 to i32
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %859, i64 256, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.501, i64 0, i64 0), i32 %905) #6
  %906 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.502, i64 0, i64 0), i8* %859) #6
  %907 = add nuw nsw i32 %envn.0.i.i.i, 3
  %908 = zext i32 %899 to i64
  %909 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %908
  store i8* %906, i8** %909, align 8, !tbaa !4
  %910 = load i32, i32* %5, align 4, !tbaa !91
  %switch.tableidx.i.i.i.i = add i32 %910, -1
  %911 = icmp ult i32 %switch.tableidx.i.i.i.i, 3
  br i1 %911, label %switch.lookup.i.i.i.i, label %httpd_method_str.exit.i.i.i

switch.lookup.i.i.i.i:                            ; preds = %892
  %912 = sext i32 %switch.tableidx.i.i.i.i to i64
  %switch.gep.i.i.i.i = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table, i64 0, i64 %912
  %switch.load.i.i.i.i = load i8*, i8** %switch.gep.i.i.i.i, align 8
  br label %httpd_method_str.exit.i.i.i

httpd_method_str.exit.i.i.i:                      ; preds = %switch.lookup.i.i.i.i, %892
  %913 = phi i8* [ %switch.load.i.i.i.i, %switch.lookup.i.i.i.i ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23.131, i64 0, i64 0), %892 ]
  %914 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.503, i64 0, i64 0), i8* %913) #6
  %915 = or i32 %envn.0.i.i.i, 4
  %916 = zext i32 %907 to i64
  %917 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %916
  store i8* %914, i8** %917, align 8, !tbaa !4
  %918 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 18
  %919 = load i8*, i8** %918, align 8, !tbaa !113
  %920 = load i8, i8* %919, align 1, !tbaa !1
  %921 = icmp eq i8 %920, 0
  br i1 %921, label %943, label %922

; <label>:922                                     ; preds = %httpd_method_str.exit.i.i.i
  %923 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.504, i64 0, i64 0), i8* %919) #6
  %924 = add nuw nsw i32 %915, 1
  %925 = zext i32 %915 to i64
  %926 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %925
  store i8* %923, i8** %926, align 8, !tbaa !4
  %927 = load %struct.httpd_server*, %struct.httpd_server** %666, align 8, !tbaa !79
  %928 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %927, i64 0, i32 9
  %929 = load i8*, i8** %928, align 8, !tbaa !120
  %930 = call i64 @strlen(i8* %929) #13
  %931 = load i8*, i8** %918, align 8, !tbaa !113
  %932 = call i64 @strlen(i8* %931) #13
  %933 = add i64 %930, 1
  %934 = add i64 %933, %932
  %935 = call noalias i8* @malloc(i64 %934) #6
  %936 = icmp eq i8* %935, null
  br i1 %936, label %943, label %937

; <label>:937                                     ; preds = %922
  %938 = load i8*, i8** %928, align 8, !tbaa !120
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* nonnull %935, i64 %934, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.477, i64 0, i64 0), i8* %938, i8* %931) #6
  %939 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.505, i64 0, i64 0), i8* nonnull %935) #6
  %940 = add nuw nsw i32 %915, 2
  %941 = zext i32 %924 to i64
  %942 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %941
  store i8* %939, i8** %942, align 8, !tbaa !4
  br label %943

; <label>:943                                     ; preds = %937, %922, %httpd_method_str.exit.i.i.i
  %envn.2.i.i.i = phi i32 [ %915, %httpd_method_str.exit.i.i.i ], [ %940, %937 ], [ %924, %922 ]
  %944 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 15
  %945 = load i8*, i8** %944, align 8, !tbaa !111
  %946 = load i8, i8* %945, align 1, !tbaa !1
  %947 = icmp eq i8 %946, 46
  br i1 %947, label %948, label %.thread2.i.i.i

; <label>:948                                     ; preds = %943
  %949 = getelementptr inbounds i8, i8* %945, i64 1
  %950 = load i8, i8* %949, align 1, !tbaa !1
  %phitmp.i.i.i = icmp eq i8 %950, 0
  br i1 %phitmp.i.i.i, label %951, label %.thread2.i.i.i

.thread2.i.i.i:                                   ; preds = %948, %943
  br label %951

; <label>:951                                     ; preds = %.thread2.i.i.i, %948
  %952 = phi i8* [ %945, %.thread2.i.i.i ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), %948 ]
  %953 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.506, i64 0, i64 0), i8* %952) #6
  %954 = add nsw i32 %envn.2.i.i.i, 1
  %955 = sext i32 %envn.2.i.i.i to i64
  %956 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %955
  store i8* %953, i8** %956, align 8, !tbaa !4
  %957 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 19
  %958 = load i8*, i8** %957, align 8, !tbaa !114
  %959 = load i8, i8* %958, align 1, !tbaa !1
  %960 = icmp eq i8 %959, 0
  br i1 %960, label %966, label %961

; <label>:961                                     ; preds = %951
  %962 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.507, i64 0, i64 0), i8* %958) #6
  %963 = add nsw i32 %envn.2.i.i.i, 2
  %964 = sext i32 %954 to i64
  %965 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %964
  store i8* %962, i8** %965, align 8, !tbaa !4
  br label %966

; <label>:966                                     ; preds = %961, %951
  %envn.3.i.i.i = phi i32 [ %963, %961 ], [ %954, %951 ]
  %967 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %968 = bitcast %union.httpd_sockaddr* %967 to %struct.sockaddr*
  %969 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %967, i64 0, i32 0, i32 0
  %970 = load i16, i16* %969, align 8, !tbaa !88
  %switch.selectcmp.i.i17 = icmp eq i16 %970, 10
  %switch.selectcmp1.i.i18 = icmp eq i16 %970, 2
  %971 = select i1 %switch.selectcmp.i.i17, i32 28, i32 0
  %972 = select i1 %switch.selectcmp1.i.i18, i32 16, i32 %971
  %973 = call i32 @getnameinfo(%struct.sockaddr* %968, i32 %972, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %976, label %975

; <label>:975                                     ; preds = %966
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit19

; <label>:976                                     ; preds = %966
  %977 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2, i32 0, i32 1
  %978 = bitcast i64* %977 to i32*
  %979 = load i32, i32* %978, align 4, !tbaa !8
  %980 = icmp eq i32 %979, 0
  br i1 %980, label %981, label %httpd_ntoa.exit19

; <label>:981                                     ; preds = %976
  %982 = bitcast i64* %977 to [4 x i32]*
  %983 = getelementptr inbounds [4 x i32], [4 x i32]* %982, i64 0, i64 1
  %984 = load i32, i32* %983, align 4, !tbaa !8
  %985 = icmp eq i32 %984, 0
  br i1 %985, label %986, label %httpd_ntoa.exit19

; <label>:986                                     ; preds = %981
  %987 = getelementptr inbounds i64, i64* %977, i64 1
  %988 = bitcast i64* %987 to i32*
  %989 = load i32, i32* %988, align 4, !tbaa !8
  %990 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %991 = icmp eq i32 %989, %990
  br i1 %991, label %992, label %httpd_ntoa.exit19

; <label>:992                                     ; preds = %986
  %993 = call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %994 = icmp eq i32 %993, 0
  br i1 %994, label %995, label %httpd_ntoa.exit19

; <label>:995                                     ; preds = %992
  %996 = call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %997 = add i64 %996, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %997, i32 1, i1 false) #6
  br label %httpd_ntoa.exit19

httpd_ntoa.exit19:                                ; preds = %975, %976, %981, %986, %992, %995
  %998 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.508, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0)) #6
  %999 = add nsw i32 %envn.3.i.i.i, 1
  %1000 = sext i32 %envn.3.i.i.i to i64
  %1001 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1000
  store i8* %998, i8** %1001, align 8, !tbaa !4
  %1002 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 20
  %1003 = load i8*, i8** %1002, align 8, !tbaa !94
  %1004 = load i8, i8* %1003, align 1, !tbaa !1
  %1005 = icmp eq i8 %1004, 0
  br i1 %1005, label %1016, label %1006

; <label>:1006                                    ; preds = %httpd_ntoa.exit19
  %1007 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.509, i64 0, i64 0), i8* %1003) #6
  %1008 = add nsw i32 %envn.3.i.i.i, 2
  %1009 = sext i32 %999 to i64
  %1010 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1009
  store i8* %1007, i8** %1010, align 8, !tbaa !4
  %1011 = load i8*, i8** %1002, align 8, !tbaa !94
  %1012 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.510, i64 0, i64 0), i8* %1011) #6
  %1013 = add nsw i32 %envn.3.i.i.i, 3
  %1014 = sext i32 %1008 to i64
  %1015 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1014
  store i8* %1012, i8** %1015, align 8, !tbaa !4
  br label %1016

; <label>:1016                                    ; preds = %1006, %httpd_ntoa.exit19
  %envn.4.i.i.i = phi i32 [ %1013, %1006 ], [ %999, %httpd_ntoa.exit19 ]
  %1017 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 21
  %1018 = load i8*, i8** %1017, align 8, !tbaa !95
  %1019 = load i8, i8* %1018, align 1, !tbaa !1
  %1020 = icmp eq i8 %1019, 0
  br i1 %1020, label %1026, label %1021

; <label>:1021                                    ; preds = %1016
  %1022 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.511, i64 0, i64 0), i8* %1018) #6
  %1023 = add nsw i32 %envn.4.i.i.i, 1
  %1024 = sext i32 %envn.4.i.i.i to i64
  %1025 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1024
  store i8* %1022, i8** %1025, align 8, !tbaa !4
  br label %1026

; <label>:1026                                    ; preds = %1021, %1016
  %envn.5.i.i.i = phi i32 [ %1023, %1021 ], [ %envn.4.i.i.i, %1016 ]
  %1027 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 22
  %1028 = load i8*, i8** %1027, align 8, !tbaa !115
  %1029 = load i8, i8* %1028, align 1, !tbaa !1
  %1030 = icmp eq i8 %1029, 0
  br i1 %1030, label %1036, label %1031

; <label>:1031                                    ; preds = %1026
  %1032 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.512, i64 0, i64 0), i8* %1028) #6
  %1033 = add nsw i32 %envn.5.i.i.i, 1
  %1034 = sext i32 %envn.5.i.i.i to i64
  %1035 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1034
  store i8* %1032, i8** %1035, align 8, !tbaa !4
  br label %1036

; <label>:1036                                    ; preds = %1031, %1026
  %envn.6.i.i.i = phi i32 [ %1033, %1031 ], [ %envn.5.i.i.i, %1026 ]
  %1037 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 23
  %1038 = load i8*, i8** %1037, align 8, !tbaa !116
  %1039 = load i8, i8* %1038, align 1, !tbaa !1
  %1040 = icmp eq i8 %1039, 0
  br i1 %1040, label %1046, label %1041

; <label>:1041                                    ; preds = %1036
  %1042 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.513, i64 0, i64 0), i8* %1038) #6
  %1043 = add nsw i32 %envn.6.i.i.i, 1
  %1044 = sext i32 %envn.6.i.i.i to i64
  %1045 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1044
  store i8* %1042, i8** %1045, align 8, !tbaa !4
  br label %1046

; <label>:1046                                    ; preds = %1041, %1036
  %envn.7.i.i.i = phi i32 [ %1043, %1041 ], [ %envn.6.i.i.i, %1036 ]
  %1047 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 24
  %1048 = load i8*, i8** %1047, align 8, !tbaa !157
  %1049 = load i8, i8* %1048, align 1, !tbaa !1
  %1050 = icmp eq i8 %1049, 0
  br i1 %1050, label %1056, label %1051

; <label>:1051                                    ; preds = %1046
  %1052 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.514, i64 0, i64 0), i8* %1048) #6
  %1053 = add nsw i32 %envn.7.i.i.i, 1
  %1054 = sext i32 %envn.7.i.i.i to i64
  %1055 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1054
  store i8* %1052, i8** %1055, align 8, !tbaa !4
  br label %1056

; <label>:1056                                    ; preds = %1051, %1046
  %envn.8.i.i.i = phi i32 [ %1053, %1051 ], [ %envn.7.i.i.i, %1046 ]
  %1057 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 25
  %1058 = load i8*, i8** %1057, align 8, !tbaa !159
  %1059 = load i8, i8* %1058, align 1, !tbaa !1
  %1060 = icmp eq i8 %1059, 0
  br i1 %1060, label %1066, label %1061

; <label>:1061                                    ; preds = %1056
  %1062 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.515, i64 0, i64 0), i8* %1058) #6
  %1063 = add nsw i32 %envn.8.i.i.i, 1
  %1064 = sext i32 %envn.8.i.i.i to i64
  %1065 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1064
  store i8* %1062, i8** %1065, align 8, !tbaa !4
  br label %1066

; <label>:1066                                    ; preds = %1061, %1056
  %envn.9.i.i.i = phi i32 [ %1063, %1061 ], [ %envn.8.i.i.i, %1056 ]
  %1067 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 26
  %1068 = load i8*, i8** %1067, align 8, !tbaa !150
  %1069 = load i8, i8* %1068, align 1, !tbaa !1
  %1070 = icmp eq i8 %1069, 0
  br i1 %1070, label %1076, label %1071

; <label>:1071                                    ; preds = %1066
  %1072 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.516, i64 0, i64 0), i8* %1068) #6
  %1073 = add nsw i32 %envn.9.i.i.i, 1
  %1074 = sext i32 %envn.9.i.i.i to i64
  %1075 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1074
  store i8* %1072, i8** %1075, align 8, !tbaa !4
  br label %1076

; <label>:1076                                    ; preds = %1071, %1066
  %envn.10.i.i.i = phi i32 [ %1073, %1071 ], [ %envn.9.i.i.i, %1066 ]
  %1077 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 28
  %1078 = load i8*, i8** %1077, align 8, !tbaa !151
  %1079 = load i8, i8* %1078, align 1, !tbaa !1
  %1080 = icmp eq i8 %1079, 0
  br i1 %1080, label %1086, label %1081

; <label>:1081                                    ; preds = %1076
  %1082 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.517, i64 0, i64 0), i8* %1078) #6
  %1083 = add nsw i32 %envn.10.i.i.i, 1
  %1084 = sext i32 %envn.10.i.i.i to i64
  %1085 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1084
  store i8* %1082, i8** %1085, align 8, !tbaa !4
  br label %1086

; <label>:1086                                    ; preds = %1081, %1076
  %envn.11.i.i.i = phi i32 [ %1083, %1081 ], [ %envn.10.i.i.i, %1076 ]
  %1087 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 48
  %1088 = load i64, i64* %1087, align 8, !tbaa !160
  %1089 = icmp eq i64 %1088, -1
  br i1 %1089, label %1095, label %1090

; <label>:1090                                    ; preds = %1086
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %859, i64 256, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.518, i64 0, i64 0), i64 %1088) #6
  %1091 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.519, i64 0, i64 0), i8* %859) #6
  %1092 = add nsw i32 %envn.11.i.i.i, 1
  %1093 = sext i32 %envn.11.i.i.i to i64
  %1094 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1093
  store i8* %1091, i8** %1094, align 8, !tbaa !4
  br label %1095

; <label>:1095                                    ; preds = %1090, %1086
  %envn.12.i.i.i = phi i32 [ %1092, %1090 ], [ %envn.11.i.i.i, %1086 ]
  %1096 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 31
  %1097 = load i8*, i8** %1096, align 8, !tbaa !81
  %1098 = load i8, i8* %1097, align 1, !tbaa !1
  %1099 = icmp eq i8 %1098, 0
  br i1 %1099, label %1105, label %1100

; <label>:1100                                    ; preds = %1095
  %1101 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.520, i64 0, i64 0), i8* %1097) #6
  %1102 = add nsw i32 %envn.12.i.i.i, 1
  %1103 = sext i32 %envn.12.i.i.i to i64
  %1104 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1103
  store i8* %1101, i8** %1104, align 8, !tbaa !4
  br label %1105

; <label>:1105                                    ; preds = %1100, %1095
  %envn.13.i.i.i = phi i32 [ %1102, %1100 ], [ %envn.12.i.i.i, %1095 ]
  %1106 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 30
  %1107 = load i8*, i8** %1106, align 8, !tbaa !152
  %1108 = load i8, i8* %1107, align 1, !tbaa !1
  %1109 = icmp eq i8 %1108, 0
  br i1 %1109, label %1115, label %1110

; <label>:1110                                    ; preds = %1105
  %1111 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.521, i64 0, i64 0), i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.522, i64 0, i64 0)) #6
  %1112 = add nsw i32 %envn.13.i.i.i, 1
  %1113 = sext i32 %envn.13.i.i.i to i64
  %1114 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1113
  store i8* %1111, i8** %1114, align 8, !tbaa !4
  br label %1115

; <label>:1115                                    ; preds = %1110, %1105
  %envn.14.i.i.i = phi i32 [ %1112, %1110 ], [ %envn.13.i.i.i, %1105 ]
  %1116 = call i8* @getenv(i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.523, i64 0, i64 0)) #6
  %1117 = icmp eq i8* %1116, null
  br i1 %1117, label %make_envp.exit.i.i, label %1118

; <label>:1118                                    ; preds = %1115
  %1119 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.524, i64 0, i64 0), i8* nonnull %1116) #6
  %1120 = add nsw i32 %envn.14.i.i.i, 1
  %1121 = sext i32 %envn.14.i.i.i to i64
  %1122 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1121
  store i8* %1119, i8** %1122, align 8, !tbaa !4
  br label %make_envp.exit.i.i

make_envp.exit.i.i:                               ; preds = %1118, %1115
  %envn.15.i.i.i = phi i32 [ %1120, %1118 ], [ %envn.14.i.i.i, %1115 ]
  %1123 = load %struct.httpd_server*, %struct.httpd_server** %666, align 8, !tbaa !79
  %1124 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %1123, i64 0, i32 3
  %1125 = load i8*, i8** %1124, align 8, !tbaa !121
  %1126 = call fastcc i8* @build_env(i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.525, i64 0, i64 0), i8* %1125) #6
  %1127 = add nsw i32 %envn.15.i.i.i, 1
  %1128 = sext i32 %envn.15.i.i.i to i64
  %1129 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1128
  store i8* %1126, i8** %1129, align 8, !tbaa !4
  %1130 = sext i32 %1127 to i64
  %1131 = getelementptr inbounds [50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 %1130
  store i8* null, i8** %1131, align 8, !tbaa !4
  call void @llvm.lifetime.end(i64 256, i8* %859) #6
  %1132 = load i8*, i8** %957, align 8, !tbaa !114
  %1133 = call i64 @strlen(i8* %1132) #13
  %1134 = shl i64 %1133, 3
  %1135 = add i64 %1134, 16
  %1136 = call noalias i8* @malloc(i64 %1135) #6
  %1137 = bitcast i8* %1136 to i8**
  %1138 = icmp eq i8* %1136, null
  br i1 %1138, label %make_argp.exit.i.i, label %1139

; <label>:1139                                    ; preds = %make_envp.exit.i.i
  %1140 = load i8*, i8** %2, align 8, !tbaa !48
  %1141 = call i8* @strrchr(i8* %1140, i32 47) #13
  store i8* %1141, i8** %1137, align 8, !tbaa !4
  %1142 = icmp eq i8* %1141, null
  br i1 %1142, label %1145, label %1143

; <label>:1143                                    ; preds = %1139
  %1144 = getelementptr inbounds i8, i8* %1141, i64 1
  store i8* %1144, i8** %1137, align 8, !tbaa !4
  br label %1148

; <label>:1145                                    ; preds = %1139
  %1146 = ptrtoint i8* %1140 to i64
  %1147 = bitcast i8* %1136 to i64*
  store i64 %1146, i64* %1147, align 8, !tbaa !4
  br label %1148

; <label>:1148                                    ; preds = %1145, %1143
  %1149 = call i8* @strchr(i8* %1132, i32 61) #6
  %1150 = icmp eq i8* %1149, null
  br i1 %1150, label %.preheader25.outer.i.i.i.preheader, label %1247

.preheader25.outer.i.i.i.preheader:               ; preds = %1148
  br label %.preheader25.outer.i.i.i

.preheader25.outer.i.i.i:                         ; preds = %.preheader25.outer.i.i.i.preheader, %strdecode.exit.i.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %strdecode.exit.i.i.i ], [ 1, %.preheader25.outer.i.i.i.preheader ]
  %cp1.0.ph.i.i.i = phi i8* [ %1198, %strdecode.exit.i.i.i ], [ %1132, %.preheader25.outer.i.i.i.preheader ]
  br label %.preheader25.i.i.i

.preheader25.i.i.i:                               ; preds = %.preheader25._crit_edge.i.i.i, %.preheader25.outer.i.i.i
  %cp2.0.i.i.i = phi i8* [ %.pre.i.i.i, %.preheader25._crit_edge.i.i.i ], [ %cp1.0.ph.i.i.i, %.preheader25.outer.i.i.i ]
  %1151 = load i8, i8* %cp2.0.i.i.i, align 1, !tbaa !1
  switch i8 %1151, label %.preheader25._crit_edge.i.i.i [
    i8 0, label %1199
    i8 43, label %1152
  ]

.preheader25._crit_edge.i.i.i:                    ; preds = %.preheader25.i.i.i
  %.pre.i.i.i = getelementptr inbounds i8, i8* %cp2.0.i.i.i, i64 1
  br label %.preheader25.i.i.i

; <label>:1152                                    ; preds = %.preheader25.i.i.i
  %cp2.0.i.i.i.lcssa328 = phi i8* [ %cp2.0.i.i.i, %.preheader25.i.i.i ]
  store i8 0, i8* %cp2.0.i.i.i.lcssa328, align 1, !tbaa !1
  br label %1153

; <label>:1153                                    ; preds = %1194, %1152
  %.01.i.i.i.i = phi i8* [ %cp1.0.ph.i.i.i, %1152 ], [ %1195, %1194 ]
  %.0.i.i.i.i = phi i8* [ %cp1.0.ph.i.i.i, %1152 ], [ %1196, %1194 ]
  %1154 = load i8, i8* %.0.i.i.i.i, align 1, !tbaa !1
  switch i8 %1154, label %1194 [
    i8 0, label %strdecode.exit.i.i.i
    i8 37, label %1155
  ]

; <label>:1155                                    ; preds = %1153
  %1156 = getelementptr inbounds i8, i8* %.0.i.i.i.i, i64 1
  %1157 = load i8, i8* %1156, align 1, !tbaa !1
  %1158 = sext i8 %1157 to i64
  %1159 = tail call i16** @__ctype_b_loc() #21
  %1160 = load i16*, i16** %1159, align 8, !tbaa !4
  %1161 = getelementptr inbounds i16, i16* %1160, i64 %1158
  %1162 = load i16, i16* %1161, align 2, !tbaa !6
  %1163 = and i16 %1162, 4096
  %1164 = icmp eq i16 %1163, 0
  br i1 %1164, label %1194, label %1165

; <label>:1165                                    ; preds = %1155
  %1166 = getelementptr inbounds i8, i8* %.0.i.i.i.i, i64 2
  %1167 = load i8, i8* %1166, align 1, !tbaa !1
  %1168 = sext i8 %1167 to i64
  %1169 = getelementptr inbounds i16, i16* %1160, i64 %1168
  %1170 = load i16, i16* %1169, align 2, !tbaa !6
  %1171 = and i16 %1170, 4096
  %1172 = icmp eq i16 %1171, 0
  br i1 %1172, label %1194, label %1173

; <label>:1173                                    ; preds = %1165
  %c.off.i2.i.i.i = add i8 %1157, -48
  %1174 = icmp ult i8 %c.off.i2.i.i.i, 10
  br i1 %1174, label %hexit.exit7.i.i.i, label %1175

; <label>:1175                                    ; preds = %1173
  %c.off3.i3.i.i.i = add i8 %1157, -97
  %1176 = icmp ult i8 %c.off3.i3.i.i.i, 6
  br i1 %1176, label %1177, label %1179

; <label>:1177                                    ; preds = %1175
  %1178 = add i8 %1157, -87
  br label %hexit.exit7.i.i.i

; <label>:1179                                    ; preds = %1175
  %c.off4.i4.i.i.i = add i8 %1157, -65
  %1180 = icmp ult i8 %c.off4.i4.i.i.i, 6
  %1181 = add i8 %1157, -55
  %..i5.i.i.i = select i1 %1180, i8 %1181, i8 0
  br label %hexit.exit7.i.i.i

hexit.exit7.i.i.i:                                ; preds = %1179, %1177, %1173
  %1182 = phi i8 [ %..i5.i.i.i, %1179 ], [ %1178, %1177 ], [ %c.off.i2.i.i.i, %1173 ]
  %1183 = shl i8 %1182, 4
  %c.off.i.i.i.i = add i8 %1167, -48
  %1184 = icmp ult i8 %c.off.i.i.i.i, 10
  br i1 %1184, label %hexit.exit.i.i.i, label %1185

; <label>:1185                                    ; preds = %hexit.exit7.i.i.i
  %c.off3.i.i.i.i = add i8 %1167, -97
  %1186 = icmp ult i8 %c.off3.i.i.i.i, 6
  br i1 %1186, label %1187, label %1189

; <label>:1187                                    ; preds = %1185
  %1188 = add i8 %1167, -87
  br label %hexit.exit.i.i.i

; <label>:1189                                    ; preds = %1185
  %c.off4.i.i.i.i = add i8 %1167, -65
  %1190 = icmp ult i8 %c.off4.i.i.i.i, 6
  %1191 = add i8 %1167, -55
  %..i.i.i.i = select i1 %1190, i8 %1191, i8 0
  br label %hexit.exit.i.i.i

hexit.exit.i.i.i:                                 ; preds = %1189, %1187, %hexit.exit7.i.i.i
  %1192 = phi i8 [ %..i.i.i.i, %1189 ], [ %1188, %1187 ], [ %c.off.i.i.i.i, %hexit.exit7.i.i.i ]
  %1193 = add i8 %1192, %1183
  br label %1194

; <label>:1194                                    ; preds = %hexit.exit.i.i.i, %1165, %1155, %1153
  %storemerge.i.i.i.i = phi i8 [ %1193, %hexit.exit.i.i.i ], [ %1154, %1153 ], [ 37, %1165 ], [ 37, %1155 ]
  %.1.i.i.i.i = phi i8* [ %1166, %hexit.exit.i.i.i ], [ %.0.i.i.i.i, %1153 ], [ %.0.i.i.i.i, %1165 ], [ %.0.i.i.i.i, %1155 ]
  store i8 %storemerge.i.i.i.i, i8* %.01.i.i.i.i, align 1, !tbaa !1
  %1195 = getelementptr inbounds i8, i8* %.01.i.i.i.i, i64 1
  %1196 = getelementptr inbounds i8, i8* %.1.i.i.i.i, i64 1
  br label %1153

strdecode.exit.i.i.i:                             ; preds = %1153
  %.01.i.i.i.i.lcssa = phi i8* [ %.01.i.i.i.i, %1153 ]
  store i8 0, i8* %.01.i.i.i.i.lcssa, align 1, !tbaa !1
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %1197 = getelementptr inbounds i8*, i8** %1137, i64 %indvars.iv.i.i
  store i8* %cp1.0.ph.i.i.i, i8** %1197, align 8, !tbaa !4
  %1198 = getelementptr inbounds i8, i8* %cp2.0.i.i.i.lcssa328, i64 1
  br label %.preheader25.outer.i.i.i

; <label>:1199                                    ; preds = %.preheader25.i.i.i
  %cp1.0.ph.i.i.i.lcssa = phi i8* [ %cp1.0.ph.i.i.i, %.preheader25.i.i.i ]
  %indvars.iv.i.i.lcssa = phi i64 [ %indvars.iv.i.i, %.preheader25.i.i.i ]
  %cp2.0.i.i.i.lcssa = phi i8* [ %cp2.0.i.i.i, %.preheader25.i.i.i ]
  %1200 = icmp eq i8* %cp2.0.i.i.i.lcssa, %cp1.0.ph.i.i.i.lcssa
  br i1 %1200, label %1247, label %.preheader.i.i.i.preheader

.preheader.i.i.i.preheader:                       ; preds = %1199
  br label %.preheader.i.i.i

.preheader.i.i.i:                                 ; preds = %.preheader.i.i.i.preheader, %1241
  %.01.i8.i.i.i = phi i8* [ %1242, %1241 ], [ %cp1.0.ph.i.i.i.lcssa, %.preheader.i.i.i.preheader ]
  %.0.i9.i.i.i = phi i8* [ %1243, %1241 ], [ %cp1.0.ph.i.i.i.lcssa, %.preheader.i.i.i.preheader ]
  %1201 = load i8, i8* %.0.i9.i.i.i, align 1, !tbaa !1
  switch i8 %1201, label %1241 [
    i8 0, label %strdecode.exit12.i.i.i
    i8 37, label %1202
  ]

; <label>:1202                                    ; preds = %.preheader.i.i.i
  %1203 = getelementptr inbounds i8, i8* %.0.i9.i.i.i, i64 1
  %1204 = load i8, i8* %1203, align 1, !tbaa !1
  %1205 = sext i8 %1204 to i64
  %1206 = tail call i16** @__ctype_b_loc() #21
  %1207 = load i16*, i16** %1206, align 8, !tbaa !4
  %1208 = getelementptr inbounds i16, i16* %1207, i64 %1205
  %1209 = load i16, i16* %1208, align 2, !tbaa !6
  %1210 = and i16 %1209, 4096
  %1211 = icmp eq i16 %1210, 0
  br i1 %1211, label %1241, label %1212

; <label>:1212                                    ; preds = %1202
  %1213 = getelementptr inbounds i8, i8* %.0.i9.i.i.i, i64 2
  %1214 = load i8, i8* %1213, align 1, !tbaa !1
  %1215 = sext i8 %1214 to i64
  %1216 = getelementptr inbounds i16, i16* %1207, i64 %1215
  %1217 = load i16, i16* %1216, align 2, !tbaa !6
  %1218 = and i16 %1217, 4096
  %1219 = icmp eq i16 %1218, 0
  br i1 %1219, label %1241, label %1220

; <label>:1220                                    ; preds = %1212
  %c.off.i19.i.i.i = add i8 %1204, -48
  %1221 = icmp ult i8 %c.off.i19.i.i.i, 10
  br i1 %1221, label %hexit.exit24.i.i.i, label %1222

; <label>:1222                                    ; preds = %1220
  %c.off3.i20.i.i.i = add i8 %1204, -97
  %1223 = icmp ult i8 %c.off3.i20.i.i.i, 6
  br i1 %1223, label %1224, label %1226

; <label>:1224                                    ; preds = %1222
  %1225 = add i8 %1204, -87
  br label %hexit.exit24.i.i.i

; <label>:1226                                    ; preds = %1222
  %c.off4.i21.i.i.i = add i8 %1204, -65
  %1227 = icmp ult i8 %c.off4.i21.i.i.i, 6
  %1228 = add i8 %1204, -55
  %..i22.i.i.i = select i1 %1227, i8 %1228, i8 0
  br label %hexit.exit24.i.i.i

hexit.exit24.i.i.i:                               ; preds = %1226, %1224, %1220
  %1229 = phi i8 [ %..i22.i.i.i, %1226 ], [ %1225, %1224 ], [ %c.off.i19.i.i.i, %1220 ]
  %1230 = shl i8 %1229, 4
  %c.off.i13.i.i.i = add i8 %1214, -48
  %1231 = icmp ult i8 %c.off.i13.i.i.i, 10
  br i1 %1231, label %hexit.exit18.i.i.i, label %1232

; <label>:1232                                    ; preds = %hexit.exit24.i.i.i
  %c.off3.i14.i.i.i = add i8 %1214, -97
  %1233 = icmp ult i8 %c.off3.i14.i.i.i, 6
  br i1 %1233, label %1234, label %1236

; <label>:1234                                    ; preds = %1232
  %1235 = add i8 %1214, -87
  br label %hexit.exit18.i.i.i

; <label>:1236                                    ; preds = %1232
  %c.off4.i15.i.i.i = add i8 %1214, -65
  %1237 = icmp ult i8 %c.off4.i15.i.i.i, 6
  %1238 = add i8 %1214, -55
  %..i16.i.i.i = select i1 %1237, i8 %1238, i8 0
  br label %hexit.exit18.i.i.i

hexit.exit18.i.i.i:                               ; preds = %1236, %1234, %hexit.exit24.i.i.i
  %1239 = phi i8 [ %..i16.i.i.i, %1236 ], [ %1235, %1234 ], [ %c.off.i13.i.i.i, %hexit.exit24.i.i.i ]
  %1240 = add i8 %1239, %1230
  br label %1241

; <label>:1241                                    ; preds = %hexit.exit18.i.i.i, %1212, %1202, %.preheader.i.i.i
  %storemerge.i10.i.i.i = phi i8 [ %1240, %hexit.exit18.i.i.i ], [ %1201, %.preheader.i.i.i ], [ 37, %1212 ], [ 37, %1202 ]
  %.1.i11.i.i.i = phi i8* [ %1213, %hexit.exit18.i.i.i ], [ %.0.i9.i.i.i, %.preheader.i.i.i ], [ %.0.i9.i.i.i, %1212 ], [ %.0.i9.i.i.i, %1202 ]
  store i8 %storemerge.i10.i.i.i, i8* %.01.i8.i.i.i, align 1, !tbaa !1
  %1242 = getelementptr inbounds i8, i8* %.01.i8.i.i.i, i64 1
  %1243 = getelementptr inbounds i8, i8* %.1.i11.i.i.i, i64 1
  br label %.preheader.i.i.i

strdecode.exit12.i.i.i:                           ; preds = %.preheader.i.i.i
  %.01.i8.i.i.i.lcssa = phi i8* [ %.01.i8.i.i.i, %.preheader.i.i.i ]
  store i8 0, i8* %.01.i8.i.i.i.lcssa, align 1, !tbaa !1
  %1244 = add i64 %indvars.iv.i.i.lcssa, 1
  %sext86.i.i = shl i64 %indvars.iv.i.i.lcssa, 32
  %1245 = ashr exact i64 %sext86.i.i, 32
  %1246 = getelementptr inbounds i8*, i8** %1137, i64 %1245
  store i8* %cp1.0.ph.i.i.i.lcssa, i8** %1246, align 8, !tbaa !4
  br label %1247

; <label>:1247                                    ; preds = %strdecode.exit12.i.i.i, %1199, %1148
  %argn.2.i.i.i = phi i64 [ %1244, %strdecode.exit12.i.i.i ], [ %indvars.iv.i.i.lcssa, %1199 ], [ 1, %1148 ]
  %sext.i.i = shl i64 %argn.2.i.i.i, 32
  %1248 = ashr exact i64 %sext.i.i, 32
  %1249 = getelementptr inbounds i8*, i8** %1137, i64 %1248
  store i8* null, i8** %1249, align 8, !tbaa !4
  br label %make_argp.exit.i.i

make_argp.exit.i.i:                               ; preds = %1247, %make_envp.exit.i.i
  %.0.i.i.i = phi i8** [ %1137, %1247 ], [ null, %make_envp.exit.i.i ]
  %1250 = load i32, i32* %5, align 4, !tbaa !91
  %1251 = icmp eq i32 %1250, 3
  br i1 %1251, label %1252, label %1369

; <label>:1252                                    ; preds = %make_argp.exit.i.i
  %1253 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 5
  %1254 = load i64, i64* %1253, align 8, !tbaa !42
  %1255 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 6
  %1256 = load i64, i64* %1255, align 8, !tbaa !154
  %1257 = icmp ugt i64 %1254, %1256
  br i1 %1257, label %1258, label %1369

; <label>:1258                                    ; preds = %1252
  %1259 = bitcast [2 x i32]* %p.i.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1259) #6
  %1260 = getelementptr inbounds [2 x i32], [2 x i32]* %p.i.i, i64 0, i64 0
  %1261 = call i32 @pipe(i32* %1260) #6
  %1262 = icmp slt i32 %1261, 0
  br i1 %1262, label %1263, label %1266

; <label>:1263                                    ; preds = %1258
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.492, i64 0, i64 0)) #6
  %1264 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %1265 = load i8*, i8** %1264, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 500, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89.170, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.90.171, i64 0, i64 0), i8* %1265) #6
  call void @httpd_write_response(%struct.httpd_conn* nonnull %hc) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:1266                                    ; preds = %1258
  %1267 = call i32 @fork() #6
  %1268 = icmp slt i32 %1267, 0
  br i1 %1268, label %1269, label %1272

; <label>:1269                                    ; preds = %1266
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.471, i64 0, i64 0)) #6
  %1270 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %1271 = load i8*, i8** %1270, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 500, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89.170, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.90.171, i64 0, i64 0), i8* %1271) #6
  call void @httpd_write_response(%struct.httpd_conn* nonnull %hc) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:1272                                    ; preds = %1266
  %1273 = icmp eq i32 %1267, 0
  br i1 %1273, label %1274, label %1358

; <label>:1274                                    ; preds = %1272
  store i1 true, i1* @sub_process, align 1
  %1275 = load i32, i32* %1260, align 4, !tbaa !8
  %1276 = call i32 @close(i32 %1275) #6
  %1277 = getelementptr inbounds [2 x i32], [2 x i32]* %p.i.i, i64 0, i64 1
  %1278 = load i32, i32* %1277, align 4, !tbaa !8
  %1279 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf.i3.i.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 1024, i8* %1279) #6
  %1280 = load i64, i64* %1253, align 8, !tbaa !42
  %1281 = load i64, i64* %1255, align 8, !tbaa !154
  %1282 = sub i64 %1280, %1281
  %1283 = icmp eq i64 %1280, %1281
  br i1 %1283, label %.preheader.i4.i.i, label %1284

; <label>:1284                                    ; preds = %1274
  %1285 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 3
  %1286 = load i8*, i8** %1285, align 8, !tbaa !44
  %1287 = getelementptr inbounds i8, i8* %1286, i64 %1281
  br label %.outer.i.i.i.i

.outer.i.i.i.i:                                   ; preds = %._crit_edge20.i.i.i, %1284
  %nwritten.0.ph.i.i.i.i = phi i32 [ %nwritten.0..i.i.i.i, %._crit_edge20.i.i.i ], [ 0, %1284 ]
  %1288 = sext i32 %nwritten.0.ph.i.i.i.i to i64
  %1289 = icmp ugt i64 %1282, %1288
  br i1 %1289, label %.lr.ph.i.i.i.i, label %httpd_write_fully.exit.i.i.i.loopexit236

.lr.ph.i.i.i.i:                                   ; preds = %.outer.i.i.i.i
  %1290 = getelementptr inbounds i8, i8* %1287, i64 %1288
  %1291 = sub i64 %1282, %1288
  %1292 = call i64 @write(i32 %1278, i8* %1290, i64 %1291) #6
  %1293 = trunc i64 %1292 to i32
  %1294 = icmp slt i32 %1293, 0
  br i1 %1294, label %.lr.ph19.i.i.i, label %._crit_edge20.i.i.i

.lr.ph19.i.i.i:                                   ; preds = %.lr.ph.i.i.i.i
  %1295 = tail call i32* @__errno_location() #21
  br label %1296

; <label>:1296                                    ; preds = %.thread2.i.i.i.i, %.lr.ph19.i.i.i
  %1297 = phi i32 [ %1293, %.lr.ph19.i.i.i ], [ %1301, %.thread2.i.i.i.i ]
  %1298 = load i32, i32* %1295, align 4, !tbaa !8
  switch i32 %1298, label %httpd_write_fully.exit.i.i.i.loopexit [
    i32 4, label %.thread2.i.i.i.i
    i32 11, label %.thread2.i.i.i.i
  ]

.thread2.i.i.i.i:                                 ; preds = %1296, %1296
  %1299 = call i32 @sleep(i32 1) #6
  %1300 = call i64 @write(i32 %1278, i8* %1290, i64 %1291) #6
  %1301 = trunc i64 %1300 to i32
  %1302 = icmp slt i32 %1301, 0
  br i1 %1302, label %1296, label %._crit_edge20.i.i.i.loopexit

._crit_edge20.i.i.i.loopexit:                     ; preds = %.thread2.i.i.i.i
  %.lcssa309 = phi i32 [ %1301, %.thread2.i.i.i.i ]
  br label %._crit_edge20.i.i.i

._crit_edge20.i.i.i:                              ; preds = %._crit_edge20.i.i.i.loopexit, %.lr.ph.i.i.i.i
  %.lcssa14.i.i.i = phi i32 [ %1293, %.lr.ph.i.i.i.i ], [ %.lcssa309, %._crit_edge20.i.i.i.loopexit ]
  %1303 = icmp eq i32 %.lcssa14.i.i.i, 0
  %nwritten.0..i.i.i.i = add nsw i32 %.lcssa14.i.i.i, %nwritten.0.ph.i.i.i.i
  br i1 %1303, label %httpd_write_fully.exit.i.i.i.loopexit236, label %.outer.i.i.i.i

httpd_write_fully.exit.i.i.i.loopexit:            ; preds = %1296
  %.lcssa307 = phi i32 [ %1297, %1296 ]
  br label %httpd_write_fully.exit.i.i.i

httpd_write_fully.exit.i.i.i.loopexit236:         ; preds = %.outer.i.i.i.i, %._crit_edge20.i.i.i
  %.2.i.i.i.i.ph = phi i32 [ %nwritten.0.ph.i.i.i.i, %.outer.i.i.i.i ], [ %nwritten.0..i.i.i.i, %._crit_edge20.i.i.i ]
  br label %httpd_write_fully.exit.i.i.i

httpd_write_fully.exit.i.i.i:                     ; preds = %httpd_write_fully.exit.i.i.i.loopexit236, %httpd_write_fully.exit.i.i.i.loopexit
  %.2.i.i.i.i = phi i32 [ %.lcssa307, %httpd_write_fully.exit.i.i.i.loopexit ], [ %.2.i.i.i.i.ph, %httpd_write_fully.exit.i.i.i.loopexit236 ]
  %1304 = sext i32 %.2.i.i.i.i to i64
  %1305 = icmp eq i64 %1304, %1282
  br i1 %1305, label %.preheader.i4.i.i, label %cgi_interpose_input.exit.i.i

.preheader.i4.i.i:                                ; preds = %httpd_write_fully.exit.i.i.i, %1274
  %1306 = load i64, i64* %1087, align 8, !tbaa !160
  %1307 = icmp ugt i64 %1306, %1282
  br i1 %1307, label %.lr.ph.i.i.i.preheader, label %.outer._crit_edge.i.i.i

.lr.ph.i.i.i.preheader:                           ; preds = %.preheader.i4.i.i
  br label %.lr.ph.i.i.i

.outer.i.i.i:                                     ; preds = %httpd_write_fully.exit7.i.i.i
  %1308 = load i64, i64* %1087, align 8, !tbaa !160
  %1309 = icmp ugt i64 %1308, %1345
  br i1 %1309, label %.lr.ph.i.i.i, label %.outer._crit_edge.i.i.i.loopexit235

.lr.ph.i.i.i:                                     ; preds = %.lr.ph.i.i.i.preheader, %.outer.i.i.i
  %1310 = phi i64 [ %1308, %.outer.i.i.i ], [ %1306, %.lr.ph.i.i.i.preheader ]
  %c.0.ph18.i.i.i = phi i64 [ %1345, %.outer.i.i.i ], [ %1282, %.lr.ph.i.i.i.preheader ]
  br label %1311

; <label>:1311                                    ; preds = %1321, %.lr.ph.i.i.i
  %1312 = phi i64 [ %1310, %.lr.ph.i.i.i ], [ %1323, %1321 ]
  %1313 = load i32, i32* %819, align 8, !tbaa !38
  %1314 = sub i64 %1312, %c.0.ph18.i.i.i
  %1315 = icmp ugt i64 %1314, 1024
  %..i.i.i = select i1 %1315, i64 1024, i64 %1314
  %1316 = call i64 @read(i32 %1313, i8* %1279, i64 %..i.i.i) #6
  %1317 = icmp slt i64 %1316, 0
  br i1 %1317, label %1318, label %1325

; <label>:1318                                    ; preds = %1311
  %1319 = tail call i32* @__errno_location() #21
  %1320 = load i32, i32* %1319, align 4, !tbaa !8
  switch i32 %1320, label %cgi_interpose_input.exit.i.i.loopexit [
    i32 4, label %1321
    i32 11, label %1321
  ]

; <label>:1321                                    ; preds = %1318, %1318
  %1322 = call i32 @sleep(i32 1) #6
  %1323 = load i64, i64* %1087, align 8, !tbaa !160
  %1324 = icmp ugt i64 %1323, %c.0.ph18.i.i.i
  br i1 %1324, label %1311, label %.outer._crit_edge.i.i.i.loopexit

; <label>:1325                                    ; preds = %1311
  %.lcssa301 = phi i64 [ %1316, %1311 ]
  %1326 = icmp slt i64 %.lcssa301, 1
  br i1 %1326, label %cgi_interpose_input.exit.i.i.loopexit234, label %.outer.i2.i.i.i.preheader

.outer.i2.i.i.i.preheader:                        ; preds = %1325
  br label %.outer.i2.i.i.i

.outer.i2.i.i.i:                                  ; preds = %.outer.i2.i.i.i.preheader, %._crit_edge17.i.i.i
  %nwritten.0.ph.i1.i.i.i = phi i32 [ %nwritten.0..i5.i.i.i, %._crit_edge17.i.i.i ], [ 0, %.outer.i2.i.i.i.preheader ]
  %1327 = sext i32 %nwritten.0.ph.i1.i.i.i to i64
  %1328 = icmp ugt i64 %.lcssa301, %1327
  br i1 %1328, label %.lr.ph.i3.i.i.i, label %httpd_write_fully.exit7.i.i.i.loopexit233

.lr.ph.i3.i.i.i:                                  ; preds = %.outer.i2.i.i.i
  %1329 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf.i3.i.i, i64 0, i64 %1327
  %1330 = sub i64 %.lcssa301, %1327
  %1331 = call i64 @write(i32 %1278, i8* %1329, i64 %1330) #6
  %1332 = trunc i64 %1331 to i32
  %1333 = icmp slt i32 %1332, 0
  br i1 %1333, label %.lr.ph16.i.i.i, label %._crit_edge17.i.i.i

.lr.ph16.i.i.i:                                   ; preds = %.lr.ph.i3.i.i.i
  %1334 = tail call i32* @__errno_location() #21
  br label %1335

; <label>:1335                                    ; preds = %.thread2.i4.i.i.i, %.lr.ph16.i.i.i
  %1336 = phi i32 [ %1332, %.lr.ph16.i.i.i ], [ %1340, %.thread2.i4.i.i.i ]
  %1337 = load i32, i32* %1334, align 4, !tbaa !8
  switch i32 %1337, label %httpd_write_fully.exit7.i.i.i.loopexit [
    i32 4, label %.thread2.i4.i.i.i
    i32 11, label %.thread2.i4.i.i.i
  ]

.thread2.i4.i.i.i:                                ; preds = %1335, %1335
  %1338 = call i32 @sleep(i32 1) #6
  %1339 = call i64 @write(i32 %1278, i8* %1329, i64 %1330) #6
  %1340 = trunc i64 %1339 to i32
  %1341 = icmp slt i32 %1340, 0
  br i1 %1341, label %1335, label %._crit_edge17.i.i.i.loopexit

._crit_edge17.i.i.i.loopexit:                     ; preds = %.thread2.i4.i.i.i
  %.lcssa306 = phi i32 [ %1340, %.thread2.i4.i.i.i ]
  br label %._crit_edge17.i.i.i

._crit_edge17.i.i.i:                              ; preds = %._crit_edge17.i.i.i.loopexit, %.lr.ph.i3.i.i.i
  %.lcssa12.i.i.i = phi i32 [ %1332, %.lr.ph.i3.i.i.i ], [ %.lcssa306, %._crit_edge17.i.i.i.loopexit ]
  %1342 = icmp eq i32 %.lcssa12.i.i.i, 0
  %nwritten.0..i5.i.i.i = add nsw i32 %.lcssa12.i.i.i, %nwritten.0.ph.i1.i.i.i
  br i1 %1342, label %httpd_write_fully.exit7.i.i.i.loopexit233, label %.outer.i2.i.i.i

httpd_write_fully.exit7.i.i.i.loopexit:           ; preds = %1335
  %.lcssa304 = phi i32 [ %1336, %1335 ]
  br label %httpd_write_fully.exit7.i.i.i

httpd_write_fully.exit7.i.i.i.loopexit233:        ; preds = %.outer.i2.i.i.i, %._crit_edge17.i.i.i
  %.2.i6.i.i.i.ph = phi i32 [ %nwritten.0.ph.i1.i.i.i, %.outer.i2.i.i.i ], [ %nwritten.0..i5.i.i.i, %._crit_edge17.i.i.i ]
  br label %httpd_write_fully.exit7.i.i.i

httpd_write_fully.exit7.i.i.i:                    ; preds = %httpd_write_fully.exit7.i.i.i.loopexit233, %httpd_write_fully.exit7.i.i.i.loopexit
  %.2.i6.i.i.i = phi i32 [ %.lcssa304, %httpd_write_fully.exit7.i.i.i.loopexit ], [ %.2.i6.i.i.i.ph, %httpd_write_fully.exit7.i.i.i.loopexit233 ]
  %1343 = sext i32 %.2.i6.i.i.i to i64
  %1344 = icmp eq i64 %1343, %.lcssa301
  %1345 = add i64 %.lcssa301, %c.0.ph18.i.i.i
  br i1 %1344, label %.outer.i.i.i, label %cgi_interpose_input.exit.i.i.loopexit234

.outer._crit_edge.i.i.i.loopexit:                 ; preds = %1321
  br label %.outer._crit_edge.i.i.i

.outer._crit_edge.i.i.i.loopexit235:              ; preds = %.outer.i.i.i
  br label %.outer._crit_edge.i.i.i

.outer._crit_edge.i.i.i:                          ; preds = %.outer._crit_edge.i.i.i.loopexit235, %.outer._crit_edge.i.i.i.loopexit, %.preheader.i4.i.i
  %1346 = getelementptr inbounds [2 x i8], [2 x i8]* %buf.i.i.i.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 2, i8* %1346) #6
  %.b.i.i.i.i = load i1, i1* @sub_process, align 1
  br i1 %.b.i.i.i.i, label %1347, label %post_post_garbage_hack.exit.i.i.i

; <label>:1347                                    ; preds = %.outer._crit_edge.i.i.i
  %1348 = load i32, i32* %819, align 8, !tbaa !38
  %1349 = call i32 (i32, i32, ...) @fcntl(i32 %1348, i32 3, i32 0) #6
  %1350 = icmp eq i32 %1349, -1
  br i1 %1350, label %post_post_garbage_hack.exit.i.i.i, label %1351

; <label>:1351                                    ; preds = %1347
  %1352 = or i32 %1349, 2048
  %1353 = icmp eq i32 %1352, %1349
  br i1 %1353, label %post_post_garbage_hack.exit.i.i.i, label %1354

; <label>:1354                                    ; preds = %1351
  %1355 = call i32 (i32, i32, ...) @fcntl(i32 %1348, i32 4, i32 %1352) #6
  br label %post_post_garbage_hack.exit.i.i.i

post_post_garbage_hack.exit.i.i.i:                ; preds = %1354, %1351, %1347, %.outer._crit_edge.i.i.i
  %1356 = load i32, i32* %819, align 8, !tbaa !38
  %1357 = call i64 @read(i32 %1356, i8* %1346, i64 2) #6
  call void @llvm.lifetime.end(i64 2, i8* %1346) #6
  br label %cgi_interpose_input.exit.i.i

cgi_interpose_input.exit.i.i.loopexit:            ; preds = %1318
  br label %cgi_interpose_input.exit.i.i

cgi_interpose_input.exit.i.i.loopexit234:         ; preds = %1325, %httpd_write_fully.exit7.i.i.i
  br label %cgi_interpose_input.exit.i.i

cgi_interpose_input.exit.i.i:                     ; preds = %cgi_interpose_input.exit.i.i.loopexit234, %cgi_interpose_input.exit.i.i.loopexit, %post_post_garbage_hack.exit.i.i.i, %httpd_write_fully.exit.i.i.i
  call void @llvm.lifetime.end(i64 1024, i8* %1279) #6
  call void @exit(i32 0) #18
  unreachable

; <label>:1358                                    ; preds = %1272
  %1359 = getelementptr inbounds [2 x i32], [2 x i32]* %p.i.i, i64 0, i64 1
  %1360 = load i32, i32* %1359, align 4, !tbaa !8
  %1361 = call i32 @close(i32 %1360) #6
  %1362 = load i32, i32* %1260, align 4, !tbaa !8
  %1363 = icmp eq i32 %1362, 0
  br i1 %1363, label %1368, label %1364

; <label>:1364                                    ; preds = %1358
  %1365 = call i32 @dup2(i32 %1362, i32 0) #6
  %1366 = load i32, i32* %1260, align 4, !tbaa !8
  %1367 = call i32 @close(i32 %1366) #6
  br label %1368

; <label>:1368                                    ; preds = %1364, %1358
  call void @llvm.lifetime.end(i64 8, i8* nonnull %1259) #6
  br label %1374

; <label>:1369                                    ; preds = %1252, %make_argp.exit.i.i
  %1370 = load i32, i32* %819, align 8, !tbaa !38
  %1371 = icmp eq i32 %1370, 0
  br i1 %1371, label %1374, label %1372

; <label>:1372                                    ; preds = %1369
  %1373 = call i32 @dup2(i32 %1370, i32 0) #6
  br label %1374

; <label>:1374                                    ; preds = %1372, %1369, %1368
  %1375 = load i8*, i8** %.0.i.i.i, align 8, !tbaa !4
  %1376 = call i32 @strncmp(i8* %1375, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.493, i64 0, i64 0), i64 4) #13
  %1377 = icmp eq i32 %1376, 0
  br i1 %1377, label %1607, label %1378

; <label>:1378                                    ; preds = %1374
  %1379 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 51
  %1380 = load i32, i32* %1379, align 8, !tbaa !144
  %1381 = icmp eq i32 %1380, 0
  br i1 %1381, label %1607, label %1382

; <label>:1382                                    ; preds = %1378
  %1383 = bitcast [2 x i32]* %p1.i.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1383) #6
  %1384 = getelementptr inbounds [2 x i32], [2 x i32]* %p1.i.i, i64 0, i64 0
  %1385 = call i32 @pipe(i32* %1384) #6
  %1386 = icmp slt i32 %1385, 0
  br i1 %1386, label %1387, label %1390

; <label>:1387                                    ; preds = %1382
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.492, i64 0, i64 0)) #6
  %1388 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %1389 = load i8*, i8** %1388, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 500, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89.170, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.90.171, i64 0, i64 0), i8* %1389) #6
  call void @httpd_write_response(%struct.httpd_conn* nonnull %hc) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:1390                                    ; preds = %1382
  %1391 = call i32 @fork() #6
  %1392 = icmp slt i32 %1391, 0
  br i1 %1392, label %1393, label %1396

; <label>:1393                                    ; preds = %1390
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.471, i64 0, i64 0)) #6
  %1394 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %1395 = load i8*, i8** %1394, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 500, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89.170, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.90.171, i64 0, i64 0), i8* %1395) #6
  call void @httpd_write_response(%struct.httpd_conn* nonnull %hc) #6
  call void @exit(i32 1) #18
  unreachable

; <label>:1396                                    ; preds = %1390
  %1397 = icmp eq i32 %1391, 0
  br i1 %1397, label %1398, label %1593

; <label>:1398                                    ; preds = %1396
  store i1 true, i1* @sub_process, align 1
  %1399 = getelementptr inbounds [2 x i32], [2 x i32]* %p1.i.i, i64 0, i64 1
  %1400 = load i32, i32* %1399, align 4, !tbaa !8
  %1401 = call i32 @close(i32 %1400) #6
  %1402 = load i32, i32* %1384, align 4, !tbaa !8
  %1403 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf.i3.i.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 1024, i8* %1403) #6
  %1404 = load i32, i32* %819, align 8, !tbaa !38
  %1405 = call i32 (i32, i32, ...) @fcntl(i32 %1404, i32 3, i32 0) #6
  %1406 = icmp eq i32 %1405, -1
  br i1 %1406, label %1412, label %1407

; <label>:1407                                    ; preds = %1398
  %1408 = and i32 %1405, -2049
  %1409 = icmp eq i32 %1408, %1405
  br i1 %1409, label %1412, label %1410

; <label>:1410                                    ; preds = %1407
  %1411 = call i32 (i32, i32, ...) @fcntl(i32 %1404, i32 4, i32 %1408) #6
  br label %1412

; <label>:1412                                    ; preds = %1410, %1407, %1398
  %1413 = call noalias i8* @malloc(i64 601) #6
  %1414 = load i32, i32* @str_alloc_count, align 4, !tbaa !8
  %1415 = add nsw i32 %1414, 1
  store i32 %1415, i32* @str_alloc_count, align 4, !tbaa !8
  %1416 = load i64, i64* @str_alloc_size, align 8, !tbaa !16
  %1417 = add i64 %1416, 600
  store i64 %1417, i64* @str_alloc_size, align 8, !tbaa !16
  %1418 = icmp eq i8* %1413, null
  br i1 %1418, label %1419, label %.outer.i7.i.i.preheader

.outer.i7.i.i.preheader:                          ; preds = %1412
  br label %.outer.i7.i.i

; <label>:1419                                    ; preds = %1412
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([49 x i8], [49 x i8]* @.str.16, i64 0, i64 0), i64 600) #6
  call void @exit(i32 1) #18
  unreachable

.outer.i7.i.i:                                    ; preds = %.outer.i7.i.i.preheader, %1467
  %headers_size.i.i.i.2 = phi i64 [ %headers_size.i.i.i.4, %1467 ], [ 600, %.outer.i7.i.i.preheader ]
  %headers.i.i.i.2 = phi i8* [ %headers.i.i.i.4, %1467 ], [ %1413, %.outer.i7.i.i.preheader ]
  %headers_len.0.ph.i.i.i = phi i64 [ %1435, %1467 ], [ 0, %.outer.i7.i.i.preheader ]
  %1420 = call i64 @read(i32 %1402, i8* %1403, i64 1024) #6
  %1421 = trunc i64 %1420 to i32
  %1422 = icmp slt i32 %1421, 0
  br i1 %1422, label %.lr.ph44.i.i.i, label %._crit_edge45.i.i.i

.lr.ph44.i.i.i:                                   ; preds = %.outer.i7.i.i
  %1423 = tail call i32* @__errno_location() #21
  br label %1424

; <label>:1424                                    ; preds = %1426, %.lr.ph44.i.i.i
  %1425 = load i32, i32* %1423, align 4, !tbaa !8
  switch i32 %1425, label %.thread.i8.i.i.loopexit [
    i32 4, label %1426
    i32 11, label %1426
  ]

; <label>:1426                                    ; preds = %1424, %1424
  %1427 = call i32 @sleep(i32 1) #6
  %1428 = call i64 @read(i32 %1402, i8* %1403, i64 1024) #6
  %1429 = trunc i64 %1428 to i32
  %1430 = icmp slt i32 %1429, 0
  br i1 %1430, label %1424, label %._crit_edge45.i.i.i.loopexit

._crit_edge45.i.i.i.loopexit:                     ; preds = %1426
  %.lcssa317 = phi i32 [ %1429, %1426 ]
  %.lcssa316 = phi i64 [ %1428, %1426 ]
  br label %._crit_edge45.i.i.i

._crit_edge45.i.i.i:                              ; preds = %._crit_edge45.i.i.i.loopexit, %.outer.i7.i.i
  %.lcssa32.i.i.i = phi i32 [ %1421, %.outer.i7.i.i ], [ %.lcssa317, %._crit_edge45.i.i.i.loopexit ]
  %.lcssa30.i.i.i = phi i64 [ %1420, %.outer.i7.i.i ], [ %.lcssa316, %._crit_edge45.i.i.i.loopexit ]
  %1431 = icmp slt i32 %.lcssa32.i.i.i, 1
  br i1 %1431, label %.thread.i8.i.i.loopexit240, label %1433

.thread.i8.i.i.loopexit:                          ; preds = %1424
  %headers_len.0.ph.i.i.i.lcssa = phi i64 [ %headers_len.0.ph.i.i.i, %1424 ]
  %headers.i.i.i.2.lcssa = phi i8* [ %headers.i.i.i.2, %1424 ]
  br label %.thread.i8.i.i

.thread.i8.i.i.loopexit240:                       ; preds = %._crit_edge45.i.i.i
  %headers_len.0.ph.i.i.i.lcssa322 = phi i64 [ %headers_len.0.ph.i.i.i, %._crit_edge45.i.i.i ]
  %headers.i.i.i.2.lcssa318 = phi i8* [ %headers.i.i.i.2, %._crit_edge45.i.i.i ]
  br label %.thread.i8.i.i

.thread.i8.i.i:                                   ; preds = %.thread.i8.i.i.loopexit240, %.thread.i8.i.i.loopexit
  %headers_len.0.ph.i.i.i325 = phi i64 [ %headers_len.0.ph.i.i.i.lcssa322, %.thread.i8.i.i.loopexit240 ], [ %headers_len.0.ph.i.i.i.lcssa, %.thread.i8.i.i.loopexit ]
  %headers.i.i.i.2321 = phi i8* [ %headers.i.i.i.2.lcssa318, %.thread.i8.i.i.loopexit240 ], [ %headers.i.i.i.2.lcssa, %.thread.i8.i.i.loopexit ]
  %1432 = getelementptr inbounds i8, i8* %headers.i.i.i.2321, i64 %headers_len.0.ph.i.i.i325
  br label %.loopexit.i.i.i

; <label>:1433                                    ; preds = %._crit_edge45.i.i.i
  %sext.i.i.i = shl i64 %.lcssa30.i.i.i, 32
  %1434 = ashr exact i64 %sext.i.i.i, 32
  %1435 = add i64 %1434, %headers_len.0.ph.i.i.i
  %1436 = icmp eq i64 %headers_size.i.i.i.2, 0
  br i1 %1436, label %1437, label %1447

; <label>:1437                                    ; preds = %1433
  %1438 = add i64 %1435, 100
  %1439 = icmp ult i64 %1438, 200
  %1440 = select i1 %1439, i64 200, i64 %1438
  %1441 = add i64 %1440, 1
  %1442 = call noalias i8* @malloc(i64 %1441) #6
  %1443 = load i32, i32* @str_alloc_count, align 4, !tbaa !8
  %1444 = add nsw i32 %1443, 1
  store i32 %1444, i32* @str_alloc_count, align 4, !tbaa !8
  %1445 = load i64, i64* @str_alloc_size, align 8, !tbaa !16
  %1446 = add i64 %1445, %1440
  br label %1460

; <label>:1447                                    ; preds = %1433
  %1448 = icmp ult i64 %headers_size.i.i.i.2, %1435
  br i1 %1448, label %1449, label %httpd_realloc_str.exit23

; <label>:1449                                    ; preds = %1447
  %1450 = load i64, i64* @str_alloc_size, align 8, !tbaa !16
  %1451 = sub i64 %1450, %headers_size.i.i.i.2
  store i64 %1451, i64* @str_alloc_size, align 8, !tbaa !16
  %1452 = shl i64 %headers_size.i.i.i.2, 1
  %1453 = mul i64 %1435, 5
  %1454 = lshr i64 %1453, 2
  %1455 = icmp ugt i64 %1452, %1454
  %..i21 = select i1 %1455, i64 %1452, i64 %1454
  %1456 = add i64 %..i21, 1
  %1457 = call i8* @realloc(i8* %headers.i.i.i.2, i64 %1456) #6
  %1458 = load i64, i64* @str_alloc_size, align 8, !tbaa !16
  %1459 = add i64 %1458, %..i21
  br label %1460

; <label>:1460                                    ; preds = %1449, %1437
  %headers_size.i.i.i.3 = phi i64 [ %1440, %1437 ], [ %..i21, %1449 ]
  %headers.i.i.i.3 = phi i8* [ %1442, %1437 ], [ %1457, %1449 ]
  %storemerge.i22 = phi i64 [ %1446, %1437 ], [ %1459, %1449 ]
  store i64 %storemerge.i22, i64* @str_alloc_size, align 8, !tbaa !16
  %1461 = icmp eq i8* %headers.i.i.i.3, null
  br i1 %1461, label %1462, label %httpd_realloc_str.exit23

; <label>:1462                                    ; preds = %1460
  %headers_size.i.i.i.3.lcssa = phi i64 [ %headers_size.i.i.i.3, %1460 ]
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([49 x i8], [49 x i8]* @.str.16, i64 0, i64 0), i64 %headers_size.i.i.i.3.lcssa) #6
  call void @exit(i32 1) #18
  unreachable

httpd_realloc_str.exit23:                         ; preds = %1447, %1460
  %headers_size.i.i.i.4 = phi i64 [ %headers_size.i.i.i.3, %1460 ], [ %headers_size.i.i.i.2, %1447 ]
  %headers.i.i.i.4 = phi i8* [ %headers.i.i.i.3, %1460 ], [ %headers.i.i.i.2, %1447 ]
  %1463 = getelementptr inbounds i8, i8* %headers.i.i.i.4, i64 %headers_len.0.ph.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1463, i8* %1403, i64 %1434, i32 1, i1 false) #6
  %1464 = getelementptr inbounds i8, i8* %headers.i.i.i.4, i64 %1435
  store i8 0, i8* %1464, align 1, !tbaa !1
  %1465 = call i8* @strstr(i8* %headers.i.i.i.4, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.527, i64 0, i64 0)) #13
  %1466 = icmp eq i8* %1465, null
  br i1 %1466, label %1467, label %.loopexit.i.i.i.loopexit

; <label>:1467                                    ; preds = %httpd_realloc_str.exit23
  %1468 = call i8* @strstr(i8* %headers.i.i.i.4, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.528, i64 0, i64 0)) #13
  %1469 = icmp eq i8* %1468, null
  br i1 %1469, label %.outer.i7.i.i, label %.loopexit.i.i.i.loopexit

.loopexit.i.i.i.loopexit:                         ; preds = %httpd_realloc_str.exit23, %1467
  %headers.i.i.i.4.lcssa = phi i8* [ %headers.i.i.i.4, %httpd_realloc_str.exit23 ], [ %headers.i.i.i.4, %1467 ]
  %.lcssa327 = phi i64 [ %1435, %httpd_realloc_str.exit23 ], [ %1435, %1467 ]
  %br.0.i.i.i.ph = phi i8* [ %1468, %1467 ], [ %1465, %httpd_realloc_str.exit23 ]
  br label %.loopexit.i.i.i

.loopexit.i.i.i:                                  ; preds = %.loopexit.i.i.i.loopexit, %.thread.i8.i.i
  %1470 = phi i8* [ %headers.i.i.i.2321, %.thread.i8.i.i ], [ %headers.i.i.i.4.lcssa, %.loopexit.i.i.i.loopexit ]
  %br.0.i.i.i = phi i8* [ %1432, %.thread.i8.i.i ], [ %br.0.i.i.i.ph, %.loopexit.i.i.i.loopexit ]
  %headers_len.1.i.i.i = phi i64 [ %headers_len.0.ph.i.i.i325, %.thread.i8.i.i ], [ %.lcssa327, %.loopexit.i.i.i.loopexit ]
  %1471 = load i8, i8* %1470, align 1, !tbaa !1
  %1472 = icmp eq i8 %1471, 0
  br i1 %1472, label %cgi_interpose_output.exit.i.i, label %1473

; <label>:1473                                    ; preds = %.loopexit.i.i.i
  %1474 = call i32 @strncmp(i8* %1470, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.529, i64 0, i64 0), i64 5) #13
  %1475 = icmp eq i32 %1474, 0
  br i1 %1475, label %switch.early.test.i.i.i.preheader, label %1482

switch.early.test.i.i.i.preheader:                ; preds = %1473
  br label %switch.early.test.i.i.i

switch.early.test.i.i.i:                          ; preds = %switch.early.test.i.i.i.preheader, %switch.early.test..preheader_crit_edge.i.i.i
  %__result.0.i.i52.i.i = phi i64 [ %1477, %switch.early.test..preheader_crit_edge.i.i.i ], [ 0, %switch.early.test.i.i.i.preheader ]
  %1476 = phi i8 [ %.pre.i10.i.i, %switch.early.test..preheader_crit_edge.i.i.i ], [ %1471, %switch.early.test.i.i.i.preheader ]
  %1477 = add i64 %__result.0.i.i52.i.i, 1
  %1478 = sext i8 %1476 to i32
  switch i32 %1478, label %switch.early.test..preheader_crit_edge.i.i.i [
    i32 32, label %__strcspn_c2.exit.i.i.i
    i32 9, label %__strcspn_c2.exit.i.i.i
  ]

switch.early.test..preheader_crit_edge.i.i.i:     ; preds = %switch.early.test.i.i.i
  %.phi.trans.insert.i.i.i = getelementptr inbounds i8, i8* %1470, i64 %1477
  %.pre.i10.i.i = load i8, i8* %.phi.trans.insert.i.i.i, align 1, !tbaa !1
  %notlhs.i.i.i.i = icmp eq i8 %.pre.i10.i.i, 0
  br i1 %notlhs.i.i.i.i, label %__strcspn_c2.exit.i.i.i, label %switch.early.test.i.i.i

__strcspn_c2.exit.i.i.i:                          ; preds = %switch.early.test..preheader_crit_edge.i.i.i, %switch.early.test.i.i.i, %switch.early.test.i.i.i
  %__result.0.i.i.lcssa.ph.i.i = phi i64 [ %1477, %switch.early.test..preheader_crit_edge.i.i.i ], [ %__result.0.i.i52.i.i, %switch.early.test.i.i.i ], [ %__result.0.i.i52.i.i, %switch.early.test.i.i.i ]
  %1479 = getelementptr inbounds i8, i8* %1470, i64 %__result.0.i.i.lcssa.ph.i.i
  %1480 = call i64 @strtol(i8* nocapture nonnull %1479, i8** null, i32 10) #6
  %1481 = trunc i64 %1480 to i32
  br label %1482

; <label>:1482                                    ; preds = %__strcspn_c2.exit.i.i.i, %1473
  %status.0.i.i.i = phi i32 [ %1481, %__strcspn_c2.exit.i.i.i ], [ 200, %1473 ]
  %1483 = call i8* @strstr(i8* %1470, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.530, i64 0, i64 0)) #13
  %1484 = icmp ne i8* %1483, null
  %1485 = icmp ult i8* %1483, %br.0.i.i.i
  %or.cond.i.i.i = and i1 %1484, %1485
  br i1 %or.cond.i.i.i, label %1486, label %1493

; <label>:1486                                    ; preds = %1482
  %1487 = icmp eq i8* %1483, %1470
  br i1 %1487, label %1492, label %1488

; <label>:1488                                    ; preds = %1486
  %1489 = getelementptr inbounds i8, i8* %1483, i64 -1
  %1490 = load i8, i8* %1489, align 1, !tbaa !1
  %1491 = icmp eq i8 %1490, 10
  br i1 %1491, label %1492, label %1493

; <label>:1492                                    ; preds = %1488, %1486
  br label %1493

; <label>:1493                                    ; preds = %1492, %1488, %1482
  %status.1.i.i.i = phi i32 [ 302, %1492 ], [ %status.0.i.i.i, %1488 ], [ %status.0.i.i.i, %1482 ]
  %1494 = call i8* @strstr(i8* %1470, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.531, i64 0, i64 0)) #13
  %1495 = icmp ne i8* %1494, null
  %1496 = icmp ult i8* %1494, %br.0.i.i.i
  %or.cond2.i.i.i = and i1 %1495, %1496
  br i1 %or.cond2.i.i.i, label %1497, label %1511

; <label>:1497                                    ; preds = %1493
  %1498 = icmp eq i8* %1494, %1470
  br i1 %1498, label %1503, label %1499

; <label>:1499                                    ; preds = %1497
  %1500 = getelementptr inbounds i8, i8* %1494, i64 -1
  %1501 = load i8, i8* %1500, align 1, !tbaa !1
  %1502 = icmp eq i8 %1501, 10
  br i1 %1502, label %1503, label %1511

; <label>:1503                                    ; preds = %1499, %1497
  %1504 = getelementptr inbounds i8, i8* %1494, i64 7
  br label %.backedge.i.i.i

.backedge.i.i.i:                                  ; preds = %.backedge.i.i.i.backedge, %1503
  %__result.0.i3.i.i.i = phi i64 [ 0, %1503 ], [ %1508, %.backedge.i.i.i.backedge ]
  %1505 = getelementptr inbounds i8, i8* %1504, i64 %__result.0.i3.i.i.i
  %1506 = load i8, i8* %1505, align 1, !tbaa !1
  %1507 = sext i8 %1506 to i32
  %1508 = add i64 %__result.0.i3.i.i.i, 1
  switch i32 %1507, label %__strspn_c2.exit.i.i.i [
    i32 32, label %.backedge.i.i.i.backedge
    i32 9, label %.backedge.i.i.i.backedge
  ]

.backedge.i.i.i.backedge:                         ; preds = %.backedge.i.i.i, %.backedge.i.i.i
  br label %.backedge.i.i.i

__strspn_c2.exit.i.i.i:                           ; preds = %.backedge.i.i.i
  %.lcssa315 = phi i8* [ %1505, %.backedge.i.i.i ]
  %1509 = call i64 @strtol(i8* nocapture nonnull %.lcssa315, i8** null, i32 10) #6
  %1510 = trunc i64 %1509 to i32
  br label %1511

; <label>:1511                                    ; preds = %__strspn_c2.exit.i.i.i, %1499, %1493
  %status.2.i.i.i = phi i32 [ %1510, %__strspn_c2.exit.i.i.i ], [ %status.1.i.i.i, %1499 ], [ %status.1.i.i.i, %1493 ]
  switch i32 %status.2.i.i.i, label %1526 [
    i32 200, label %1527
    i32 302, label %1512
    i32 304, label %1513
    i32 400, label %1514
    i32 401, label %1516
    i32 403, label %1517
    i32 404, label %1518
    i32 408, label %1519
    i32 451, label %1521
    i32 500, label %1522
    i32 501, label %1523
    i32 503, label %1524
  ]

; <label>:1512                                    ; preds = %1511
  br label %1527

; <label>:1513                                    ; preds = %1511
  br label %1527

; <label>:1514                                    ; preds = %1511
  %1515 = load i8*, i8** @httpd_err400title, align 8, !tbaa !4
  br label %1527

; <label>:1516                                    ; preds = %1511
  br label %1527

; <label>:1517                                    ; preds = %1511
  br label %1527

; <label>:1518                                    ; preds = %1511
  br label %1527

; <label>:1519                                    ; preds = %1511
  %1520 = load i8*, i8** @httpd_err408title, align 8, !tbaa !4
  br label %1527

; <label>:1521                                    ; preds = %1511
  br label %1527

; <label>:1522                                    ; preds = %1511
  br label %1527

; <label>:1523                                    ; preds = %1511
  br label %1527

; <label>:1524                                    ; preds = %1511
  %1525 = load i8*, i8** @httpd_err503title, align 8, !tbaa !4
  br label %1527

; <label>:1526                                    ; preds = %1511
  br label %1527

; <label>:1527                                    ; preds = %1526, %1524, %1523, %1522, %1521, %1519, %1518, %1517, %1516, %1514, %1513, %1512, %1511
  %title.0.i.i.i = phi i8* [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.532, i64 0, i64 0), %1526 ], [ %1525, %1524 ], [ getelementptr inbounds ([16 x i8], [16 x i8]* @.str.85.144, i64 0, i64 0), %1523 ], [ getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89.170, i64 0, i64 0), %1522 ], [ getelementptr inbounds ([30 x i8], [30 x i8]* @.str.534, i64 0, i64 0), %1521 ], [ %1520, %1519 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.454, i64 0, i64 0), %1518 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94.175, i64 0, i64 0), %1517 ], [ getelementptr inbounds ([13 x i8], [13 x i8]* @.str.466, i64 0, i64 0), %1516 ], [ %1515, %1514 ], [ getelementptr inbounds ([13 x i8], [13 x i8]* @.str.537, i64 0, i64 0), %1513 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.459, i64 0, i64 0), %1512 ], [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.536, i64 0, i64 0), %1511 ]
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %1403, i64 1024, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.533, i64 0, i64 0), i32 %status.2.i.i.i, i8* %title.0.i.i.i) #6
  %1528 = load i32, i32* %819, align 8, !tbaa !38
  %1529 = call i64 @strlen(i8* %1403) #13
  br label %.outer.i5.i.i.i

.outer.i5.i.i.i:                                  ; preds = %._crit_edge42.i.i.i, %1527
  %nwritten.0.ph.i4.i.i.i = phi i32 [ %nwritten.0..i8.i.i.i, %._crit_edge42.i.i.i ], [ 0, %1527 ]
  %1530 = sext i32 %nwritten.0.ph.i4.i.i.i to i64
  %1531 = icmp ugt i64 %1529, %1530
  br i1 %1531, label %.lr.ph.i6.i.i.i, label %httpd_write_fully.exit10.i.i.i.loopexit239

.lr.ph.i6.i.i.i:                                  ; preds = %.outer.i5.i.i.i
  %1532 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf.i3.i.i, i64 0, i64 %1530
  %1533 = sub i64 %1529, %1530
  %1534 = call i64 @write(i32 %1528, i8* %1532, i64 %1533) #6
  %1535 = trunc i64 %1534 to i32
  %1536 = icmp slt i32 %1535, 0
  br i1 %1536, label %.lr.ph41.i.i.i, label %._crit_edge42.i.i.i

.lr.ph41.i.i.i:                                   ; preds = %.lr.ph.i6.i.i.i
  %1537 = tail call i32* @__errno_location() #21
  br label %1538

; <label>:1538                                    ; preds = %.thread2.i7.i.i.i, %.lr.ph41.i.i.i
  %1539 = load i32, i32* %1537, align 4, !tbaa !8
  switch i32 %1539, label %httpd_write_fully.exit10.i.i.i.loopexit [
    i32 4, label %.thread2.i7.i.i.i
    i32 11, label %.thread2.i7.i.i.i
  ]

.thread2.i7.i.i.i:                                ; preds = %1538, %1538
  %1540 = call i32 @sleep(i32 1) #6
  %1541 = call i64 @write(i32 %1528, i8* %1532, i64 %1533) #6
  %1542 = trunc i64 %1541 to i32
  %1543 = icmp slt i32 %1542, 0
  br i1 %1543, label %1538, label %._crit_edge42.i.i.i.loopexit

._crit_edge42.i.i.i.loopexit:                     ; preds = %.thread2.i7.i.i.i
  %.lcssa314 = phi i32 [ %1542, %.thread2.i7.i.i.i ]
  br label %._crit_edge42.i.i.i

._crit_edge42.i.i.i:                              ; preds = %._crit_edge42.i.i.i.loopexit, %.lr.ph.i6.i.i.i
  %.lcssa26.i.i.i = phi i32 [ %1535, %.lr.ph.i6.i.i.i ], [ %.lcssa314, %._crit_edge42.i.i.i.loopexit ]
  %1544 = icmp eq i32 %.lcssa26.i.i.i, 0
  %nwritten.0..i8.i.i.i = add nsw i32 %.lcssa26.i.i.i, %nwritten.0.ph.i4.i.i.i
  br i1 %1544, label %httpd_write_fully.exit10.i.i.i.loopexit239, label %.outer.i5.i.i.i

httpd_write_fully.exit10.i.i.i.loopexit:          ; preds = %1538
  br label %httpd_write_fully.exit10.i.i.i

httpd_write_fully.exit10.i.i.i.loopexit239:       ; preds = %.outer.i5.i.i.i, %._crit_edge42.i.i.i
  br label %httpd_write_fully.exit10.i.i.i

httpd_write_fully.exit10.i.i.i:                   ; preds = %httpd_write_fully.exit10.i.i.i.loopexit239, %httpd_write_fully.exit10.i.i.i.loopexit
  %1545 = load i32, i32* %819, align 8, !tbaa !38
  br label %.outer.i12.i.i.i

.outer.i12.i.i.i:                                 ; preds = %._crit_edge39.i.i.i, %httpd_write_fully.exit10.i.i.i
  %nwritten.0.ph.i11.i.i.i = phi i32 [ %nwritten.0..i15.i.i.i, %._crit_edge39.i.i.i ], [ 0, %httpd_write_fully.exit10.i.i.i ]
  %1546 = sext i32 %nwritten.0.ph.i11.i.i.i to i64
  %1547 = icmp ugt i64 %headers_len.1.i.i.i, %1546
  br i1 %1547, label %.lr.ph.i13.i.i.i, label %httpd_write_fully.exit17.i.i.i.preheader.loopexit238

.lr.ph.i13.i.i.i:                                 ; preds = %.outer.i12.i.i.i
  %1548 = getelementptr inbounds i8, i8* %1470, i64 %1546
  %1549 = sub i64 %headers_len.1.i.i.i, %1546
  %1550 = call i64 @write(i32 %1545, i8* %1548, i64 %1549) #6
  %1551 = trunc i64 %1550 to i32
  %1552 = icmp slt i32 %1551, 0
  br i1 %1552, label %.lr.ph38.i.i.i, label %._crit_edge39.i.i.i

.lr.ph38.i.i.i:                                   ; preds = %.lr.ph.i13.i.i.i
  %1553 = tail call i32* @__errno_location() #21
  br label %1554

; <label>:1554                                    ; preds = %.thread2.i14.i.i.i, %.lr.ph38.i.i.i
  %1555 = load i32, i32* %1553, align 4, !tbaa !8
  switch i32 %1555, label %httpd_write_fully.exit17.i.i.i.preheader.loopexit [
    i32 4, label %.thread2.i14.i.i.i
    i32 11, label %.thread2.i14.i.i.i
  ]

.thread2.i14.i.i.i:                               ; preds = %1554, %1554
  %1556 = call i32 @sleep(i32 1) #6
  %1557 = call i64 @write(i32 %1545, i8* %1548, i64 %1549) #6
  %1558 = trunc i64 %1557 to i32
  %1559 = icmp slt i32 %1558, 0
  br i1 %1559, label %1554, label %._crit_edge39.i.i.i.loopexit

._crit_edge39.i.i.i.loopexit:                     ; preds = %.thread2.i14.i.i.i
  %.lcssa313 = phi i32 [ %1558, %.thread2.i14.i.i.i ]
  br label %._crit_edge39.i.i.i

._crit_edge39.i.i.i:                              ; preds = %._crit_edge39.i.i.i.loopexit, %.lr.ph.i13.i.i.i
  %.lcssa24.i.i.i = phi i32 [ %1551, %.lr.ph.i13.i.i.i ], [ %.lcssa313, %._crit_edge39.i.i.i.loopexit ]
  %1560 = icmp eq i32 %.lcssa24.i.i.i, 0
  %nwritten.0..i15.i.i.i = add nsw i32 %.lcssa24.i.i.i, %nwritten.0.ph.i11.i.i.i
  br i1 %1560, label %httpd_write_fully.exit17.i.i.i.preheader.loopexit238, label %.outer.i12.i.i.i

httpd_write_fully.exit17.i.i.i.preheader.loopexit: ; preds = %1554
  br label %httpd_write_fully.exit17.i.i.i.preheader

httpd_write_fully.exit17.i.i.i.preheader.loopexit238: ; preds = %._crit_edge39.i.i.i, %.outer.i12.i.i.i
  br label %httpd_write_fully.exit17.i.i.i.preheader

httpd_write_fully.exit17.i.i.i.preheader:         ; preds = %httpd_write_fully.exit17.i.i.i.preheader.loopexit238, %httpd_write_fully.exit17.i.i.i.preheader.loopexit
  br label %httpd_write_fully.exit17.i.i.i

httpd_write_fully.exit17.i.i.i:                   ; preds = %httpd_write_fully.exit17.i.i.i.backedge, %httpd_write_fully.exit17.i.i.i.preheader
  %1561 = call i64 @read(i32 %1402, i8* %1403, i64 1024) #6
  %1562 = trunc i64 %1561 to i32
  %1563 = icmp slt i32 %1562, 0
  br i1 %1563, label %1564, label %1569

; <label>:1564                                    ; preds = %httpd_write_fully.exit17.i.i.i
  %1565 = tail call i32* @__errno_location() #21
  %1566 = load i32, i32* %1565, align 4, !tbaa !8
  switch i32 %1566, label %.thread18.i.i.i [
    i32 4, label %1567
    i32 11, label %1567
  ]

; <label>:1567                                    ; preds = %1564, %1564
  %1568 = call i32 @sleep(i32 1) #6
  br label %httpd_write_fully.exit17.i.i.i.backedge

httpd_write_fully.exit17.i.i.i.backedge:          ; preds = %1567, %httpd_write_fully.exit.i18.i.i
  br label %httpd_write_fully.exit17.i.i.i

; <label>:1569                                    ; preds = %httpd_write_fully.exit17.i.i.i
  %1570 = icmp slt i32 %1562, 1
  br i1 %1570, label %.thread18.i.i.i, label %1571

; <label>:1571                                    ; preds = %1569
  %1572 = load i32, i32* %819, align 8, !tbaa !38
  %sext1.i.i.i = shl i64 %1561, 32
  %1573 = ashr exact i64 %sext1.i.i.i, 32
  br label %.outer.i.i12.i.i

.outer.i.i12.i.i:                                 ; preds = %._crit_edge.i.i.i, %1571
  %nwritten.0.ph.i.i11.i.i = phi i32 [ %nwritten.0..i.i16.i.i, %._crit_edge.i.i.i ], [ 0, %1571 ]
  %1574 = sext i32 %nwritten.0.ph.i.i11.i.i to i64
  %1575 = icmp ugt i64 %1573, %1574
  br i1 %1575, label %.lr.ph.i.i13.i.i, label %httpd_write_fully.exit.i18.i.i.loopexit237

.lr.ph.i.i13.i.i:                                 ; preds = %.outer.i.i12.i.i
  %1576 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf.i3.i.i, i64 0, i64 %1574
  %1577 = sub nsw i64 %1573, %1574
  %1578 = call i64 @write(i32 %1572, i8* %1576, i64 %1577) #6
  %1579 = trunc i64 %1578 to i32
  %1580 = icmp slt i32 %1579, 0
  br i1 %1580, label %.lr.ph.i14.i.i, label %._crit_edge.i.i.i

.lr.ph.i14.i.i:                                   ; preds = %.lr.ph.i.i13.i.i
  %1581 = tail call i32* @__errno_location() #21
  br label %1582

; <label>:1582                                    ; preds = %.thread2.i.i15.i.i, %.lr.ph.i14.i.i
  %1583 = phi i32 [ %1579, %.lr.ph.i14.i.i ], [ %1587, %.thread2.i.i15.i.i ]
  %1584 = load i32, i32* %1581, align 4, !tbaa !8
  switch i32 %1584, label %httpd_write_fully.exit.i18.i.i.loopexit [
    i32 4, label %.thread2.i.i15.i.i
    i32 11, label %.thread2.i.i15.i.i
  ]

.thread2.i.i15.i.i:                               ; preds = %1582, %1582
  %1585 = call i32 @sleep(i32 1) #6
  %1586 = call i64 @write(i32 %1572, i8* %1576, i64 %1577) #6
  %1587 = trunc i64 %1586 to i32
  %1588 = icmp slt i32 %1587, 0
  br i1 %1588, label %1582, label %._crit_edge.i.i.i.loopexit

._crit_edge.i.i.i.loopexit:                       ; preds = %.thread2.i.i15.i.i
  %.lcssa312 = phi i32 [ %1587, %.thread2.i.i15.i.i ]
  br label %._crit_edge.i.i.i

._crit_edge.i.i.i:                                ; preds = %._crit_edge.i.i.i.loopexit, %.lr.ph.i.i13.i.i
  %.lcssa.i.i.i = phi i32 [ %1579, %.lr.ph.i.i13.i.i ], [ %.lcssa312, %._crit_edge.i.i.i.loopexit ]
  %1589 = icmp eq i32 %.lcssa.i.i.i, 0
  %nwritten.0..i.i16.i.i = add nsw i32 %.lcssa.i.i.i, %nwritten.0.ph.i.i11.i.i
  br i1 %1589, label %httpd_write_fully.exit.i18.i.i.loopexit237, label %.outer.i.i12.i.i

httpd_write_fully.exit.i18.i.i.loopexit:          ; preds = %1582
  %.lcssa310 = phi i32 [ %1583, %1582 ]
  br label %httpd_write_fully.exit.i18.i.i

httpd_write_fully.exit.i18.i.i.loopexit237:       ; preds = %.outer.i.i12.i.i, %._crit_edge.i.i.i
  %.2.i.i17.i.i.ph = phi i32 [ %nwritten.0.ph.i.i11.i.i, %.outer.i.i12.i.i ], [ %nwritten.0..i.i16.i.i, %._crit_edge.i.i.i ]
  br label %httpd_write_fully.exit.i18.i.i

httpd_write_fully.exit.i18.i.i:                   ; preds = %httpd_write_fully.exit.i18.i.i.loopexit237, %httpd_write_fully.exit.i18.i.i.loopexit
  %.2.i.i17.i.i = phi i32 [ %.lcssa310, %httpd_write_fully.exit.i18.i.i.loopexit ], [ %.2.i.i17.i.i.ph, %httpd_write_fully.exit.i18.i.i.loopexit237 ]
  %1590 = icmp eq i32 %.2.i.i17.i.i, %1562
  br i1 %1590, label %httpd_write_fully.exit17.i.i.i.backedge, label %.thread18.i.i.i

.thread18.i.i.i:                                  ; preds = %httpd_write_fully.exit.i18.i.i, %1569, %1564
  %1591 = load i32, i32* %819, align 8, !tbaa !38
  %1592 = call i32 @shutdown(i32 %1591, i32 1) #6
  br label %cgi_interpose_output.exit.i.i

cgi_interpose_output.exit.i.i:                    ; preds = %.thread18.i.i.i, %.loopexit.i.i.i
  call void @llvm.lifetime.end(i64 1024, i8* %1403) #6
  call void @exit(i32 0) #18
  unreachable

; <label>:1593                                    ; preds = %1396
  %1594 = load i32, i32* %1384, align 4, !tbaa !8
  %1595 = call i32 @close(i32 %1594) #6
  %1596 = getelementptr inbounds [2 x i32], [2 x i32]* %p1.i.i, i64 0, i64 1
  %1597 = load i32, i32* %1596, align 4, !tbaa !8
  %1598 = icmp eq i32 %1597, 1
  br i1 %1598, label %1602, label %1599

; <label>:1599                                    ; preds = %1593
  %1600 = call i32 @dup2(i32 %1597, i32 1) #6
  %.pr.i.i = load i32, i32* %1596, align 4, !tbaa !8
  %1601 = icmp eq i32 %.pr.i.i, 2
  br i1 %1601, label %.thread87.i.i, label %1602

; <label>:1602                                    ; preds = %1599, %1593
  %1603 = phi i32 [ %.pr.i.i, %1599 ], [ 1, %1593 ]
  %1604 = call i32 @dup2(i32 %1603, i32 2) #6
  %.pre.i1.i = load i32, i32* %1596, align 4, !tbaa !8
  %.off.i.i = add i32 %.pre.i1.i, -1
  %switch2.i.i = icmp ult i32 %.off.i.i, 2
  br i1 %switch2.i.i, label %.thread87.i.i, label %1605

; <label>:1605                                    ; preds = %1602
  %1606 = call i32 @close(i32 %.pre.i1.i) #6
  br label %.thread87.i.i

.thread87.i.i:                                    ; preds = %1605, %1602, %1599
  call void @llvm.lifetime.end(i64 8, i8* nonnull %1383) #6
  br label %1615

; <label>:1607                                    ; preds = %1378, %1374
  %1608 = load i32, i32* %819, align 8, !tbaa !38
  %1609 = icmp eq i32 %1608, 1
  br i1 %1609, label %.thread20.i.i, label %1610

; <label>:1610                                    ; preds = %1607
  %1611 = call i32 @dup2(i32 %1608, i32 1) #6
  %.pr19.i.i = load i32, i32* %819, align 8, !tbaa !38
  %1612 = icmp eq i32 %.pr19.i.i, 2
  br i1 %1612, label %1615, label %.thread20.i.i

.thread20.i.i:                                    ; preds = %1610, %1607
  %1613 = phi i32 [ %.pr19.i.i, %1610 ], [ 1, %1607 ]
  %1614 = call i32 @dup2(i32 %1613, i32 2) #6
  br label %1615

; <label>:1615                                    ; preds = %.thread20.i.i, %1610, %.thread87.i.i
  %1616 = call i32 @nice(i32 10) #6
  %1617 = load i8*, i8** %2, align 8, !tbaa !48
  %1618 = call noalias i8* @__strdup(i8* %1617) #6
  %1619 = icmp eq i8* %1618, null
  br i1 %1619, label %1620, label %1622

; <label>:1620                                    ; preds = %1615
  %1621 = load i8*, i8** %2, align 8, !tbaa !48
  br label %1630

; <label>:1622                                    ; preds = %1615
  %1623 = call i8* @strrchr(i8* nonnull %1618, i32 47) #13
  %1624 = icmp eq i8* %1623, null
  br i1 %1624, label %1625, label %1627

; <label>:1625                                    ; preds = %1622
  %1626 = load i8*, i8** %2, align 8, !tbaa !48
  br label %1630

; <label>:1627                                    ; preds = %1622
  %1628 = getelementptr inbounds i8, i8* %1623, i64 1
  store i8 0, i8* %1623, align 1, !tbaa !1
  %1629 = call i32 @chdir(i8* nonnull %1618) #6
  br label %1630

; <label>:1630                                    ; preds = %1627, %1625, %1620
  %binary.0.i.i = phi i8* [ %1621, %1620 ], [ %1626, %1625 ], [ %1628, %1627 ]
  %1631 = call i32 (i32, void (i32)*, ...) bitcast (i32 (...)* @sigset to i32 (i32, void (i32)*, ...)*)(i32 13, void (i32)* null) #6
  %1632 = call i32 @execve(i8* %binary.0.i.i, i8** nonnull %.0.i.i.i, i8** nonnull getelementptr inbounds ([50 x i8*], [50 x i8*]* @make_envp.envp, i64 0, i64 0)) #6
  %1633 = load i8*, i8** %2, align 8, !tbaa !48
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.494, i64 0, i64 0), i8* %1633) #6
  %1634 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %1635 = load i8*, i8** %1634, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 500, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89.170, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.90.171, i64 0, i64 0), i8* %1635) #6
  call void @httpd_write_response(%struct.httpd_conn* nonnull %hc) #6
  call void @_exit(i32 1) #18
  unreachable

; <label>:1636                                    ; preds = %833
  %1637 = load i8*, i8** %2, align 8, !tbaa !48
  tail call void (i32, i8*, ...) @syslog(i32 7, i8* nonnull getelementptr inbounds ([41 x i8], [41 x i8]* @.str.490, i64 0, i64 0), i32 %828, i8* %1637) #6
  %1638 = zext i32 %828 to i64
  %1639 = inttoptr i64 %1638 to i8*
  %1640 = tail call %struct.TimerStruct* @tmr_create(%struct.timeval* null, void (i8*, %struct.timeval*)* nonnull @cgi_kill, i8* %1639, i64 30000, i32 0) #6
  %1641 = icmp eq %struct.TimerStruct* %1640, null
  br i1 %1641, label %1642, label %1643

; <label>:1642                                    ; preds = %1636
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.491, i64 0, i64 0)) #6
  tail call void @exit(i32 1) #18
  unreachable

; <label>:1643                                    ; preds = %1636
  %1644 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 9
  store i32 200, i32* %1644, align 8, !tbaa !93
  %1645 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 11
  store i64 25000, i64* %1645, align 8, !tbaa !61
  %1646 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 58
  store i32 0, i32* %1646, align 4, !tbaa !148
  br label %cgi.exit

; <label>:1647                                    ; preds = %match.exit.thread
  %switch.tableidx.i.i61 = add i32 %803, -1
  %1648 = icmp ult i32 %switch.tableidx.i.i61, 3
  br i1 %1648, label %switch.lookup.i.i64, label %httpd_method_str.exit.i65

switch.lookup.i.i64:                              ; preds = %1647
  %1649 = sext i32 %switch.tableidx.i.i61 to i64
  %switch.gep.i.i62 = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table, i64 0, i64 %1649
  %switch.load.i.i63 = load i8*, i8** %switch.gep.i.i62, align 8
  br label %httpd_method_str.exit.i65

httpd_method_str.exit.i65:                        ; preds = %switch.lookup.i.i64, %1647
  %1650 = phi i8* [ %switch.load.i.i63, %switch.lookup.i.i64 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23.131, i64 0, i64 0), %1647 ]
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 501, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.85.144, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.86.145, i64 0, i64 0), i8* %1650) #6
  br label %cgi.exit

._crit_edge146:                                   ; preds = %777, %match.exit
  br i1 %783, label %1686, label %1651

; <label>:1651                                    ; preds = %._crit_edge146
  %1652 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %1653 = bitcast %union.httpd_sockaddr* %1652 to %struct.sockaddr*
  %1654 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %1652, i64 0, i32 0, i32 0
  %1655 = load i16, i16* %1654, align 8, !tbaa !88
  %switch.selectcmp.i.i24 = icmp eq i16 %1655, 10
  %switch.selectcmp1.i.i25 = icmp eq i16 %1655, 2
  %1656 = select i1 %switch.selectcmp.i.i24, i32 28, i32 0
  %1657 = select i1 %switch.selectcmp1.i.i25, i32 16, i32 %1656
  %1658 = tail call i32 @getnameinfo(%struct.sockaddr* %1653, i32 %1657, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %1659 = icmp eq i32 %1658, 0
  br i1 %1659, label %1661, label %1660

; <label>:1660                                    ; preds = %1651
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit26

; <label>:1661                                    ; preds = %1651
  %1662 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2, i32 0, i32 1
  %1663 = bitcast i64* %1662 to i32*
  %1664 = load i32, i32* %1663, align 4, !tbaa !8
  %1665 = icmp eq i32 %1664, 0
  br i1 %1665, label %1666, label %httpd_ntoa.exit26

; <label>:1666                                    ; preds = %1661
  %1667 = bitcast i64* %1662 to [4 x i32]*
  %1668 = getelementptr inbounds [4 x i32], [4 x i32]* %1667, i64 0, i64 1
  %1669 = load i32, i32* %1668, align 4, !tbaa !8
  %1670 = icmp eq i32 %1669, 0
  br i1 %1670, label %1671, label %httpd_ntoa.exit26

; <label>:1671                                    ; preds = %1666
  %1672 = getelementptr inbounds i64, i64* %1662, i64 1
  %1673 = bitcast i64* %1672 to i32*
  %1674 = load i32, i32* %1673, align 4, !tbaa !8
  %1675 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %1676 = icmp eq i32 %1674, %1675
  br i1 %1676, label %1677, label %httpd_ntoa.exit26

; <label>:1677                                    ; preds = %1671
  %1678 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %1679 = icmp eq i32 %1678, 0
  br i1 %1679, label %1680, label %httpd_ntoa.exit26

; <label>:1680                                    ; preds = %1677
  %1681 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %1682 = add i64 %1681, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %1682, i32 1, i1 false) #6
  br label %httpd_ntoa.exit26

httpd_ntoa.exit26:                                ; preds = %1660, %1661, %1666, %1671, %1677, %1680
  %1683 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %1684 = load i8*, i8** %1683, align 8, !tbaa !53
  tail call void (i32, i8*, ...) @syslog(i32 5, i8* nonnull getelementptr inbounds ([46 x i8], [46 x i8]* @.str.450, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* %1684) #6
  %1685 = load i8*, i8** %1683, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 403, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94.175, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([124 x i8], [124 x i8]* @.str.451, i64 0, i64 0), i8* %1685)
  br label %cgi.exit

; <label>:1686                                    ; preds = %._crit_edge146
  %1687 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 18
  %1688 = load i8*, i8** %1687, align 8, !tbaa !113
  %1689 = load i8, i8* %1688, align 1, !tbaa !1
  %1690 = icmp eq i8 %1689, 0
  br i1 %1690, label %1726, label %1691

; <label>:1691                                    ; preds = %1686
  %1692 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %1693 = bitcast %union.httpd_sockaddr* %1692 to %struct.sockaddr*
  %1694 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %1692, i64 0, i32 0, i32 0
  %1695 = load i16, i16* %1694, align 8, !tbaa !88
  %switch.selectcmp.i.i27 = icmp eq i16 %1695, 10
  %switch.selectcmp1.i.i28 = icmp eq i16 %1695, 2
  %1696 = select i1 %switch.selectcmp.i.i27, i32 28, i32 0
  %1697 = select i1 %switch.selectcmp1.i.i28, i32 16, i32 %1696
  %1698 = tail call i32 @getnameinfo(%struct.sockaddr* %1693, i32 %1697, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %1699 = icmp eq i32 %1698, 0
  br i1 %1699, label %1701, label %1700

; <label>:1700                                    ; preds = %1691
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit29

; <label>:1701                                    ; preds = %1691
  %1702 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2, i32 0, i32 1
  %1703 = bitcast i64* %1702 to i32*
  %1704 = load i32, i32* %1703, align 4, !tbaa !8
  %1705 = icmp eq i32 %1704, 0
  br i1 %1705, label %1706, label %httpd_ntoa.exit29

; <label>:1706                                    ; preds = %1701
  %1707 = bitcast i64* %1702 to [4 x i32]*
  %1708 = getelementptr inbounds [4 x i32], [4 x i32]* %1707, i64 0, i64 1
  %1709 = load i32, i32* %1708, align 4, !tbaa !8
  %1710 = icmp eq i32 %1709, 0
  br i1 %1710, label %1711, label %httpd_ntoa.exit29

; <label>:1711                                    ; preds = %1706
  %1712 = getelementptr inbounds i64, i64* %1702, i64 1
  %1713 = bitcast i64* %1712 to i32*
  %1714 = load i32, i32* %1713, align 4, !tbaa !8
  %1715 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %1716 = icmp eq i32 %1714, %1715
  br i1 %1716, label %1717, label %httpd_ntoa.exit29

; <label>:1717                                    ; preds = %1711
  %1718 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %1719 = icmp eq i32 %1718, 0
  br i1 %1719, label %1720, label %httpd_ntoa.exit29

; <label>:1720                                    ; preds = %1717
  %1721 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %1722 = add i64 %1721, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %1722, i32 1, i1 false) #6
  br label %httpd_ntoa.exit29

httpd_ntoa.exit29:                                ; preds = %1700, %1701, %1706, %1711, %1717, %1720
  %1723 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %1724 = load i8*, i8** %1723, align 8, !tbaa !53
  tail call void (i32, i8*, ...) @syslog(i32 6, i8* nonnull getelementptr inbounds ([45 x i8], [45 x i8]* @.str.452, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* %1724) #6
  %1725 = load i8*, i8** %1723, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 403, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94.175, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([109 x i8], [109 x i8]* @.str.453, i64 0, i64 0), i8* %1725)
  br label %cgi.exit

; <label>:1726                                    ; preds = %1686
  %1727 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 53
  %1728 = load i32, i32* %1727, align 8, !tbaa !54
  %1729 = icmp eq i32 %1728, 0
  br i1 %1729, label %1736, label %1730

; <label>:1730                                    ; preds = %1726
  %1731 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 56
  %1732 = load i64, i64* %1731, align 8, !tbaa !57
  %1733 = icmp ne i64 %1732, -1
  %.phi.trans.insert = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 59, i32 8
  %.pre168 = load i64, i64* %.phi.trans.insert, align 8, !tbaa !169
  %1734 = icmp slt i64 %1732, %.pre168
  %or.cond = and i1 %1733, %1734
  br i1 %or.cond, label %1736, label %._crit_edge

._crit_edge:                                      ; preds = %1730
  %1735 = add nsw i64 %.pre168, -1
  store i64 %1735, i64* %1731, align 8, !tbaa !57
  br label %1736

; <label>:1736                                    ; preds = %1730, %1726, %._crit_edge
  %1737 = bitcast [100 x i32]* %me_indexes.i to i8*
  call void @llvm.lifetime.start(i64 400, i8* %1737) #6
  %1738 = load i8*, i8** %2, align 8, !tbaa !48
  %1739 = tail call i64 @strlen(i8* %1738) #13
  %1740 = getelementptr inbounds i8, i8* %1738, i64 %1739
  %.pre169 = load i64, i64* getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 0, i32 1), align 8
  %.pre170 = load i8*, i8** getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 0, i32 0), align 16
  %.pre171 = load i64, i64* getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 1, i32 1), align 8
  %.pre172 = load i8*, i8** getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 1, i32 0), align 16
  %.pre173 = load i64, i64* getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 2, i32 1), align 8
  %.pre174 = load i8*, i8** getelementptr inbounds ([3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 2, i32 0), align 16
  br label %.outer1.i.split.us.preheader

.outer1.i.split.us.preheader:                     ; preds = %1736, %.us-lcssa83.us
  %prev_dot.0.ph.i270 = phi i8* [ %1740, %1736 ], [ %dot.0.i.us.lcssa297, %.us-lcssa83.us ]
  %indvars.iv48.i268 = phi i64 [ 0, %1736 ], [ %indvars.iv.next49.i, %.us-lcssa83.us ]
  br label %.outer1.i.split.us

.outer1.i.split.us:                               ; preds = %.outer1.i.split.us.preheader, %1742
  %prev_dot.0.pn.i.us = phi i8* [ %dot.0.i.us, %1742 ], [ %prev_dot.0.ph.i270, %.outer1.i.split.us.preheader ]
  %dot.0.i.us = getelementptr inbounds i8, i8* %prev_dot.0.pn.i.us, i64 -1
  %1741 = icmp ult i8* %dot.0.i.us, %1738
  br i1 %1741, label %.us-lcssa.us.loopexit230, label %1742

; <label>:1742                                    ; preds = %.outer1.i.split.us
  %1743 = load i8, i8* %dot.0.i.us, align 1, !tbaa !1
  %1744 = icmp eq i8 %1743, 46
  br i1 %1744, label %1745, label %.outer1.i.split.us

; <label>:1745                                    ; preds = %1742
  %dot.0.i.us.lcssa297 = phi i8* [ %dot.0.i.us, %1742 ]
  %prev_dot.0.pn.i.us.lcssa295 = phi i8* [ %prev_dot.0.pn.i.us, %1742 ]
  %1746 = ptrtoint i8* %prev_dot.0.ph.i270 to i64
  %1747 = ptrtoint i8* %prev_dot.0.pn.i.us.lcssa295 to i64
  %1748 = sub i64 %1746, %1747
  %1749 = icmp eq i64 %1748, %.pre169
  br i1 %1749, label %1750, label %1753

; <label>:1750                                    ; preds = %1745
  %1751 = tail call i32 @strncasecmp(i8* nonnull %prev_dot.0.pn.i.us.lcssa295, i8* %.pre170, i64 %.pre169) #13
  %1752 = icmp eq i32 %1751, 0
  br i1 %1752, label %.us-lcssa83.us, label %1753

; <label>:1753                                    ; preds = %1750, %1745
  %1754 = icmp eq i64 %1748, %.pre171
  br i1 %1754, label %1755, label %1758

; <label>:1755                                    ; preds = %1753
  %1756 = tail call i32 @strncasecmp(i8* nonnull %prev_dot.0.pn.i.us.lcssa295, i8* %.pre172, i64 %.pre171) #13
  %1757 = icmp eq i32 %1756, 0
  br i1 %1757, label %.us-lcssa83.us, label %1758

; <label>:1758                                    ; preds = %1755, %1753
  %1759 = icmp eq i64 %1748, %.pre173
  br i1 %1759, label %1760, label %.preheader50.i.loopexit231

; <label>:1760                                    ; preds = %1758
  %1761 = tail call i32 @strncasecmp(i8* nonnull %prev_dot.0.pn.i.us.lcssa295, i8* %.pre174, i64 %.pre173) #13
  %1762 = icmp eq i32 %1761, 0
  br i1 %1762, label %.us-lcssa83.us, label %.preheader50.i.loopexit231

.outer1.i.split:                                  ; preds = %.outer1.i.split.backedge, %.outer1.i.split.preheader
  %prev_dot.0.i = phi i8* [ %dot.0.i.us.lcssa297.lcssa298, %.outer1.i.split.preheader ], [ %dot.0.i.lcssa294, %.outer1.i.split.backedge ]
  br label %1763

; <label>:1763                                    ; preds = %1765, %.outer1.i.split
  %prev_dot.0.pn.i = phi i8* [ %prev_dot.0.i, %.outer1.i.split ], [ %dot.0.i, %1765 ]
  %dot.0.i = getelementptr inbounds i8, i8* %prev_dot.0.pn.i, i64 -1
  %1764 = icmp ult i8* %dot.0.i, %1738
  br i1 %1764, label %.us-lcssa.us.loopexit, label %1765

; <label>:1765                                    ; preds = %1763
  %1766 = load i8, i8* %dot.0.i, align 1, !tbaa !1
  %1767 = icmp eq i8 %1766, 46
  br i1 %1767, label %1770, label %1763

.us-lcssa.us.loopexit:                            ; preds = %1763
  br label %.us-lcssa.us

.us-lcssa.us.loopexit230:                         ; preds = %.outer1.i.split.us
  %indvars.iv48.i268.lcssa = phi i64 [ %indvars.iv48.i268, %.outer1.i.split.us ]
  br label %.us-lcssa.us

.us-lcssa.us:                                     ; preds = %.us-lcssa.us.loopexit230, %.us-lcssa.us.loopexit
  %indvars.iv48.i234 = phi i64 [ %indvars.iv.next49.i.lcssa, %.us-lcssa.us.loopexit ], [ %indvars.iv48.i268.lcssa, %.us-lcssa.us.loopexit230 ]
  %1768 = trunc i64 %indvars.iv48.i234 to i32
  %1769 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 49
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.122.82, i64 0, i64 0), i8** %1769, align 8, !tbaa !170
  br label %1809

; <label>:1770                                    ; preds = %1765
  %dot.0.i.lcssa294 = phi i8* [ %dot.0.i, %1765 ]
  %prev_dot.0.pn.i.lcssa293 = phi i8* [ %prev_dot.0.pn.i, %1765 ]
  %1771 = ptrtoint i8* %prev_dot.0.i to i64
  %1772 = ptrtoint i8* %prev_dot.0.pn.i.lcssa293 to i64
  %1773 = sub i64 %1771, %1772
  %1774 = icmp eq i64 %1773, %.pre169
  br i1 %1774, label %1775, label %1780

; <label>:1775                                    ; preds = %1770
  %1776 = tail call i32 @strncasecmp(i8* nonnull %prev_dot.0.pn.i.lcssa293, i8* %.pre170, i64 %.pre169) #13
  %1777 = icmp eq i32 %1776, 0
  br i1 %1777, label %.outer1.i.split.backedge, label %1780

.us-lcssa83.us:                                   ; preds = %1760, %1755, %1750
  %i.028.lcssa.wide.i.lcssa.ph.us = phi i32 [ 0, %1750 ], [ 1, %1755 ], [ 2, %1760 ]
  %1778 = getelementptr inbounds [100 x i32], [100 x i32]* %me_indexes.i, i64 0, i64 %indvars.iv48.i268
  store i32 %i.028.lcssa.wide.i.lcssa.ph.us, i32* %1778, align 4, !tbaa !8
  %indvars.iv.next49.i = add nuw nsw i64 %indvars.iv48.i268, 1
  %1779 = icmp ult i64 %indvars.iv.next49.i, 100
  br i1 %1779, label %.outer1.i.split.us.preheader, label %.outer1.i.split.preheader

.outer1.i.split.preheader:                        ; preds = %.us-lcssa83.us
  %indvars.iv.next49.i.lcssa = phi i64 [ %indvars.iv.next49.i, %.us-lcssa83.us ]
  %dot.0.i.us.lcssa297.lcssa298 = phi i8* [ %dot.0.i.us.lcssa297, %.us-lcssa83.us ]
  br label %.outer1.i.split

; <label>:1780                                    ; preds = %1775, %1770
  %1781 = icmp eq i64 %1773, %.pre171
  br i1 %1781, label %1838, label %1841

; <label>:1782                                    ; preds = %.backedge.i, %.lr.ph24.i
  %bot.023.i = phi i32 [ %bot.0.ph27.i, %.lr.ph24.i ], [ %1794, %.backedge.i ]
  %1783 = add nsw i32 %bot.023.i, %top.0.ph26.i
  %1784 = sdiv i32 %1783, 2
  %1785 = sext i32 %1784 to i64
  %1786 = getelementptr inbounds [193 x %struct.mime_entry], [193 x %struct.mime_entry]* @typ_tab, i64 0, i64 %1785, i32 0
  %1787 = load i8*, i8** %1786, align 16, !tbaa !135
  %1788 = tail call i32 @strncasecmp(i8* %prev_dot.0.pn.i.lcssa46.lcssa, i8* %1787, i64 %.lcssa50) #13
  %1789 = icmp slt i32 %1788, 0
  br i1 %1789, label %.outer.backedge.i, label %1792

.outer.backedge.i:                                ; preds = %1796, %1782
  %.lcssa = phi i32 [ %1784, %1796 ], [ %1784, %1782 ]
  %bot.023.i.lcssa = phi i32 [ %bot.023.i, %1796 ], [ %bot.023.i, %1782 ]
  %1790 = add nsw i32 %.lcssa, -1
  %1791 = icmp sgt i32 %.lcssa, %bot.023.i.lcssa
  br i1 %1791, label %.lr.ph24.i, label %.outer._crit_edge.i.loopexit229

.lr.ph24.i:                                       ; preds = %.preheader50.i, %.outer.backedge.i
  %bot.0.ph27.i = phi i32 [ 0, %.preheader50.i ], [ %bot.023.i.lcssa, %.outer.backedge.i ]
  %top.0.ph26.i = phi i32 [ 192, %.preheader50.i ], [ %1790, %.outer.backedge.i ]
  br label %1782

; <label>:1792                                    ; preds = %1782
  %1793 = icmp sgt i32 %1788, 0
  br i1 %1793, label %.backedge.i, label %1796

.backedge.i:                                      ; preds = %1800, %1792
  %1794 = add nsw i32 %1784, 1
  %1795 = icmp sgt i32 %top.0.ph26.i, %1784
  br i1 %1795, label %1782, label %.outer._crit_edge.i.loopexit

; <label>:1796                                    ; preds = %1792
  %1797 = getelementptr inbounds [193 x %struct.mime_entry], [193 x %struct.mime_entry]* @typ_tab, i64 0, i64 %1785, i32 1
  %1798 = load i64, i64* %1797, align 8, !tbaa !137
  %1799 = icmp ult i64 %.lcssa50, %1798
  br i1 %1799, label %.outer.backedge.i, label %1800

; <label>:1800                                    ; preds = %1796
  %1801 = icmp ugt i64 %.lcssa50, %1798
  br i1 %1801, label %.backedge.i, label %1802

; <label>:1802                                    ; preds = %1800
  %.lcssa291 = phi i64 [ %1785, %1800 ]
  %1803 = getelementptr inbounds [193 x %struct.mime_entry], [193 x %struct.mime_entry]* @typ_tab, i64 0, i64 %.lcssa291, i32 2
  %1804 = bitcast i8** %1803 to i64*
  %1805 = load i64, i64* %1804, align 16, !tbaa !138
  %1806 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 49
  %1807 = bitcast i8** %1806 to i64*
  store i64 %1805, i64* %1807, align 8, !tbaa !170
  br label %1809

.outer._crit_edge.i.loopexit:                     ; preds = %.backedge.i
  br label %.outer._crit_edge.i

.outer._crit_edge.i.loopexit229:                  ; preds = %.outer.backedge.i
  br label %.outer._crit_edge.i

.outer._crit_edge.i:                              ; preds = %.outer._crit_edge.i.loopexit229, %.outer._crit_edge.i.loopexit
  %1808 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 49
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.122.82, i64 0, i64 0), i8** %1808, align 8, !tbaa !170
  br label %1809

; <label>:1809                                    ; preds = %.outer._crit_edge.i, %1802, %.us-lcssa.us
  %n_me_indexes.0.ph45.i = phi i32 [ %1846, %.outer._crit_edge.i ], [ %1846, %1802 ], [ %1768, %.us-lcssa.us ]
  %1810 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 17
  %1811 = load i8*, i8** %1810, align 8, !tbaa !112
  store i8 0, i8* %1811, align 1, !tbaa !1
  %1812 = icmp sgt i32 %n_me_indexes.0.ph45.i, 0
  br i1 %1812, label %.lr.ph.i67, label %figure_mime.exit

.lr.ph.i67:                                       ; preds = %1809
  %1813 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 36
  %1814 = sext i32 %n_me_indexes.0.ph45.i to i64
  br label %1815

; <label>:1815                                    ; preds = %1829, %.lr.ph.i67
  %indvars.iv.i68 = phi i64 [ %1814, %.lr.ph.i67 ], [ %indvars.iv.next.i69, %1829 ]
  %encodings_len.021.i = phi i64 [ 0, %.lr.ph.i67 ], [ %1836, %1829 ]
  %indvars.iv.next.i69 = add nsw i64 %indvars.iv.i68, -1
  %1816 = getelementptr inbounds [100 x i32], [100 x i32]* %me_indexes.i, i64 0, i64 %indvars.iv.next.i69
  %1817 = load i32, i32* %1816, align 4, !tbaa !8
  %1818 = sext i32 %1817 to i64
  %1819 = getelementptr inbounds [3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 %1818, i32 3
  %1820 = load i64, i64* %1819, align 8, !tbaa !139
  %1821 = add i64 %encodings_len.021.i, 1
  %1822 = add i64 %1820, %1821
  tail call void @httpd_realloc_str(i8** %1810, i64* %1813, i64 %1822) #6
  %1823 = load i8*, i8** %1810, align 8, !tbaa !112
  %1824 = load i8, i8* %1823, align 1, !tbaa !1
  %1825 = icmp eq i8 %1824, 0
  br i1 %1825, label %1829, label %1826

; <label>:1826                                    ; preds = %1815
  %1827 = getelementptr inbounds i8, i8* %1823, i64 %encodings_len.021.i
  %1828 = bitcast i8* %1827 to i16*
  store i16 44, i16* %1828, align 1
  %.pre.i70 = load i8*, i8** %1810, align 8, !tbaa !112
  br label %1829

; <label>:1829                                    ; preds = %1826, %1815
  %1830 = phi i8* [ %.pre.i70, %1826 ], [ %1823, %1815 ]
  %encodings_len.1.i = phi i64 [ %1821, %1826 ], [ %encodings_len.021.i, %1815 ]
  %1831 = getelementptr inbounds i8, i8* %1830, i64 %encodings_len.1.i
  %1832 = getelementptr inbounds [3 x %struct.mime_entry], [3 x %struct.mime_entry]* @enc_tab, i64 0, i64 %1818, i32 2
  %1833 = load i8*, i8** %1832, align 16, !tbaa !138
  %1834 = tail call i8* @strcpy(i8* %1831, i8* %1833) #6
  %1835 = load i64, i64* %1819, align 8, !tbaa !139
  %1836 = add i64 %1835, %encodings_len.1.i
  %1837 = icmp sgt i64 %indvars.iv.i68, 1
  br i1 %1837, label %1815, label %figure_mime.exit.loopexit

; <label>:1838                                    ; preds = %1780
  %1839 = tail call i32 @strncasecmp(i8* nonnull %prev_dot.0.pn.i.lcssa293, i8* %.pre172, i64 %.pre171) #13
  %1840 = icmp eq i32 %1839, 0
  br i1 %1840, label %.outer1.i.split.backedge, label %1841

; <label>:1841                                    ; preds = %1838, %1780
  %1842 = icmp eq i64 %1773, %.pre173
  br i1 %1842, label %1843, label %.preheader50.i.loopexit

; <label>:1843                                    ; preds = %1841
  %1844 = tail call i32 @strncasecmp(i8* nonnull %prev_dot.0.pn.i.lcssa293, i8* %.pre174, i64 %.pre173) #13
  %1845 = icmp eq i32 %1844, 0
  br i1 %1845, label %.outer1.i.split.backedge, label %.preheader50.i.loopexit

.outer1.i.split.backedge:                         ; preds = %1843, %1838, %1775
  br label %.outer1.i.split

.preheader50.i.loopexit:                          ; preds = %1841, %1843
  %prev_dot.0.pn.i.lcssa293.lcssa = phi i8* [ %prev_dot.0.pn.i.lcssa293, %1841 ], [ %prev_dot.0.pn.i.lcssa293, %1843 ]
  %.lcssa50.ph = phi i64 [ %.pre173, %1843 ], [ %1773, %1841 ]
  br label %.preheader50.i

.preheader50.i.loopexit231:                       ; preds = %1760, %1758
  %indvars.iv48.i268.lcssa299 = phi i64 [ %indvars.iv48.i268, %1760 ], [ %indvars.iv48.i268, %1758 ]
  %prev_dot.0.pn.i.us.lcssa295.lcssa = phi i8* [ %prev_dot.0.pn.i.us.lcssa295, %1760 ], [ %prev_dot.0.pn.i.us.lcssa295, %1758 ]
  %.lcssa50.ph232 = phi i64 [ %1748, %1758 ], [ %.pre173, %1760 ]
  br label %.preheader50.i

.preheader50.i:                                   ; preds = %.preheader50.i.loopexit231, %.preheader50.i.loopexit
  %indvars.iv48.i235 = phi i64 [ %indvars.iv.next49.i.lcssa, %.preheader50.i.loopexit ], [ %indvars.iv48.i268.lcssa299, %.preheader50.i.loopexit231 ]
  %.lcssa50 = phi i64 [ %.lcssa50.ph, %.preheader50.i.loopexit ], [ %.lcssa50.ph232, %.preheader50.i.loopexit231 ]
  %prev_dot.0.pn.i.lcssa46.lcssa = phi i8* [ %prev_dot.0.pn.i.lcssa293.lcssa, %.preheader50.i.loopexit ], [ %prev_dot.0.pn.i.us.lcssa295.lcssa, %.preheader50.i.loopexit231 ]
  %1846 = trunc i64 %indvars.iv48.i235 to i32
  br label %.lr.ph24.i

figure_mime.exit.loopexit:                        ; preds = %1829
  br label %figure_mime.exit

figure_mime.exit:                                 ; preds = %figure_mime.exit.loopexit, %1809
  call void @llvm.lifetime.end(i64 400, i8* %1737) #6
  %1847 = load i32, i32* %5, align 4, !tbaa !91
  %1848 = icmp eq i32 %1847, 2
  br i1 %1848, label %1849, label %1857

; <label>:1849                                    ; preds = %figure_mime.exit
  %1850 = load i8*, i8** %1810, align 8, !tbaa !112
  %1851 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 49
  %1852 = load i8*, i8** %1851, align 8, !tbaa !170
  %1853 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 59, i32 8
  %1854 = load i64, i64* %1853, align 8, !tbaa !169
  %1855 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 59, i32 12, i32 0
  %1856 = load i64, i64* %1855, align 8, !tbaa !146
  tail call fastcc void @send_mime(%struct.httpd_conn* nonnull %hc, i32 200, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.536, i64 0, i64 0), i8* %1850, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %1852, i64 %1854, i64 %1856)
  br label %cgi.exit

; <label>:1857                                    ; preds = %figure_mime.exit
  %1858 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 46
  %1859 = load i64, i64* %1858, align 8, !tbaa !158
  %1860 = icmp eq i64 %1859, -1
  br i1 %1860, label %1869, label %1861

; <label>:1861                                    ; preds = %1857
  %1862 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 59, i32 12, i32 0
  %1863 = load i64, i64* %1862, align 8, !tbaa !146
  %1864 = icmp slt i64 %1859, %1863
  br i1 %1864, label %1869, label %1865

; <label>:1865                                    ; preds = %1861
  %1866 = load i8*, i8** %1810, align 8, !tbaa !112
  %1867 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 49
  %1868 = load i8*, i8** %1867, align 8, !tbaa !170
  tail call fastcc void @send_mime(%struct.httpd_conn* nonnull %hc, i32 304, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.537, i64 0, i64 0), i8* %1866, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %1868, i64 -1, i64 %1863)
  br label %cgi.exit

; <label>:1869                                    ; preds = %1861, %1857
  %1870 = load i8*, i8** %2, align 8, !tbaa !48
  %1871 = tail call i8* @mmc_map(i8* %1870, %struct.stat* nonnull %8, %struct.timeval* %nowP) #6
  %1872 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 61
  store i8* %1871, i8** %1872, align 8, !tbaa !60
  %1873 = icmp eq i8* %1871, null
  br i1 %1873, label %1874, label %1877

; <label>:1874                                    ; preds = %1869
  %1875 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %1876 = load i8*, i8** %1875, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 500, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.89.170, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.90.171, i64 0, i64 0), i8* %1876)
  br label %cgi.exit

; <label>:1877                                    ; preds = %1869
  %1878 = load i8*, i8** %1810, align 8, !tbaa !112
  %1879 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 49
  %1880 = load i8*, i8** %1879, align 8, !tbaa !170
  %1881 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 59, i32 8
  %1882 = load i64, i64* %1881, align 8, !tbaa !169
  %1883 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 59, i32 12, i32 0
  %1884 = load i64, i64* %1883, align 8, !tbaa !146
  tail call fastcc void @send_mime(%struct.httpd_conn* nonnull %hc, i32 200, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.536, i64 0, i64 0), i8* %1878, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %1880, i64 %1882, i64 %1884)
  br label %cgi.exit

cgi.exit:                                         ; preds = %httpd_method_str.exit.i65, %1643, %830, %813, %1849, %1877, %1865, %774, %auth_check.exit51, %213, %auth_check.exit, %1874, %httpd_ntoa.exit29, %httpd_ntoa.exit26, %httpd_ntoa.exit12, %httpd_ntoa.exit9, %httpd_ntoa.exit6, %608, %ls.exit, %httpd_ntoa.exit3, %send_dirredirect.exit, %62, %httpd_ntoa.exit, %11, %httpd_method_str.exit
  %.0 = phi i32 [ -1, %httpd_method_str.exit ], [ -1, %11 ], [ -1, %62 ], [ -1, %send_dirredirect.exit ], [ -1, %608 ], [ -1, %httpd_ntoa.exit9 ], [ -1, %httpd_ntoa.exit26 ], [ -1, %httpd_ntoa.exit29 ], [ -1, %1874 ], [ -1, %httpd_ntoa.exit12 ], [ -1, %httpd_ntoa.exit6 ], [ %.0.i, %ls.exit ], [ -1, %httpd_ntoa.exit3 ], [ -1, %httpd_ntoa.exit ], [ -1, %auth_check.exit ], [ -1, %213 ], [ -1, %auth_check.exit51 ], [ -1, %774 ], [ 0, %1865 ], [ 0, %1877 ], [ 0, %1849 ], [ -1, %813 ], [ -1, %830 ], [ 0, %1643 ], [ -1, %httpd_method_str.exit.i65 ]
  call void @llvm.lifetime.end(i64 8, i8* %1) #6
  ret i32 %.0
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @auth_check2(%struct.httpd_conn* %hc, i8* %dirname) unnamed_addr #8 {
  %sb = alloca %struct.stat, align 8
  %authinfo = alloca [500 x i8], align 16
  %line = alloca [500 x i8], align 16
  %1 = bitcast %struct.stat* %sb to i8*
  call void @llvm.lifetime.start(i64 144, i8* %1) #6
  %2 = getelementptr inbounds [500 x i8], [500 x i8]* %authinfo, i64 0, i64 0
  call void @llvm.lifetime.start(i64 500, i8* %2) #6
  %3 = getelementptr inbounds [500 x i8], [500 x i8]* %line, i64 0, i64 0
  call void @llvm.lifetime.start(i64 500, i8* %3) #6
  %4 = tail call i64 @strlen(i8* %dirname) #13
  %5 = add i64 %4, 11
  tail call void @httpd_realloc_str(i8** nonnull @auth_check2.authpath, i64* nonnull @auth_check2.maxauthpath, i64 %5)
  %6 = load i8*, i8** @auth_check2.authpath, align 8, !tbaa !4
  %7 = load i64, i64* @auth_check2.maxauthpath, align 8, !tbaa !16
  tail call void (i8*, i64, i8*, ...) @my_snprintf(i8* %6, i64 %7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.461, i64 0, i64 0), i8* %dirname, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.447, i64 0, i64 0))
  %8 = load i8*, i8** @auth_check2.authpath, align 8, !tbaa !4
  %9 = call i32 @__xstat(i32 1, i8* nonnull %8, %struct.stat* nonnull %sb) #6
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %send_authenticate.exit, label %11

; <label>:11                                      ; preds = %0
  %12 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 30
  %13 = load i8*, i8** %12, align 8, !tbaa !152
  %14 = load i8, i8* %13, align 1, !tbaa !1
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %19, label %16

; <label>:16                                      ; preds = %11
  %17 = call i32 @strncmp(i8* %13, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.462, i64 0, i64 0), i64 6) #13
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %32, label %19

; <label>:19                                      ; preds = %16, %11
  %20 = call i64 @strlen(i8* %dirname) #13
  %21 = add i64 %20, 35
  call void @httpd_realloc_str(i8** nonnull @send_authenticate.header, i64* nonnull @send_authenticate.maxheader, i64 %21) #6
  %22 = load i8*, i8** @send_authenticate.header, align 8, !tbaa !4
  %23 = load i64, i64* @send_authenticate.maxheader, align 8, !tbaa !16
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %22, i64 %23, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.465, i64 0, i64 0), i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @send_authenticate.headstr, i64 0, i64 0), i8* %dirname) #6
  %24 = load i8*, i8** @send_authenticate.header, align 8, !tbaa !4
  %25 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %26 = load i8*, i8** %25, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 401, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.466, i64 0, i64 0), i8* %24, i8* nonnull getelementptr inbounds ([45 x i8], [45 x i8]* @.str.467, i64 0, i64 0), i8* %26) #6
  %27 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 8
  %28 = load i32, i32* %27, align 4, !tbaa !91
  %29 = icmp eq i32 %28, 3
  br i1 %29, label %30, label %send_authenticate.exit

; <label>:30                                      ; preds = %19
  %31 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 58
  store i32 1, i32* %31, align 4, !tbaa !148
  br label %send_authenticate.exit

; <label>:32                                      ; preds = %16
  %33 = getelementptr inbounds i8, i8* %13, i64 6
  %34 = load i8, i8* %33, align 1, !tbaa !1
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %b64_decode.exit, label %.lr.ph.i.preheader

.lr.ph.i.preheader:                               ; preds = %32
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i.preheader, %74
  %36 = phi i8 [ %76, %74 ], [ %34, %.lr.ph.i.preheader ]
  %prev_d.04.i = phi i32 [ %prev_d.1.i, %74 ], [ 0, %.lr.ph.i.preheader ]
  %cp.03.i = phi i8* [ %75, %74 ], [ %33, %.lr.ph.i.preheader ]
  %phase.02.i = phi i32 [ %phase.2.i, %74 ], [ 0, %.lr.ph.i.preheader ]
  %space_idx.01.i = phi i32 [ %space_idx.5.i, %74 ], [ 0, %.lr.ph.i.preheader ]
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i32], [256 x i32]* @b64_decode_table, i64 0, i64 %37
  %39 = load i32, i32* %38, align 4, !tbaa !8
  %40 = icmp eq i32 %39, -1
  br i1 %40, label %74, label %41

; <label>:41                                      ; preds = %.lr.ph.i
  switch i32 %phase.02.i, label %74 [
    i32 0, label %42
    i32 1, label %43
    i32 2, label %54
    i32 3, label %65
  ]

; <label>:42                                      ; preds = %41
  br label %74

; <label>:43                                      ; preds = %41
  %44 = icmp slt i32 %space_idx.01.i, 499
  br i1 %44, label %45, label %74

; <label>:45                                      ; preds = %43
  %46 = shl i32 %prev_d.04.i, 2
  %47 = lshr i32 %39, 4
  %48 = and i32 %47, 3
  %49 = or i32 %48, %46
  %50 = trunc i32 %49 to i8
  %51 = add nsw i32 %space_idx.01.i, 1
  %52 = sext i32 %space_idx.01.i to i64
  %53 = getelementptr inbounds [500 x i8], [500 x i8]* %authinfo, i64 0, i64 %52
  store i8 %50, i8* %53, align 1, !tbaa !1
  br label %74

; <label>:54                                      ; preds = %41
  %55 = icmp slt i32 %space_idx.01.i, 499
  br i1 %55, label %56, label %74

; <label>:56                                      ; preds = %54
  %57 = shl i32 %prev_d.04.i, 4
  %58 = lshr i32 %39, 2
  %59 = and i32 %58, 15
  %60 = or i32 %59, %57
  %61 = trunc i32 %60 to i8
  %62 = add nsw i32 %space_idx.01.i, 1
  %63 = sext i32 %space_idx.01.i to i64
  %64 = getelementptr inbounds [500 x i8], [500 x i8]* %authinfo, i64 0, i64 %63
  store i8 %61, i8* %64, align 1, !tbaa !1
  br label %74

; <label>:65                                      ; preds = %41
  %66 = icmp slt i32 %space_idx.01.i, 499
  br i1 %66, label %67, label %74

; <label>:67                                      ; preds = %65
  %68 = shl i32 %prev_d.04.i, 6
  %69 = or i32 %39, %68
  %70 = trunc i32 %69 to i8
  %71 = add nsw i32 %space_idx.01.i, 1
  %72 = sext i32 %space_idx.01.i to i64
  %73 = getelementptr inbounds [500 x i8], [500 x i8]* %authinfo, i64 0, i64 %72
  store i8 %70, i8* %73, align 1, !tbaa !1
  br label %74

; <label>:74                                      ; preds = %67, %65, %56, %54, %45, %43, %42, %41, %.lr.ph.i
  %space_idx.5.i = phi i32 [ %space_idx.01.i, %.lr.ph.i ], [ %space_idx.01.i, %41 ], [ %space_idx.01.i, %42 ], [ %71, %67 ], [ %space_idx.01.i, %65 ], [ %51, %45 ], [ %space_idx.01.i, %43 ], [ %62, %56 ], [ %space_idx.01.i, %54 ]
  %phase.2.i = phi i32 [ %phase.02.i, %.lr.ph.i ], [ %phase.02.i, %41 ], [ 1, %42 ], [ 0, %67 ], [ 0, %65 ], [ 2, %45 ], [ 2, %43 ], [ 3, %56 ], [ 3, %54 ]
  %prev_d.1.i = phi i32 [ %prev_d.04.i, %.lr.ph.i ], [ %39, %41 ], [ %39, %42 ], [ %39, %67 ], [ %39, %65 ], [ %39, %45 ], [ %39, %43 ], [ %39, %56 ], [ %39, %54 ]
  %75 = getelementptr inbounds i8, i8* %cp.03.i, i64 1
  %76 = load i8, i8* %75, align 1, !tbaa !1
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %b64_decode.exit.loopexit, label %.lr.ph.i

b64_decode.exit.loopexit:                         ; preds = %74
  %space_idx.5.i.lcssa = phi i32 [ %space_idx.5.i, %74 ]
  br label %b64_decode.exit

b64_decode.exit:                                  ; preds = %b64_decode.exit.loopexit, %32
  %space_idx.0.lcssa.i = phi i32 [ 0, %32 ], [ %space_idx.5.i.lcssa, %b64_decode.exit.loopexit ]
  %78 = sext i32 %space_idx.0.lcssa.i to i64
  %79 = getelementptr inbounds [500 x i8], [500 x i8]* %authinfo, i64 0, i64 %78
  store i8 0, i8* %79, align 1, !tbaa !1
  %80 = call i8* @strchr(i8* %2, i32 58) #6
  %81 = icmp eq i8* %80, null
  br i1 %81, label %82, label %95

; <label>:82                                      ; preds = %b64_decode.exit
  %83 = call i64 @strlen(i8* %dirname) #13
  %84 = add i64 %83, 35
  call void @httpd_realloc_str(i8** nonnull @send_authenticate.header, i64* nonnull @send_authenticate.maxheader, i64 %84) #6
  %85 = load i8*, i8** @send_authenticate.header, align 8, !tbaa !4
  %86 = load i64, i64* @send_authenticate.maxheader, align 8, !tbaa !16
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %85, i64 %86, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.465, i64 0, i64 0), i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @send_authenticate.headstr, i64 0, i64 0), i8* %dirname) #6
  %87 = load i8*, i8** @send_authenticate.header, align 8, !tbaa !4
  %88 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %89 = load i8*, i8** %88, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* %hc, i32 401, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.466, i64 0, i64 0), i8* %87, i8* nonnull getelementptr inbounds ([45 x i8], [45 x i8]* @.str.467, i64 0, i64 0), i8* %89) #6
  %90 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 8
  %91 = load i32, i32* %90, align 4, !tbaa !91
  %92 = icmp eq i32 %91, 3
  br i1 %92, label %93, label %send_authenticate.exit

; <label>:93                                      ; preds = %82
  %94 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 58
  store i32 1, i32* %94, align 4, !tbaa !148
  br label %send_authenticate.exit

; <label>:95                                      ; preds = %b64_decode.exit
  %96 = getelementptr inbounds i8, i8* %80, i64 1
  store i8 0, i8* %80, align 1, !tbaa !1
  %97 = call i8* @strchr(i8* %96, i32 58) #6
  %98 = icmp eq i8* %97, null
  br i1 %98, label %100, label %99

; <label>:99                                      ; preds = %95
  store i8 0, i8* %97, align 1, !tbaa !1
  br label %100

; <label>:100                                     ; preds = %95, %99
  %101 = load i64, i64* @auth_check2.maxprevauthpath, align 8, !tbaa !16
  %102 = icmp eq i64 %101, 0
  %.pre = load i8*, i8** @auth_check2.authpath, align 8, !tbaa !4
  br i1 %102, label %._crit_edge11, label %103

; <label>:103                                     ; preds = %100
  %104 = load i8*, i8** @auth_check2.prevauthpath, align 8, !tbaa !4
  %105 = call i32 @strcmp(i8* %.pre, i8* %104) #6
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %._crit_edge11

; <label>:107                                     ; preds = %103
  %108 = getelementptr inbounds %struct.stat, %struct.stat* %sb, i64 0, i32 12, i32 0
  %109 = load i64, i64* %108, align 8, !tbaa !167
  %110 = load i64, i64* @auth_check2.prevmtime, align 8, !tbaa !16
  %111 = icmp eq i64 %109, %110
  br i1 %111, label %112, label %._crit_edge11

; <label>:112                                     ; preds = %107
  %113 = load i8*, i8** @auth_check2.prevuser, align 8, !tbaa !4
  %114 = call i32 @strcmp(i8* %2, i8* %113) #6
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %._crit_edge11

; <label>:116                                     ; preds = %112
  %117 = load i8*, i8** @auth_check2.prevcryp, align 8, !tbaa !4
  %118 = call i32 (i8*, i8*, ...) bitcast (i32 (...)* @crypt to i32 (i8*, i8*, ...)*)(i8* %96, i8* %117) #6
  %119 = sext i32 %118 to i64
  %120 = inttoptr i64 %119 to i8*
  %121 = load i8*, i8** @auth_check2.prevcryp, align 8, !tbaa !4
  %122 = call i32 @strcmp(i8* %120, i8* %121) #6
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %130

; <label>:124                                     ; preds = %116
  %125 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 31
  %126 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 43
  %127 = call i64 @strlen(i8* %2) #13
  call void @httpd_realloc_str(i8** %125, i64* %126, i64 %127)
  %128 = load i8*, i8** %125, align 8, !tbaa !81
  %129 = call i8* @strcpy(i8* %128, i8* %2) #6
  br label %send_authenticate.exit

; <label>:130                                     ; preds = %116
  %131 = call i64 @strlen(i8* %dirname) #13
  %132 = add i64 %131, 35
  call void @httpd_realloc_str(i8** nonnull @send_authenticate.header, i64* nonnull @send_authenticate.maxheader, i64 %132) #6
  %133 = load i8*, i8** @send_authenticate.header, align 8, !tbaa !4
  %134 = load i64, i64* @send_authenticate.maxheader, align 8, !tbaa !16
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %133, i64 %134, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.465, i64 0, i64 0), i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @send_authenticate.headstr, i64 0, i64 0), i8* %dirname) #6
  %135 = load i8*, i8** @send_authenticate.header, align 8, !tbaa !4
  %136 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %137 = load i8*, i8** %136, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* %hc, i32 401, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.466, i64 0, i64 0), i8* %135, i8* nonnull getelementptr inbounds ([45 x i8], [45 x i8]* @.str.467, i64 0, i64 0), i8* %137) #6
  %138 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 8
  %139 = load i32, i32* %138, align 4, !tbaa !91
  %140 = icmp eq i32 %139, 3
  br i1 %140, label %141, label %send_authenticate.exit

; <label>:141                                     ; preds = %130
  %142 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 58
  store i32 1, i32* %142, align 4, !tbaa !148
  br label %send_authenticate.exit

._crit_edge11:                                    ; preds = %100, %112, %107, %103
  %143 = call %struct._IO_FILE* @fopen(i8* %.pre, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.84.115, i64 0, i64 0))
  %144 = icmp eq %struct._IO_FILE* %143, null
  br i1 %144, label %147, label %.preheader

.preheader:                                       ; preds = %._crit_edge11
  %145 = call i8* @fgets(i8* %3, i32 500, %struct._IO_FILE* nonnull %143)
  %146 = icmp eq i8* %145, null
  br i1 %146, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %.preheader
  br label %.lr.ph

; <label>:147                                     ; preds = %._crit_edge11
  %148 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %149 = bitcast %union.httpd_sockaddr* %148 to %struct.sockaddr*
  %150 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %148, i64 0, i32 0, i32 0
  %151 = load i16, i16* %150, align 8, !tbaa !88
  %switch.selectcmp.i.i = icmp eq i16 %151, 10
  %switch.selectcmp1.i.i = icmp eq i16 %151, 2
  %152 = select i1 %switch.selectcmp.i.i, i32 28, i32 0
  %153 = select i1 %switch.selectcmp1.i.i, i32 16, i32 %152
  %154 = call i32 @getnameinfo(%struct.sockaddr* %149, i32 %153, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %157, label %156

; <label>:156                                     ; preds = %147
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit

; <label>:157                                     ; preds = %147
  %158 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2, i32 0, i32 1
  %159 = bitcast i64* %158 to i32*
  %160 = load i32, i32* %159, align 4, !tbaa !8
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %httpd_ntoa.exit

; <label>:162                                     ; preds = %157
  %163 = bitcast i64* %158 to [4 x i32]*
  %164 = getelementptr inbounds [4 x i32], [4 x i32]* %163, i64 0, i64 1
  %165 = load i32, i32* %164, align 4, !tbaa !8
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %httpd_ntoa.exit

; <label>:167                                     ; preds = %162
  %168 = getelementptr inbounds i64, i64* %158, i64 1
  %169 = bitcast i64* %168 to i32*
  %170 = load i32, i32* %169, align 4, !tbaa !8
  %171 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %172 = icmp eq i32 %170, %171
  br i1 %172, label %173, label %httpd_ntoa.exit

; <label>:173                                     ; preds = %167
  %174 = call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %httpd_ntoa.exit

; <label>:176                                     ; preds = %173
  %177 = call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %178 = add i64 %177, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %178, i32 1, i1 false) #6
  br label %httpd_ntoa.exit

httpd_ntoa.exit:                                  ; preds = %156, %157, %162, %167, %173, %176
  %179 = load i8*, i8** @auth_check2.authpath, align 8, !tbaa !4
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([47 x i8], [47 x i8]* @.str.463, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* %179) #6
  %180 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %181 = load i8*, i8** %180, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 403, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94.175, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([113 x i8], [113 x i8]* @.str.464, i64 0, i64 0), i8* %181)
  br label %send_authenticate.exit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.backedge
  %182 = call i64 @strlen(i8* %3) #13
  %183 = shl i64 %182, 32
  %sext = add i64 %183, -4294967296
  %184 = ashr exact i64 %sext, 32
  %185 = getelementptr inbounds [500 x i8], [500 x i8]* %line, i64 0, i64 %184
  %186 = load i8, i8* %185, align 1, !tbaa !1
  %187 = icmp eq i8 %186, 10
  br i1 %187, label %188, label %189

; <label>:188                                     ; preds = %.lr.ph
  store i8 0, i8* %185, align 1, !tbaa !1
  br label %189

; <label>:189                                     ; preds = %188, %.lr.ph
  %190 = call i8* @strchr(i8* nonnull %3, i32 58) #6
  %191 = icmp eq i8* %190, null
  br i1 %191, label %.backedge, label %194

.backedge:                                        ; preds = %189, %194
  %192 = call i8* @fgets(i8* nonnull %3, i32 500, %struct._IO_FILE* nonnull %143)
  %193 = icmp eq i8* %192, null
  br i1 %193, label %._crit_edge.loopexit, label %.lr.ph

; <label>:194                                     ; preds = %189
  store i8 0, i8* %190, align 1, !tbaa !1
  %195 = call i32 @strcmp(i8* nonnull %3, i8* %2) #6
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %.backedge

; <label>:197                                     ; preds = %194
  %.lcssa = phi i8* [ %190, %194 ]
  %198 = getelementptr inbounds i8, i8* %.lcssa, i64 1
  %199 = call i32 @fclose(%struct._IO_FILE* nonnull %143)
  %200 = call i32 (i8*, i8*, ...) bitcast (i32 (...)* @crypt to i32 (i8*, i8*, ...)*)(i8* %96, i8* %198) #6
  %201 = sext i32 %200 to i64
  %202 = inttoptr i64 %201 to i8*
  %203 = call i32 @strcmp(i8* %202, i8* %198) #6
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %224

; <label>:205                                     ; preds = %197
  %206 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 31
  %207 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 43
  %208 = call i64 @strlen(i8* nonnull %3) #13
  call void @httpd_realloc_str(i8** %206, i64* %207, i64 %208)
  %209 = load i8*, i8** %206, align 8, !tbaa !81
  %210 = call i8* @strcpy(i8* %209, i8* nonnull %3) #6
  %211 = load i8*, i8** @auth_check2.authpath, align 8, !tbaa !4
  %212 = call i64 @strlen(i8* %211) #13
  call void @httpd_realloc_str(i8** nonnull @auth_check2.prevauthpath, i64* nonnull @auth_check2.maxprevauthpath, i64 %212)
  %213 = load i8*, i8** @auth_check2.prevauthpath, align 8, !tbaa !4
  %214 = load i8*, i8** @auth_check2.authpath, align 8, !tbaa !4
  %215 = call i8* @strcpy(i8* %213, i8* %214) #6
  %216 = getelementptr inbounds %struct.stat, %struct.stat* %sb, i64 0, i32 12, i32 0
  %217 = load i64, i64* %216, align 8, !tbaa !167
  store i64 %217, i64* @auth_check2.prevmtime, align 8, !tbaa !16
  %218 = call i64 @strlen(i8* %2) #13
  call void @httpd_realloc_str(i8** nonnull @auth_check2.prevuser, i64* nonnull @auth_check2.maxprevuser, i64 %218)
  %219 = load i8*, i8** @auth_check2.prevuser, align 8, !tbaa !4
  %220 = call i8* @strcpy(i8* %219, i8* %2) #6
  %221 = call i64 @strlen(i8* %198) #13
  call void @httpd_realloc_str(i8** nonnull @auth_check2.prevcryp, i64* nonnull @auth_check2.maxprevcryp, i64 %221)
  %222 = load i8*, i8** @auth_check2.prevcryp, align 8, !tbaa !4
  %223 = call i8* @strcpy(i8* %222, i8* %198) #6
  br label %send_authenticate.exit

; <label>:224                                     ; preds = %197
  %225 = call i64 @strlen(i8* %dirname) #13
  %226 = add i64 %225, 35
  call void @httpd_realloc_str(i8** nonnull @send_authenticate.header, i64* nonnull @send_authenticate.maxheader, i64 %226) #6
  %227 = load i8*, i8** @send_authenticate.header, align 8, !tbaa !4
  %228 = load i64, i64* @send_authenticate.maxheader, align 8, !tbaa !16
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %227, i64 %228, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.465, i64 0, i64 0), i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @send_authenticate.headstr, i64 0, i64 0), i8* %dirname) #6
  %229 = load i8*, i8** @send_authenticate.header, align 8, !tbaa !4
  %230 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %231 = load i8*, i8** %230, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* %hc, i32 401, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.466, i64 0, i64 0), i8* %229, i8* nonnull getelementptr inbounds ([45 x i8], [45 x i8]* @.str.467, i64 0, i64 0), i8* %231) #6
  %232 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 8
  %233 = load i32, i32* %232, align 4, !tbaa !91
  %234 = icmp eq i32 %233, 3
  br i1 %234, label %235, label %send_authenticate.exit

; <label>:235                                     ; preds = %224
  %236 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 58
  store i32 1, i32* %236, align 4, !tbaa !148
  br label %send_authenticate.exit

._crit_edge.loopexit:                             ; preds = %.backedge
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %237 = call i32 @fclose(%struct._IO_FILE* nonnull %143)
  %238 = call i64 @strlen(i8* %dirname) #13
  %239 = add i64 %238, 35
  call void @httpd_realloc_str(i8** nonnull @send_authenticate.header, i64* nonnull @send_authenticate.maxheader, i64 %239) #6
  %240 = load i8*, i8** @send_authenticate.header, align 8, !tbaa !4
  %241 = load i64, i64* @send_authenticate.maxheader, align 8, !tbaa !16
  call void (i8*, i64, i8*, ...) @my_snprintf(i8* %240, i64 %241, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.465, i64 0, i64 0), i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @send_authenticate.headstr, i64 0, i64 0), i8* %dirname) #6
  %242 = load i8*, i8** @send_authenticate.header, align 8, !tbaa !4
  %243 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %244 = load i8*, i8** %243, align 8, !tbaa !53
  call void @httpd_send_err(%struct.httpd_conn* %hc, i32 401, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.466, i64 0, i64 0), i8* %242, i8* nonnull getelementptr inbounds ([45 x i8], [45 x i8]* @.str.467, i64 0, i64 0), i8* %244) #6
  %245 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 8
  %246 = load i32, i32* %245, align 4, !tbaa !91
  %247 = icmp eq i32 %246, 3
  br i1 %247, label %248, label %send_authenticate.exit

; <label>:248                                     ; preds = %._crit_edge
  %249 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 58
  store i32 1, i32* %249, align 4, !tbaa !148
  br label %send_authenticate.exit

send_authenticate.exit:                           ; preds = %248, %._crit_edge, %235, %224, %141, %130, %93, %82, %30, %19, %0, %205, %httpd_ntoa.exit, %124
  %.0 = phi i32 [ 1, %124 ], [ -1, %httpd_ntoa.exit ], [ 1, %205 ], [ 0, %0 ], [ -1, %19 ], [ -1, %30 ], [ -1, %82 ], [ -1, %93 ], [ -1, %130 ], [ -1, %141 ], [ -1, %224 ], [ -1, %235 ], [ -1, %._crit_edge ], [ -1, %248 ]
  call void @llvm.lifetime.end(i64 500, i8* %3) #6
  call void @llvm.lifetime.end(i64 500, i8* %2) #6
  call void @llvm.lifetime.end(i64 144, i8* %1) #6
  ret i32 %.0
}

declare i32 @crypt(...) #5

; Function Attrs: nounwind uwtable
define internal fastcc i32 @check_referrer(%struct.httpd_conn* %hc) unnamed_addr #8 {
  %1 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 1
  %2 = load %struct.httpd_server*, %struct.httpd_server** %1, align 8, !tbaa !79
  %3 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %2, i64 0, i32 17
  %4 = load i8*, i8** %3, align 8, !tbaa !124
  %5 = icmp eq i8* %4, null
  br i1 %5, label %really_check_referrer.exit.thread, label %6

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 20
  %8 = load i8*, i8** %7, align 8, !tbaa !94
  %9 = icmp eq i8* %8, null
  br i1 %9, label %16, label %10

; <label>:10                                      ; preds = %6
  %11 = load i8, i8* %8, align 1, !tbaa !1
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %16, label %13

; <label>:13                                      ; preds = %10
  %14 = tail call i8* @strstr(i8* nonnull %8, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.95.146, i64 0, i64 0)) #13
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %40

; <label>:16                                      ; preds = %13, %10, %6
  %17 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %2, i64 0, i32 19
  %18 = load i32, i32* %17, align 8, !tbaa !134
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %really_check_referrer.exit.thread, label %20

; <label>:20                                      ; preds = %16
  %21 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 15
  %22 = load i8*, i8** %21, align 8, !tbaa !111
  %23 = tail call i8* @strchr(i8* nonnull %4, i32 124) #6
  %24 = icmp eq i8* %23, null
  br i1 %24, label %match.exit, label %.lr.ph.i2.preheader

.lr.ph.i2.preheader:                              ; preds = %20
  br label %.lr.ph.i2

; <label>:25                                      ; preds = %.lr.ph.i2
  %26 = tail call i8* @strchr(i8* %35, i32 124) #6
  %27 = icmp eq i8* %26, null
  br i1 %27, label %match.exit.loopexit, label %.lr.ph.i2

.lr.ph.i2:                                        ; preds = %.lr.ph.i2.preheader, %25
  %28 = phi i8* [ %26, %25 ], [ %23, %.lr.ph.i2.preheader ]
  %.013.i = phi i8* [ %35, %25 ], [ %4, %.lr.ph.i2.preheader ]
  %29 = ptrtoint i8* %28 to i64
  %30 = ptrtoint i8* %.013.i to i64
  %31 = sub i64 %29, %30
  %32 = trunc i64 %31 to i32
  %33 = tail call fastcc i32 @match_one(i8* %.013.i, i32 %32, i8* %22) #6
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds i8, i8* %28, i64 1
  br i1 %34, label %25, label %really_check_referrer.exit.loopexit

match.exit.loopexit:                              ; preds = %25
  %.lcssa23 = phi i8* [ %35, %25 ]
  br label %match.exit

match.exit:                                       ; preds = %match.exit.loopexit, %20
  %.01.lcssa.i = phi i8* [ %4, %20 ], [ %.lcssa23, %match.exit.loopexit ]
  %36 = tail call i64 @strlen(i8* %.01.lcssa.i) #13
  %37 = trunc i64 %36 to i32
  %38 = tail call fastcc i32 @match_one(i8* %.01.lcssa.i, i32 %37, i8* %22) #6
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %really_check_referrer.exit.thread, label %really_check_referrer.exit

; <label>:40                                      ; preds = %13
  %41 = getelementptr inbounds i8, i8* %14, i64 2
  br label %42

; <label>:42                                      ; preds = %44, %40
  %cp2.0.i = phi i8* [ %41, %40 ], [ %45, %44 ]
  %43 = load i8, i8* %cp2.0.i, align 1, !tbaa !1
  switch i8 %43, label %44 [
    i8 47, label %.critedge.i
    i8 58, label %.critedge.i
    i8 0, label %.critedge.i
  ]

; <label>:44                                      ; preds = %42
  %45 = getelementptr inbounds i8, i8* %cp2.0.i, i64 1
  br label %42

.critedge.i:                                      ; preds = %42, %42, %42
  %cp2.0.i.lcssa = phi i8* [ %cp2.0.i, %42 ], [ %cp2.0.i, %42 ], [ %cp2.0.i, %42 ]
  %46 = ptrtoint i8* %cp2.0.i.lcssa to i64
  %47 = ptrtoint i8* %41 to i64
  %48 = sub i64 %46, %47
  tail call void @httpd_realloc_str(i8** nonnull @really_check_referrer.refhost, i64* nonnull @really_check_referrer.refhost_size, i64 %48) #6
  %49 = load i8*, i8** @really_check_referrer.refhost, align 8, !tbaa !4
  %50 = icmp ult i8* %41, %cp2.0.i.lcssa
  br i1 %50, label %.lr.ph.i, label %._crit_edge.i

.lr.ph.i:                                         ; preds = %.critedge.i
  %51 = tail call i16** @__ctype_b_loc() #21
  br label %52

; <label>:52                                      ; preds = %66, %.lr.ph.i
  %cp1.03.i = phi i8* [ %41, %.lr.ph.i ], [ %67, %66 ]
  %cp3.02.i = phi i8* [ %49, %.lr.ph.i ], [ %68, %66 ]
  %53 = load i8, i8* %cp1.03.i, align 1, !tbaa !1
  %54 = sext i8 %53 to i64
  %55 = load i16*, i16** %51, align 8, !tbaa !4
  %56 = getelementptr inbounds i16, i16* %55, i64 %54
  %57 = load i16, i16* %56, align 2, !tbaa !6
  %58 = and i16 %57, 256
  %59 = icmp eq i16 %58, 0
  br i1 %59, label %66, label %60

; <label>:60                                      ; preds = %52
  %61 = tail call i32** @__ctype_tolower_loc() #21
  %62 = load i32*, i32** %61, align 8, !tbaa !4
  %63 = getelementptr inbounds i32, i32* %62, i64 %54
  %64 = load i32, i32* %63, align 4, !tbaa !8
  %65 = trunc i32 %64 to i8
  br label %66

; <label>:66                                      ; preds = %60, %52
  %storemerge.i = phi i8 [ %65, %60 ], [ %53, %52 ]
  store i8 %storemerge.i, i8* %cp3.02.i, align 1, !tbaa !1
  %67 = getelementptr inbounds i8, i8* %cp1.03.i, i64 1
  %68 = getelementptr inbounds i8, i8* %cp3.02.i, i64 1
  %exitcond.i = icmp eq i8* %67, %cp2.0.i.lcssa
  br i1 %exitcond.i, label %._crit_edge.i.loopexit, label %52

._crit_edge.i.loopexit:                           ; preds = %66
  %.lcssa = phi i8* [ %68, %66 ]
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i.loopexit, %.critedge.i
  %cp3.0.lcssa.i = phi i8* [ %49, %.critedge.i ], [ %.lcssa, %._crit_edge.i.loopexit ]
  store i8 0, i8* %cp3.0.lcssa.i, align 1, !tbaa !1
  %69 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %2, i64 0, i32 18
  %70 = load i8*, i8** %69, align 8, !tbaa !125
  %71 = icmp eq i8* %70, null
  br i1 %71, label %72, label %84

; <label>:72                                      ; preds = %._crit_edge.i
  %73 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %2, i64 0, i32 15
  %74 = load i32, i32* %73, align 4, !tbaa !82
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %80

; <label>:76                                      ; preds = %72
  %77 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %2, i64 0, i32 1
  %78 = load i8*, i8** %77, align 8, !tbaa !85
  %79 = icmp eq i8* %78, null
  br i1 %79, label %really_check_referrer.exit.thread, label %84

; <label>:80                                      ; preds = %72
  %81 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 50
  %82 = load i8*, i8** %81, align 8, !tbaa !84
  %83 = icmp eq i8* %82, null
  br i1 %83, label %really_check_referrer.exit.thread, label %84

; <label>:84                                      ; preds = %80, %76, %._crit_edge.i
  %lp.0.i = phi i8* [ %82, %80 ], [ %78, %76 ], [ %70, %._crit_edge.i ]
  %85 = load i8*, i8** @really_check_referrer.refhost, align 8, !tbaa !4
  %86 = tail call i8* @strchr(i8* nonnull %lp.0.i, i32 124) #6
  %87 = icmp eq i8* %86, null
  br i1 %87, label %match.exit8, label %.lr.ph.i6.preheader

.lr.ph.i6.preheader:                              ; preds = %84
  br label %.lr.ph.i6

; <label>:88                                      ; preds = %.lr.ph.i6
  %89 = tail call i8* @strchr(i8* %98, i32 124) #6
  %90 = icmp eq i8* %89, null
  br i1 %90, label %match.exit8.loopexit, label %.lr.ph.i6

.lr.ph.i6:                                        ; preds = %.lr.ph.i6.preheader, %88
  %91 = phi i8* [ %89, %88 ], [ %86, %.lr.ph.i6.preheader ]
  %.013.i5 = phi i8* [ %98, %88 ], [ %lp.0.i, %.lr.ph.i6.preheader ]
  %92 = ptrtoint i8* %91 to i64
  %93 = ptrtoint i8* %.013.i5 to i64
  %94 = sub i64 %92, %93
  %95 = trunc i64 %94 to i32
  %96 = tail call fastcc i32 @match_one(i8* %.013.i5, i32 %95, i8* %85) #6
  %97 = icmp eq i32 %96, 0
  %98 = getelementptr inbounds i8, i8* %91, i64 1
  br i1 %97, label %88, label %really_check_referrer.exit.thread.loopexit

match.exit8.loopexit:                             ; preds = %88
  %.lcssa25 = phi i8* [ %98, %88 ]
  br label %match.exit8

match.exit8:                                      ; preds = %match.exit8.loopexit, %84
  %.01.lcssa.i3 = phi i8* [ %lp.0.i, %84 ], [ %.lcssa25, %match.exit8.loopexit ]
  %99 = tail call i64 @strlen(i8* %.01.lcssa.i3) #13
  %100 = trunc i64 %99 to i32
  %101 = tail call fastcc i32 @match_one(i8* %.01.lcssa.i3, i32 %100, i8* %85) #6
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %really_check_referrer.exit.thread

; <label>:103                                     ; preds = %match.exit8
  %104 = load i8*, i8** %3, align 8, !tbaa !124
  %105 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 15
  %106 = load i8*, i8** %105, align 8, !tbaa !111
  %107 = tail call i8* @strchr(i8* %104, i32 124) #6
  %108 = icmp eq i8* %107, null
  br i1 %108, label %match.exit14, label %.lr.ph.i12.preheader

.lr.ph.i12.preheader:                             ; preds = %103
  br label %.lr.ph.i12

; <label>:109                                     ; preds = %.lr.ph.i12
  %110 = tail call i8* @strchr(i8* %119, i32 124) #6
  %111 = icmp eq i8* %110, null
  br i1 %111, label %match.exit14.loopexit, label %.lr.ph.i12

.lr.ph.i12:                                       ; preds = %.lr.ph.i12.preheader, %109
  %112 = phi i8* [ %110, %109 ], [ %107, %.lr.ph.i12.preheader ]
  %.013.i11 = phi i8* [ %119, %109 ], [ %104, %.lr.ph.i12.preheader ]
  %113 = ptrtoint i8* %112 to i64
  %114 = ptrtoint i8* %.013.i11 to i64
  %115 = sub i64 %113, %114
  %116 = trunc i64 %115 to i32
  %117 = tail call fastcc i32 @match_one(i8* %.013.i11, i32 %116, i8* %106) #6
  %118 = icmp eq i32 %117, 0
  %119 = getelementptr inbounds i8, i8* %112, i64 1
  br i1 %118, label %109, label %really_check_referrer.exit.loopexit19

match.exit14.loopexit:                            ; preds = %109
  %.lcssa24 = phi i8* [ %119, %109 ]
  br label %match.exit14

match.exit14:                                     ; preds = %match.exit14.loopexit, %103
  %.01.lcssa.i9 = phi i8* [ %104, %103 ], [ %.lcssa24, %match.exit14.loopexit ]
  %120 = tail call i64 @strlen(i8* %.01.lcssa.i9) #13
  %121 = trunc i64 %120 to i32
  %122 = tail call fastcc i32 @match_one(i8* %.01.lcssa.i9, i32 %121, i8* %106) #6
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %really_check_referrer.exit.thread, label %really_check_referrer.exit

really_check_referrer.exit.loopexit:              ; preds = %.lr.ph.i2
  br label %really_check_referrer.exit

really_check_referrer.exit.loopexit19:            ; preds = %.lr.ph.i12
  br label %really_check_referrer.exit

really_check_referrer.exit:                       ; preds = %really_check_referrer.exit.loopexit19, %really_check_referrer.exit.loopexit, %match.exit14, %match.exit
  %124 = load %struct.httpd_server*, %struct.httpd_server** %1, align 8, !tbaa !79
  %125 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %124, i64 0, i32 15
  %126 = load i32, i32* %125, align 4, !tbaa !82
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %132, label %128

; <label>:128                                     ; preds = %really_check_referrer.exit
  %129 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 50
  %130 = load i8*, i8** %129, align 8, !tbaa !84
  %131 = icmp eq i8* %130, null
  br i1 %131, label %132, label %135

; <label>:132                                     ; preds = %128, %really_check_referrer.exit
  %133 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %124, i64 0, i32 1
  %134 = load i8*, i8** %133, align 8, !tbaa !85
  br label %135

; <label>:135                                     ; preds = %128, %132
  %cp.0 = phi i8* [ %134, %132 ], [ %130, %128 ]
  %136 = icmp eq i8* %cp.0, null
  %.cp.0 = select i1 %136, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* %cp.0
  %137 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2
  %138 = bitcast %union.httpd_sockaddr* %137 to %struct.sockaddr*
  %139 = getelementptr inbounds %union.httpd_sockaddr, %union.httpd_sockaddr* %137, i64 0, i32 0, i32 0
  %140 = load i16, i16* %139, align 8, !tbaa !88
  %switch.selectcmp.i.i = icmp eq i16 %140, 10
  %switch.selectcmp1.i.i = icmp eq i16 %140, 2
  %141 = select i1 %switch.selectcmp.i.i, i32 28, i32 0
  %142 = select i1 %switch.selectcmp1.i.i, i32 16, i32 %141
  %143 = tail call i32 @getnameinfo(%struct.sockaddr* %138, i32 %142, i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i32 200, i8* null, i32 0, i32 1) #6
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %146, label %145

; <label>:145                                     ; preds = %135
  store i8 63, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), align 16, !tbaa !1
  store i8 0, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 1), align 1, !tbaa !1
  br label %httpd_ntoa.exit

; <label>:146                                     ; preds = %135
  %147 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 2, i32 0, i32 1
  %148 = bitcast i64* %147 to i32*
  %149 = load i32, i32* %148, align 4, !tbaa !8
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %httpd_ntoa.exit

; <label>:151                                     ; preds = %146
  %152 = bitcast i64* %147 to [4 x i32]*
  %153 = getelementptr inbounds [4 x i32], [4 x i32]* %152, i64 0, i64 1
  %154 = load i32, i32* %153, align 4, !tbaa !8
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %httpd_ntoa.exit

; <label>:156                                     ; preds = %151
  %157 = getelementptr inbounds i64, i64* %147, i64 1
  %158 = bitcast i64* %157 to i32*
  %159 = load i32, i32* %158, align 4, !tbaa !8
  %160 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 65535) #21, !srcloc !90
  %161 = icmp eq i32 %159, %160
  br i1 %161, label %162, label %httpd_ntoa.exit

; <label>:162                                     ; preds = %156
  %163 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57.59, i64 0, i64 0), i64 7) #13
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %httpd_ntoa.exit

; <label>:165                                     ; preds = %162
  %166 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7)) #13
  %167 = add i64 %166, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 7), i64 %167, i32 1, i1 false) #6
  br label %httpd_ntoa.exit

httpd_ntoa.exit:                                  ; preds = %145, %146, %151, %156, %162, %165
  %168 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %hc, i64 0, i32 12
  %169 = load i8*, i8** %168, align 8, !tbaa !53
  %170 = load i8*, i8** %7, align 8, !tbaa !94
  tail call void (i32, i8*, ...) @syslog(i32 6, i8* nonnull getelementptr inbounds ([46 x i8], [46 x i8]* @.str.468, i64 0, i64 0), i8* nonnull getelementptr inbounds ([200 x i8], [200 x i8]* @httpd_ntoa.str, i64 0, i64 0), i8* %.cp.0, i8* %169, i8* %170) #6
  %171 = load i8*, i8** %168, align 8, !tbaa !53
  tail call void @httpd_send_err(%struct.httpd_conn* nonnull %hc, i32 403, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94.175, i64 0, i64 0), i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.26.116, i64 0, i64 0), i8* nonnull getelementptr inbounds ([71 x i8], [71 x i8]* @.str.469, i64 0, i64 0), i8* %171)
  br label %really_check_referrer.exit.thread

really_check_referrer.exit.thread.loopexit:       ; preds = %.lr.ph.i6
  br label %really_check_referrer.exit.thread

really_check_referrer.exit.thread:                ; preds = %really_check_referrer.exit.thread.loopexit, %match.exit8, %match.exit14, %16, %match.exit, %80, %76, %httpd_ntoa.exit, %0
  %.0 = phi i32 [ 1, %0 ], [ 0, %httpd_ntoa.exit ], [ 1, %76 ], [ 1, %80 ], [ 1, %match.exit ], [ 1, %16 ], [ 1, %match.exit14 ], [ 1, %match.exit8 ], [ 1, %really_check_referrer.exit.thread.loopexit ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare noalias %struct.__dirstream* @opendir(i8* nocapture readonly) #2

; Function Attrs: nounwind
declare i32 @closedir(%struct.__dirstream* nocapture) #2

; Function Attrs: nounwind
declare i32 @fork() #2

; Function Attrs: nounwind
declare i32 @nice(i32) #2

; Function Attrs: nounwind
declare noalias %struct._IO_FILE* @fdopen(i32, i8* nocapture readonly) #2

declare %struct.dirent* @readdir(%struct.__dirstream*) #5

; Function Attrs: nounwind readonly uwtable
define internal i32 @name_compare(i8* nocapture readonly %v1, i8* nocapture readonly %v2) #11 {
  %1 = bitcast i8* %v1 to i8**
  %2 = bitcast i8* %v2 to i8**
  %3 = load i8*, i8** %1, align 8, !tbaa !4
  %4 = load i8*, i8** %2, align 8, !tbaa !4
  %5 = tail call i32 @strcmp(i8* %3, i8* %4) #6
  ret i32 %5
}

; Function Attrs: nounwind readonly
declare i8* @memchr(i8*, i32, i64) #13

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) #2

; Function Attrs: nounwind
declare i32 @__lxstat(i32, i8*, %struct.stat*) #2

; Function Attrs: nounwind
declare i8* @ctime(i64*) #2

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #6

; Function Attrs: nounwind uwtable
define internal void @cgi_kill(i8* %client_data.coerce, %struct.timeval* readonly %nowP) #8 {
  %1 = ptrtoint i8* %client_data.coerce to i64
  %2 = trunc i64 %1 to i32
  %3 = tail call i32 @kill(i32 %2, i32 2) #6
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %9

; <label>:5                                       ; preds = %0
  tail call void (i32, i8*, ...) @syslog(i32 4, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.487, i64 0, i64 0), i32 %2) #6
  %6 = tail call %struct.TimerStruct* @tmr_create(%struct.timeval* %nowP, void (i8*, %struct.timeval*)* nonnull @cgi_kill2, i8* %client_data.coerce, i64 5000, i32 0) #6
  %7 = icmp eq %struct.TimerStruct* %6, null
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %5
  tail call void (i32, i8*, ...) @syslog(i32 2, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.488, i64 0, i64 0)) #6
  tail call void @exit(i32 1) #18
  unreachable

; <label>:9                                       ; preds = %5, %0
  ret void
}

; Function Attrs: nounwind
declare i32 @kill(i32, i32) #2

; Function Attrs: nounwind uwtable
define internal void @cgi_kill2(i8* %client_data.coerce, %struct.timeval* nocapture readnone %nowP) #8 {
  %1 = ptrtoint i8* %client_data.coerce to i64
  %2 = trunc i64 %1 to i32
  %3 = tail call i32 @kill(i32 %2, i32 9) #6
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %0
  tail call void (i32, i8*, ...) @syslog(i32 4, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.489, i64 0, i64 0), i32 %2) #6
  br label %6

; <label>:6                                       ; preds = %5, %0
  ret void
}

; Function Attrs: nounwind
declare i32 @dup2(i32, i32) #2

; Function Attrs: nounwind uwtable
define internal fastcc noalias i8* @build_env(i8* nocapture readonly %fmt, i8* %arg) unnamed_addr #8 {
  %1 = tail call i64 @strlen(i8* %fmt) #13
  %2 = tail call i64 @strlen(i8* %arg) #13
  %3 = add i64 %2, %1
  %4 = load i64, i64* @build_env.maxbuf, align 8, !tbaa !16
  %5 = icmp ugt i64 %3, %4
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %0
  tail call void @httpd_realloc_str(i8** nonnull @build_env.buf, i64* nonnull @build_env.maxbuf, i64 %3)
  %.pre = load i64, i64* @build_env.maxbuf, align 8, !tbaa !16
  br label %7

; <label>:7                                       ; preds = %6, %0
  %8 = phi i64 [ %.pre, %6 ], [ %4, %0 ]
  %9 = load i8*, i8** @build_env.buf, align 8, !tbaa !4
  tail call void (i8*, i64, i8*, ...) @my_snprintf(i8* %9, i64 %8, i8* %fmt, i8* %arg)
  %10 = load i8*, i8** @build_env.buf, align 8, !tbaa !4
  %11 = tail call noalias i8* @__strdup(i8* %10) #6
  %12 = icmp eq i8* %11, null
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %7
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([43 x i8], [43 x i8]* @.str.526, i64 0, i64 0)) #6
  tail call void @exit(i32 1) #18
  unreachable

; <label>:14                                      ; preds = %7
  ret i8* %11
}

; Function Attrs: nounwind readonly
declare i8* @getenv(i8* nocapture) #0

; Function Attrs: nounwind
declare i32 @pipe(i32*) #2

; Function Attrs: nounwind
declare i32 @execve(i8*, i8**, i8**) #2

; Function Attrs: noreturn
declare void @_exit(i32) #14

; Function Attrs: nounwind uwtable
define i8* @mmc_map(i8* %filename, %struct.stat* readonly %sbP, %struct.timeval* readonly %nowP) #8 {
  %sb = alloca %struct.stat, align 8
  %1 = bitcast %struct.stat* %sb to i8*
  call void @llvm.lifetime.start(i64 144, i8* %1) #6
  %2 = icmp eq %struct.stat* %sbP, null
  br i1 %2, label %5, label %3

; <label>:3                                       ; preds = %0
  %4 = bitcast %struct.stat* %sbP to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %4, i64 144, i32 8, i1 false), !tbaa.struct !171
  br label %9

; <label>:5                                       ; preds = %0
  %6 = call i32 @__xstat(i32 1, i8* nonnull %filename, %struct.stat* nonnull %sb) #6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %9, label %8

; <label>:8                                       ; preds = %5
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.556, i64 0, i64 0)) #6
  br label %286

; <label>:9                                       ; preds = %5, %3
  %10 = icmp eq %struct.timeval* %nowP, null
  br i1 %10, label %14, label %11

; <label>:11                                      ; preds = %9
  %12 = getelementptr inbounds %struct.timeval, %struct.timeval* %nowP, i64 0, i32 0
  %13 = load i64, i64* %12, align 8, !tbaa !45
  br label %16

; <label>:14                                      ; preds = %9
  %15 = call i64 @time(i64* null) #6
  br label %16

; <label>:16                                      ; preds = %14, %11
  %now.0 = phi i64 [ %13, %11 ], [ %15, %14 ]
  %17 = load %struct.MapStruct**, %struct.MapStruct*** @hash_table, align 8, !tbaa !4
  %18 = icmp eq %struct.MapStruct** %17, null
  br i1 %18, label %19, label %20

; <label>:19                                      ; preds = %16
  store i32 1024, i32* @hash_size, align 4, !tbaa !8
  br label %35

; <label>:20                                      ; preds = %16
  %21 = load i32, i32* @hash_size, align 4, !tbaa !8
  %22 = load i32, i32* @map_count, align 4, !tbaa !8
  %23 = mul nsw i32 %22, 3
  %24 = icmp slt i32 %21, %23
  br i1 %24, label %25, label %.loopexit10

; <label>:25                                      ; preds = %20
  %26 = bitcast %struct.MapStruct** %17 to i8*
  call void @free(i8* %26) #6
  %27 = load i32, i32* @map_count, align 4
  %28 = mul nsw i32 %27, 6
  %hash_size.promoted.i = load i32, i32* @hash_size, align 4, !tbaa !8
  br label %29

; <label>:29                                      ; preds = %29, %25
  %30 = phi i32 [ %31, %29 ], [ %hash_size.promoted.i, %25 ]
  %31 = shl i32 %30, 1
  %32 = icmp slt i32 %31, %28
  br i1 %32, label %29, label %33

; <label>:33                                      ; preds = %29
  %.lcssa53 = phi i32 [ %31, %29 ]
  store i32 %.lcssa53, i32* @hash_size, align 4, !tbaa !8
  %34 = add nsw i32 %.lcssa53, -1
  br label %35

; <label>:35                                      ; preds = %33, %19
  %36 = phi i32 [ %.lcssa53, %33 ], [ 1024, %19 ]
  %storemerge.i = phi i32 [ %34, %33 ], [ 1023, %19 ]
  store i32 %storemerge.i, i32* @hash_mask, align 4, !tbaa !8
  %37 = sext i32 %36 to i64
  %38 = shl nsw i64 %37, 3
  %39 = call noalias i8* @malloc(i64 %38) #6
  store i8* %39, i8** bitcast (%struct.MapStruct*** @hash_table to i8**), align 8, !tbaa !4
  %40 = icmp eq i8* %39, null
  %41 = bitcast i8* %39 to %struct.MapStruct**
  br i1 %40, label %check_hash_size.exit, label %.preheader2.i

.preheader2.i:                                    ; preds = %35
  %42 = icmp sgt i32 %36, 0
  br i1 %42, label %.lr.ph8.i, label %.preheader.i

.lr.ph8.i:                                        ; preds = %.preheader2.i
  %43 = icmp sgt i32 %36, 1
  %smax.i = select i1 %43, i32 %36, i32 1
  %44 = add i32 %smax.i, -1
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  %47 = add nuw nsw i64 %46, 8
  call void @llvm.memset.p0i8.i64(i8* nonnull %39, i8 0, i64 %47, i32 8, i1 false) #6
  br label %.preheader.i

.preheader.i:                                     ; preds = %.lr.ph8.i, %.preheader2.i
  %m.05.i = load %struct.MapStruct*, %struct.MapStruct** @maps, align 8, !tbaa !4
  %48 = icmp eq %struct.MapStruct* %m.05.i, null
  br i1 %48, label %.loopexit10, label %.lr.ph.i.preheader

.lr.ph.i.preheader:                               ; preds = %.preheader.i
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i.preheader, %.loopexit.i..lr.ph.i_crit_edge
  %49 = phi i32 [ %.pre28, %.loopexit.i..lr.ph.i_crit_edge ], [ %36, %.lr.ph.i.preheader ]
  %50 = phi i32 [ %.pre, %.loopexit.i..lr.ph.i_crit_edge ], [ %storemerge.i, %.lr.ph.i.preheader ]
  %m.06.i = phi %struct.MapStruct* [ %m.0.i, %.loopexit.i..lr.ph.i_crit_edge ], [ %m.05.i, %.lr.ph.i.preheader ]
  %51 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.06.i, i64 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !102
  %53 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.06.i, i64 0, i32 1
  %54 = load i64, i64* %53, align 8, !tbaa !103
  %55 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.06.i, i64 0, i32 2
  %56 = load i64, i64* %55, align 8, !tbaa !104
  %57 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.06.i, i64 0, i32 3
  %58 = load i64, i64* %57, align 8, !tbaa !105
  %59 = xor i64 %52, 177573
  %60 = mul i64 %59, 33
  %61 = xor i64 %60, %54
  %62 = mul i64 %61, 33
  %63 = xor i64 %62, %56
  %64 = mul i64 %63, 33
  %65 = xor i64 %64, %58
  %66 = trunc i64 %65 to i32
  %67 = and i32 %66, %50
  %68 = add i32 %49, -1
  %69 = add i32 %68, %67
  %70 = and i32 %69, %50
  %71 = zext i32 %67 to i64
  %72 = getelementptr inbounds %struct.MapStruct*, %struct.MapStruct** %41, i64 %71
  %73 = load %struct.MapStruct*, %struct.MapStruct** %72, align 8, !tbaa !4
  %74 = icmp eq %struct.MapStruct* %73, null
  br i1 %74, label %.loopexit.i, label %.lr.ph.i.i.preheader

.lr.ph.i.i.preheader:                             ; preds = %.lr.ph.i
  br label %.lr.ph.i.i

.lr.ph.i.i:                                       ; preds = %.lr.ph.i.i.preheader, %76
  %i.03.i.i = phi i32 [ %78, %76 ], [ %67, %.lr.ph.i.i.preheader ]
  %75 = icmp eq i32 %i.03.i.i, %70
  br i1 %75, label %check_hash_size.exit.loopexit, label %76

; <label>:76                                      ; preds = %.lr.ph.i.i
  %77 = add i32 %i.03.i.i, 1
  %78 = and i32 %77, %50
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds %struct.MapStruct*, %struct.MapStruct** %41, i64 %79
  %81 = load %struct.MapStruct*, %struct.MapStruct** %80, align 8, !tbaa !4
  %82 = icmp eq %struct.MapStruct* %81, null
  br i1 %82, label %.loopexit.i.loopexit, label %.lr.ph.i.i

.loopexit.i.loopexit:                             ; preds = %76
  %.lcssa52 = phi %struct.MapStruct** [ %80, %76 ]
  %.lcssa51 = phi i32 [ %78, %76 ]
  br label %.loopexit.i

.loopexit.i:                                      ; preds = %.loopexit.i.loopexit, %.lr.ph.i
  %.lcssa.i.i = phi %struct.MapStruct** [ %72, %.lr.ph.i ], [ %.lcssa52, %.loopexit.i.loopexit ]
  %i.0.lcssa.i.i = phi i32 [ %67, %.lr.ph.i ], [ %.lcssa51, %.loopexit.i.loopexit ]
  store %struct.MapStruct* %m.06.i, %struct.MapStruct** %.lcssa.i.i, align 8, !tbaa !4
  %83 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.06.i, i64 0, i32 7
  store i32 %67, i32* %83, align 8, !tbaa !100
  %84 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.06.i, i64 0, i32 8
  store i32 %i.0.lcssa.i.i, i32* %84, align 4, !tbaa !127
  %85 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.06.i, i64 0, i32 9
  %m.0.i = load %struct.MapStruct*, %struct.MapStruct** %85, align 8, !tbaa !4
  %86 = icmp eq %struct.MapStruct* %m.0.i, null
  br i1 %86, label %.loopexit10.loopexit, label %.loopexit.i..lr.ph.i_crit_edge

.loopexit.i..lr.ph.i_crit_edge:                   ; preds = %.loopexit.i
  %.pre = load i32, i32* @hash_mask, align 4, !tbaa !8
  %.pre28 = load i32, i32* @hash_size, align 4, !tbaa !8
  br label %.lr.ph.i

check_hash_size.exit.loopexit:                    ; preds = %.lr.ph.i.i
  br label %check_hash_size.exit

check_hash_size.exit:                             ; preds = %check_hash_size.exit.loopexit, %35
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1.557, i64 0, i64 0)) #6
  br label %286

.loopexit10.loopexit:                             ; preds = %.loopexit.i
  %.pre29 = load i32, i32* @hash_size, align 4, !tbaa !8
  br label %.loopexit10

.loopexit10:                                      ; preds = %.loopexit10.loopexit, %20, %.preheader.i
  %87 = phi %struct.MapStruct** [ %41, %.loopexit10.loopexit ], [ %17, %20 ], [ %41, %.preheader.i ]
  %88 = phi i32 [ %.pre29, %.loopexit10.loopexit ], [ %21, %20 ], [ %36, %.preheader.i ]
  %89 = getelementptr inbounds %struct.stat, %struct.stat* %sb, i64 0, i32 1
  %90 = load i64, i64* %89, align 8, !tbaa !96
  %91 = getelementptr inbounds %struct.stat, %struct.stat* %sb, i64 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !97
  %93 = getelementptr inbounds %struct.stat, %struct.stat* %sb, i64 0, i32 8
  %94 = load i64, i64* %93, align 8, !tbaa !98
  %95 = getelementptr inbounds %struct.stat, %struct.stat* %sb, i64 0, i32 13, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !99
  %97 = xor i64 %90, 177573
  %98 = mul i64 %97, 33
  %99 = xor i64 %98, %92
  %100 = mul i64 %99, 33
  %101 = xor i64 %100, %94
  %102 = mul i64 %101, 33
  %103 = xor i64 %102, %96
  %104 = trunc i64 %103 to i32
  %105 = load i32, i32* @hash_mask, align 4, !tbaa !8
  %106 = and i32 %104, %105
  %107 = add i32 %88, -1
  %108 = add i32 %107, %106
  %109 = and i32 %108, %105
  %110 = zext i32 %106 to i64
  %111 = getelementptr inbounds %struct.MapStruct*, %struct.MapStruct** %87, i64 %110
  %112 = load %struct.MapStruct*, %struct.MapStruct** %111, align 8, !tbaa !4
  %113 = icmp eq %struct.MapStruct* %112, null
  br i1 %113, label %.loopexit9, label %.lr.ph.i2.preheader

.lr.ph.i2.preheader:                              ; preds = %.loopexit10
  br label %.lr.ph.i2

.lr.ph.i2:                                        ; preds = %.lr.ph.i2.preheader, %136
  %114 = phi %struct.MapStruct* [ %141, %136 ], [ %112, %.lr.ph.i2.preheader ]
  %i.01.i = phi i32 [ %138, %136 ], [ %106, %.lr.ph.i2.preheader ]
  %115 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %114, i64 0, i32 7
  %116 = load i32, i32* %115, align 8, !tbaa !100
  %117 = icmp eq i32 %116, %106
  br i1 %117, label %118, label %134

; <label>:118                                     ; preds = %.lr.ph.i2
  %119 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %114, i64 0, i32 0
  %120 = load i64, i64* %119, align 8, !tbaa !102
  %121 = icmp eq i64 %120, %90
  br i1 %121, label %122, label %134

; <label>:122                                     ; preds = %118
  %123 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %114, i64 0, i32 1
  %124 = load i64, i64* %123, align 8, !tbaa !103
  %125 = icmp eq i64 %124, %92
  br i1 %125, label %126, label %134

; <label>:126                                     ; preds = %122
  %127 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %114, i64 0, i32 2
  %128 = load i64, i64* %127, align 8, !tbaa !104
  %129 = icmp eq i64 %128, %94
  br i1 %129, label %130, label %134

; <label>:130                                     ; preds = %126
  %131 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %114, i64 0, i32 3
  %132 = load i64, i64* %131, align 8, !tbaa !105
  %133 = icmp eq i64 %132, %96
  br i1 %133, label %find_hash.exit, label %134

; <label>:134                                     ; preds = %130, %126, %122, %118, %.lr.ph.i2
  %135 = icmp eq i32 %i.01.i, %109
  br i1 %135, label %.loopexit9.loopexit, label %136

; <label>:136                                     ; preds = %134
  %137 = add i32 %i.01.i, 1
  %138 = and i32 %137, %105
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds %struct.MapStruct*, %struct.MapStruct** %87, i64 %139
  %141 = load %struct.MapStruct*, %struct.MapStruct** %140, align 8, !tbaa !4
  %142 = icmp eq %struct.MapStruct* %141, null
  br i1 %142, label %.loopexit9.loopexit, label %.lr.ph.i2

find_hash.exit:                                   ; preds = %130
  %.lcssa49 = phi %struct.MapStruct* [ %114, %130 ]
  %143 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %.lcssa49, i64 0, i32 4
  %144 = load i32, i32* %143, align 8, !tbaa !107
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* %143, align 8, !tbaa !107
  %146 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %.lcssa49, i64 0, i32 5
  store i64 %now.0, i64* %146, align 8, !tbaa !108
  %147 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %.lcssa49, i64 0, i32 6
  %148 = load i8*, i8** %147, align 8, !tbaa !106
  br label %286

.loopexit9.loopexit:                              ; preds = %134, %136
  br label %.loopexit9

.loopexit9:                                       ; preds = %.loopexit9.loopexit, %.loopexit10
  %149 = call i32 (i8*, i32, ...) @open(i8* %filename, i32 0) #6
  %150 = icmp slt i32 %149, 0
  br i1 %150, label %151, label %152

; <label>:151                                     ; preds = %.loopexit9
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2.558, i64 0, i64 0)) #6
  br label %286

; <label>:152                                     ; preds = %.loopexit9
  %153 = load %struct.MapStruct*, %struct.MapStruct** @free_maps, align 8, !tbaa !4
  %154 = icmp eq %struct.MapStruct* %153, null
  br i1 %154, label %161, label %155

; <label>:155                                     ; preds = %152
  %156 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %153, i64 0, i32 9
  %157 = bitcast %struct.MapStruct** %156 to i64*
  %158 = load i64, i64* %157, align 8, !tbaa !126
  store i64 %158, i64* bitcast (%struct.MapStruct** @free_maps to i64*), align 8, !tbaa !4
  %159 = load i32, i32* @free_count, align 4, !tbaa !8
  %160 = add nsw i32 %159, -1
  store i32 %160, i32* @free_count, align 4, !tbaa !8
  br label %170

; <label>:161                                     ; preds = %152
  %162 = call noalias i8* @malloc(i64 72) #6
  %163 = icmp eq i8* %162, null
  br i1 %163, label %164, label %166

; <label>:164                                     ; preds = %161
  %165 = call i32 @close(i32 %149) #6
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3.559, i64 0, i64 0)) #6
  br label %286

; <label>:166                                     ; preds = %161
  %167 = bitcast i8* %162 to %struct.MapStruct*
  %168 = load i32, i32* @alloc_count, align 4, !tbaa !8
  %169 = add nsw i32 %168, 1
  store i32 %169, i32* @alloc_count, align 4, !tbaa !8
  br label %170

; <label>:170                                     ; preds = %166, %155
  %m.0 = phi %struct.MapStruct* [ %153, %155 ], [ %167, %166 ]
  %171 = load i64, i64* %89, align 8, !tbaa !96
  %172 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.0, i64 0, i32 0
  store i64 %171, i64* %172, align 8, !tbaa !102
  %173 = load i64, i64* %91, align 8, !tbaa !97
  %174 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.0, i64 0, i32 1
  store i64 %173, i64* %174, align 8, !tbaa !103
  %175 = load i64, i64* %93, align 8, !tbaa !98
  %176 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.0, i64 0, i32 2
  store i64 %175, i64* %176, align 8, !tbaa !104
  %177 = load i64, i64* %95, align 8, !tbaa !99
  %178 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.0, i64 0, i32 3
  store i64 %177, i64* %178, align 8, !tbaa !105
  %179 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.0, i64 0, i32 4
  store i32 1, i32* %179, align 8, !tbaa !107
  %180 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.0, i64 0, i32 5
  store i64 %now.0, i64* %180, align 8, !tbaa !108
  %181 = icmp eq i64 %175, 0
  br i1 %181, label %182, label %184

; <label>:182                                     ; preds = %170
  %183 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.0, i64 0, i32 6
  store i8* inttoptr (i64 1 to i8*), i8** %183, align 8, !tbaa !106
  br label %.thread

; <label>:184                                     ; preds = %170
  %185 = call i8* @mmap(i8* null, i64 %175, i32 1, i32 2, i32 %149, i64 0) #6
  %186 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.0, i64 0, i32 6
  store i8* %185, i8** %186, align 8, !tbaa !106
  %187 = icmp eq i8* %185, inttoptr (i64 -1 to i8*)
  br i1 %187, label %188, label %.thread

; <label>:188                                     ; preds = %184
  %189 = tail call i32* @__errno_location() #21
  %190 = load i32, i32* %189, align 4, !tbaa !8
  %191 = icmp eq i32 %190, 12
  br i1 %191, label %192, label %.critedge

; <label>:192                                     ; preds = %188
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([42 x i8], [42 x i8]* @.str.10.560, i64 0, i64 0)) #6
  %193 = load %struct.MapStruct*, %struct.MapStruct** @maps, align 8, !tbaa !4
  %194 = icmp eq %struct.MapStruct* %193, null
  br i1 %194, label %thread-pre-split, label %.lr.ph.i4.preheader

.lr.ph.i4.preheader:                              ; preds = %192
  br label %.lr.ph.i4

.lr.ph.i4:                                        ; preds = %.lr.ph.i4.preheader, %.outer.i
  %195 = phi %struct.MapStruct* [ %231, %.outer.i ], [ %193, %.lr.ph.i4.preheader ]
  %mm.0.ph2.i = phi %struct.MapStruct** [ %230, %.outer.i ], [ @maps, %.lr.ph.i4.preheader ]
  %196 = bitcast %struct.MapStruct** %mm.0.ph2.i to i64*
  br label %197

; <label>:197                                     ; preds = %really_unmap.exit.i, %.lr.ph.i4
  %198 = phi %struct.MapStruct* [ %195, %.lr.ph.i4 ], [ %228, %really_unmap.exit.i ]
  %199 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %198, i64 0, i32 4
  %200 = load i32, i32* %199, align 8, !tbaa !107
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %202, label %.outer.i

; <label>:202                                     ; preds = %197
  %203 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %198, i64 0, i32 2
  %204 = load i64, i64* %203, align 8, !tbaa !104
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %really_unmap.exit.i, label %206

; <label>:206                                     ; preds = %202
  %207 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %198, i64 0, i32 6
  %208 = load i8*, i8** %207, align 8, !tbaa !106
  %209 = call i32 @munmap(i8* %208, i64 %204) #6
  %210 = icmp slt i32 %209, 0
  br i1 %210, label %211, label %really_unmap.exit.i

; <label>:211                                     ; preds = %206
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11.561, i64 0, i64 0)) #6
  br label %really_unmap.exit.i

really_unmap.exit.i:                              ; preds = %211, %206, %202
  %212 = load i64, i64* %203, align 8, !tbaa !104
  %213 = load i64, i64* @mapped_bytes, align 8, !tbaa !16
  %214 = sub nsw i64 %213, %212
  store i64 %214, i64* @mapped_bytes, align 8, !tbaa !16
  %215 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %198, i64 0, i32 9
  %216 = bitcast %struct.MapStruct** %215 to i64*
  %217 = load i64, i64* %216, align 8, !tbaa !126
  store i64 %217, i64* %196, align 8, !tbaa !4
  %218 = load i32, i32* @map_count, align 4, !tbaa !8
  %219 = add nsw i32 %218, -1
  store i32 %219, i32* @map_count, align 4, !tbaa !8
  %220 = load i64, i64* bitcast (%struct.MapStruct** @free_maps to i64*), align 8, !tbaa !4
  store i64 %220, i64* %216, align 8, !tbaa !126
  store %struct.MapStruct* %198, %struct.MapStruct** @free_maps, align 8, !tbaa !4
  %221 = load i32, i32* @free_count, align 4, !tbaa !8
  %222 = add nsw i32 %221, 1
  store i32 %222, i32* @free_count, align 4, !tbaa !8
  %223 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %198, i64 0, i32 8
  %224 = load i32, i32* %223, align 4, !tbaa !127
  %225 = sext i32 %224 to i64
  %226 = load %struct.MapStruct**, %struct.MapStruct*** @hash_table, align 8, !tbaa !4
  %227 = getelementptr inbounds %struct.MapStruct*, %struct.MapStruct** %226, i64 %225
  store %struct.MapStruct* null, %struct.MapStruct** %227, align 8, !tbaa !4
  %228 = load %struct.MapStruct*, %struct.MapStruct** %mm.0.ph2.i, align 8, !tbaa !4
  %229 = icmp eq %struct.MapStruct* %228, null
  br i1 %229, label %thread-pre-split.loopexit, label %197

.outer.i:                                         ; preds = %197
  %.lcssa47 = phi %struct.MapStruct* [ %198, %197 ]
  %230 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %.lcssa47, i64 0, i32 9
  %231 = load %struct.MapStruct*, %struct.MapStruct** %230, align 8, !tbaa !4
  %232 = icmp eq %struct.MapStruct* %231, null
  br i1 %232, label %thread-pre-split.loopexit37, label %.lr.ph.i4

thread-pre-split.loopexit:                        ; preds = %really_unmap.exit.i
  br label %thread-pre-split

thread-pre-split.loopexit37:                      ; preds = %.outer.i
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %thread-pre-split.loopexit37, %thread-pre-split.loopexit, %192
  %233 = call i8* @mmap(i8* null, i64 %175, i32 1, i32 2, i32 %149, i64 0) #6
  store i8* %233, i8** %186, align 8, !tbaa !106
  %234 = icmp eq i8* %233, inttoptr (i64 -1 to i8*)
  br i1 %234, label %.critedge, label %.thread

.critedge:                                        ; preds = %188, %thread-pre-split
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4.562, i64 0, i64 0)) #6
  %235 = call i32 @close(i32 %149) #6
  %236 = bitcast %struct.MapStruct* %m.0 to i8*
  call void @free(i8* %236) #6
  %237 = load i32, i32* @alloc_count, align 4, !tbaa !8
  %238 = add nsw i32 %237, -1
  store i32 %238, i32* @alloc_count, align 4, !tbaa !8
  br label %286

.thread:                                          ; preds = %184, %thread-pre-split, %182
  %239 = call i32 @close(i32 %149) #6
  %240 = load i64, i64* %172, align 8, !tbaa !102
  %241 = load i64, i64* %174, align 8, !tbaa !103
  %242 = load i64, i64* %176, align 8, !tbaa !104
  %243 = load i64, i64* %178, align 8, !tbaa !105
  %244 = xor i64 %240, 177573
  %245 = mul i64 %244, 33
  %246 = xor i64 %245, %241
  %247 = mul i64 %246, 33
  %248 = xor i64 %247, %242
  %249 = mul i64 %248, 33
  %250 = xor i64 %249, %243
  %251 = trunc i64 %250 to i32
  %252 = load i32, i32* @hash_mask, align 4, !tbaa !8
  %253 = and i32 %251, %252
  %254 = load i32, i32* @hash_size, align 4, !tbaa !8
  %255 = add i32 %254, -1
  %256 = add i32 %255, %253
  %257 = and i32 %256, %252
  %258 = zext i32 %253 to i64
  %259 = load %struct.MapStruct**, %struct.MapStruct*** @hash_table, align 8, !tbaa !4
  %260 = getelementptr inbounds %struct.MapStruct*, %struct.MapStruct** %259, i64 %258
  %261 = load %struct.MapStruct*, %struct.MapStruct** %260, align 8, !tbaa !4
  %262 = icmp eq %struct.MapStruct* %261, null
  br i1 %262, label %.loopexit, label %.lr.ph.i5.preheader

.lr.ph.i5.preheader:                              ; preds = %.thread
  br label %.lr.ph.i5

.lr.ph.i5:                                        ; preds = %.lr.ph.i5.preheader, %264
  %i.03.i = phi i32 [ %266, %264 ], [ %253, %.lr.ph.i5.preheader ]
  %263 = icmp eq i32 %i.03.i, %257
  br i1 %263, label %271, label %264

; <label>:264                                     ; preds = %.lr.ph.i5
  %265 = add i32 %i.03.i, 1
  %266 = and i32 %265, %252
  %267 = zext i32 %266 to i64
  %268 = getelementptr inbounds %struct.MapStruct*, %struct.MapStruct** %259, i64 %267
  %269 = load %struct.MapStruct*, %struct.MapStruct** %268, align 8, !tbaa !4
  %270 = icmp eq %struct.MapStruct* %269, null
  br i1 %270, label %.loopexit.loopexit, label %.lr.ph.i5

; <label>:271                                     ; preds = %.lr.ph.i5
  call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5.563, i64 0, i64 0)) #6
  %272 = bitcast %struct.MapStruct* %m.0 to i8*
  call void @free(i8* %272) #6
  %273 = load i32, i32* @alloc_count, align 4, !tbaa !8
  %274 = add nsw i32 %273, -1
  store i32 %274, i32* @alloc_count, align 4, !tbaa !8
  br label %286

.loopexit.loopexit:                               ; preds = %264
  %.lcssa46 = phi %struct.MapStruct** [ %268, %264 ]
  %.lcssa = phi i32 [ %266, %264 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %.thread
  %.lcssa.i = phi %struct.MapStruct** [ %260, %.thread ], [ %.lcssa46, %.loopexit.loopexit ]
  %i.0.lcssa.i = phi i32 [ %253, %.thread ], [ %.lcssa, %.loopexit.loopexit ]
  store %struct.MapStruct* %m.0, %struct.MapStruct** %.lcssa.i, align 8, !tbaa !4
  %275 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.0, i64 0, i32 7
  store i32 %253, i32* %275, align 8, !tbaa !100
  %276 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.0, i64 0, i32 8
  store i32 %i.0.lcssa.i, i32* %276, align 4, !tbaa !127
  %277 = load i64, i64* bitcast (%struct.MapStruct** @maps to i64*), align 8, !tbaa !4
  %278 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.0, i64 0, i32 9
  %279 = bitcast %struct.MapStruct** %278 to i64*
  store i64 %277, i64* %279, align 8, !tbaa !126
  store %struct.MapStruct* %m.0, %struct.MapStruct** @maps, align 8, !tbaa !4
  %280 = load i32, i32* @map_count, align 4, !tbaa !8
  %281 = add nsw i32 %280, 1
  store i32 %281, i32* @map_count, align 4, !tbaa !8
  %282 = load i64, i64* @mapped_bytes, align 8, !tbaa !16
  %283 = add nsw i64 %282, %242
  store i64 %283, i64* @mapped_bytes, align 8, !tbaa !16
  %284 = getelementptr inbounds %struct.MapStruct, %struct.MapStruct* %m.0, i64 0, i32 6
  %285 = load i8*, i8** %284, align 8, !tbaa !106
  br label %286

; <label>:286                                     ; preds = %.critedge, %.loopexit, %271, %164, %151, %find_hash.exit, %check_hash_size.exit, %8
  %.1 = phi i8* [ null, %check_hash_size.exit ], [ %148, %find_hash.exit ], [ null, %151 ], [ null, %271 ], [ %285, %.loopexit ], [ null, %164 ], [ null, %8 ], [ null, %.critedge ]
  call void @llvm.lifetime.end(i64 144, i8* %1) #6
  ret i8* %.1
}

declare i32 @open(i8* nocapture readonly, i32, ...) #5

; Function Attrs: nounwind
declare i8* @mmap(i8*, i64, i32, i32, i32, i64) #2

declare i64 @writev(i32, %struct.iovec*, i32) #5

; Function Attrs: nounwind uwtable
define internal void @wakeup_connection(i8* %client_data.coerce, %struct.timeval* nocapture readnone %nowP) #8 {
  %1 = getelementptr inbounds i8, i8* %client_data.coerce, i64 96
  %2 = bitcast i8* %1 to %struct.TimerStruct**
  store %struct.TimerStruct* null, %struct.TimerStruct** %2, align 8, !tbaa !70
  %3 = bitcast i8* %client_data.coerce to i32*
  %4 = load i32, i32* %3, align 8, !tbaa !22
  %5 = icmp eq i32 %4, 3
  br i1 %5, label %6, label %fdwatch_add_fd.exit

; <label>:6                                       ; preds = %0
  store i32 2, i32* %3, align 8, !tbaa !22
  %7 = getelementptr inbounds i8, i8* %client_data.coerce, i64 8
  %8 = bitcast i8* %7 to %struct.httpd_conn**
  %9 = load %struct.httpd_conn*, %struct.httpd_conn** %8, align 8, !tbaa !25
  %10 = getelementptr inbounds %struct.httpd_conn, %struct.httpd_conn* %9, i64 0, i32 60
  %11 = load i32, i32* %10, align 8, !tbaa !38
  %12 = icmp sgt i32 %11, -1
  %13 = load i32, i32* @nfiles, align 4
  %14 = icmp sgt i32 %13, %11
  %or.cond.i = and i1 %12, %14
  br i1 %or.cond.i, label %15, label %21

; <label>:15                                      ; preds = %6
  %16 = sext i32 %11 to i64
  %17 = load i32*, i32** @fd_rw, align 8, !tbaa !4
  %18 = getelementptr inbounds i32, i32* %17, i64 %16
  %19 = load i32, i32* %18, align 4, !tbaa !8
  %20 = icmp eq i32 %19, -1
  br i1 %20, label %22, label %21

; <label>:21                                      ; preds = %15, %6
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.535, i64 0, i64 0), i32 %11) #6
  br label %fdwatch_add_fd.exit

; <label>:22                                      ; preds = %15
  %23 = load i32, i32* @npoll_fds, align 4, !tbaa !8
  %24 = icmp slt i32 %23, %13
  br i1 %24, label %26, label %25

; <label>:25                                      ; preds = %22
  tail call void (i32, i8*, ...) @syslog(i32 3, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5.536, i64 0, i64 0)) #6
  %.pre.i = load i32*, i32** @fd_rw, align 8, !tbaa !4
  br label %poll_add_fd.exit.i

; <label>:26                                      ; preds = %22
  %27 = sext i32 %23 to i64
  %28 = load %struct.pollfd*, %struct.pollfd** @pollfds, align 8, !tbaa !4
  %29 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %28, i64 %27, i32 0
  store i32 %11, i32* %29, align 4, !tbaa !28
  %30 = getelementptr inbounds %struct.pollfd, %struct.pollfd* %28, i64 %27, i32 1
  store i16 4, i16* %30, align 4, !tbaa !30
  %31 = load i32*, i32** @poll_fdidx, align 8, !tbaa !4
  %32 = getelementptr inbounds i32, i32* %31, i64 %16
  store i32 %23, i32* %32, align 4, !tbaa !8
  %33 = add nsw i32 %23, 1
  store i32 %33, i32* @npoll_fds, align 4, !tbaa !8
  br label %poll_add_fd.exit.i

poll_add_fd.exit.i:                               ; preds = %26, %25
  %34 = phi i32* [ %.pre.i, %25 ], [ %17, %26 ]
  %35 = getelementptr inbounds i32, i32* %34, i64 %16
  store i32 1, i32* %35, align 4, !tbaa !8
  %36 = load i8**, i8*** @fd_data, align 8, !tbaa !4
  %37 = getelementptr inbounds i8*, i8** %36, i64 %16
  store i8* %client_data.coerce, i8** %37, align 8, !tbaa !4
  br label %fdwatch_add_fd.exit

fdwatch_add_fd.exit:                              ; preds = %poll_add_fd.exit.i, %21, %0
  ret void
}

; Function Attrs: nounwind uwtable
define void @httpd_unlisten(%struct.httpd_server* nocapture %hs) #8 {
  %1 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 10
  %2 = bitcast i32* %1 to i64*
  %3 = load i64, i64* %2, align 8
  %4 = trunc i64 %3 to i32
  %5 = icmp eq i32 %4, -1
  br i1 %5, label %._crit_edge, label %8

._crit_edge:                                      ; preds = %0
  %6 = lshr i64 %3, 32
  %7 = trunc i64 %6 to i32
  %.pre1 = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 11
  br label %10

; <label>:8                                       ; preds = %0
  %9 = tail call i32 @close(i32 %4) #6
  store i32 -1, i32* %1, align 8, !tbaa !26
  %.phi.trans.insert = getelementptr inbounds %struct.httpd_server, %struct.httpd_server* %hs, i64 0, i32 11
  %.pre = load i32, i32* %.phi.trans.insert, align 4, !tbaa !31
  br label %10

; <label>:10                                      ; preds = %._crit_edge, %8
  %.pre-phi = phi i32* [ %.pre1, %._crit_edge ], [ %.phi.trans.insert, %8 ]
  %11 = phi i32 [ %7, %._crit_edge ], [ %.pre, %8 ]
  %12 = icmp eq i32 %11, -1
  br i1 %12, label %15, label %13

; <label>:13                                      ; preds = %10
  %14 = tail call i32 @close(i32 %11) #6
  store i32 -1, i32* %.pre-phi, align 4, !tbaa !31
  br label %15

; <label>:15                                      ; preds = %10, %13
  ret void
}

; Function Attrs: nounwind uwtable
define void @httpd_clear_ndelay(i32 %fd) #8 {
  %1 = tail call i32 (i32, i32, ...) @fcntl(i32 %fd, i32 3, i32 0) #6
  %2 = icmp eq i32 %1, -1
  br i1 %2, label %8, label %3

; <label>:3                                       ; preds = %0
  %4 = and i32 %1, -2049
  %5 = icmp eq i32 %4, %1
  br i1 %5, label %8, label %6

; <label>:6                                       ; preds = %3
  %7 = tail call i32 (i32, i32, ...) @fcntl(i32 %fd, i32 4, i32 %4) #6
  br label %8

; <label>:8                                       ; preds = %3, %0, %6
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @httpd_write_fully(i32 %fd, i8* nocapture readonly %buf, i64 %nbytes) #8 {
  br label %.outer

.outer:                                           ; preds = %._crit_edge, %0
  %nwritten.0.ph = phi i32 [ %nwritten.0., %._crit_edge ], [ 0, %0 ]
  %1 = sext i32 %nwritten.0.ph to i64
  %2 = icmp ult i64 %1, %nbytes
  br i1 %2, label %.lr.ph, label %.thread.loopexit17

.lr.ph:                                           ; preds = %.outer
  %3 = getelementptr inbounds i8, i8* %buf, i64 %1
  %4 = sub i64 %nbytes, %1
  %5 = tail call i64 @write(i32 %fd, i8* %3, i64 %4) #6
  %6 = trunc i64 %5 to i32
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %.lr.ph14.preheader, label %._crit_edge

.lr.ph14.preheader:                               ; preds = %.lr.ph
  %8 = tail call i32* @__errno_location() #21
  br label %.lr.ph14

.lr.ph14:                                         ; preds = %.lr.ph14.preheader, %.thread2
  %9 = phi i32 [ %13, %.thread2 ], [ %6, %.lr.ph14.preheader ]
  %10 = load i32, i32* %8, align 4, !tbaa !8
  switch i32 %10, label %.thread.loopexit [
    i32 4, label %.thread2
    i32 11, label %.thread2
  ]

.thread2:                                         ; preds = %.lr.ph14, %.lr.ph14
  %11 = tail call i32 @sleep(i32 1) #6
  %12 = tail call i64 @write(i32 %fd, i8* %3, i64 %4) #6
  %13 = trunc i64 %12 to i32
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %.lr.ph14, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.thread2
  %.lcssa23 = phi i32 [ %13, %.thread2 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.lr.ph
  %.lcssa = phi i32 [ %6, %.lr.ph ], [ %.lcssa23, %._crit_edge.loopexit ]
  %15 = icmp eq i32 %.lcssa, 0
  %nwritten.0. = add nsw i32 %.lcssa, %nwritten.0.ph
  br i1 %15, label %.thread.loopexit17, label %.outer

.thread.loopexit:                                 ; preds = %.lr.ph14
  %.lcssa21 = phi i32 [ %9, %.lr.ph14 ]
  br label %.thread

.thread.loopexit17:                               ; preds = %.outer, %._crit_edge
  %.2.ph = phi i32 [ %nwritten.0.ph, %.outer ], [ %nwritten.0., %._crit_edge ]
  br label %.thread

.thread:                                          ; preds = %.thread.loopexit17, %.thread.loopexit
  %.2 = phi i32 [ %.lcssa21, %.thread.loopexit ], [ %.2.ph, %.thread.loopexit17 ]
  ret i32 %.2
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @httpd_method_str(i32 %method) #15 {
  %switch.tableidx = add i32 %method, -1
  %1 = icmp ult i32 %switch.tableidx, 3
  br i1 %1, label %switch.lookup, label %3

switch.lookup:                                    ; preds = %0
  %2 = sext i32 %switch.tableidx to i64
  %switch.gep = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  ret i8* %switch.load

; <label>:3                                       ; preds = %0
  ret i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23.131, i64 0, i64 0)
}

; Function Attrs: nounwind uwtable
define i32 @httpd_read_fully(i32 %fd, i8* nocapture %buf, i64 %nbytes) #8 {
  br label %.outer

.outer:                                           ; preds = %._crit_edge, %0
  %nread.0.ph = phi i32 [ %nread.0., %._crit_edge ], [ 0, %0 ]
  %1 = sext i32 %nread.0.ph to i64
  %2 = icmp ult i64 %1, %nbytes
  br i1 %2, label %.lr.ph, label %.thread.loopexit17

.lr.ph:                                           ; preds = %.outer
  %3 = getelementptr inbounds i8, i8* %buf, i64 %1
  %4 = sub i64 %nbytes, %1
  %5 = tail call i64 @read(i32 %fd, i8* %3, i64 %4) #6
  %6 = trunc i64 %5 to i32
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %.lr.ph14.preheader, label %._crit_edge

.lr.ph14.preheader:                               ; preds = %.lr.ph
  %8 = tail call i32* @__errno_location() #21
  br label %.lr.ph14

.lr.ph14:                                         ; preds = %.lr.ph14.preheader, %.thread2
  %9 = phi i32 [ %13, %.thread2 ], [ %6, %.lr.ph14.preheader ]
  %10 = load i32, i32* %8, align 4, !tbaa !8
  switch i32 %10, label %.thread.loopexit [
    i32 4, label %.thread2
    i32 11, label %.thread2
  ]

.thread2:                                         ; preds = %.lr.ph14, %.lr.ph14
  %11 = tail call i32 @sleep(i32 1) #6
  %12 = tail call i64 @read(i32 %fd, i8* %3, i64 %4) #6
  %13 = trunc i64 %12 to i32
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %.lr.ph14, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.thread2
  %.lcssa23 = phi i32 [ %13, %.thread2 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.lr.ph
  %.lcssa = phi i32 [ %6, %.lr.ph ], [ %.lcssa23, %._crit_edge.loopexit ]
  %15 = icmp eq i32 %.lcssa, 0
  %nread.0. = add nsw i32 %.lcssa, %nread.0.ph
  br i1 %15, label %.thread.loopexit17, label %.outer

.thread.loopexit:                                 ; preds = %.lr.ph14
  %.lcssa21 = phi i32 [ %9, %.lr.ph14 ]
  br label %.thread

.thread.loopexit17:                               ; preds = %.outer, %._crit_edge
  %.2.ph = phi i32 [ %nread.0.ph, %.outer ], [ %nread.0., %._crit_edge ]
  br label %.thread

.thread:                                          ; preds = %.thread.loopexit17, %.thread.loopexit
  %.2 = phi i32 [ %.lcssa21, %.thread.loopexit ], [ %.2.ph, %.thread.loopexit17 ]
  ret i32 %.2
}

; Function Attrs: norecurse nounwind uwtable
define %struct.timeval* @tmr_timeout(%struct.timeval* nocapture readonly %nowP) #10 {
  %1 = getelementptr inbounds %struct.timeval, %struct.timeval* %nowP, i64 0, i32 0
  %2 = getelementptr inbounds %struct.timeval, %struct.timeval* %nowP, i64 0, i32 1
  br label %3

; <label>:3                                       ; preds = %22, %0
  %indvars.iv.i = phi i64 [ 0, %0 ], [ %indvars.iv.next.i, %22 ]
  %msecs.03.i = phi i64 [ 0, %0 ], [ %msecs.1.i, %22 ]
  %gotone.02.i = phi i32 [ 0, %0 ], [ %gotone.1.i, %22 ]
  %4 = getelementptr inbounds [67 x %struct.TimerStruct*], [67 x %struct.TimerStruct*]* @timers, i64 0, i64 %indvars.iv.i
  %5 = load %struct.TimerStruct*, %struct.TimerStruct** %4, align 8, !tbaa !4
  %6 = icmp eq %struct.TimerStruct* %5, null
  br i1 %6, label %22, label %7

; <label>:7                                       ; preds = %3
  %8 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %5, i64 0, i32 4, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !33
  %10 = load i64, i64* %1, align 8, !tbaa !45
  %11 = sub nsw i64 %9, %10
  %12 = mul nsw i64 %11, 1000
  %13 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %5, i64 0, i32 4, i32 1
  %14 = load i64, i64* %13, align 8, !tbaa !36
  %15 = load i64, i64* %2, align 8, !tbaa !149
  %16 = sub nsw i64 %14, %15
  %17 = sdiv i64 %16, 1000
  %18 = add nsw i64 %17, %12
  %19 = icmp eq i32 %gotone.02.i, 0
  br i1 %19, label %22, label %20

; <label>:20                                      ; preds = %7
  %21 = icmp slt i64 %18, %msecs.03.i
  %.msecs.0.i = select i1 %21, i64 %18, i64 %msecs.03.i
  br label %22

; <label>:22                                      ; preds = %20, %7, %3
  %gotone.1.i = phi i32 [ %gotone.02.i, %3 ], [ 1, %7 ], [ %gotone.02.i, %20 ]
  %msecs.1.i = phi i64 [ %msecs.03.i, %3 ], [ %18, %7 ], [ %.msecs.0.i, %20 ]
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.i = icmp eq i64 %indvars.iv.next.i, 67
  br i1 %exitcond.i, label %tmr_mstimeout.exit, label %3

tmr_mstimeout.exit:                               ; preds = %22
  %msecs.1.i.lcssa = phi i64 [ %msecs.1.i, %22 ]
  %gotone.1.i.lcssa = phi i32 [ %gotone.1.i, %22 ]
  %23 = icmp eq i32 %gotone.1.i.lcssa, 0
  %24 = icmp sgt i64 %msecs.1.i.lcssa, 0
  %.msecs.01.i = select i1 %24, i64 %msecs.1.i.lcssa, i64 0
  %25 = icmp eq i64 %.msecs.01.i, -1
  %26 = or i1 %23, %25
  br i1 %26, label %31, label %27

; <label>:27                                      ; preds = %tmr_mstimeout.exit
  %28 = sdiv i64 %.msecs.01.i, 1000
  store i64 %28, i64* getelementptr inbounds (%struct.timeval, %struct.timeval* @tmr_timeout.timeout, i64 0, i32 0), align 8, !tbaa !45
  %29 = srem i64 %.msecs.01.i, 1000
  %30 = mul nsw i64 %29, 1000
  store i64 %30, i64* getelementptr inbounds (%struct.timeval, %struct.timeval* @tmr_timeout.timeout, i64 0, i32 1), align 8, !tbaa !149
  br label %31

; <label>:31                                      ; preds = %tmr_mstimeout.exit, %27
  %.0 = phi %struct.timeval* [ @tmr_timeout.timeout, %27 ], [ null, %tmr_mstimeout.exit ]
  ret %struct.timeval* %.0
}

; Function Attrs: norecurse nounwind uwtable
define void @tmr_reset(%struct.timeval* nocapture readonly %nowP, %struct.TimerStruct* %t) #10 {
  %1 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t, i64 0, i32 4
  %2 = bitcast %struct.timeval* %1 to i8*
  %3 = bitcast %struct.timeval* %nowP to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 16, i32 8, i1 false), !tbaa.struct !143
  %4 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t, i64 0, i32 2
  %5 = load i64, i64* %4, align 8, !tbaa !141
  %6 = sdiv i64 %5, 1000
  %7 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i64 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !33
  %9 = add nsw i64 %8, %6
  store i64 %9, i64* %7, align 8, !tbaa !33
  %10 = srem i64 %5, 1000
  %11 = mul nsw i64 %10, 1000
  %12 = getelementptr inbounds %struct.TimerStruct, %struct.TimerStruct* %t, i64 0, i32 4, i32 1
  %13 = load i64, i64* %12, align 8, !tbaa !36
  %14 = add nsw i64 %13, %11
  store i64 %14, i64* %12, align 8, !tbaa !36
  %15 = icmp sgt i64 %14, 999999
  br i1 %15, label %16, label %20

; <label>:16                                      ; preds = %0
  %17 = sdiv i64 %14, 1000000
  %18 = add nsw i64 %17, %9
  store i64 %18, i64* %7, align 8, !tbaa !33
  %19 = srem i64 %14, 1000000
  store i64 %19, i64* %12, align 8, !tbaa !36
  br label %20

; <label>:20                                      ; preds = %16, %0
  tail call fastcc void @l_resort(%struct.TimerStruct* nonnull %t)
  ret void
}

; Function Attrs: alwaysinline nounwind readonly uwtable
define i64 @strlen2(i8* nocapture readonly %str) #16 {
  %1 = load i8, i8* %str, align 1
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %.thread, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds i8, i8* %str, i64 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %.thread, label %10

; <label>:7                                       ; preds = %202
  %8 = tail call i64 @strlen(i8* nonnull %203) #13
  %9 = add i64 %8, 50
  br label %.thread

.thread:                                          ; preds = %0, %3, %10, %14, %18, %22, %26, %30, %34, %38, %42, %46, %50, %54, %58, %62, %66, %70, %74, %78, %82, %86, %90, %94, %98, %102, %106, %110, %114, %118, %122, %126, %130, %134, %138, %142, %146, %150, %154, %158, %162, %166, %170, %174, %178, %182, %186, %190, %194, %198, %202, %7
  %.0 = phi i64 [ %9, %7 ], [ 50, %202 ], [ 0, %0 ], [ 1, %3 ], [ 2, %10 ], [ 3, %14 ], [ 4, %18 ], [ 5, %22 ], [ 6, %26 ], [ 7, %30 ], [ 8, %34 ], [ 9, %38 ], [ 10, %42 ], [ 11, %46 ], [ 12, %50 ], [ 13, %54 ], [ 14, %58 ], [ 15, %62 ], [ 16, %66 ], [ 17, %70 ], [ 18, %74 ], [ 19, %78 ], [ 20, %82 ], [ 21, %86 ], [ 22, %90 ], [ 23, %94 ], [ 24, %98 ], [ 25, %102 ], [ 26, %106 ], [ 27, %110 ], [ 28, %114 ], [ 29, %118 ], [ 30, %122 ], [ 31, %126 ], [ 32, %130 ], [ 33, %134 ], [ 34, %138 ], [ 35, %142 ], [ 36, %146 ], [ 37, %150 ], [ 38, %154 ], [ 39, %158 ], [ 40, %162 ], [ 41, %166 ], [ 42, %170 ], [ 43, %174 ], [ 44, %178 ], [ 45, %182 ], [ 46, %186 ], [ 47, %190 ], [ 48, %194 ], [ 49, %198 ]
  ret i64 %.0

; <label>:10                                      ; preds = %3
  %11 = getelementptr inbounds i8, i8* %str, i64 2
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %.thread, label %14

; <label>:14                                      ; preds = %10
  %15 = getelementptr inbounds i8, i8* %str, i64 3
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %.thread, label %18

; <label>:18                                      ; preds = %14
  %19 = getelementptr inbounds i8, i8* %str, i64 4
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %.thread, label %22

; <label>:22                                      ; preds = %18
  %23 = getelementptr inbounds i8, i8* %str, i64 5
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %.thread, label %26

; <label>:26                                      ; preds = %22
  %27 = getelementptr inbounds i8, i8* %str, i64 6
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %.thread, label %30

; <label>:30                                      ; preds = %26
  %31 = getelementptr inbounds i8, i8* %str, i64 7
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %.thread, label %34

; <label>:34                                      ; preds = %30
  %35 = getelementptr inbounds i8, i8* %str, i64 8
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %.thread, label %38

; <label>:38                                      ; preds = %34
  %39 = getelementptr inbounds i8, i8* %str, i64 9
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %.thread, label %42

; <label>:42                                      ; preds = %38
  %43 = getelementptr inbounds i8, i8* %str, i64 10
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %.thread, label %46

; <label>:46                                      ; preds = %42
  %47 = getelementptr inbounds i8, i8* %str, i64 11
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %.thread, label %50

; <label>:50                                      ; preds = %46
  %51 = getelementptr inbounds i8, i8* %str, i64 12
  %52 = load i8, i8* %51, align 1
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %.thread, label %54

; <label>:54                                      ; preds = %50
  %55 = getelementptr inbounds i8, i8* %str, i64 13
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %.thread, label %58

; <label>:58                                      ; preds = %54
  %59 = getelementptr inbounds i8, i8* %str, i64 14
  %60 = load i8, i8* %59, align 1
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %.thread, label %62

; <label>:62                                      ; preds = %58
  %63 = getelementptr inbounds i8, i8* %str, i64 15
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %.thread, label %66

; <label>:66                                      ; preds = %62
  %67 = getelementptr inbounds i8, i8* %str, i64 16
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %.thread, label %70

; <label>:70                                      ; preds = %66
  %71 = getelementptr inbounds i8, i8* %str, i64 17
  %72 = load i8, i8* %71, align 1
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %.thread, label %74

; <label>:74                                      ; preds = %70
  %75 = getelementptr inbounds i8, i8* %str, i64 18
  %76 = load i8, i8* %75, align 1
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %.thread, label %78

; <label>:78                                      ; preds = %74
  %79 = getelementptr inbounds i8, i8* %str, i64 19
  %80 = load i8, i8* %79, align 1
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %.thread, label %82

; <label>:82                                      ; preds = %78
  %83 = getelementptr inbounds i8, i8* %str, i64 20
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %.thread, label %86

; <label>:86                                      ; preds = %82
  %87 = getelementptr inbounds i8, i8* %str, i64 21
  %88 = load i8, i8* %87, align 1
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %.thread, label %90

; <label>:90                                      ; preds = %86
  %91 = getelementptr inbounds i8, i8* %str, i64 22
  %92 = load i8, i8* %91, align 1
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %.thread, label %94

; <label>:94                                      ; preds = %90
  %95 = getelementptr inbounds i8, i8* %str, i64 23
  %96 = load i8, i8* %95, align 1
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %.thread, label %98

; <label>:98                                      ; preds = %94
  %99 = getelementptr inbounds i8, i8* %str, i64 24
  %100 = load i8, i8* %99, align 1
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %.thread, label %102

; <label>:102                                     ; preds = %98
  %103 = getelementptr inbounds i8, i8* %str, i64 25
  %104 = load i8, i8* %103, align 1
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %.thread, label %106

; <label>:106                                     ; preds = %102
  %107 = getelementptr inbounds i8, i8* %str, i64 26
  %108 = load i8, i8* %107, align 1
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %.thread, label %110

; <label>:110                                     ; preds = %106
  %111 = getelementptr inbounds i8, i8* %str, i64 27
  %112 = load i8, i8* %111, align 1
  %113 = icmp eq i8 %112, 0
  br i1 %113, label %.thread, label %114

; <label>:114                                     ; preds = %110
  %115 = getelementptr inbounds i8, i8* %str, i64 28
  %116 = load i8, i8* %115, align 1
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %.thread, label %118

; <label>:118                                     ; preds = %114
  %119 = getelementptr inbounds i8, i8* %str, i64 29
  %120 = load i8, i8* %119, align 1
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %.thread, label %122

; <label>:122                                     ; preds = %118
  %123 = getelementptr inbounds i8, i8* %str, i64 30
  %124 = load i8, i8* %123, align 1
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %.thread, label %126

; <label>:126                                     ; preds = %122
  %127 = getelementptr inbounds i8, i8* %str, i64 31
  %128 = load i8, i8* %127, align 1
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %.thread, label %130

; <label>:130                                     ; preds = %126
  %131 = getelementptr inbounds i8, i8* %str, i64 32
  %132 = load i8, i8* %131, align 1
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %.thread, label %134

; <label>:134                                     ; preds = %130
  %135 = getelementptr inbounds i8, i8* %str, i64 33
  %136 = load i8, i8* %135, align 1
  %137 = icmp eq i8 %136, 0
  br i1 %137, label %.thread, label %138

; <label>:138                                     ; preds = %134
  %139 = getelementptr inbounds i8, i8* %str, i64 34
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %.thread, label %142

; <label>:142                                     ; preds = %138
  %143 = getelementptr inbounds i8, i8* %str, i64 35
  %144 = load i8, i8* %143, align 1
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %.thread, label %146

; <label>:146                                     ; preds = %142
  %147 = getelementptr inbounds i8, i8* %str, i64 36
  %148 = load i8, i8* %147, align 1
  %149 = icmp eq i8 %148, 0
  br i1 %149, label %.thread, label %150

; <label>:150                                     ; preds = %146
  %151 = getelementptr inbounds i8, i8* %str, i64 37
  %152 = load i8, i8* %151, align 1
  %153 = icmp eq i8 %152, 0
  br i1 %153, label %.thread, label %154

; <label>:154                                     ; preds = %150
  %155 = getelementptr inbounds i8, i8* %str, i64 38
  %156 = load i8, i8* %155, align 1
  %157 = icmp eq i8 %156, 0
  br i1 %157, label %.thread, label %158

; <label>:158                                     ; preds = %154
  %159 = getelementptr inbounds i8, i8* %str, i64 39
  %160 = load i8, i8* %159, align 1
  %161 = icmp eq i8 %160, 0
  br i1 %161, label %.thread, label %162

; <label>:162                                     ; preds = %158
  %163 = getelementptr inbounds i8, i8* %str, i64 40
  %164 = load i8, i8* %163, align 1
  %165 = icmp eq i8 %164, 0
  br i1 %165, label %.thread, label %166

; <label>:166                                     ; preds = %162
  %167 = getelementptr inbounds i8, i8* %str, i64 41
  %168 = load i8, i8* %167, align 1
  %169 = icmp eq i8 %168, 0
  br i1 %169, label %.thread, label %170

; <label>:170                                     ; preds = %166
  %171 = getelementptr inbounds i8, i8* %str, i64 42
  %172 = load i8, i8* %171, align 1
  %173 = icmp eq i8 %172, 0
  br i1 %173, label %.thread, label %174

; <label>:174                                     ; preds = %170
  %175 = getelementptr inbounds i8, i8* %str, i64 43
  %176 = load i8, i8* %175, align 1
  %177 = icmp eq i8 %176, 0
  br i1 %177, label %.thread, label %178

; <label>:178                                     ; preds = %174
  %179 = getelementptr inbounds i8, i8* %str, i64 44
  %180 = load i8, i8* %179, align 1
  %181 = icmp eq i8 %180, 0
  br i1 %181, label %.thread, label %182

; <label>:182                                     ; preds = %178
  %183 = getelementptr inbounds i8, i8* %str, i64 45
  %184 = load i8, i8* %183, align 1
  %185 = icmp eq i8 %184, 0
  br i1 %185, label %.thread, label %186

; <label>:186                                     ; preds = %182
  %187 = getelementptr inbounds i8, i8* %str, i64 46
  %188 = load i8, i8* %187, align 1
  %189 = icmp eq i8 %188, 0
  br i1 %189, label %.thread, label %190

; <label>:190                                     ; preds = %186
  %191 = getelementptr inbounds i8, i8* %str, i64 47
  %192 = load i8, i8* %191, align 1
  %193 = icmp eq i8 %192, 0
  br i1 %193, label %.thread, label %194

; <label>:194                                     ; preds = %190
  %195 = getelementptr inbounds i8, i8* %str, i64 48
  %196 = load i8, i8* %195, align 1
  %197 = icmp eq i8 %196, 0
  br i1 %197, label %.thread, label %198

; <label>:198                                     ; preds = %194
  %199 = getelementptr inbounds i8, i8* %str, i64 49
  %200 = load i8, i8* %199, align 1
  %201 = icmp eq i8 %200, 0
  br i1 %201, label %.thread, label %202

; <label>:202                                     ; preds = %198
  %203 = getelementptr inbounds i8, i8* %str, i64 50
  %204 = load i8, i8* %203, align 1
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %.thread, label %7
}

; Function Attrs: alwaysinline norecurse nounwind readonly uwtable
define i32 @strncmp2(i8* nocapture readonly %s1, i8* nocapture readonly %s2, i64 %n) #17 {
  %1 = trunc i64 %n to i32
  %2 = icmp sgt i32 %1, 0
  br i1 %2, label %.lr.ph.preheader, label %.loopexit

.lr.ph.preheader:                                 ; preds = %0
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %10
  %i.06 = phi i32 [ %13, %10 ], [ %1, %.lr.ph.preheader ]
  %.015 = phi i8* [ %11, %10 ], [ %s2, %.lr.ph.preheader ]
  %.024 = phi i8* [ %12, %10 ], [ %s1, %.lr.ph.preheader ]
  %3 = load i8, i8* %.024, align 1
  %4 = load i8, i8* %.015, align 1
  %5 = icmp eq i8 %3, %4
  br i1 %5, label %10, label %6

; <label>:6                                       ; preds = %.lr.ph
  %.lcssa17 = phi i8 [ %4, %.lr.ph ]
  %.lcssa = phi i8 [ %3, %.lr.ph ]
  %7 = zext i8 %.lcssa to i32
  %8 = zext i8 %.lcssa17 to i32
  %9 = sub nsw i32 %7, %8
  br label %.loopexit

; <label>:10                                      ; preds = %.lr.ph
  %11 = getelementptr inbounds i8, i8* %.015, i64 1
  %12 = getelementptr inbounds i8, i8* %.024, i64 1
  %13 = add nsw i32 %i.06, -1
  %14 = icmp sgt i32 %i.06, 1
  br i1 %14, label %.lr.ph, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %10
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %0, %6
  %.0 = phi i32 [ %9, %6 ], [ 0, %0 ], [ 0, %.loopexit.loopexit ]
  ret i32 %.0
}

; Function Attrs: alwaysinline nounwind readonly uwtable
define i32 @strcmp2(i8* nocapture readonly %s1, i8* nocapture readonly %s2) #16 {
  %1 = load i8, i8* %s2, align 1
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %._crit_edge, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds i8, i8* %s2, i64 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %.lr.ph.preheader, label %25

strlen2.exit:                                     ; preds = %217
  %7 = tail call i64 @strlen(i8* nonnull %218) #13
  %8 = add i64 %7, 50
  %phitmp = trunc i64 %8 to i32
  %9 = icmp sgt i32 %phitmp, 0
  br i1 %9, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %213, %209, %205, %201, %197, %193, %189, %185, %181, %177, %173, %169, %165, %161, %157, %153, %149, %145, %141, %137, %133, %129, %125, %121, %117, %113, %109, %105, %101, %97, %93, %89, %85, %81, %77, %73, %69, %65, %61, %57, %53, %49, %45, %41, %37, %33, %29, %25, %3, %217, %strlen2.exit
  %.01 = phi i32 [ %phitmp, %strlen2.exit ], [ 49, %213 ], [ 48, %209 ], [ 47, %205 ], [ 46, %201 ], [ 45, %197 ], [ 44, %193 ], [ 43, %189 ], [ 42, %185 ], [ 41, %181 ], [ 40, %177 ], [ 39, %173 ], [ 38, %169 ], [ 37, %165 ], [ 36, %161 ], [ 35, %157 ], [ 34, %153 ], [ 33, %149 ], [ 32, %145 ], [ 31, %141 ], [ 30, %137 ], [ 29, %133 ], [ 28, %129 ], [ 27, %125 ], [ 26, %121 ], [ 25, %117 ], [ 24, %113 ], [ 23, %109 ], [ 22, %105 ], [ 21, %101 ], [ 20, %97 ], [ 19, %93 ], [ 18, %89 ], [ 17, %85 ], [ 16, %81 ], [ 15, %77 ], [ 14, %73 ], [ 13, %69 ], [ 12, %65 ], [ 11, %61 ], [ 10, %57 ], [ 9, %53 ], [ 8, %49 ], [ 7, %45 ], [ 6, %41 ], [ 5, %37 ], [ 4, %33 ], [ 3, %29 ], [ 2, %25 ], [ 1, %3 ], [ 50, %217 ]
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %15
  %i.09 = phi i32 [ %18, %15 ], [ 0, %.lr.ph.preheader ]
  %.018 = phi i8* [ %17, %15 ], [ %s2, %.lr.ph.preheader ]
  %.027 = phi i8* [ %16, %15 ], [ %s1, %.lr.ph.preheader ]
  %10 = load i8, i8* %.027, align 1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %._crit_edge.loopexit, label %12

; <label>:12                                      ; preds = %.lr.ph
  %13 = load i8, i8* %.018, align 1
  %14 = icmp eq i8 %10, %13
  br i1 %14, label %15, label %._crit_edge.loopexit

; <label>:15                                      ; preds = %12
  %16 = getelementptr inbounds i8, i8* %.027, i64 1
  %17 = getelementptr inbounds i8, i8* %.018, i64 1
  %18 = add nuw nsw i32 %i.09, 1
  %19 = icmp slt i32 %18, %.01
  br i1 %19, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph, %12, %15
  %.01.lcssa.ph = phi i8* [ %17, %15 ], [ %.018, %12 ], [ %.018, %.lr.ph ]
  %.02.lcssa.ph = phi i8* [ %16, %15 ], [ %.027, %12 ], [ %.027, %.lr.ph ]
  %.pre = load i8, i8* %.01.lcssa.ph, align 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %0, %._crit_edge.loopexit, %strlen2.exit
  %20 = phi i8 [ %1, %strlen2.exit ], [ %.pre, %._crit_edge.loopexit ], [ 0, %0 ]
  %.02.lcssa = phi i8* [ %s1, %strlen2.exit ], [ %.02.lcssa.ph, %._crit_edge.loopexit ], [ %s1, %0 ]
  %21 = load i8, i8* %.02.lcssa, align 1
  %22 = zext i8 %21 to i32
  %23 = zext i8 %20 to i32
  %24 = sub nsw i32 %22, %23
  ret i32 %24

; <label>:25                                      ; preds = %3
  %26 = getelementptr inbounds i8, i8* %s2, i64 2
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %.lr.ph.preheader, label %29

; <label>:29                                      ; preds = %25
  %30 = getelementptr inbounds i8, i8* %s2, i64 3
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %.lr.ph.preheader, label %33

; <label>:33                                      ; preds = %29
  %34 = getelementptr inbounds i8, i8* %s2, i64 4
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %.lr.ph.preheader, label %37

; <label>:37                                      ; preds = %33
  %38 = getelementptr inbounds i8, i8* %s2, i64 5
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %.lr.ph.preheader, label %41

; <label>:41                                      ; preds = %37
  %42 = getelementptr inbounds i8, i8* %s2, i64 6
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %.lr.ph.preheader, label %45

; <label>:45                                      ; preds = %41
  %46 = getelementptr inbounds i8, i8* %s2, i64 7
  %47 = load i8, i8* %46, align 1
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %.lr.ph.preheader, label %49

; <label>:49                                      ; preds = %45
  %50 = getelementptr inbounds i8, i8* %s2, i64 8
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %.lr.ph.preheader, label %53

; <label>:53                                      ; preds = %49
  %54 = getelementptr inbounds i8, i8* %s2, i64 9
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %.lr.ph.preheader, label %57

; <label>:57                                      ; preds = %53
  %58 = getelementptr inbounds i8, i8* %s2, i64 10
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %.lr.ph.preheader, label %61

; <label>:61                                      ; preds = %57
  %62 = getelementptr inbounds i8, i8* %s2, i64 11
  %63 = load i8, i8* %62, align 1
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %.lr.ph.preheader, label %65

; <label>:65                                      ; preds = %61
  %66 = getelementptr inbounds i8, i8* %s2, i64 12
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %.lr.ph.preheader, label %69

; <label>:69                                      ; preds = %65
  %70 = getelementptr inbounds i8, i8* %s2, i64 13
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %.lr.ph.preheader, label %73

; <label>:73                                      ; preds = %69
  %74 = getelementptr inbounds i8, i8* %s2, i64 14
  %75 = load i8, i8* %74, align 1
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %.lr.ph.preheader, label %77

; <label>:77                                      ; preds = %73
  %78 = getelementptr inbounds i8, i8* %s2, i64 15
  %79 = load i8, i8* %78, align 1
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %.lr.ph.preheader, label %81

; <label>:81                                      ; preds = %77
  %82 = getelementptr inbounds i8, i8* %s2, i64 16
  %83 = load i8, i8* %82, align 1
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %.lr.ph.preheader, label %85

; <label>:85                                      ; preds = %81
  %86 = getelementptr inbounds i8, i8* %s2, i64 17
  %87 = load i8, i8* %86, align 1
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %.lr.ph.preheader, label %89

; <label>:89                                      ; preds = %85
  %90 = getelementptr inbounds i8, i8* %s2, i64 18
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %.lr.ph.preheader, label %93

; <label>:93                                      ; preds = %89
  %94 = getelementptr inbounds i8, i8* %s2, i64 19
  %95 = load i8, i8* %94, align 1
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %.lr.ph.preheader, label %97

; <label>:97                                      ; preds = %93
  %98 = getelementptr inbounds i8, i8* %s2, i64 20
  %99 = load i8, i8* %98, align 1
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %.lr.ph.preheader, label %101

; <label>:101                                     ; preds = %97
  %102 = getelementptr inbounds i8, i8* %s2, i64 21
  %103 = load i8, i8* %102, align 1
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %.lr.ph.preheader, label %105

; <label>:105                                     ; preds = %101
  %106 = getelementptr inbounds i8, i8* %s2, i64 22
  %107 = load i8, i8* %106, align 1
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %.lr.ph.preheader, label %109

; <label>:109                                     ; preds = %105
  %110 = getelementptr inbounds i8, i8* %s2, i64 23
  %111 = load i8, i8* %110, align 1
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %.lr.ph.preheader, label %113

; <label>:113                                     ; preds = %109
  %114 = getelementptr inbounds i8, i8* %s2, i64 24
  %115 = load i8, i8* %114, align 1
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %.lr.ph.preheader, label %117

; <label>:117                                     ; preds = %113
  %118 = getelementptr inbounds i8, i8* %s2, i64 25
  %119 = load i8, i8* %118, align 1
  %120 = icmp eq i8 %119, 0
  br i1 %120, label %.lr.ph.preheader, label %121

; <label>:121                                     ; preds = %117
  %122 = getelementptr inbounds i8, i8* %s2, i64 26
  %123 = load i8, i8* %122, align 1
  %124 = icmp eq i8 %123, 0
  br i1 %124, label %.lr.ph.preheader, label %125

; <label>:125                                     ; preds = %121
  %126 = getelementptr inbounds i8, i8* %s2, i64 27
  %127 = load i8, i8* %126, align 1
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %.lr.ph.preheader, label %129

; <label>:129                                     ; preds = %125
  %130 = getelementptr inbounds i8, i8* %s2, i64 28
  %131 = load i8, i8* %130, align 1
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %.lr.ph.preheader, label %133

; <label>:133                                     ; preds = %129
  %134 = getelementptr inbounds i8, i8* %s2, i64 29
  %135 = load i8, i8* %134, align 1
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %.lr.ph.preheader, label %137

; <label>:137                                     ; preds = %133
  %138 = getelementptr inbounds i8, i8* %s2, i64 30
  %139 = load i8, i8* %138, align 1
  %140 = icmp eq i8 %139, 0
  br i1 %140, label %.lr.ph.preheader, label %141

; <label>:141                                     ; preds = %137
  %142 = getelementptr inbounds i8, i8* %s2, i64 31
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 0
  br i1 %144, label %.lr.ph.preheader, label %145

; <label>:145                                     ; preds = %141
  %146 = getelementptr inbounds i8, i8* %s2, i64 32
  %147 = load i8, i8* %146, align 1
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %.lr.ph.preheader, label %149

; <label>:149                                     ; preds = %145
  %150 = getelementptr inbounds i8, i8* %s2, i64 33
  %151 = load i8, i8* %150, align 1
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %.lr.ph.preheader, label %153

; <label>:153                                     ; preds = %149
  %154 = getelementptr inbounds i8, i8* %s2, i64 34
  %155 = load i8, i8* %154, align 1
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %.lr.ph.preheader, label %157

; <label>:157                                     ; preds = %153
  %158 = getelementptr inbounds i8, i8* %s2, i64 35
  %159 = load i8, i8* %158, align 1
  %160 = icmp eq i8 %159, 0
  br i1 %160, label %.lr.ph.preheader, label %161

; <label>:161                                     ; preds = %157
  %162 = getelementptr inbounds i8, i8* %s2, i64 36
  %163 = load i8, i8* %162, align 1
  %164 = icmp eq i8 %163, 0
  br i1 %164, label %.lr.ph.preheader, label %165

; <label>:165                                     ; preds = %161
  %166 = getelementptr inbounds i8, i8* %s2, i64 37
  %167 = load i8, i8* %166, align 1
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %.lr.ph.preheader, label %169

; <label>:169                                     ; preds = %165
  %170 = getelementptr inbounds i8, i8* %s2, i64 38
  %171 = load i8, i8* %170, align 1
  %172 = icmp eq i8 %171, 0
  br i1 %172, label %.lr.ph.preheader, label %173

; <label>:173                                     ; preds = %169
  %174 = getelementptr inbounds i8, i8* %s2, i64 39
  %175 = load i8, i8* %174, align 1
  %176 = icmp eq i8 %175, 0
  br i1 %176, label %.lr.ph.preheader, label %177

; <label>:177                                     ; preds = %173
  %178 = getelementptr inbounds i8, i8* %s2, i64 40
  %179 = load i8, i8* %178, align 1
  %180 = icmp eq i8 %179, 0
  br i1 %180, label %.lr.ph.preheader, label %181

; <label>:181                                     ; preds = %177
  %182 = getelementptr inbounds i8, i8* %s2, i64 41
  %183 = load i8, i8* %182, align 1
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %.lr.ph.preheader, label %185

; <label>:185                                     ; preds = %181
  %186 = getelementptr inbounds i8, i8* %s2, i64 42
  %187 = load i8, i8* %186, align 1
  %188 = icmp eq i8 %187, 0
  br i1 %188, label %.lr.ph.preheader, label %189

; <label>:189                                     ; preds = %185
  %190 = getelementptr inbounds i8, i8* %s2, i64 43
  %191 = load i8, i8* %190, align 1
  %192 = icmp eq i8 %191, 0
  br i1 %192, label %.lr.ph.preheader, label %193

; <label>:193                                     ; preds = %189
  %194 = getelementptr inbounds i8, i8* %s2, i64 44
  %195 = load i8, i8* %194, align 1
  %196 = icmp eq i8 %195, 0
  br i1 %196, label %.lr.ph.preheader, label %197

; <label>:197                                     ; preds = %193
  %198 = getelementptr inbounds i8, i8* %s2, i64 45
  %199 = load i8, i8* %198, align 1
  %200 = icmp eq i8 %199, 0
  br i1 %200, label %.lr.ph.preheader, label %201

; <label>:201                                     ; preds = %197
  %202 = getelementptr inbounds i8, i8* %s2, i64 46
  %203 = load i8, i8* %202, align 1
  %204 = icmp eq i8 %203, 0
  br i1 %204, label %.lr.ph.preheader, label %205

; <label>:205                                     ; preds = %201
  %206 = getelementptr inbounds i8, i8* %s2, i64 47
  %207 = load i8, i8* %206, align 1
  %208 = icmp eq i8 %207, 0
  br i1 %208, label %.lr.ph.preheader, label %209

; <label>:209                                     ; preds = %205
  %210 = getelementptr inbounds i8, i8* %s2, i64 48
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 0
  br i1 %212, label %.lr.ph.preheader, label %213

; <label>:213                                     ; preds = %209
  %214 = getelementptr inbounds i8, i8* %s2, i64 49
  %215 = load i8, i8* %214, align 1
  %216 = icmp eq i8 %215, 0
  br i1 %216, label %.lr.ph.preheader, label %217

; <label>:217                                     ; preds = %213
  %218 = getelementptr inbounds i8, i8* %s2, i64 50
  %219 = load i8, i8* %218, align 1
  %220 = icmp eq i8 %219, 0
  br i1 %220, label %.lr.ph.preheader, label %strlen2.exit
}

; Function Attrs: alwaysinline nounwind readonly uwtable
define i8* @strchr2(i8* readonly %source, i8 signext %character) #16 {
  %1 = load i8, i8* %source, align 1
  %2 = icmp eq i8 %1, 0
  %3 = icmp eq i8 %1, %character
  %or.cond = or i1 %2, %3
  br i1 %or.cond, label %9, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds i8, i8* %source, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = icmp eq i8 %6, %character
  %or.cond.1 = or i1 %7, %8
  br i1 %or.cond.1, label %9, label %15

; <label>:9                                       ; preds = %250, %245, %240, %235, %230, %225, %220, %215, %210, %205, %200, %195, %190, %185, %180, %175, %170, %165, %160, %155, %150, %145, %140, %135, %130, %125, %120, %115, %110, %105, %100, %95, %90, %85, %80, %75, %70, %65, %60, %55, %50, %45, %40, %35, %30, %25, %20, %15, %4, %0
  %.lcssa4 = phi i1 [ %3, %0 ], [ %8, %4 ], [ %19, %15 ], [ %24, %20 ], [ %29, %25 ], [ %34, %30 ], [ %39, %35 ], [ %44, %40 ], [ %49, %45 ], [ %54, %50 ], [ %59, %55 ], [ %64, %60 ], [ %69, %65 ], [ %74, %70 ], [ %79, %75 ], [ %84, %80 ], [ %89, %85 ], [ %94, %90 ], [ %99, %95 ], [ %104, %100 ], [ %109, %105 ], [ %114, %110 ], [ %119, %115 ], [ %124, %120 ], [ %129, %125 ], [ %134, %130 ], [ %139, %135 ], [ %144, %140 ], [ %149, %145 ], [ %154, %150 ], [ %159, %155 ], [ %164, %160 ], [ %169, %165 ], [ %174, %170 ], [ %179, %175 ], [ %184, %180 ], [ %189, %185 ], [ %194, %190 ], [ %199, %195 ], [ %204, %200 ], [ %209, %205 ], [ %214, %210 ], [ %219, %215 ], [ %224, %220 ], [ %229, %225 ], [ %234, %230 ], [ %239, %235 ], [ %244, %240 ], [ %249, %245 ], [ %254, %250 ]
  %.lcssa = phi i1 [ %2, %0 ], [ %7, %4 ], [ %18, %15 ], [ %23, %20 ], [ %28, %25 ], [ %33, %30 ], [ %38, %35 ], [ %43, %40 ], [ %48, %45 ], [ %53, %50 ], [ %58, %55 ], [ %63, %60 ], [ %68, %65 ], [ %73, %70 ], [ %78, %75 ], [ %83, %80 ], [ %88, %85 ], [ %93, %90 ], [ %98, %95 ], [ %103, %100 ], [ %108, %105 ], [ %113, %110 ], [ %118, %115 ], [ %123, %120 ], [ %128, %125 ], [ %133, %130 ], [ %138, %135 ], [ %143, %140 ], [ %148, %145 ], [ %153, %150 ], [ %158, %155 ], [ %163, %160 ], [ %168, %165 ], [ %173, %170 ], [ %178, %175 ], [ %183, %180 ], [ %188, %185 ], [ %193, %190 ], [ %198, %195 ], [ %203, %200 ], [ %208, %205 ], [ %213, %210 ], [ %218, %215 ], [ %223, %220 ], [ %228, %225 ], [ %233, %230 ], [ %238, %235 ], [ %243, %240 ], [ %248, %245 ], [ %253, %250 ]
  %i.0.lcssa = phi i64 [ 0, %0 ], [ 1, %4 ], [ 2, %15 ], [ 3, %20 ], [ 4, %25 ], [ 5, %30 ], [ 6, %35 ], [ 7, %40 ], [ 8, %45 ], [ 9, %50 ], [ 10, %55 ], [ 11, %60 ], [ 12, %65 ], [ 13, %70 ], [ 14, %75 ], [ 15, %80 ], [ 16, %85 ], [ 17, %90 ], [ 18, %95 ], [ 19, %100 ], [ 20, %105 ], [ 21, %110 ], [ 22, %115 ], [ 23, %120 ], [ 24, %125 ], [ 25, %130 ], [ 26, %135 ], [ 27, %140 ], [ 28, %145 ], [ 29, %150 ], [ 30, %155 ], [ 31, %160 ], [ 32, %165 ], [ 33, %170 ], [ 34, %175 ], [ 35, %180 ], [ 36, %185 ], [ 37, %190 ], [ 38, %195 ], [ 39, %200 ], [ 40, %205 ], [ 41, %210 ], [ 42, %215 ], [ 43, %220 ], [ 44, %225 ], [ 45, %230 ], [ 46, %235 ], [ 47, %240 ], [ 48, %245 ], [ %phitmp, %250 ]
  %10 = getelementptr inbounds i8, i8* %source, i64 %i.0.lcssa
  %brmerge = or i1 %.lcssa4, %.lcssa
  %.mux = select i1 %.lcssa, i8* null, i8* %10
  br i1 %brmerge, label %14, label %11

; <label>:11                                      ; preds = %9
  %12 = sext i8 %character to i32
  %13 = tail call i8* @strchr(i8* %10, i32 %12) #13
  br label %14

; <label>:14                                      ; preds = %9, %11
  %.0 = phi i8* [ %13, %11 ], [ %.mux, %9 ]
  ret i8* %.0

; <label>:15                                      ; preds = %4
  %16 = getelementptr inbounds i8, i8* %source, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 0
  %19 = icmp eq i8 %17, %character
  %or.cond.11 = or i1 %18, %19
  br i1 %or.cond.11, label %9, label %20

; <label>:20                                      ; preds = %15
  %21 = getelementptr inbounds i8, i8* %source, i64 3
  %22 = load i8, i8* %21, align 1
  %23 = icmp eq i8 %22, 0
  %24 = icmp eq i8 %22, %character
  %or.cond.1.1 = or i1 %23, %24
  br i1 %or.cond.1.1, label %9, label %25

; <label>:25                                      ; preds = %20
  %26 = getelementptr inbounds i8, i8* %source, i64 4
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 0
  %29 = icmp eq i8 %27, %character
  %or.cond.2 = or i1 %28, %29
  br i1 %or.cond.2, label %9, label %30

; <label>:30                                      ; preds = %25
  %31 = getelementptr inbounds i8, i8* %source, i64 5
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 0
  %34 = icmp eq i8 %32, %character
  %or.cond.1.2 = or i1 %33, %34
  br i1 %or.cond.1.2, label %9, label %35

; <label>:35                                      ; preds = %30
  %36 = getelementptr inbounds i8, i8* %source, i64 6
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, 0
  %39 = icmp eq i8 %37, %character
  %or.cond.3 = or i1 %38, %39
  br i1 %or.cond.3, label %9, label %40

; <label>:40                                      ; preds = %35
  %41 = getelementptr inbounds i8, i8* %source, i64 7
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 0
  %44 = icmp eq i8 %42, %character
  %or.cond.1.3 = or i1 %43, %44
  br i1 %or.cond.1.3, label %9, label %45

; <label>:45                                      ; preds = %40
  %46 = getelementptr inbounds i8, i8* %source, i64 8
  %47 = load i8, i8* %46, align 1
  %48 = icmp eq i8 %47, 0
  %49 = icmp eq i8 %47, %character
  %or.cond.4 = or i1 %48, %49
  br i1 %or.cond.4, label %9, label %50

; <label>:50                                      ; preds = %45
  %51 = getelementptr inbounds i8, i8* %source, i64 9
  %52 = load i8, i8* %51, align 1
  %53 = icmp eq i8 %52, 0
  %54 = icmp eq i8 %52, %character
  %or.cond.1.4 = or i1 %53, %54
  br i1 %or.cond.1.4, label %9, label %55

; <label>:55                                      ; preds = %50
  %56 = getelementptr inbounds i8, i8* %source, i64 10
  %57 = load i8, i8* %56, align 1
  %58 = icmp eq i8 %57, 0
  %59 = icmp eq i8 %57, %character
  %or.cond.5 = or i1 %58, %59
  br i1 %or.cond.5, label %9, label %60

; <label>:60                                      ; preds = %55
  %61 = getelementptr inbounds i8, i8* %source, i64 11
  %62 = load i8, i8* %61, align 1
  %63 = icmp eq i8 %62, 0
  %64 = icmp eq i8 %62, %character
  %or.cond.1.5 = or i1 %63, %64
  br i1 %or.cond.1.5, label %9, label %65

; <label>:65                                      ; preds = %60
  %66 = getelementptr inbounds i8, i8* %source, i64 12
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 0
  %69 = icmp eq i8 %67, %character
  %or.cond.6 = or i1 %68, %69
  br i1 %or.cond.6, label %9, label %70

; <label>:70                                      ; preds = %65
  %71 = getelementptr inbounds i8, i8* %source, i64 13
  %72 = load i8, i8* %71, align 1
  %73 = icmp eq i8 %72, 0
  %74 = icmp eq i8 %72, %character
  %or.cond.1.6 = or i1 %73, %74
  br i1 %or.cond.1.6, label %9, label %75

; <label>:75                                      ; preds = %70
  %76 = getelementptr inbounds i8, i8* %source, i64 14
  %77 = load i8, i8* %76, align 1
  %78 = icmp eq i8 %77, 0
  %79 = icmp eq i8 %77, %character
  %or.cond.7 = or i1 %78, %79
  br i1 %or.cond.7, label %9, label %80

; <label>:80                                      ; preds = %75
  %81 = getelementptr inbounds i8, i8* %source, i64 15
  %82 = load i8, i8* %81, align 1
  %83 = icmp eq i8 %82, 0
  %84 = icmp eq i8 %82, %character
  %or.cond.1.7 = or i1 %83, %84
  br i1 %or.cond.1.7, label %9, label %85

; <label>:85                                      ; preds = %80
  %86 = getelementptr inbounds i8, i8* %source, i64 16
  %87 = load i8, i8* %86, align 1
  %88 = icmp eq i8 %87, 0
  %89 = icmp eq i8 %87, %character
  %or.cond.8 = or i1 %88, %89
  br i1 %or.cond.8, label %9, label %90

; <label>:90                                      ; preds = %85
  %91 = getelementptr inbounds i8, i8* %source, i64 17
  %92 = load i8, i8* %91, align 1
  %93 = icmp eq i8 %92, 0
  %94 = icmp eq i8 %92, %character
  %or.cond.1.8 = or i1 %93, %94
  br i1 %or.cond.1.8, label %9, label %95

; <label>:95                                      ; preds = %90
  %96 = getelementptr inbounds i8, i8* %source, i64 18
  %97 = load i8, i8* %96, align 1
  %98 = icmp eq i8 %97, 0
  %99 = icmp eq i8 %97, %character
  %or.cond.9 = or i1 %98, %99
  br i1 %or.cond.9, label %9, label %100

; <label>:100                                     ; preds = %95
  %101 = getelementptr inbounds i8, i8* %source, i64 19
  %102 = load i8, i8* %101, align 1
  %103 = icmp eq i8 %102, 0
  %104 = icmp eq i8 %102, %character
  %or.cond.1.9 = or i1 %103, %104
  br i1 %or.cond.1.9, label %9, label %105

; <label>:105                                     ; preds = %100
  %106 = getelementptr inbounds i8, i8* %source, i64 20
  %107 = load i8, i8* %106, align 1
  %108 = icmp eq i8 %107, 0
  %109 = icmp eq i8 %107, %character
  %or.cond.10 = or i1 %108, %109
  br i1 %or.cond.10, label %9, label %110

; <label>:110                                     ; preds = %105
  %111 = getelementptr inbounds i8, i8* %source, i64 21
  %112 = load i8, i8* %111, align 1
  %113 = icmp eq i8 %112, 0
  %114 = icmp eq i8 %112, %character
  %or.cond.1.10 = or i1 %113, %114
  br i1 %or.cond.1.10, label %9, label %115

; <label>:115                                     ; preds = %110
  %116 = getelementptr inbounds i8, i8* %source, i64 22
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 0
  %119 = icmp eq i8 %117, %character
  %or.cond.113 = or i1 %118, %119
  br i1 %or.cond.113, label %9, label %120

; <label>:120                                     ; preds = %115
  %121 = getelementptr inbounds i8, i8* %source, i64 23
  %122 = load i8, i8* %121, align 1
  %123 = icmp eq i8 %122, 0
  %124 = icmp eq i8 %122, %character
  %or.cond.1.11 = or i1 %123, %124
  br i1 %or.cond.1.11, label %9, label %125

; <label>:125                                     ; preds = %120
  %126 = getelementptr inbounds i8, i8* %source, i64 24
  %127 = load i8, i8* %126, align 1
  %128 = icmp eq i8 %127, 0
  %129 = icmp eq i8 %127, %character
  %or.cond.12 = or i1 %128, %129
  br i1 %or.cond.12, label %9, label %130

; <label>:130                                     ; preds = %125
  %131 = getelementptr inbounds i8, i8* %source, i64 25
  %132 = load i8, i8* %131, align 1
  %133 = icmp eq i8 %132, 0
  %134 = icmp eq i8 %132, %character
  %or.cond.1.12 = or i1 %133, %134
  br i1 %or.cond.1.12, label %9, label %135

; <label>:135                                     ; preds = %130
  %136 = getelementptr inbounds i8, i8* %source, i64 26
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 0
  %139 = icmp eq i8 %137, %character
  %or.cond.13 = or i1 %138, %139
  br i1 %or.cond.13, label %9, label %140

; <label>:140                                     ; preds = %135
  %141 = getelementptr inbounds i8, i8* %source, i64 27
  %142 = load i8, i8* %141, align 1
  %143 = icmp eq i8 %142, 0
  %144 = icmp eq i8 %142, %character
  %or.cond.1.13 = or i1 %143, %144
  br i1 %or.cond.1.13, label %9, label %145

; <label>:145                                     ; preds = %140
  %146 = getelementptr inbounds i8, i8* %source, i64 28
  %147 = load i8, i8* %146, align 1
  %148 = icmp eq i8 %147, 0
  %149 = icmp eq i8 %147, %character
  %or.cond.14 = or i1 %148, %149
  br i1 %or.cond.14, label %9, label %150

; <label>:150                                     ; preds = %145
  %151 = getelementptr inbounds i8, i8* %source, i64 29
  %152 = load i8, i8* %151, align 1
  %153 = icmp eq i8 %152, 0
  %154 = icmp eq i8 %152, %character
  %or.cond.1.14 = or i1 %153, %154
  br i1 %or.cond.1.14, label %9, label %155

; <label>:155                                     ; preds = %150
  %156 = getelementptr inbounds i8, i8* %source, i64 30
  %157 = load i8, i8* %156, align 1
  %158 = icmp eq i8 %157, 0
  %159 = icmp eq i8 %157, %character
  %or.cond.15 = or i1 %158, %159
  br i1 %or.cond.15, label %9, label %160

; <label>:160                                     ; preds = %155
  %161 = getelementptr inbounds i8, i8* %source, i64 31
  %162 = load i8, i8* %161, align 1
  %163 = icmp eq i8 %162, 0
  %164 = icmp eq i8 %162, %character
  %or.cond.1.15 = or i1 %163, %164
  br i1 %or.cond.1.15, label %9, label %165

; <label>:165                                     ; preds = %160
  %166 = getelementptr inbounds i8, i8* %source, i64 32
  %167 = load i8, i8* %166, align 1
  %168 = icmp eq i8 %167, 0
  %169 = icmp eq i8 %167, %character
  %or.cond.16 = or i1 %168, %169
  br i1 %or.cond.16, label %9, label %170

; <label>:170                                     ; preds = %165
  %171 = getelementptr inbounds i8, i8* %source, i64 33
  %172 = load i8, i8* %171, align 1
  %173 = icmp eq i8 %172, 0
  %174 = icmp eq i8 %172, %character
  %or.cond.1.16 = or i1 %173, %174
  br i1 %or.cond.1.16, label %9, label %175

; <label>:175                                     ; preds = %170
  %176 = getelementptr inbounds i8, i8* %source, i64 34
  %177 = load i8, i8* %176, align 1
  %178 = icmp eq i8 %177, 0
  %179 = icmp eq i8 %177, %character
  %or.cond.17 = or i1 %178, %179
  br i1 %or.cond.17, label %9, label %180

; <label>:180                                     ; preds = %175
  %181 = getelementptr inbounds i8, i8* %source, i64 35
  %182 = load i8, i8* %181, align 1
  %183 = icmp eq i8 %182, 0
  %184 = icmp eq i8 %182, %character
  %or.cond.1.17 = or i1 %183, %184
  br i1 %or.cond.1.17, label %9, label %185

; <label>:185                                     ; preds = %180
  %186 = getelementptr inbounds i8, i8* %source, i64 36
  %187 = load i8, i8* %186, align 1
  %188 = icmp eq i8 %187, 0
  %189 = icmp eq i8 %187, %character
  %or.cond.18 = or i1 %188, %189
  br i1 %or.cond.18, label %9, label %190

; <label>:190                                     ; preds = %185
  %191 = getelementptr inbounds i8, i8* %source, i64 37
  %192 = load i8, i8* %191, align 1
  %193 = icmp eq i8 %192, 0
  %194 = icmp eq i8 %192, %character
  %or.cond.1.18 = or i1 %193, %194
  br i1 %or.cond.1.18, label %9, label %195

; <label>:195                                     ; preds = %190
  %196 = getelementptr inbounds i8, i8* %source, i64 38
  %197 = load i8, i8* %196, align 1
  %198 = icmp eq i8 %197, 0
  %199 = icmp eq i8 %197, %character
  %or.cond.19 = or i1 %198, %199
  br i1 %or.cond.19, label %9, label %200

; <label>:200                                     ; preds = %195
  %201 = getelementptr inbounds i8, i8* %source, i64 39
  %202 = load i8, i8* %201, align 1
  %203 = icmp eq i8 %202, 0
  %204 = icmp eq i8 %202, %character
  %or.cond.1.19 = or i1 %203, %204
  br i1 %or.cond.1.19, label %9, label %205

; <label>:205                                     ; preds = %200
  %206 = getelementptr inbounds i8, i8* %source, i64 40
  %207 = load i8, i8* %206, align 1
  %208 = icmp eq i8 %207, 0
  %209 = icmp eq i8 %207, %character
  %or.cond.20 = or i1 %208, %209
  br i1 %or.cond.20, label %9, label %210

; <label>:210                                     ; preds = %205
  %211 = getelementptr inbounds i8, i8* %source, i64 41
  %212 = load i8, i8* %211, align 1
  %213 = icmp eq i8 %212, 0
  %214 = icmp eq i8 %212, %character
  %or.cond.1.20 = or i1 %213, %214
  br i1 %or.cond.1.20, label %9, label %215

; <label>:215                                     ; preds = %210
  %216 = getelementptr inbounds i8, i8* %source, i64 42
  %217 = load i8, i8* %216, align 1
  %218 = icmp eq i8 %217, 0
  %219 = icmp eq i8 %217, %character
  %or.cond.21 = or i1 %218, %219
  br i1 %or.cond.21, label %9, label %220

; <label>:220                                     ; preds = %215
  %221 = getelementptr inbounds i8, i8* %source, i64 43
  %222 = load i8, i8* %221, align 1
  %223 = icmp eq i8 %222, 0
  %224 = icmp eq i8 %222, %character
  %or.cond.1.21 = or i1 %223, %224
  br i1 %or.cond.1.21, label %9, label %225

; <label>:225                                     ; preds = %220
  %226 = getelementptr inbounds i8, i8* %source, i64 44
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 0
  %229 = icmp eq i8 %227, %character
  %or.cond.22 = or i1 %228, %229
  br i1 %or.cond.22, label %9, label %230

; <label>:230                                     ; preds = %225
  %231 = getelementptr inbounds i8, i8* %source, i64 45
  %232 = load i8, i8* %231, align 1
  %233 = icmp eq i8 %232, 0
  %234 = icmp eq i8 %232, %character
  %or.cond.1.22 = or i1 %233, %234
  br i1 %or.cond.1.22, label %9, label %235

; <label>:235                                     ; preds = %230
  %236 = getelementptr inbounds i8, i8* %source, i64 46
  %237 = load i8, i8* %236, align 1
  %238 = icmp eq i8 %237, 0
  %239 = icmp eq i8 %237, %character
  %or.cond.23 = or i1 %238, %239
  br i1 %or.cond.23, label %9, label %240

; <label>:240                                     ; preds = %235
  %241 = getelementptr inbounds i8, i8* %source, i64 47
  %242 = load i8, i8* %241, align 1
  %243 = icmp eq i8 %242, 0
  %244 = icmp eq i8 %242, %character
  %or.cond.1.23 = or i1 %243, %244
  br i1 %or.cond.1.23, label %9, label %245

; <label>:245                                     ; preds = %240
  %246 = getelementptr inbounds i8, i8* %source, i64 48
  %247 = load i8, i8* %246, align 1
  %248 = icmp eq i8 %247, 0
  %249 = icmp eq i8 %247, %character
  %or.cond.24 = or i1 %248, %249
  br i1 %or.cond.24, label %9, label %250

; <label>:250                                     ; preds = %245
  %251 = getelementptr inbounds i8, i8* %source, i64 49
  %252 = load i8, i8* %251, align 1
  %253 = icmp eq i8 %252, 0
  %254 = icmp eq i8 %252, %character
  %or.cond.1.24 = or i1 %253, %254
  %phitmp = select i1 %or.cond.1.24, i64 49, i64 50
  br label %9
}

; Function Attrs: alwaysinline nounwind readonly uwtable
define i64 @strspn2(i8* nocapture readonly %cs, i8* nocapture readonly %ct) #16 {
  %1 = load i8, i8* %ct, align 1
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %strlen2.exit, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds i8, i8* %ct, i64 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %strlen2.exit, label %39

; <label>:7                                       ; preds = %758
  %8 = tail call i64 @strlen(i8* nonnull %759) #13
  %9 = add i64 %8, 50
  br label %strlen2.exit

strlen2.exit:                                     ; preds = %0, %3, %39, %43, %47, %51, %582, %586, %590, %594, %598, %602, %606, %610, %614, %618, %622, %626, %630, %634, %638, %642, %646, %650, %654, %658, %662, %666, %670, %674, %678, %682, %686, %690, %694, %698, %702, %706, %710, %714, %718, %722, %726, %730, %734, %738, %742, %746, %750, %754, %758, %7
  %.0 = phi i64 [ %9, %7 ], [ 50, %758 ], [ 0, %0 ], [ 1, %3 ], [ 2, %39 ], [ 3, %43 ], [ 4, %47 ], [ 5, %51 ], [ 6, %582 ], [ 7, %586 ], [ 8, %590 ], [ 9, %594 ], [ 10, %598 ], [ 11, %602 ], [ 12, %606 ], [ 13, %610 ], [ 14, %614 ], [ 15, %618 ], [ 16, %622 ], [ 17, %626 ], [ 18, %630 ], [ 19, %634 ], [ 20, %638 ], [ 21, %642 ], [ 22, %646 ], [ 23, %650 ], [ 24, %654 ], [ 25, %658 ], [ 26, %662 ], [ 27, %666 ], [ 28, %670 ], [ 29, %674 ], [ 30, %678 ], [ 31, %682 ], [ 32, %686 ], [ 33, %690 ], [ 34, %694 ], [ 35, %698 ], [ 36, %702 ], [ 37, %706 ], [ 38, %710 ], [ 39, %714 ], [ 40, %718 ], [ 41, %722 ], [ 42, %726 ], [ 43, %730 ], [ 44, %734 ], [ 45, %738 ], [ 46, %742 ], [ 47, %746 ], [ 48, %750 ], [ 49, %754 ]
  %10 = trunc i64 %.0 to i32
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %.lr.ph.us, label %thread-pre-split

; <label>:12                                      ; preds = %.lr.ph.us, %15
  %13 = phi i8 [ %1, %.lr.ph.us ], [ %19, %15 ]
  %j.010.us = phi i32 [ 0, %.lr.ph.us ], [ %17, %15 ]
  %p.19.us = phi i8* [ %ct, %.lr.ph.us ], [ %16, %15 ]
  %14 = icmp eq i8 %13, %23
  br i1 %14, label %thread-pre-split.us, label %15

; <label>:15                                      ; preds = %12
  %16 = getelementptr inbounds i8, i8* %p.19.us, i64 1
  %17 = add nuw nsw i32 %j.010.us, 1
  %18 = icmp slt i32 %17, %10
  %19 = load i8, i8* %16, align 1
  br i1 %18, label %12, label %thread-pre-split.us

thread-pre-split.us:                              ; preds = %12, %15
  %.lcssa.us = phi i8 [ %19, %15 ], [ %23, %12 ]
  %p.1.lcssa.us = phi i8* [ %16, %15 ], [ %p.19.us, %12 ]
  %20 = icmp eq i8 %.lcssa.us, 0
  br i1 %20, label %.us-lcssa.us, label %.lr.ph.us.146

.lr.ph.us.146:                                    ; preds = %thread-pre-split.us
  %21 = getelementptr inbounds i8, i8* %cs, i64 1
  %22 = load i8, i8* %21, align 1
  br label %27

.lr.ph.us:                                        ; preds = %strlen2.exit
  %23 = load i8, i8* %cs, align 1
  br label %12

thread-pre-split:                                 ; preds = %strlen2.exit
  br i1 %2, label %.us-lcssa.us.thread, label %.us-lcssa.us.thread25.loopexit96

.us-lcssa.us:                                     ; preds = %thread-pre-split.us.1.24, %thread-pre-split.us.24, %thread-pre-split.us.1.23, %thread-pre-split.us.23, %thread-pre-split.us.1.22, %thread-pre-split.us.22, %thread-pre-split.us.1.21, %thread-pre-split.us.21, %thread-pre-split.us.1.20, %thread-pre-split.us.20, %thread-pre-split.us.1.19, %thread-pre-split.us.19, %thread-pre-split.us.1.18, %thread-pre-split.us.18, %thread-pre-split.us.1.17, %thread-pre-split.us.17, %thread-pre-split.us.1.16, %thread-pre-split.us.16, %thread-pre-split.us.1.15, %thread-pre-split.us.1510, %thread-pre-split.us.1.14, %thread-pre-split.us.14, %thread-pre-split.us.1.13, %thread-pre-split.us.13, %thread-pre-split.us.1.12, %thread-pre-split.us.12, %thread-pre-split.us.1.11, %thread-pre-split.us.11, %thread-pre-split.us.1.10, %thread-pre-split.us.10, %thread-pre-split.us.1.9, %thread-pre-split.us.9, %thread-pre-split.us.1.8, %thread-pre-split.us.8, %thread-pre-split.us.1.7, %thread-pre-split.us.7, %thread-pre-split.us.1.6, %thread-pre-split.us.6, %thread-pre-split.us.1.5, %thread-pre-split.us.5, %thread-pre-split.us.1.4, %thread-pre-split.us.4, %thread-pre-split.us.1.3, %thread-pre-split.us.3, %thread-pre-split.us.1.2, %thread-pre-split.us.2, %thread-pre-split.us.1.1, %thread-pre-split.us.15, %thread-pre-split.us.1, %thread-pre-split.us
  %p.1.lcssa.us.lcssa = phi i8* [ %p.1.lcssa.us, %thread-pre-split.us ], [ %p.1.lcssa.us.1, %thread-pre-split.us.1 ], [ %p.1.lcssa.us.14, %thread-pre-split.us.15 ], [ %p.1.lcssa.us.1.1, %thread-pre-split.us.1.1 ], [ %p.1.lcssa.us.2, %thread-pre-split.us.2 ], [ %p.1.lcssa.us.1.2, %thread-pre-split.us.1.2 ], [ %p.1.lcssa.us.3, %thread-pre-split.us.3 ], [ %p.1.lcssa.us.1.3, %thread-pre-split.us.1.3 ], [ %p.1.lcssa.us.4, %thread-pre-split.us.4 ], [ %p.1.lcssa.us.1.4, %thread-pre-split.us.1.4 ], [ %p.1.lcssa.us.5, %thread-pre-split.us.5 ], [ %p.1.lcssa.us.1.5, %thread-pre-split.us.1.5 ], [ %p.1.lcssa.us.6, %thread-pre-split.us.6 ], [ %p.1.lcssa.us.1.6, %thread-pre-split.us.1.6 ], [ %p.1.lcssa.us.7, %thread-pre-split.us.7 ], [ %p.1.lcssa.us.1.7, %thread-pre-split.us.1.7 ], [ %p.1.lcssa.us.8, %thread-pre-split.us.8 ], [ %p.1.lcssa.us.1.8, %thread-pre-split.us.1.8 ], [ %p.1.lcssa.us.9, %thread-pre-split.us.9 ], [ %p.1.lcssa.us.1.9, %thread-pre-split.us.1.9 ], [ %p.1.lcssa.us.10, %thread-pre-split.us.10 ], [ %p.1.lcssa.us.1.10, %thread-pre-split.us.1.10 ], [ %p.1.lcssa.us.11, %thread-pre-split.us.11 ], [ %p.1.lcssa.us.1.11, %thread-pre-split.us.1.11 ], [ %p.1.lcssa.us.12, %thread-pre-split.us.12 ], [ %p.1.lcssa.us.1.12, %thread-pre-split.us.1.12 ], [ %p.1.lcssa.us.13, %thread-pre-split.us.13 ], [ %p.1.lcssa.us.1.13, %thread-pre-split.us.1.13 ], [ %p.1.lcssa.us.149, %thread-pre-split.us.14 ], [ %p.1.lcssa.us.1.14, %thread-pre-split.us.1.14 ], [ %p.1.lcssa.us.15, %thread-pre-split.us.1510 ], [ %p.1.lcssa.us.1.15, %thread-pre-split.us.1.15 ], [ %p.1.lcssa.us.16, %thread-pre-split.us.16 ], [ %p.1.lcssa.us.1.16, %thread-pre-split.us.1.16 ], [ %p.1.lcssa.us.17, %thread-pre-split.us.17 ], [ %p.1.lcssa.us.1.17, %thread-pre-split.us.1.17 ], [ %p.1.lcssa.us.18, %thread-pre-split.us.18 ], [ %p.1.lcssa.us.1.18, %thread-pre-split.us.1.18 ], [ %p.1.lcssa.us.19, %thread-pre-split.us.19 ], [ %p.1.lcssa.us.1.19, %thread-pre-split.us.1.19 ], [ %p.1.lcssa.us.20, %thread-pre-split.us.20 ], [ %p.1.lcssa.us.1.20, %thread-pre-split.us.1.20 ], [ %p.1.lcssa.us.21, %thread-pre-split.us.21 ], [ %p.1.lcssa.us.1.21, %thread-pre-split.us.1.21 ], [ %p.1.lcssa.us.22, %thread-pre-split.us.22 ], [ %p.1.lcssa.us.1.22, %thread-pre-split.us.1.22 ], [ %p.1.lcssa.us.23, %thread-pre-split.us.23 ], [ %p.1.lcssa.us.1.23, %thread-pre-split.us.1.23 ], [ %p.1.lcssa.us.24, %thread-pre-split.us.24 ], [ %p.1.lcssa.us.1.24, %thread-pre-split.us.1.24 ]
  %n.0.lcssa.ph = phi i64 [ 0, %thread-pre-split.us ], [ 1, %thread-pre-split.us.1 ], [ 2, %thread-pre-split.us.15 ], [ 3, %thread-pre-split.us.1.1 ], [ 4, %thread-pre-split.us.2 ], [ 5, %thread-pre-split.us.1.2 ], [ 6, %thread-pre-split.us.3 ], [ 7, %thread-pre-split.us.1.3 ], [ 8, %thread-pre-split.us.4 ], [ 9, %thread-pre-split.us.1.4 ], [ 10, %thread-pre-split.us.5 ], [ 11, %thread-pre-split.us.1.5 ], [ 12, %thread-pre-split.us.6 ], [ 13, %thread-pre-split.us.1.6 ], [ 14, %thread-pre-split.us.7 ], [ 15, %thread-pre-split.us.1.7 ], [ 16, %thread-pre-split.us.8 ], [ 17, %thread-pre-split.us.1.8 ], [ 18, %thread-pre-split.us.9 ], [ 19, %thread-pre-split.us.1.9 ], [ 20, %thread-pre-split.us.10 ], [ 21, %thread-pre-split.us.1.10 ], [ 22, %thread-pre-split.us.11 ], [ 23, %thread-pre-split.us.1.11 ], [ 24, %thread-pre-split.us.12 ], [ 25, %thread-pre-split.us.1.12 ], [ 26, %thread-pre-split.us.13 ], [ 27, %thread-pre-split.us.1.13 ], [ 28, %thread-pre-split.us.14 ], [ 29, %thread-pre-split.us.1.14 ], [ 30, %thread-pre-split.us.1510 ], [ 31, %thread-pre-split.us.1.15 ], [ 32, %thread-pre-split.us.16 ], [ 33, %thread-pre-split.us.1.16 ], [ 34, %thread-pre-split.us.17 ], [ 35, %thread-pre-split.us.1.17 ], [ 36, %thread-pre-split.us.18 ], [ 37, %thread-pre-split.us.1.18 ], [ 38, %thread-pre-split.us.19 ], [ 39, %thread-pre-split.us.1.19 ], [ 40, %thread-pre-split.us.20 ], [ 41, %thread-pre-split.us.1.20 ], [ 42, %thread-pre-split.us.21 ], [ 43, %thread-pre-split.us.1.21 ], [ 44, %thread-pre-split.us.22 ], [ 45, %thread-pre-split.us.1.22 ], [ 46, %thread-pre-split.us.23 ], [ 47, %thread-pre-split.us.1.23 ], [ 48, %thread-pre-split.us.24 ], [ %., %thread-pre-split.us.1.24 ]
  %.02.lcssa.ph = phi i8* [ %cs, %thread-pre-split.us ], [ %21, %thread-pre-split.us.1 ], [ %36, %thread-pre-split.us.15 ], [ %64, %thread-pre-split.us.1.1 ], [ %75, %thread-pre-split.us.2 ], [ %86, %thread-pre-split.us.1.2 ], [ %97, %thread-pre-split.us.3 ], [ %108, %thread-pre-split.us.1.3 ], [ %119, %thread-pre-split.us.4 ], [ %130, %thread-pre-split.us.1.4 ], [ %141, %thread-pre-split.us.5 ], [ %152, %thread-pre-split.us.1.5 ], [ %163, %thread-pre-split.us.6 ], [ %174, %thread-pre-split.us.1.6 ], [ %185, %thread-pre-split.us.7 ], [ %196, %thread-pre-split.us.1.7 ], [ %207, %thread-pre-split.us.8 ], [ %218, %thread-pre-split.us.1.8 ], [ %229, %thread-pre-split.us.9 ], [ %240, %thread-pre-split.us.1.9 ], [ %251, %thread-pre-split.us.10 ], [ %262, %thread-pre-split.us.1.10 ], [ %273, %thread-pre-split.us.11 ], [ %284, %thread-pre-split.us.1.11 ], [ %295, %thread-pre-split.us.12 ], [ %306, %thread-pre-split.us.1.12 ], [ %317, %thread-pre-split.us.13 ], [ %328, %thread-pre-split.us.1.13 ], [ %339, %thread-pre-split.us.14 ], [ %350, %thread-pre-split.us.1.14 ], [ %361, %thread-pre-split.us.1510 ], [ %372, %thread-pre-split.us.1.15 ], [ %383, %thread-pre-split.us.16 ], [ %394, %thread-pre-split.us.1.16 ], [ %405, %thread-pre-split.us.17 ], [ %416, %thread-pre-split.us.1.17 ], [ %427, %thread-pre-split.us.18 ], [ %438, %thread-pre-split.us.1.18 ], [ %449, %thread-pre-split.us.19 ], [ %460, %thread-pre-split.us.1.19 ], [ %471, %thread-pre-split.us.20 ], [ %482, %thread-pre-split.us.1.20 ], [ %493, %thread-pre-split.us.21 ], [ %504, %thread-pre-split.us.1.21 ], [ %515, %thread-pre-split.us.22 ], [ %526, %thread-pre-split.us.1.22 ], [ %537, %thread-pre-split.us.23 ], [ %548, %thread-pre-split.us.1.23 ], [ %559, %thread-pre-split.us.24 ], [ %.1, %thread-pre-split.us.1.24 ]
  %.pre = load i8, i8* %p.1.lcssa.us.lcssa, align 1
  %24 = icmp eq i8 %.pre, 0
  br i1 %24, label %.us-lcssa.us.thread, label %.us-lcssa.us.thread25

.us-lcssa.us.thread25:                            ; preds = %.us-lcssa.us.thread25.loopexit96, %.us-lcssa.us
  %.02.lcssa27 = phi i8* [ %.02.lcssa.ph, %.us-lcssa.us ], [ %38, %.us-lcssa.us.thread25.loopexit96 ]
  %n.0.lcssa26 = phi i64 [ %n.0.lcssa.ph, %.us-lcssa.us ], [ 50, %.us-lcssa.us.thread25.loopexit96 ]
  %25 = tail call i64 @strspn(i8* %.02.lcssa27, i8* %ct) #13
  %26 = add i64 %25, %n.0.lcssa26
  br label %.us-lcssa.us.thread

.us-lcssa.us.thread:                              ; preds = %thread-pre-split, %.us-lcssa.us, %.us-lcssa.us.thread25
  %.03 = phi i64 [ %26, %.us-lcssa.us.thread25 ], [ %n.0.lcssa.ph, %.us-lcssa.us ], [ 0, %thread-pre-split ]
  ret i64 %.03

; <label>:27                                      ; preds = %30, %.lr.ph.us.146
  %28 = phi i8 [ %1, %.lr.ph.us.146 ], [ %34, %30 ]
  %j.010.us.1 = phi i32 [ 0, %.lr.ph.us.146 ], [ %32, %30 ]
  %p.19.us.1 = phi i8* [ %ct, %.lr.ph.us.146 ], [ %31, %30 ]
  %29 = icmp eq i8 %28, %22
  br i1 %29, label %thread-pre-split.us.1, label %30

; <label>:30                                      ; preds = %27
  %31 = getelementptr inbounds i8, i8* %p.19.us.1, i64 1
  %32 = add nuw nsw i32 %j.010.us.1, 1
  %33 = icmp slt i32 %32, %10
  %34 = load i8, i8* %31, align 1
  br i1 %33, label %27, label %thread-pre-split.us.1

thread-pre-split.us.1:                            ; preds = %30, %27
  %.lcssa.us.1 = phi i8 [ %34, %30 ], [ %22, %27 ]
  %p.1.lcssa.us.1 = phi i8* [ %31, %30 ], [ %p.19.us.1, %27 ]
  %35 = icmp eq i8 %.lcssa.us.1, 0
  br i1 %35, label %.us-lcssa.us, label %.lr.ph.us.111

.lr.ph.us.111:                                    ; preds = %thread-pre-split.us.1
  %36 = getelementptr inbounds i8, i8* %cs, i64 2
  %37 = load i8, i8* %36, align 1
  br label %55

.us-lcssa.us.thread25.loopexit96:                 ; preds = %thread-pre-split
  %38 = getelementptr inbounds i8, i8* %cs, i64 50
  br label %.us-lcssa.us.thread25

; <label>:39                                      ; preds = %3
  %40 = getelementptr inbounds i8, i8* %ct, i64 2
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %strlen2.exit, label %43

; <label>:43                                      ; preds = %39
  %44 = getelementptr inbounds i8, i8* %ct, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %strlen2.exit, label %47

; <label>:47                                      ; preds = %43
  %48 = getelementptr inbounds i8, i8* %ct, i64 4
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %strlen2.exit, label %51

; <label>:51                                      ; preds = %47
  %52 = getelementptr inbounds i8, i8* %ct, i64 5
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %strlen2.exit, label %582

; <label>:55                                      ; preds = %58, %.lr.ph.us.111
  %56 = phi i8 [ %1, %.lr.ph.us.111 ], [ %62, %58 ]
  %j.010.us.11 = phi i32 [ 0, %.lr.ph.us.111 ], [ %60, %58 ]
  %p.19.us.12 = phi i8* [ %ct, %.lr.ph.us.111 ], [ %59, %58 ]
  %57 = icmp eq i8 %56, %37
  br i1 %57, label %thread-pre-split.us.15, label %58

; <label>:58                                      ; preds = %55
  %59 = getelementptr inbounds i8, i8* %p.19.us.12, i64 1
  %60 = add nuw nsw i32 %j.010.us.11, 1
  %61 = icmp slt i32 %60, %10
  %62 = load i8, i8* %59, align 1
  br i1 %61, label %55, label %thread-pre-split.us.15

thread-pre-split.us.15:                           ; preds = %58, %55
  %.lcssa.us.13 = phi i8 [ %62, %58 ], [ %37, %55 ]
  %p.1.lcssa.us.14 = phi i8* [ %59, %58 ], [ %p.19.us.12, %55 ]
  %63 = icmp eq i8 %.lcssa.us.13, 0
  br i1 %63, label %.us-lcssa.us, label %.lr.ph.us.146.1

.lr.ph.us.146.1:                                  ; preds = %thread-pre-split.us.15
  %64 = getelementptr inbounds i8, i8* %cs, i64 3
  %65 = load i8, i8* %64, align 1
  br label %66

; <label>:66                                      ; preds = %69, %.lr.ph.us.146.1
  %67 = phi i8 [ %1, %.lr.ph.us.146.1 ], [ %73, %69 ]
  %j.010.us.1.1 = phi i32 [ 0, %.lr.ph.us.146.1 ], [ %71, %69 ]
  %p.19.us.1.1 = phi i8* [ %ct, %.lr.ph.us.146.1 ], [ %70, %69 ]
  %68 = icmp eq i8 %67, %65
  br i1 %68, label %thread-pre-split.us.1.1, label %69

; <label>:69                                      ; preds = %66
  %70 = getelementptr inbounds i8, i8* %p.19.us.1.1, i64 1
  %71 = add nuw nsw i32 %j.010.us.1.1, 1
  %72 = icmp slt i32 %71, %10
  %73 = load i8, i8* %70, align 1
  br i1 %72, label %66, label %thread-pre-split.us.1.1

thread-pre-split.us.1.1:                          ; preds = %69, %66
  %.lcssa.us.1.1 = phi i8 [ %73, %69 ], [ %65, %66 ]
  %p.1.lcssa.us.1.1 = phi i8* [ %70, %69 ], [ %p.19.us.1.1, %66 ]
  %74 = icmp eq i8 %.lcssa.us.1.1, 0
  br i1 %74, label %.us-lcssa.us, label %.lr.ph.us.212

.lr.ph.us.212:                                    ; preds = %thread-pre-split.us.1.1
  %75 = getelementptr inbounds i8, i8* %cs, i64 4
  %76 = load i8, i8* %75, align 1
  br label %77

; <label>:77                                      ; preds = %80, %.lr.ph.us.212
  %78 = phi i8 [ %1, %.lr.ph.us.212 ], [ %84, %80 ]
  %j.010.us.2 = phi i32 [ 0, %.lr.ph.us.212 ], [ %82, %80 ]
  %p.19.us.2 = phi i8* [ %ct, %.lr.ph.us.212 ], [ %81, %80 ]
  %79 = icmp eq i8 %78, %76
  br i1 %79, label %thread-pre-split.us.2, label %80

; <label>:80                                      ; preds = %77
  %81 = getelementptr inbounds i8, i8* %p.19.us.2, i64 1
  %82 = add nuw nsw i32 %j.010.us.2, 1
  %83 = icmp slt i32 %82, %10
  %84 = load i8, i8* %81, align 1
  br i1 %83, label %77, label %thread-pre-split.us.2

thread-pre-split.us.2:                            ; preds = %80, %77
  %.lcssa.us.2 = phi i8 [ %84, %80 ], [ %76, %77 ]
  %p.1.lcssa.us.2 = phi i8* [ %81, %80 ], [ %p.19.us.2, %77 ]
  %85 = icmp eq i8 %.lcssa.us.2, 0
  br i1 %85, label %.us-lcssa.us, label %.lr.ph.us.146.2

.lr.ph.us.146.2:                                  ; preds = %thread-pre-split.us.2
  %86 = getelementptr inbounds i8, i8* %cs, i64 5
  %87 = load i8, i8* %86, align 1
  br label %88

; <label>:88                                      ; preds = %91, %.lr.ph.us.146.2
  %89 = phi i8 [ %1, %.lr.ph.us.146.2 ], [ %95, %91 ]
  %j.010.us.1.2 = phi i32 [ 0, %.lr.ph.us.146.2 ], [ %93, %91 ]
  %p.19.us.1.2 = phi i8* [ %ct, %.lr.ph.us.146.2 ], [ %92, %91 ]
  %90 = icmp eq i8 %89, %87
  br i1 %90, label %thread-pre-split.us.1.2, label %91

; <label>:91                                      ; preds = %88
  %92 = getelementptr inbounds i8, i8* %p.19.us.1.2, i64 1
  %93 = add nuw nsw i32 %j.010.us.1.2, 1
  %94 = icmp slt i32 %93, %10
  %95 = load i8, i8* %92, align 1
  br i1 %94, label %88, label %thread-pre-split.us.1.2

thread-pre-split.us.1.2:                          ; preds = %91, %88
  %.lcssa.us.1.2 = phi i8 [ %95, %91 ], [ %87, %88 ]
  %p.1.lcssa.us.1.2 = phi i8* [ %92, %91 ], [ %p.19.us.1.2, %88 ]
  %96 = icmp eq i8 %.lcssa.us.1.2, 0
  br i1 %96, label %.us-lcssa.us, label %.lr.ph.us.313

.lr.ph.us.313:                                    ; preds = %thread-pre-split.us.1.2
  %97 = getelementptr inbounds i8, i8* %cs, i64 6
  %98 = load i8, i8* %97, align 1
  br label %99

; <label>:99                                      ; preds = %102, %.lr.ph.us.313
  %100 = phi i8 [ %1, %.lr.ph.us.313 ], [ %106, %102 ]
  %j.010.us.3 = phi i32 [ 0, %.lr.ph.us.313 ], [ %104, %102 ]
  %p.19.us.3 = phi i8* [ %ct, %.lr.ph.us.313 ], [ %103, %102 ]
  %101 = icmp eq i8 %100, %98
  br i1 %101, label %thread-pre-split.us.3, label %102

; <label>:102                                     ; preds = %99
  %103 = getelementptr inbounds i8, i8* %p.19.us.3, i64 1
  %104 = add nuw nsw i32 %j.010.us.3, 1
  %105 = icmp slt i32 %104, %10
  %106 = load i8, i8* %103, align 1
  br i1 %105, label %99, label %thread-pre-split.us.3

thread-pre-split.us.3:                            ; preds = %102, %99
  %.lcssa.us.3 = phi i8 [ %106, %102 ], [ %98, %99 ]
  %p.1.lcssa.us.3 = phi i8* [ %103, %102 ], [ %p.19.us.3, %99 ]
  %107 = icmp eq i8 %.lcssa.us.3, 0
  br i1 %107, label %.us-lcssa.us, label %.lr.ph.us.146.3

.lr.ph.us.146.3:                                  ; preds = %thread-pre-split.us.3
  %108 = getelementptr inbounds i8, i8* %cs, i64 7
  %109 = load i8, i8* %108, align 1
  br label %110

; <label>:110                                     ; preds = %113, %.lr.ph.us.146.3
  %111 = phi i8 [ %1, %.lr.ph.us.146.3 ], [ %117, %113 ]
  %j.010.us.1.3 = phi i32 [ 0, %.lr.ph.us.146.3 ], [ %115, %113 ]
  %p.19.us.1.3 = phi i8* [ %ct, %.lr.ph.us.146.3 ], [ %114, %113 ]
  %112 = icmp eq i8 %111, %109
  br i1 %112, label %thread-pre-split.us.1.3, label %113

; <label>:113                                     ; preds = %110
  %114 = getelementptr inbounds i8, i8* %p.19.us.1.3, i64 1
  %115 = add nuw nsw i32 %j.010.us.1.3, 1
  %116 = icmp slt i32 %115, %10
  %117 = load i8, i8* %114, align 1
  br i1 %116, label %110, label %thread-pre-split.us.1.3

thread-pre-split.us.1.3:                          ; preds = %113, %110
  %.lcssa.us.1.3 = phi i8 [ %117, %113 ], [ %109, %110 ]
  %p.1.lcssa.us.1.3 = phi i8* [ %114, %113 ], [ %p.19.us.1.3, %110 ]
  %118 = icmp eq i8 %.lcssa.us.1.3, 0
  br i1 %118, label %.us-lcssa.us, label %.lr.ph.us.414

.lr.ph.us.414:                                    ; preds = %thread-pre-split.us.1.3
  %119 = getelementptr inbounds i8, i8* %cs, i64 8
  %120 = load i8, i8* %119, align 1
  br label %121

; <label>:121                                     ; preds = %124, %.lr.ph.us.414
  %122 = phi i8 [ %1, %.lr.ph.us.414 ], [ %128, %124 ]
  %j.010.us.4 = phi i32 [ 0, %.lr.ph.us.414 ], [ %126, %124 ]
  %p.19.us.4 = phi i8* [ %ct, %.lr.ph.us.414 ], [ %125, %124 ]
  %123 = icmp eq i8 %122, %120
  br i1 %123, label %thread-pre-split.us.4, label %124

; <label>:124                                     ; preds = %121
  %125 = getelementptr inbounds i8, i8* %p.19.us.4, i64 1
  %126 = add nuw nsw i32 %j.010.us.4, 1
  %127 = icmp slt i32 %126, %10
  %128 = load i8, i8* %125, align 1
  br i1 %127, label %121, label %thread-pre-split.us.4

thread-pre-split.us.4:                            ; preds = %124, %121
  %.lcssa.us.4 = phi i8 [ %128, %124 ], [ %120, %121 ]
  %p.1.lcssa.us.4 = phi i8* [ %125, %124 ], [ %p.19.us.4, %121 ]
  %129 = icmp eq i8 %.lcssa.us.4, 0
  br i1 %129, label %.us-lcssa.us, label %.lr.ph.us.146.4

.lr.ph.us.146.4:                                  ; preds = %thread-pre-split.us.4
  %130 = getelementptr inbounds i8, i8* %cs, i64 9
  %131 = load i8, i8* %130, align 1
  br label %132

; <label>:132                                     ; preds = %135, %.lr.ph.us.146.4
  %133 = phi i8 [ %1, %.lr.ph.us.146.4 ], [ %139, %135 ]
  %j.010.us.1.4 = phi i32 [ 0, %.lr.ph.us.146.4 ], [ %137, %135 ]
  %p.19.us.1.4 = phi i8* [ %ct, %.lr.ph.us.146.4 ], [ %136, %135 ]
  %134 = icmp eq i8 %133, %131
  br i1 %134, label %thread-pre-split.us.1.4, label %135

; <label>:135                                     ; preds = %132
  %136 = getelementptr inbounds i8, i8* %p.19.us.1.4, i64 1
  %137 = add nuw nsw i32 %j.010.us.1.4, 1
  %138 = icmp slt i32 %137, %10
  %139 = load i8, i8* %136, align 1
  br i1 %138, label %132, label %thread-pre-split.us.1.4

thread-pre-split.us.1.4:                          ; preds = %135, %132
  %.lcssa.us.1.4 = phi i8 [ %139, %135 ], [ %131, %132 ]
  %p.1.lcssa.us.1.4 = phi i8* [ %136, %135 ], [ %p.19.us.1.4, %132 ]
  %140 = icmp eq i8 %.lcssa.us.1.4, 0
  br i1 %140, label %.us-lcssa.us, label %.lr.ph.us.515

.lr.ph.us.515:                                    ; preds = %thread-pre-split.us.1.4
  %141 = getelementptr inbounds i8, i8* %cs, i64 10
  %142 = load i8, i8* %141, align 1
  br label %143

; <label>:143                                     ; preds = %146, %.lr.ph.us.515
  %144 = phi i8 [ %1, %.lr.ph.us.515 ], [ %150, %146 ]
  %j.010.us.5 = phi i32 [ 0, %.lr.ph.us.515 ], [ %148, %146 ]
  %p.19.us.5 = phi i8* [ %ct, %.lr.ph.us.515 ], [ %147, %146 ]
  %145 = icmp eq i8 %144, %142
  br i1 %145, label %thread-pre-split.us.5, label %146

; <label>:146                                     ; preds = %143
  %147 = getelementptr inbounds i8, i8* %p.19.us.5, i64 1
  %148 = add nuw nsw i32 %j.010.us.5, 1
  %149 = icmp slt i32 %148, %10
  %150 = load i8, i8* %147, align 1
  br i1 %149, label %143, label %thread-pre-split.us.5

thread-pre-split.us.5:                            ; preds = %146, %143
  %.lcssa.us.5 = phi i8 [ %150, %146 ], [ %142, %143 ]
  %p.1.lcssa.us.5 = phi i8* [ %147, %146 ], [ %p.19.us.5, %143 ]
  %151 = icmp eq i8 %.lcssa.us.5, 0
  br i1 %151, label %.us-lcssa.us, label %.lr.ph.us.146.5

.lr.ph.us.146.5:                                  ; preds = %thread-pre-split.us.5
  %152 = getelementptr inbounds i8, i8* %cs, i64 11
  %153 = load i8, i8* %152, align 1
  br label %154

; <label>:154                                     ; preds = %157, %.lr.ph.us.146.5
  %155 = phi i8 [ %1, %.lr.ph.us.146.5 ], [ %161, %157 ]
  %j.010.us.1.5 = phi i32 [ 0, %.lr.ph.us.146.5 ], [ %159, %157 ]
  %p.19.us.1.5 = phi i8* [ %ct, %.lr.ph.us.146.5 ], [ %158, %157 ]
  %156 = icmp eq i8 %155, %153
  br i1 %156, label %thread-pre-split.us.1.5, label %157

; <label>:157                                     ; preds = %154
  %158 = getelementptr inbounds i8, i8* %p.19.us.1.5, i64 1
  %159 = add nuw nsw i32 %j.010.us.1.5, 1
  %160 = icmp slt i32 %159, %10
  %161 = load i8, i8* %158, align 1
  br i1 %160, label %154, label %thread-pre-split.us.1.5

thread-pre-split.us.1.5:                          ; preds = %157, %154
  %.lcssa.us.1.5 = phi i8 [ %161, %157 ], [ %153, %154 ]
  %p.1.lcssa.us.1.5 = phi i8* [ %158, %157 ], [ %p.19.us.1.5, %154 ]
  %162 = icmp eq i8 %.lcssa.us.1.5, 0
  br i1 %162, label %.us-lcssa.us, label %.lr.ph.us.616

.lr.ph.us.616:                                    ; preds = %thread-pre-split.us.1.5
  %163 = getelementptr inbounds i8, i8* %cs, i64 12
  %164 = load i8, i8* %163, align 1
  br label %165

; <label>:165                                     ; preds = %168, %.lr.ph.us.616
  %166 = phi i8 [ %1, %.lr.ph.us.616 ], [ %172, %168 ]
  %j.010.us.6 = phi i32 [ 0, %.lr.ph.us.616 ], [ %170, %168 ]
  %p.19.us.6 = phi i8* [ %ct, %.lr.ph.us.616 ], [ %169, %168 ]
  %167 = icmp eq i8 %166, %164
  br i1 %167, label %thread-pre-split.us.6, label %168

; <label>:168                                     ; preds = %165
  %169 = getelementptr inbounds i8, i8* %p.19.us.6, i64 1
  %170 = add nuw nsw i32 %j.010.us.6, 1
  %171 = icmp slt i32 %170, %10
  %172 = load i8, i8* %169, align 1
  br i1 %171, label %165, label %thread-pre-split.us.6

thread-pre-split.us.6:                            ; preds = %168, %165
  %.lcssa.us.6 = phi i8 [ %172, %168 ], [ %164, %165 ]
  %p.1.lcssa.us.6 = phi i8* [ %169, %168 ], [ %p.19.us.6, %165 ]
  %173 = icmp eq i8 %.lcssa.us.6, 0
  br i1 %173, label %.us-lcssa.us, label %.lr.ph.us.146.6

.lr.ph.us.146.6:                                  ; preds = %thread-pre-split.us.6
  %174 = getelementptr inbounds i8, i8* %cs, i64 13
  %175 = load i8, i8* %174, align 1
  br label %176

; <label>:176                                     ; preds = %179, %.lr.ph.us.146.6
  %177 = phi i8 [ %1, %.lr.ph.us.146.6 ], [ %183, %179 ]
  %j.010.us.1.6 = phi i32 [ 0, %.lr.ph.us.146.6 ], [ %181, %179 ]
  %p.19.us.1.6 = phi i8* [ %ct, %.lr.ph.us.146.6 ], [ %180, %179 ]
  %178 = icmp eq i8 %177, %175
  br i1 %178, label %thread-pre-split.us.1.6, label %179

; <label>:179                                     ; preds = %176
  %180 = getelementptr inbounds i8, i8* %p.19.us.1.6, i64 1
  %181 = add nuw nsw i32 %j.010.us.1.6, 1
  %182 = icmp slt i32 %181, %10
  %183 = load i8, i8* %180, align 1
  br i1 %182, label %176, label %thread-pre-split.us.1.6

thread-pre-split.us.1.6:                          ; preds = %179, %176
  %.lcssa.us.1.6 = phi i8 [ %183, %179 ], [ %175, %176 ]
  %p.1.lcssa.us.1.6 = phi i8* [ %180, %179 ], [ %p.19.us.1.6, %176 ]
  %184 = icmp eq i8 %.lcssa.us.1.6, 0
  br i1 %184, label %.us-lcssa.us, label %.lr.ph.us.717

.lr.ph.us.717:                                    ; preds = %thread-pre-split.us.1.6
  %185 = getelementptr inbounds i8, i8* %cs, i64 14
  %186 = load i8, i8* %185, align 1
  br label %187

; <label>:187                                     ; preds = %190, %.lr.ph.us.717
  %188 = phi i8 [ %1, %.lr.ph.us.717 ], [ %194, %190 ]
  %j.010.us.7 = phi i32 [ 0, %.lr.ph.us.717 ], [ %192, %190 ]
  %p.19.us.7 = phi i8* [ %ct, %.lr.ph.us.717 ], [ %191, %190 ]
  %189 = icmp eq i8 %188, %186
  br i1 %189, label %thread-pre-split.us.7, label %190

; <label>:190                                     ; preds = %187
  %191 = getelementptr inbounds i8, i8* %p.19.us.7, i64 1
  %192 = add nuw nsw i32 %j.010.us.7, 1
  %193 = icmp slt i32 %192, %10
  %194 = load i8, i8* %191, align 1
  br i1 %193, label %187, label %thread-pre-split.us.7

thread-pre-split.us.7:                            ; preds = %190, %187
  %.lcssa.us.7 = phi i8 [ %194, %190 ], [ %186, %187 ]
  %p.1.lcssa.us.7 = phi i8* [ %191, %190 ], [ %p.19.us.7, %187 ]
  %195 = icmp eq i8 %.lcssa.us.7, 0
  br i1 %195, label %.us-lcssa.us, label %.lr.ph.us.146.7

.lr.ph.us.146.7:                                  ; preds = %thread-pre-split.us.7
  %196 = getelementptr inbounds i8, i8* %cs, i64 15
  %197 = load i8, i8* %196, align 1
  br label %198

; <label>:198                                     ; preds = %201, %.lr.ph.us.146.7
  %199 = phi i8 [ %1, %.lr.ph.us.146.7 ], [ %205, %201 ]
  %j.010.us.1.7 = phi i32 [ 0, %.lr.ph.us.146.7 ], [ %203, %201 ]
  %p.19.us.1.7 = phi i8* [ %ct, %.lr.ph.us.146.7 ], [ %202, %201 ]
  %200 = icmp eq i8 %199, %197
  br i1 %200, label %thread-pre-split.us.1.7, label %201

; <label>:201                                     ; preds = %198
  %202 = getelementptr inbounds i8, i8* %p.19.us.1.7, i64 1
  %203 = add nuw nsw i32 %j.010.us.1.7, 1
  %204 = icmp slt i32 %203, %10
  %205 = load i8, i8* %202, align 1
  br i1 %204, label %198, label %thread-pre-split.us.1.7

thread-pre-split.us.1.7:                          ; preds = %201, %198
  %.lcssa.us.1.7 = phi i8 [ %205, %201 ], [ %197, %198 ]
  %p.1.lcssa.us.1.7 = phi i8* [ %202, %201 ], [ %p.19.us.1.7, %198 ]
  %206 = icmp eq i8 %.lcssa.us.1.7, 0
  br i1 %206, label %.us-lcssa.us, label %.lr.ph.us.818

.lr.ph.us.818:                                    ; preds = %thread-pre-split.us.1.7
  %207 = getelementptr inbounds i8, i8* %cs, i64 16
  %208 = load i8, i8* %207, align 1
  br label %209

; <label>:209                                     ; preds = %212, %.lr.ph.us.818
  %210 = phi i8 [ %1, %.lr.ph.us.818 ], [ %216, %212 ]
  %j.010.us.8 = phi i32 [ 0, %.lr.ph.us.818 ], [ %214, %212 ]
  %p.19.us.8 = phi i8* [ %ct, %.lr.ph.us.818 ], [ %213, %212 ]
  %211 = icmp eq i8 %210, %208
  br i1 %211, label %thread-pre-split.us.8, label %212

; <label>:212                                     ; preds = %209
  %213 = getelementptr inbounds i8, i8* %p.19.us.8, i64 1
  %214 = add nuw nsw i32 %j.010.us.8, 1
  %215 = icmp slt i32 %214, %10
  %216 = load i8, i8* %213, align 1
  br i1 %215, label %209, label %thread-pre-split.us.8

thread-pre-split.us.8:                            ; preds = %212, %209
  %.lcssa.us.8 = phi i8 [ %216, %212 ], [ %208, %209 ]
  %p.1.lcssa.us.8 = phi i8* [ %213, %212 ], [ %p.19.us.8, %209 ]
  %217 = icmp eq i8 %.lcssa.us.8, 0
  br i1 %217, label %.us-lcssa.us, label %.lr.ph.us.146.8

.lr.ph.us.146.8:                                  ; preds = %thread-pre-split.us.8
  %218 = getelementptr inbounds i8, i8* %cs, i64 17
  %219 = load i8, i8* %218, align 1
  br label %220

; <label>:220                                     ; preds = %223, %.lr.ph.us.146.8
  %221 = phi i8 [ %1, %.lr.ph.us.146.8 ], [ %227, %223 ]
  %j.010.us.1.8 = phi i32 [ 0, %.lr.ph.us.146.8 ], [ %225, %223 ]
  %p.19.us.1.8 = phi i8* [ %ct, %.lr.ph.us.146.8 ], [ %224, %223 ]
  %222 = icmp eq i8 %221, %219
  br i1 %222, label %thread-pre-split.us.1.8, label %223

; <label>:223                                     ; preds = %220
  %224 = getelementptr inbounds i8, i8* %p.19.us.1.8, i64 1
  %225 = add nuw nsw i32 %j.010.us.1.8, 1
  %226 = icmp slt i32 %225, %10
  %227 = load i8, i8* %224, align 1
  br i1 %226, label %220, label %thread-pre-split.us.1.8

thread-pre-split.us.1.8:                          ; preds = %223, %220
  %.lcssa.us.1.8 = phi i8 [ %227, %223 ], [ %219, %220 ]
  %p.1.lcssa.us.1.8 = phi i8* [ %224, %223 ], [ %p.19.us.1.8, %220 ]
  %228 = icmp eq i8 %.lcssa.us.1.8, 0
  br i1 %228, label %.us-lcssa.us, label %.lr.ph.us.919

.lr.ph.us.919:                                    ; preds = %thread-pre-split.us.1.8
  %229 = getelementptr inbounds i8, i8* %cs, i64 18
  %230 = load i8, i8* %229, align 1
  br label %231

; <label>:231                                     ; preds = %234, %.lr.ph.us.919
  %232 = phi i8 [ %1, %.lr.ph.us.919 ], [ %238, %234 ]
  %j.010.us.9 = phi i32 [ 0, %.lr.ph.us.919 ], [ %236, %234 ]
  %p.19.us.9 = phi i8* [ %ct, %.lr.ph.us.919 ], [ %235, %234 ]
  %233 = icmp eq i8 %232, %230
  br i1 %233, label %thread-pre-split.us.9, label %234

; <label>:234                                     ; preds = %231
  %235 = getelementptr inbounds i8, i8* %p.19.us.9, i64 1
  %236 = add nuw nsw i32 %j.010.us.9, 1
  %237 = icmp slt i32 %236, %10
  %238 = load i8, i8* %235, align 1
  br i1 %237, label %231, label %thread-pre-split.us.9

thread-pre-split.us.9:                            ; preds = %234, %231
  %.lcssa.us.9 = phi i8 [ %238, %234 ], [ %230, %231 ]
  %p.1.lcssa.us.9 = phi i8* [ %235, %234 ], [ %p.19.us.9, %231 ]
  %239 = icmp eq i8 %.lcssa.us.9, 0
  br i1 %239, label %.us-lcssa.us, label %.lr.ph.us.146.9

.lr.ph.us.146.9:                                  ; preds = %thread-pre-split.us.9
  %240 = getelementptr inbounds i8, i8* %cs, i64 19
  %241 = load i8, i8* %240, align 1
  br label %242

; <label>:242                                     ; preds = %245, %.lr.ph.us.146.9
  %243 = phi i8 [ %1, %.lr.ph.us.146.9 ], [ %249, %245 ]
  %j.010.us.1.9 = phi i32 [ 0, %.lr.ph.us.146.9 ], [ %247, %245 ]
  %p.19.us.1.9 = phi i8* [ %ct, %.lr.ph.us.146.9 ], [ %246, %245 ]
  %244 = icmp eq i8 %243, %241
  br i1 %244, label %thread-pre-split.us.1.9, label %245

; <label>:245                                     ; preds = %242
  %246 = getelementptr inbounds i8, i8* %p.19.us.1.9, i64 1
  %247 = add nuw nsw i32 %j.010.us.1.9, 1
  %248 = icmp slt i32 %247, %10
  %249 = load i8, i8* %246, align 1
  br i1 %248, label %242, label %thread-pre-split.us.1.9

thread-pre-split.us.1.9:                          ; preds = %245, %242
  %.lcssa.us.1.9 = phi i8 [ %249, %245 ], [ %241, %242 ]
  %p.1.lcssa.us.1.9 = phi i8* [ %246, %245 ], [ %p.19.us.1.9, %242 ]
  %250 = icmp eq i8 %.lcssa.us.1.9, 0
  br i1 %250, label %.us-lcssa.us, label %.lr.ph.us.1020

.lr.ph.us.1020:                                   ; preds = %thread-pre-split.us.1.9
  %251 = getelementptr inbounds i8, i8* %cs, i64 20
  %252 = load i8, i8* %251, align 1
  br label %253

; <label>:253                                     ; preds = %256, %.lr.ph.us.1020
  %254 = phi i8 [ %1, %.lr.ph.us.1020 ], [ %260, %256 ]
  %j.010.us.10 = phi i32 [ 0, %.lr.ph.us.1020 ], [ %258, %256 ]
  %p.19.us.10 = phi i8* [ %ct, %.lr.ph.us.1020 ], [ %257, %256 ]
  %255 = icmp eq i8 %254, %252
  br i1 %255, label %thread-pre-split.us.10, label %256

; <label>:256                                     ; preds = %253
  %257 = getelementptr inbounds i8, i8* %p.19.us.10, i64 1
  %258 = add nuw nsw i32 %j.010.us.10, 1
  %259 = icmp slt i32 %258, %10
  %260 = load i8, i8* %257, align 1
  br i1 %259, label %253, label %thread-pre-split.us.10

thread-pre-split.us.10:                           ; preds = %256, %253
  %.lcssa.us.10 = phi i8 [ %260, %256 ], [ %252, %253 ]
  %p.1.lcssa.us.10 = phi i8* [ %257, %256 ], [ %p.19.us.10, %253 ]
  %261 = icmp eq i8 %.lcssa.us.10, 0
  br i1 %261, label %.us-lcssa.us, label %.lr.ph.us.146.10

.lr.ph.us.146.10:                                 ; preds = %thread-pre-split.us.10
  %262 = getelementptr inbounds i8, i8* %cs, i64 21
  %263 = load i8, i8* %262, align 1
  br label %264

; <label>:264                                     ; preds = %267, %.lr.ph.us.146.10
  %265 = phi i8 [ %1, %.lr.ph.us.146.10 ], [ %271, %267 ]
  %j.010.us.1.10 = phi i32 [ 0, %.lr.ph.us.146.10 ], [ %269, %267 ]
  %p.19.us.1.10 = phi i8* [ %ct, %.lr.ph.us.146.10 ], [ %268, %267 ]
  %266 = icmp eq i8 %265, %263
  br i1 %266, label %thread-pre-split.us.1.10, label %267

; <label>:267                                     ; preds = %264
  %268 = getelementptr inbounds i8, i8* %p.19.us.1.10, i64 1
  %269 = add nuw nsw i32 %j.010.us.1.10, 1
  %270 = icmp slt i32 %269, %10
  %271 = load i8, i8* %268, align 1
  br i1 %270, label %264, label %thread-pre-split.us.1.10

thread-pre-split.us.1.10:                         ; preds = %267, %264
  %.lcssa.us.1.10 = phi i8 [ %271, %267 ], [ %263, %264 ]
  %p.1.lcssa.us.1.10 = phi i8* [ %268, %267 ], [ %p.19.us.1.10, %264 ]
  %272 = icmp eq i8 %.lcssa.us.1.10, 0
  br i1 %272, label %.us-lcssa.us, label %.lr.ph.us.1121

.lr.ph.us.1121:                                   ; preds = %thread-pre-split.us.1.10
  %273 = getelementptr inbounds i8, i8* %cs, i64 22
  %274 = load i8, i8* %273, align 1
  br label %275

; <label>:275                                     ; preds = %278, %.lr.ph.us.1121
  %276 = phi i8 [ %1, %.lr.ph.us.1121 ], [ %282, %278 ]
  %j.010.us.116 = phi i32 [ 0, %.lr.ph.us.1121 ], [ %280, %278 ]
  %p.19.us.11 = phi i8* [ %ct, %.lr.ph.us.1121 ], [ %279, %278 ]
  %277 = icmp eq i8 %276, %274
  br i1 %277, label %thread-pre-split.us.11, label %278

; <label>:278                                     ; preds = %275
  %279 = getelementptr inbounds i8, i8* %p.19.us.11, i64 1
  %280 = add nuw nsw i32 %j.010.us.116, 1
  %281 = icmp slt i32 %280, %10
  %282 = load i8, i8* %279, align 1
  br i1 %281, label %275, label %thread-pre-split.us.11

thread-pre-split.us.11:                           ; preds = %278, %275
  %.lcssa.us.11 = phi i8 [ %282, %278 ], [ %274, %275 ]
  %p.1.lcssa.us.11 = phi i8* [ %279, %278 ], [ %p.19.us.11, %275 ]
  %283 = icmp eq i8 %.lcssa.us.11, 0
  br i1 %283, label %.us-lcssa.us, label %.lr.ph.us.146.11

.lr.ph.us.146.11:                                 ; preds = %thread-pre-split.us.11
  %284 = getelementptr inbounds i8, i8* %cs, i64 23
  %285 = load i8, i8* %284, align 1
  br label %286

; <label>:286                                     ; preds = %289, %.lr.ph.us.146.11
  %287 = phi i8 [ %1, %.lr.ph.us.146.11 ], [ %293, %289 ]
  %j.010.us.1.11 = phi i32 [ 0, %.lr.ph.us.146.11 ], [ %291, %289 ]
  %p.19.us.1.11 = phi i8* [ %ct, %.lr.ph.us.146.11 ], [ %290, %289 ]
  %288 = icmp eq i8 %287, %285
  br i1 %288, label %thread-pre-split.us.1.11, label %289

; <label>:289                                     ; preds = %286
  %290 = getelementptr inbounds i8, i8* %p.19.us.1.11, i64 1
  %291 = add nuw nsw i32 %j.010.us.1.11, 1
  %292 = icmp slt i32 %291, %10
  %293 = load i8, i8* %290, align 1
  br i1 %292, label %286, label %thread-pre-split.us.1.11

thread-pre-split.us.1.11:                         ; preds = %289, %286
  %.lcssa.us.1.11 = phi i8 [ %293, %289 ], [ %285, %286 ]
  %p.1.lcssa.us.1.11 = phi i8* [ %290, %289 ], [ %p.19.us.1.11, %286 ]
  %294 = icmp eq i8 %.lcssa.us.1.11, 0
  br i1 %294, label %.us-lcssa.us, label %.lr.ph.us.1222

.lr.ph.us.1222:                                   ; preds = %thread-pre-split.us.1.11
  %295 = getelementptr inbounds i8, i8* %cs, i64 24
  %296 = load i8, i8* %295, align 1
  br label %297

; <label>:297                                     ; preds = %300, %.lr.ph.us.1222
  %298 = phi i8 [ %1, %.lr.ph.us.1222 ], [ %304, %300 ]
  %j.010.us.12 = phi i32 [ 0, %.lr.ph.us.1222 ], [ %302, %300 ]
  %p.19.us.127 = phi i8* [ %ct, %.lr.ph.us.1222 ], [ %301, %300 ]
  %299 = icmp eq i8 %298, %296
  br i1 %299, label %thread-pre-split.us.12, label %300

; <label>:300                                     ; preds = %297
  %301 = getelementptr inbounds i8, i8* %p.19.us.127, i64 1
  %302 = add nuw nsw i32 %j.010.us.12, 1
  %303 = icmp slt i32 %302, %10
  %304 = load i8, i8* %301, align 1
  br i1 %303, label %297, label %thread-pre-split.us.12

thread-pre-split.us.12:                           ; preds = %300, %297
  %.lcssa.us.12 = phi i8 [ %304, %300 ], [ %296, %297 ]
  %p.1.lcssa.us.12 = phi i8* [ %301, %300 ], [ %p.19.us.127, %297 ]
  %305 = icmp eq i8 %.lcssa.us.12, 0
  br i1 %305, label %.us-lcssa.us, label %.lr.ph.us.146.12

.lr.ph.us.146.12:                                 ; preds = %thread-pre-split.us.12
  %306 = getelementptr inbounds i8, i8* %cs, i64 25
  %307 = load i8, i8* %306, align 1
  br label %308

; <label>:308                                     ; preds = %311, %.lr.ph.us.146.12
  %309 = phi i8 [ %1, %.lr.ph.us.146.12 ], [ %315, %311 ]
  %j.010.us.1.12 = phi i32 [ 0, %.lr.ph.us.146.12 ], [ %313, %311 ]
  %p.19.us.1.12 = phi i8* [ %ct, %.lr.ph.us.146.12 ], [ %312, %311 ]
  %310 = icmp eq i8 %309, %307
  br i1 %310, label %thread-pre-split.us.1.12, label %311

; <label>:311                                     ; preds = %308
  %312 = getelementptr inbounds i8, i8* %p.19.us.1.12, i64 1
  %313 = add nuw nsw i32 %j.010.us.1.12, 1
  %314 = icmp slt i32 %313, %10
  %315 = load i8, i8* %312, align 1
  br i1 %314, label %308, label %thread-pre-split.us.1.12

thread-pre-split.us.1.12:                         ; preds = %311, %308
  %.lcssa.us.1.12 = phi i8 [ %315, %311 ], [ %307, %308 ]
  %p.1.lcssa.us.1.12 = phi i8* [ %312, %311 ], [ %p.19.us.1.12, %308 ]
  %316 = icmp eq i8 %.lcssa.us.1.12, 0
  br i1 %316, label %.us-lcssa.us, label %.lr.ph.us.1323

.lr.ph.us.1323:                                   ; preds = %thread-pre-split.us.1.12
  %317 = getelementptr inbounds i8, i8* %cs, i64 26
  %318 = load i8, i8* %317, align 1
  br label %319

; <label>:319                                     ; preds = %322, %.lr.ph.us.1323
  %320 = phi i8 [ %1, %.lr.ph.us.1323 ], [ %326, %322 ]
  %j.010.us.13 = phi i32 [ 0, %.lr.ph.us.1323 ], [ %324, %322 ]
  %p.19.us.13 = phi i8* [ %ct, %.lr.ph.us.1323 ], [ %323, %322 ]
  %321 = icmp eq i8 %320, %318
  br i1 %321, label %thread-pre-split.us.13, label %322

; <label>:322                                     ; preds = %319
  %323 = getelementptr inbounds i8, i8* %p.19.us.13, i64 1
  %324 = add nuw nsw i32 %j.010.us.13, 1
  %325 = icmp slt i32 %324, %10
  %326 = load i8, i8* %323, align 1
  br i1 %325, label %319, label %thread-pre-split.us.13

thread-pre-split.us.13:                           ; preds = %322, %319
  %.lcssa.us.138 = phi i8 [ %326, %322 ], [ %318, %319 ]
  %p.1.lcssa.us.13 = phi i8* [ %323, %322 ], [ %p.19.us.13, %319 ]
  %327 = icmp eq i8 %.lcssa.us.138, 0
  br i1 %327, label %.us-lcssa.us, label %.lr.ph.us.146.13

.lr.ph.us.146.13:                                 ; preds = %thread-pre-split.us.13
  %328 = getelementptr inbounds i8, i8* %cs, i64 27
  %329 = load i8, i8* %328, align 1
  br label %330

; <label>:330                                     ; preds = %333, %.lr.ph.us.146.13
  %331 = phi i8 [ %1, %.lr.ph.us.146.13 ], [ %337, %333 ]
  %j.010.us.1.13 = phi i32 [ 0, %.lr.ph.us.146.13 ], [ %335, %333 ]
  %p.19.us.1.13 = phi i8* [ %ct, %.lr.ph.us.146.13 ], [ %334, %333 ]
  %332 = icmp eq i8 %331, %329
  br i1 %332, label %thread-pre-split.us.1.13, label %333

; <label>:333                                     ; preds = %330
  %334 = getelementptr inbounds i8, i8* %p.19.us.1.13, i64 1
  %335 = add nuw nsw i32 %j.010.us.1.13, 1
  %336 = icmp slt i32 %335, %10
  %337 = load i8, i8* %334, align 1
  br i1 %336, label %330, label %thread-pre-split.us.1.13

thread-pre-split.us.1.13:                         ; preds = %333, %330
  %.lcssa.us.1.13 = phi i8 [ %337, %333 ], [ %329, %330 ]
  %p.1.lcssa.us.1.13 = phi i8* [ %334, %333 ], [ %p.19.us.1.13, %330 ]
  %338 = icmp eq i8 %.lcssa.us.1.13, 0
  br i1 %338, label %.us-lcssa.us, label %.lr.ph.us.1424

.lr.ph.us.1424:                                   ; preds = %thread-pre-split.us.1.13
  %339 = getelementptr inbounds i8, i8* %cs, i64 28
  %340 = load i8, i8* %339, align 1
  br label %341

; <label>:341                                     ; preds = %344, %.lr.ph.us.1424
  %342 = phi i8 [ %1, %.lr.ph.us.1424 ], [ %348, %344 ]
  %j.010.us.14 = phi i32 [ 0, %.lr.ph.us.1424 ], [ %346, %344 ]
  %p.19.us.14 = phi i8* [ %ct, %.lr.ph.us.1424 ], [ %345, %344 ]
  %343 = icmp eq i8 %342, %340
  br i1 %343, label %thread-pre-split.us.14, label %344

; <label>:344                                     ; preds = %341
  %345 = getelementptr inbounds i8, i8* %p.19.us.14, i64 1
  %346 = add nuw nsw i32 %j.010.us.14, 1
  %347 = icmp slt i32 %346, %10
  %348 = load i8, i8* %345, align 1
  br i1 %347, label %341, label %thread-pre-split.us.14

thread-pre-split.us.14:                           ; preds = %344, %341
  %.lcssa.us.14 = phi i8 [ %348, %344 ], [ %340, %341 ]
  %p.1.lcssa.us.149 = phi i8* [ %345, %344 ], [ %p.19.us.14, %341 ]
  %349 = icmp eq i8 %.lcssa.us.14, 0
  br i1 %349, label %.us-lcssa.us, label %.lr.ph.us.146.14

.lr.ph.us.146.14:                                 ; preds = %thread-pre-split.us.14
  %350 = getelementptr inbounds i8, i8* %cs, i64 29
  %351 = load i8, i8* %350, align 1
  br label %352

; <label>:352                                     ; preds = %355, %.lr.ph.us.146.14
  %353 = phi i8 [ %1, %.lr.ph.us.146.14 ], [ %359, %355 ]
  %j.010.us.1.14 = phi i32 [ 0, %.lr.ph.us.146.14 ], [ %357, %355 ]
  %p.19.us.1.14 = phi i8* [ %ct, %.lr.ph.us.146.14 ], [ %356, %355 ]
  %354 = icmp eq i8 %353, %351
  br i1 %354, label %thread-pre-split.us.1.14, label %355

; <label>:355                                     ; preds = %352
  %356 = getelementptr inbounds i8, i8* %p.19.us.1.14, i64 1
  %357 = add nuw nsw i32 %j.010.us.1.14, 1
  %358 = icmp slt i32 %357, %10
  %359 = load i8, i8* %356, align 1
  br i1 %358, label %352, label %thread-pre-split.us.1.14

thread-pre-split.us.1.14:                         ; preds = %355, %352
  %.lcssa.us.1.14 = phi i8 [ %359, %355 ], [ %351, %352 ]
  %p.1.lcssa.us.1.14 = phi i8* [ %356, %355 ], [ %p.19.us.1.14, %352 ]
  %360 = icmp eq i8 %.lcssa.us.1.14, 0
  br i1 %360, label %.us-lcssa.us, label %.lr.ph.us.1525

.lr.ph.us.1525:                                   ; preds = %thread-pre-split.us.1.14
  %361 = getelementptr inbounds i8, i8* %cs, i64 30
  %362 = load i8, i8* %361, align 1
  br label %363

; <label>:363                                     ; preds = %366, %.lr.ph.us.1525
  %364 = phi i8 [ %1, %.lr.ph.us.1525 ], [ %370, %366 ]
  %j.010.us.15 = phi i32 [ 0, %.lr.ph.us.1525 ], [ %368, %366 ]
  %p.19.us.15 = phi i8* [ %ct, %.lr.ph.us.1525 ], [ %367, %366 ]
  %365 = icmp eq i8 %364, %362
  br i1 %365, label %thread-pre-split.us.1510, label %366

; <label>:366                                     ; preds = %363
  %367 = getelementptr inbounds i8, i8* %p.19.us.15, i64 1
  %368 = add nuw nsw i32 %j.010.us.15, 1
  %369 = icmp slt i32 %368, %10
  %370 = load i8, i8* %367, align 1
  br i1 %369, label %363, label %thread-pre-split.us.1510

thread-pre-split.us.1510:                         ; preds = %366, %363
  %.lcssa.us.15 = phi i8 [ %370, %366 ], [ %362, %363 ]
  %p.1.lcssa.us.15 = phi i8* [ %367, %366 ], [ %p.19.us.15, %363 ]
  %371 = icmp eq i8 %.lcssa.us.15, 0
  br i1 %371, label %.us-lcssa.us, label %.lr.ph.us.146.15

.lr.ph.us.146.15:                                 ; preds = %thread-pre-split.us.1510
  %372 = getelementptr inbounds i8, i8* %cs, i64 31
  %373 = load i8, i8* %372, align 1
  br label %374

; <label>:374                                     ; preds = %377, %.lr.ph.us.146.15
  %375 = phi i8 [ %1, %.lr.ph.us.146.15 ], [ %381, %377 ]
  %j.010.us.1.15 = phi i32 [ 0, %.lr.ph.us.146.15 ], [ %379, %377 ]
  %p.19.us.1.15 = phi i8* [ %ct, %.lr.ph.us.146.15 ], [ %378, %377 ]
  %376 = icmp eq i8 %375, %373
  br i1 %376, label %thread-pre-split.us.1.15, label %377

; <label>:377                                     ; preds = %374
  %378 = getelementptr inbounds i8, i8* %p.19.us.1.15, i64 1
  %379 = add nuw nsw i32 %j.010.us.1.15, 1
  %380 = icmp slt i32 %379, %10
  %381 = load i8, i8* %378, align 1
  br i1 %380, label %374, label %thread-pre-split.us.1.15

thread-pre-split.us.1.15:                         ; preds = %377, %374
  %.lcssa.us.1.15 = phi i8 [ %381, %377 ], [ %373, %374 ]
  %p.1.lcssa.us.1.15 = phi i8* [ %378, %377 ], [ %p.19.us.1.15, %374 ]
  %382 = icmp eq i8 %.lcssa.us.1.15, 0
  br i1 %382, label %.us-lcssa.us, label %.lr.ph.us.1626

.lr.ph.us.1626:                                   ; preds = %thread-pre-split.us.1.15
  %383 = getelementptr inbounds i8, i8* %cs, i64 32
  %384 = load i8, i8* %383, align 1
  br label %385

; <label>:385                                     ; preds = %388, %.lr.ph.us.1626
  %386 = phi i8 [ %1, %.lr.ph.us.1626 ], [ %392, %388 ]
  %j.010.us.16 = phi i32 [ 0, %.lr.ph.us.1626 ], [ %390, %388 ]
  %p.19.us.16 = phi i8* [ %ct, %.lr.ph.us.1626 ], [ %389, %388 ]
  %387 = icmp eq i8 %386, %384
  br i1 %387, label %thread-pre-split.us.16, label %388

; <label>:388                                     ; preds = %385
  %389 = getelementptr inbounds i8, i8* %p.19.us.16, i64 1
  %390 = add nuw nsw i32 %j.010.us.16, 1
  %391 = icmp slt i32 %390, %10
  %392 = load i8, i8* %389, align 1
  br i1 %391, label %385, label %thread-pre-split.us.16

thread-pre-split.us.16:                           ; preds = %388, %385
  %.lcssa.us.16 = phi i8 [ %392, %388 ], [ %384, %385 ]
  %p.1.lcssa.us.16 = phi i8* [ %389, %388 ], [ %p.19.us.16, %385 ]
  %393 = icmp eq i8 %.lcssa.us.16, 0
  br i1 %393, label %.us-lcssa.us, label %.lr.ph.us.146.16

.lr.ph.us.146.16:                                 ; preds = %thread-pre-split.us.16
  %394 = getelementptr inbounds i8, i8* %cs, i64 33
  %395 = load i8, i8* %394, align 1
  br label %396

; <label>:396                                     ; preds = %399, %.lr.ph.us.146.16
  %397 = phi i8 [ %1, %.lr.ph.us.146.16 ], [ %403, %399 ]
  %j.010.us.1.16 = phi i32 [ 0, %.lr.ph.us.146.16 ], [ %401, %399 ]
  %p.19.us.1.16 = phi i8* [ %ct, %.lr.ph.us.146.16 ], [ %400, %399 ]
  %398 = icmp eq i8 %397, %395
  br i1 %398, label %thread-pre-split.us.1.16, label %399

; <label>:399                                     ; preds = %396
  %400 = getelementptr inbounds i8, i8* %p.19.us.1.16, i64 1
  %401 = add nuw nsw i32 %j.010.us.1.16, 1
  %402 = icmp slt i32 %401, %10
  %403 = load i8, i8* %400, align 1
  br i1 %402, label %396, label %thread-pre-split.us.1.16

thread-pre-split.us.1.16:                         ; preds = %399, %396
  %.lcssa.us.1.16 = phi i8 [ %403, %399 ], [ %395, %396 ]
  %p.1.lcssa.us.1.16 = phi i8* [ %400, %399 ], [ %p.19.us.1.16, %396 ]
  %404 = icmp eq i8 %.lcssa.us.1.16, 0
  br i1 %404, label %.us-lcssa.us, label %.lr.ph.us.1727

.lr.ph.us.1727:                                   ; preds = %thread-pre-split.us.1.16
  %405 = getelementptr inbounds i8, i8* %cs, i64 34
  %406 = load i8, i8* %405, align 1
  br label %407

; <label>:407                                     ; preds = %410, %.lr.ph.us.1727
  %408 = phi i8 [ %1, %.lr.ph.us.1727 ], [ %414, %410 ]
  %j.010.us.17 = phi i32 [ 0, %.lr.ph.us.1727 ], [ %412, %410 ]
  %p.19.us.17 = phi i8* [ %ct, %.lr.ph.us.1727 ], [ %411, %410 ]
  %409 = icmp eq i8 %408, %406
  br i1 %409, label %thread-pre-split.us.17, label %410

; <label>:410                                     ; preds = %407
  %411 = getelementptr inbounds i8, i8* %p.19.us.17, i64 1
  %412 = add nuw nsw i32 %j.010.us.17, 1
  %413 = icmp slt i32 %412, %10
  %414 = load i8, i8* %411, align 1
  br i1 %413, label %407, label %thread-pre-split.us.17

thread-pre-split.us.17:                           ; preds = %410, %407
  %.lcssa.us.17 = phi i8 [ %414, %410 ], [ %406, %407 ]
  %p.1.lcssa.us.17 = phi i8* [ %411, %410 ], [ %p.19.us.17, %407 ]
  %415 = icmp eq i8 %.lcssa.us.17, 0
  br i1 %415, label %.us-lcssa.us, label %.lr.ph.us.146.17

.lr.ph.us.146.17:                                 ; preds = %thread-pre-split.us.17
  %416 = getelementptr inbounds i8, i8* %cs, i64 35
  %417 = load i8, i8* %416, align 1
  br label %418

; <label>:418                                     ; preds = %421, %.lr.ph.us.146.17
  %419 = phi i8 [ %1, %.lr.ph.us.146.17 ], [ %425, %421 ]
  %j.010.us.1.17 = phi i32 [ 0, %.lr.ph.us.146.17 ], [ %423, %421 ]
  %p.19.us.1.17 = phi i8* [ %ct, %.lr.ph.us.146.17 ], [ %422, %421 ]
  %420 = icmp eq i8 %419, %417
  br i1 %420, label %thread-pre-split.us.1.17, label %421

; <label>:421                                     ; preds = %418
  %422 = getelementptr inbounds i8, i8* %p.19.us.1.17, i64 1
  %423 = add nuw nsw i32 %j.010.us.1.17, 1
  %424 = icmp slt i32 %423, %10
  %425 = load i8, i8* %422, align 1
  br i1 %424, label %418, label %thread-pre-split.us.1.17

thread-pre-split.us.1.17:                         ; preds = %421, %418
  %.lcssa.us.1.17 = phi i8 [ %425, %421 ], [ %417, %418 ]
  %p.1.lcssa.us.1.17 = phi i8* [ %422, %421 ], [ %p.19.us.1.17, %418 ]
  %426 = icmp eq i8 %.lcssa.us.1.17, 0
  br i1 %426, label %.us-lcssa.us, label %.lr.ph.us.1828

.lr.ph.us.1828:                                   ; preds = %thread-pre-split.us.1.17
  %427 = getelementptr inbounds i8, i8* %cs, i64 36
  %428 = load i8, i8* %427, align 1
  br label %429

; <label>:429                                     ; preds = %432, %.lr.ph.us.1828
  %430 = phi i8 [ %1, %.lr.ph.us.1828 ], [ %436, %432 ]
  %j.010.us.18 = phi i32 [ 0, %.lr.ph.us.1828 ], [ %434, %432 ]
  %p.19.us.18 = phi i8* [ %ct, %.lr.ph.us.1828 ], [ %433, %432 ]
  %431 = icmp eq i8 %430, %428
  br i1 %431, label %thread-pre-split.us.18, label %432

; <label>:432                                     ; preds = %429
  %433 = getelementptr inbounds i8, i8* %p.19.us.18, i64 1
  %434 = add nuw nsw i32 %j.010.us.18, 1
  %435 = icmp slt i32 %434, %10
  %436 = load i8, i8* %433, align 1
  br i1 %435, label %429, label %thread-pre-split.us.18

thread-pre-split.us.18:                           ; preds = %432, %429
  %.lcssa.us.18 = phi i8 [ %436, %432 ], [ %428, %429 ]
  %p.1.lcssa.us.18 = phi i8* [ %433, %432 ], [ %p.19.us.18, %429 ]
  %437 = icmp eq i8 %.lcssa.us.18, 0
  br i1 %437, label %.us-lcssa.us, label %.lr.ph.us.146.18

.lr.ph.us.146.18:                                 ; preds = %thread-pre-split.us.18
  %438 = getelementptr inbounds i8, i8* %cs, i64 37
  %439 = load i8, i8* %438, align 1
  br label %440

; <label>:440                                     ; preds = %443, %.lr.ph.us.146.18
  %441 = phi i8 [ %1, %.lr.ph.us.146.18 ], [ %447, %443 ]
  %j.010.us.1.18 = phi i32 [ 0, %.lr.ph.us.146.18 ], [ %445, %443 ]
  %p.19.us.1.18 = phi i8* [ %ct, %.lr.ph.us.146.18 ], [ %444, %443 ]
  %442 = icmp eq i8 %441, %439
  br i1 %442, label %thread-pre-split.us.1.18, label %443

; <label>:443                                     ; preds = %440
  %444 = getelementptr inbounds i8, i8* %p.19.us.1.18, i64 1
  %445 = add nuw nsw i32 %j.010.us.1.18, 1
  %446 = icmp slt i32 %445, %10
  %447 = load i8, i8* %444, align 1
  br i1 %446, label %440, label %thread-pre-split.us.1.18

thread-pre-split.us.1.18:                         ; preds = %443, %440
  %.lcssa.us.1.18 = phi i8 [ %447, %443 ], [ %439, %440 ]
  %p.1.lcssa.us.1.18 = phi i8* [ %444, %443 ], [ %p.19.us.1.18, %440 ]
  %448 = icmp eq i8 %.lcssa.us.1.18, 0
  br i1 %448, label %.us-lcssa.us, label %.lr.ph.us.1929

.lr.ph.us.1929:                                   ; preds = %thread-pre-split.us.1.18
  %449 = getelementptr inbounds i8, i8* %cs, i64 38
  %450 = load i8, i8* %449, align 1
  br label %451

; <label>:451                                     ; preds = %454, %.lr.ph.us.1929
  %452 = phi i8 [ %1, %.lr.ph.us.1929 ], [ %458, %454 ]
  %j.010.us.19 = phi i32 [ 0, %.lr.ph.us.1929 ], [ %456, %454 ]
  %p.19.us.19 = phi i8* [ %ct, %.lr.ph.us.1929 ], [ %455, %454 ]
  %453 = icmp eq i8 %452, %450
  br i1 %453, label %thread-pre-split.us.19, label %454

; <label>:454                                     ; preds = %451
  %455 = getelementptr inbounds i8, i8* %p.19.us.19, i64 1
  %456 = add nuw nsw i32 %j.010.us.19, 1
  %457 = icmp slt i32 %456, %10
  %458 = load i8, i8* %455, align 1
  br i1 %457, label %451, label %thread-pre-split.us.19

thread-pre-split.us.19:                           ; preds = %454, %451
  %.lcssa.us.19 = phi i8 [ %458, %454 ], [ %450, %451 ]
  %p.1.lcssa.us.19 = phi i8* [ %455, %454 ], [ %p.19.us.19, %451 ]
  %459 = icmp eq i8 %.lcssa.us.19, 0
  br i1 %459, label %.us-lcssa.us, label %.lr.ph.us.146.19

.lr.ph.us.146.19:                                 ; preds = %thread-pre-split.us.19
  %460 = getelementptr inbounds i8, i8* %cs, i64 39
  %461 = load i8, i8* %460, align 1
  br label %462

; <label>:462                                     ; preds = %465, %.lr.ph.us.146.19
  %463 = phi i8 [ %1, %.lr.ph.us.146.19 ], [ %469, %465 ]
  %j.010.us.1.19 = phi i32 [ 0, %.lr.ph.us.146.19 ], [ %467, %465 ]
  %p.19.us.1.19 = phi i8* [ %ct, %.lr.ph.us.146.19 ], [ %466, %465 ]
  %464 = icmp eq i8 %463, %461
  br i1 %464, label %thread-pre-split.us.1.19, label %465

; <label>:465                                     ; preds = %462
  %466 = getelementptr inbounds i8, i8* %p.19.us.1.19, i64 1
  %467 = add nuw nsw i32 %j.010.us.1.19, 1
  %468 = icmp slt i32 %467, %10
  %469 = load i8, i8* %466, align 1
  br i1 %468, label %462, label %thread-pre-split.us.1.19

thread-pre-split.us.1.19:                         ; preds = %465, %462
  %.lcssa.us.1.19 = phi i8 [ %469, %465 ], [ %461, %462 ]
  %p.1.lcssa.us.1.19 = phi i8* [ %466, %465 ], [ %p.19.us.1.19, %462 ]
  %470 = icmp eq i8 %.lcssa.us.1.19, 0
  br i1 %470, label %.us-lcssa.us, label %.lr.ph.us.2030

.lr.ph.us.2030:                                   ; preds = %thread-pre-split.us.1.19
  %471 = getelementptr inbounds i8, i8* %cs, i64 40
  %472 = load i8, i8* %471, align 1
  br label %473

; <label>:473                                     ; preds = %476, %.lr.ph.us.2030
  %474 = phi i8 [ %1, %.lr.ph.us.2030 ], [ %480, %476 ]
  %j.010.us.20 = phi i32 [ 0, %.lr.ph.us.2030 ], [ %478, %476 ]
  %p.19.us.20 = phi i8* [ %ct, %.lr.ph.us.2030 ], [ %477, %476 ]
  %475 = icmp eq i8 %474, %472
  br i1 %475, label %thread-pre-split.us.20, label %476

; <label>:476                                     ; preds = %473
  %477 = getelementptr inbounds i8, i8* %p.19.us.20, i64 1
  %478 = add nuw nsw i32 %j.010.us.20, 1
  %479 = icmp slt i32 %478, %10
  %480 = load i8, i8* %477, align 1
  br i1 %479, label %473, label %thread-pre-split.us.20

thread-pre-split.us.20:                           ; preds = %476, %473
  %.lcssa.us.20 = phi i8 [ %480, %476 ], [ %472, %473 ]
  %p.1.lcssa.us.20 = phi i8* [ %477, %476 ], [ %p.19.us.20, %473 ]
  %481 = icmp eq i8 %.lcssa.us.20, 0
  br i1 %481, label %.us-lcssa.us, label %.lr.ph.us.146.20

.lr.ph.us.146.20:                                 ; preds = %thread-pre-split.us.20
  %482 = getelementptr inbounds i8, i8* %cs, i64 41
  %483 = load i8, i8* %482, align 1
  br label %484

; <label>:484                                     ; preds = %487, %.lr.ph.us.146.20
  %485 = phi i8 [ %1, %.lr.ph.us.146.20 ], [ %491, %487 ]
  %j.010.us.1.20 = phi i32 [ 0, %.lr.ph.us.146.20 ], [ %489, %487 ]
  %p.19.us.1.20 = phi i8* [ %ct, %.lr.ph.us.146.20 ], [ %488, %487 ]
  %486 = icmp eq i8 %485, %483
  br i1 %486, label %thread-pre-split.us.1.20, label %487

; <label>:487                                     ; preds = %484
  %488 = getelementptr inbounds i8, i8* %p.19.us.1.20, i64 1
  %489 = add nuw nsw i32 %j.010.us.1.20, 1
  %490 = icmp slt i32 %489, %10
  %491 = load i8, i8* %488, align 1
  br i1 %490, label %484, label %thread-pre-split.us.1.20

thread-pre-split.us.1.20:                         ; preds = %487, %484
  %.lcssa.us.1.20 = phi i8 [ %491, %487 ], [ %483, %484 ]
  %p.1.lcssa.us.1.20 = phi i8* [ %488, %487 ], [ %p.19.us.1.20, %484 ]
  %492 = icmp eq i8 %.lcssa.us.1.20, 0
  br i1 %492, label %.us-lcssa.us, label %.lr.ph.us.2131

.lr.ph.us.2131:                                   ; preds = %thread-pre-split.us.1.20
  %493 = getelementptr inbounds i8, i8* %cs, i64 42
  %494 = load i8, i8* %493, align 1
  br label %495

; <label>:495                                     ; preds = %498, %.lr.ph.us.2131
  %496 = phi i8 [ %1, %.lr.ph.us.2131 ], [ %502, %498 ]
  %j.010.us.21 = phi i32 [ 0, %.lr.ph.us.2131 ], [ %500, %498 ]
  %p.19.us.21 = phi i8* [ %ct, %.lr.ph.us.2131 ], [ %499, %498 ]
  %497 = icmp eq i8 %496, %494
  br i1 %497, label %thread-pre-split.us.21, label %498

; <label>:498                                     ; preds = %495
  %499 = getelementptr inbounds i8, i8* %p.19.us.21, i64 1
  %500 = add nuw nsw i32 %j.010.us.21, 1
  %501 = icmp slt i32 %500, %10
  %502 = load i8, i8* %499, align 1
  br i1 %501, label %495, label %thread-pre-split.us.21

thread-pre-split.us.21:                           ; preds = %498, %495
  %.lcssa.us.21 = phi i8 [ %502, %498 ], [ %494, %495 ]
  %p.1.lcssa.us.21 = phi i8* [ %499, %498 ], [ %p.19.us.21, %495 ]
  %503 = icmp eq i8 %.lcssa.us.21, 0
  br i1 %503, label %.us-lcssa.us, label %.lr.ph.us.146.21

.lr.ph.us.146.21:                                 ; preds = %thread-pre-split.us.21
  %504 = getelementptr inbounds i8, i8* %cs, i64 43
  %505 = load i8, i8* %504, align 1
  br label %506

; <label>:506                                     ; preds = %509, %.lr.ph.us.146.21
  %507 = phi i8 [ %1, %.lr.ph.us.146.21 ], [ %513, %509 ]
  %j.010.us.1.21 = phi i32 [ 0, %.lr.ph.us.146.21 ], [ %511, %509 ]
  %p.19.us.1.21 = phi i8* [ %ct, %.lr.ph.us.146.21 ], [ %510, %509 ]
  %508 = icmp eq i8 %507, %505
  br i1 %508, label %thread-pre-split.us.1.21, label %509

; <label>:509                                     ; preds = %506
  %510 = getelementptr inbounds i8, i8* %p.19.us.1.21, i64 1
  %511 = add nuw nsw i32 %j.010.us.1.21, 1
  %512 = icmp slt i32 %511, %10
  %513 = load i8, i8* %510, align 1
  br i1 %512, label %506, label %thread-pre-split.us.1.21

thread-pre-split.us.1.21:                         ; preds = %509, %506
  %.lcssa.us.1.21 = phi i8 [ %513, %509 ], [ %505, %506 ]
  %p.1.lcssa.us.1.21 = phi i8* [ %510, %509 ], [ %p.19.us.1.21, %506 ]
  %514 = icmp eq i8 %.lcssa.us.1.21, 0
  br i1 %514, label %.us-lcssa.us, label %.lr.ph.us.2232

.lr.ph.us.2232:                                   ; preds = %thread-pre-split.us.1.21
  %515 = getelementptr inbounds i8, i8* %cs, i64 44
  %516 = load i8, i8* %515, align 1
  br label %517

; <label>:517                                     ; preds = %520, %.lr.ph.us.2232
  %518 = phi i8 [ %1, %.lr.ph.us.2232 ], [ %524, %520 ]
  %j.010.us.22 = phi i32 [ 0, %.lr.ph.us.2232 ], [ %522, %520 ]
  %p.19.us.22 = phi i8* [ %ct, %.lr.ph.us.2232 ], [ %521, %520 ]
  %519 = icmp eq i8 %518, %516
  br i1 %519, label %thread-pre-split.us.22, label %520

; <label>:520                                     ; preds = %517
  %521 = getelementptr inbounds i8, i8* %p.19.us.22, i64 1
  %522 = add nuw nsw i32 %j.010.us.22, 1
  %523 = icmp slt i32 %522, %10
  %524 = load i8, i8* %521, align 1
  br i1 %523, label %517, label %thread-pre-split.us.22

thread-pre-split.us.22:                           ; preds = %520, %517
  %.lcssa.us.22 = phi i8 [ %524, %520 ], [ %516, %517 ]
  %p.1.lcssa.us.22 = phi i8* [ %521, %520 ], [ %p.19.us.22, %517 ]
  %525 = icmp eq i8 %.lcssa.us.22, 0
  br i1 %525, label %.us-lcssa.us, label %.lr.ph.us.146.22

.lr.ph.us.146.22:                                 ; preds = %thread-pre-split.us.22
  %526 = getelementptr inbounds i8, i8* %cs, i64 45
  %527 = load i8, i8* %526, align 1
  br label %528

; <label>:528                                     ; preds = %531, %.lr.ph.us.146.22
  %529 = phi i8 [ %1, %.lr.ph.us.146.22 ], [ %535, %531 ]
  %j.010.us.1.22 = phi i32 [ 0, %.lr.ph.us.146.22 ], [ %533, %531 ]
  %p.19.us.1.22 = phi i8* [ %ct, %.lr.ph.us.146.22 ], [ %532, %531 ]
  %530 = icmp eq i8 %529, %527
  br i1 %530, label %thread-pre-split.us.1.22, label %531

; <label>:531                                     ; preds = %528
  %532 = getelementptr inbounds i8, i8* %p.19.us.1.22, i64 1
  %533 = add nuw nsw i32 %j.010.us.1.22, 1
  %534 = icmp slt i32 %533, %10
  %535 = load i8, i8* %532, align 1
  br i1 %534, label %528, label %thread-pre-split.us.1.22

thread-pre-split.us.1.22:                         ; preds = %531, %528
  %.lcssa.us.1.22 = phi i8 [ %535, %531 ], [ %527, %528 ]
  %p.1.lcssa.us.1.22 = phi i8* [ %532, %531 ], [ %p.19.us.1.22, %528 ]
  %536 = icmp eq i8 %.lcssa.us.1.22, 0
  br i1 %536, label %.us-lcssa.us, label %.lr.ph.us.2333

.lr.ph.us.2333:                                   ; preds = %thread-pre-split.us.1.22
  %537 = getelementptr inbounds i8, i8* %cs, i64 46
  %538 = load i8, i8* %537, align 1
  br label %539

; <label>:539                                     ; preds = %542, %.lr.ph.us.2333
  %540 = phi i8 [ %1, %.lr.ph.us.2333 ], [ %546, %542 ]
  %j.010.us.23 = phi i32 [ 0, %.lr.ph.us.2333 ], [ %544, %542 ]
  %p.19.us.23 = phi i8* [ %ct, %.lr.ph.us.2333 ], [ %543, %542 ]
  %541 = icmp eq i8 %540, %538
  br i1 %541, label %thread-pre-split.us.23, label %542

; <label>:542                                     ; preds = %539
  %543 = getelementptr inbounds i8, i8* %p.19.us.23, i64 1
  %544 = add nuw nsw i32 %j.010.us.23, 1
  %545 = icmp slt i32 %544, %10
  %546 = load i8, i8* %543, align 1
  br i1 %545, label %539, label %thread-pre-split.us.23

thread-pre-split.us.23:                           ; preds = %542, %539
  %.lcssa.us.23 = phi i8 [ %546, %542 ], [ %538, %539 ]
  %p.1.lcssa.us.23 = phi i8* [ %543, %542 ], [ %p.19.us.23, %539 ]
  %547 = icmp eq i8 %.lcssa.us.23, 0
  br i1 %547, label %.us-lcssa.us, label %.lr.ph.us.146.23

.lr.ph.us.146.23:                                 ; preds = %thread-pre-split.us.23
  %548 = getelementptr inbounds i8, i8* %cs, i64 47
  %549 = load i8, i8* %548, align 1
  br label %550

; <label>:550                                     ; preds = %553, %.lr.ph.us.146.23
  %551 = phi i8 [ %1, %.lr.ph.us.146.23 ], [ %557, %553 ]
  %j.010.us.1.23 = phi i32 [ 0, %.lr.ph.us.146.23 ], [ %555, %553 ]
  %p.19.us.1.23 = phi i8* [ %ct, %.lr.ph.us.146.23 ], [ %554, %553 ]
  %552 = icmp eq i8 %551, %549
  br i1 %552, label %thread-pre-split.us.1.23, label %553

; <label>:553                                     ; preds = %550
  %554 = getelementptr inbounds i8, i8* %p.19.us.1.23, i64 1
  %555 = add nuw nsw i32 %j.010.us.1.23, 1
  %556 = icmp slt i32 %555, %10
  %557 = load i8, i8* %554, align 1
  br i1 %556, label %550, label %thread-pre-split.us.1.23

thread-pre-split.us.1.23:                         ; preds = %553, %550
  %.lcssa.us.1.23 = phi i8 [ %557, %553 ], [ %549, %550 ]
  %p.1.lcssa.us.1.23 = phi i8* [ %554, %553 ], [ %p.19.us.1.23, %550 ]
  %558 = icmp eq i8 %.lcssa.us.1.23, 0
  br i1 %558, label %.us-lcssa.us, label %.lr.ph.us.2434

.lr.ph.us.2434:                                   ; preds = %thread-pre-split.us.1.23
  %559 = getelementptr inbounds i8, i8* %cs, i64 48
  %560 = load i8, i8* %559, align 1
  br label %561

; <label>:561                                     ; preds = %564, %.lr.ph.us.2434
  %562 = phi i8 [ %1, %.lr.ph.us.2434 ], [ %568, %564 ]
  %j.010.us.24 = phi i32 [ 0, %.lr.ph.us.2434 ], [ %566, %564 ]
  %p.19.us.24 = phi i8* [ %ct, %.lr.ph.us.2434 ], [ %565, %564 ]
  %563 = icmp eq i8 %562, %560
  br i1 %563, label %thread-pre-split.us.24, label %564

; <label>:564                                     ; preds = %561
  %565 = getelementptr inbounds i8, i8* %p.19.us.24, i64 1
  %566 = add nuw nsw i32 %j.010.us.24, 1
  %567 = icmp slt i32 %566, %10
  %568 = load i8, i8* %565, align 1
  br i1 %567, label %561, label %thread-pre-split.us.24

thread-pre-split.us.24:                           ; preds = %564, %561
  %.lcssa.us.24 = phi i8 [ %568, %564 ], [ %560, %561 ]
  %p.1.lcssa.us.24 = phi i8* [ %565, %564 ], [ %p.19.us.24, %561 ]
  %569 = icmp eq i8 %.lcssa.us.24, 0
  br i1 %569, label %.us-lcssa.us, label %.lr.ph.us.146.24

.lr.ph.us.146.24:                                 ; preds = %thread-pre-split.us.24
  %570 = getelementptr inbounds i8, i8* %cs, i64 49
  %571 = load i8, i8* %570, align 1
  br label %572

; <label>:572                                     ; preds = %575, %.lr.ph.us.146.24
  %573 = phi i8 [ %1, %.lr.ph.us.146.24 ], [ %579, %575 ]
  %j.010.us.1.24 = phi i32 [ 0, %.lr.ph.us.146.24 ], [ %577, %575 ]
  %p.19.us.1.24 = phi i8* [ %ct, %.lr.ph.us.146.24 ], [ %576, %575 ]
  %574 = icmp eq i8 %573, %571
  br i1 %574, label %thread-pre-split.us.1.24, label %575

; <label>:575                                     ; preds = %572
  %576 = getelementptr inbounds i8, i8* %p.19.us.1.24, i64 1
  %577 = add nuw nsw i32 %j.010.us.1.24, 1
  %578 = icmp slt i32 %577, %10
  %579 = load i8, i8* %576, align 1
  br i1 %578, label %572, label %thread-pre-split.us.1.24

thread-pre-split.us.1.24:                         ; preds = %575, %572
  %.lcssa.us.1.24 = phi i8 [ %579, %575 ], [ %571, %572 ]
  %p.1.lcssa.us.1.24 = phi i8* [ %576, %575 ], [ %p.19.us.1.24, %572 ]
  %580 = icmp eq i8 %.lcssa.us.1.24, 0
  %581 = getelementptr inbounds i8, i8* %cs, i64 50
  %. = select i1 %580, i64 49, i64 50
  %.1 = select i1 %580, i8* %570, i8* %581
  br label %.us-lcssa.us

; <label>:582                                     ; preds = %51
  %583 = getelementptr inbounds i8, i8* %ct, i64 6
  %584 = load i8, i8* %583, align 1
  %585 = icmp eq i8 %584, 0
  br i1 %585, label %strlen2.exit, label %586

; <label>:586                                     ; preds = %582
  %587 = getelementptr inbounds i8, i8* %ct, i64 7
  %588 = load i8, i8* %587, align 1
  %589 = icmp eq i8 %588, 0
  br i1 %589, label %strlen2.exit, label %590

; <label>:590                                     ; preds = %586
  %591 = getelementptr inbounds i8, i8* %ct, i64 8
  %592 = load i8, i8* %591, align 1
  %593 = icmp eq i8 %592, 0
  br i1 %593, label %strlen2.exit, label %594

; <label>:594                                     ; preds = %590
  %595 = getelementptr inbounds i8, i8* %ct, i64 9
  %596 = load i8, i8* %595, align 1
  %597 = icmp eq i8 %596, 0
  br i1 %597, label %strlen2.exit, label %598

; <label>:598                                     ; preds = %594
  %599 = getelementptr inbounds i8, i8* %ct, i64 10
  %600 = load i8, i8* %599, align 1
  %601 = icmp eq i8 %600, 0
  br i1 %601, label %strlen2.exit, label %602

; <label>:602                                     ; preds = %598
  %603 = getelementptr inbounds i8, i8* %ct, i64 11
  %604 = load i8, i8* %603, align 1
  %605 = icmp eq i8 %604, 0
  br i1 %605, label %strlen2.exit, label %606

; <label>:606                                     ; preds = %602
  %607 = getelementptr inbounds i8, i8* %ct, i64 12
  %608 = load i8, i8* %607, align 1
  %609 = icmp eq i8 %608, 0
  br i1 %609, label %strlen2.exit, label %610

; <label>:610                                     ; preds = %606
  %611 = getelementptr inbounds i8, i8* %ct, i64 13
  %612 = load i8, i8* %611, align 1
  %613 = icmp eq i8 %612, 0
  br i1 %613, label %strlen2.exit, label %614

; <label>:614                                     ; preds = %610
  %615 = getelementptr inbounds i8, i8* %ct, i64 14
  %616 = load i8, i8* %615, align 1
  %617 = icmp eq i8 %616, 0
  br i1 %617, label %strlen2.exit, label %618

; <label>:618                                     ; preds = %614
  %619 = getelementptr inbounds i8, i8* %ct, i64 15
  %620 = load i8, i8* %619, align 1
  %621 = icmp eq i8 %620, 0
  br i1 %621, label %strlen2.exit, label %622

; <label>:622                                     ; preds = %618
  %623 = getelementptr inbounds i8, i8* %ct, i64 16
  %624 = load i8, i8* %623, align 1
  %625 = icmp eq i8 %624, 0
  br i1 %625, label %strlen2.exit, label %626

; <label>:626                                     ; preds = %622
  %627 = getelementptr inbounds i8, i8* %ct, i64 17
  %628 = load i8, i8* %627, align 1
  %629 = icmp eq i8 %628, 0
  br i1 %629, label %strlen2.exit, label %630

; <label>:630                                     ; preds = %626
  %631 = getelementptr inbounds i8, i8* %ct, i64 18
  %632 = load i8, i8* %631, align 1
  %633 = icmp eq i8 %632, 0
  br i1 %633, label %strlen2.exit, label %634

; <label>:634                                     ; preds = %630
  %635 = getelementptr inbounds i8, i8* %ct, i64 19
  %636 = load i8, i8* %635, align 1
  %637 = icmp eq i8 %636, 0
  br i1 %637, label %strlen2.exit, label %638

; <label>:638                                     ; preds = %634
  %639 = getelementptr inbounds i8, i8* %ct, i64 20
  %640 = load i8, i8* %639, align 1
  %641 = icmp eq i8 %640, 0
  br i1 %641, label %strlen2.exit, label %642

; <label>:642                                     ; preds = %638
  %643 = getelementptr inbounds i8, i8* %ct, i64 21
  %644 = load i8, i8* %643, align 1
  %645 = icmp eq i8 %644, 0
  br i1 %645, label %strlen2.exit, label %646

; <label>:646                                     ; preds = %642
  %647 = getelementptr inbounds i8, i8* %ct, i64 22
  %648 = load i8, i8* %647, align 1
  %649 = icmp eq i8 %648, 0
  br i1 %649, label %strlen2.exit, label %650

; <label>:650                                     ; preds = %646
  %651 = getelementptr inbounds i8, i8* %ct, i64 23
  %652 = load i8, i8* %651, align 1
  %653 = icmp eq i8 %652, 0
  br i1 %653, label %strlen2.exit, label %654

; <label>:654                                     ; preds = %650
  %655 = getelementptr inbounds i8, i8* %ct, i64 24
  %656 = load i8, i8* %655, align 1
  %657 = icmp eq i8 %656, 0
  br i1 %657, label %strlen2.exit, label %658

; <label>:658                                     ; preds = %654
  %659 = getelementptr inbounds i8, i8* %ct, i64 25
  %660 = load i8, i8* %659, align 1
  %661 = icmp eq i8 %660, 0
  br i1 %661, label %strlen2.exit, label %662

; <label>:662                                     ; preds = %658
  %663 = getelementptr inbounds i8, i8* %ct, i64 26
  %664 = load i8, i8* %663, align 1
  %665 = icmp eq i8 %664, 0
  br i1 %665, label %strlen2.exit, label %666

; <label>:666                                     ; preds = %662
  %667 = getelementptr inbounds i8, i8* %ct, i64 27
  %668 = load i8, i8* %667, align 1
  %669 = icmp eq i8 %668, 0
  br i1 %669, label %strlen2.exit, label %670

; <label>:670                                     ; preds = %666
  %671 = getelementptr inbounds i8, i8* %ct, i64 28
  %672 = load i8, i8* %671, align 1
  %673 = icmp eq i8 %672, 0
  br i1 %673, label %strlen2.exit, label %674

; <label>:674                                     ; preds = %670
  %675 = getelementptr inbounds i8, i8* %ct, i64 29
  %676 = load i8, i8* %675, align 1
  %677 = icmp eq i8 %676, 0
  br i1 %677, label %strlen2.exit, label %678

; <label>:678                                     ; preds = %674
  %679 = getelementptr inbounds i8, i8* %ct, i64 30
  %680 = load i8, i8* %679, align 1
  %681 = icmp eq i8 %680, 0
  br i1 %681, label %strlen2.exit, label %682

; <label>:682                                     ; preds = %678
  %683 = getelementptr inbounds i8, i8* %ct, i64 31
  %684 = load i8, i8* %683, align 1
  %685 = icmp eq i8 %684, 0
  br i1 %685, label %strlen2.exit, label %686

; <label>:686                                     ; preds = %682
  %687 = getelementptr inbounds i8, i8* %ct, i64 32
  %688 = load i8, i8* %687, align 1
  %689 = icmp eq i8 %688, 0
  br i1 %689, label %strlen2.exit, label %690

; <label>:690                                     ; preds = %686
  %691 = getelementptr inbounds i8, i8* %ct, i64 33
  %692 = load i8, i8* %691, align 1
  %693 = icmp eq i8 %692, 0
  br i1 %693, label %strlen2.exit, label %694

; <label>:694                                     ; preds = %690
  %695 = getelementptr inbounds i8, i8* %ct, i64 34
  %696 = load i8, i8* %695, align 1
  %697 = icmp eq i8 %696, 0
  br i1 %697, label %strlen2.exit, label %698

; <label>:698                                     ; preds = %694
  %699 = getelementptr inbounds i8, i8* %ct, i64 35
  %700 = load i8, i8* %699, align 1
  %701 = icmp eq i8 %700, 0
  br i1 %701, label %strlen2.exit, label %702

; <label>:702                                     ; preds = %698
  %703 = getelementptr inbounds i8, i8* %ct, i64 36
  %704 = load i8, i8* %703, align 1
  %705 = icmp eq i8 %704, 0
  br i1 %705, label %strlen2.exit, label %706

; <label>:706                                     ; preds = %702
  %707 = getelementptr inbounds i8, i8* %ct, i64 37
  %708 = load i8, i8* %707, align 1
  %709 = icmp eq i8 %708, 0
  br i1 %709, label %strlen2.exit, label %710

; <label>:710                                     ; preds = %706
  %711 = getelementptr inbounds i8, i8* %ct, i64 38
  %712 = load i8, i8* %711, align 1
  %713 = icmp eq i8 %712, 0
  br i1 %713, label %strlen2.exit, label %714

; <label>:714                                     ; preds = %710
  %715 = getelementptr inbounds i8, i8* %ct, i64 39
  %716 = load i8, i8* %715, align 1
  %717 = icmp eq i8 %716, 0
  br i1 %717, label %strlen2.exit, label %718

; <label>:718                                     ; preds = %714
  %719 = getelementptr inbounds i8, i8* %ct, i64 40
  %720 = load i8, i8* %719, align 1
  %721 = icmp eq i8 %720, 0
  br i1 %721, label %strlen2.exit, label %722

; <label>:722                                     ; preds = %718
  %723 = getelementptr inbounds i8, i8* %ct, i64 41
  %724 = load i8, i8* %723, align 1
  %725 = icmp eq i8 %724, 0
  br i1 %725, label %strlen2.exit, label %726

; <label>:726                                     ; preds = %722
  %727 = getelementptr inbounds i8, i8* %ct, i64 42
  %728 = load i8, i8* %727, align 1
  %729 = icmp eq i8 %728, 0
  br i1 %729, label %strlen2.exit, label %730

; <label>:730                                     ; preds = %726
  %731 = getelementptr inbounds i8, i8* %ct, i64 43
  %732 = load i8, i8* %731, align 1
  %733 = icmp eq i8 %732, 0
  br i1 %733, label %strlen2.exit, label %734

; <label>:734                                     ; preds = %730
  %735 = getelementptr inbounds i8, i8* %ct, i64 44
  %736 = load i8, i8* %735, align 1
  %737 = icmp eq i8 %736, 0
  br i1 %737, label %strlen2.exit, label %738

; <label>:738                                     ; preds = %734
  %739 = getelementptr inbounds i8, i8* %ct, i64 45
  %740 = load i8, i8* %739, align 1
  %741 = icmp eq i8 %740, 0
  br i1 %741, label %strlen2.exit, label %742

; <label>:742                                     ; preds = %738
  %743 = getelementptr inbounds i8, i8* %ct, i64 46
  %744 = load i8, i8* %743, align 1
  %745 = icmp eq i8 %744, 0
  br i1 %745, label %strlen2.exit, label %746

; <label>:746                                     ; preds = %742
  %747 = getelementptr inbounds i8, i8* %ct, i64 47
  %748 = load i8, i8* %747, align 1
  %749 = icmp eq i8 %748, 0
  br i1 %749, label %strlen2.exit, label %750

; <label>:750                                     ; preds = %746
  %751 = getelementptr inbounds i8, i8* %ct, i64 48
  %752 = load i8, i8* %751, align 1
  %753 = icmp eq i8 %752, 0
  br i1 %753, label %strlen2.exit, label %754

; <label>:754                                     ; preds = %750
  %755 = getelementptr inbounds i8, i8* %ct, i64 49
  %756 = load i8, i8* %755, align 1
  %757 = icmp eq i8 %756, 0
  br i1 %757, label %strlen2.exit, label %758

; <label>:758                                     ; preds = %754
  %759 = getelementptr inbounds i8, i8* %ct, i64 50
  %760 = load i8, i8* %759, align 1
  %761 = icmp eq i8 %760, 0
  br i1 %761, label %strlen2.exit, label %7
}

; Function Attrs: alwaysinline nounwind readonly uwtable
define i64 @strcspn2(i8* nocapture readonly %cs, i8* nocapture readonly %ct) #16 {
  %1 = load i8, i8* %ct, align 1
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %strlen2.exit, label %3

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds i8, i8* %ct, i64 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %strlen2.exit, label %49

; <label>:7                                       ; preds = %909
  %8 = tail call i64 @strlen(i8* nonnull %910) #13
  %9 = add i64 %8, 50
  br label %strlen2.exit

strlen2.exit:                                     ; preds = %0, %3, %49, %53, %57, %61, %733, %737, %741, %745, %749, %753, %757, %761, %765, %769, %773, %777, %781, %785, %789, %793, %797, %801, %805, %809, %813, %817, %821, %825, %829, %833, %837, %841, %845, %849, %853, %857, %861, %865, %869, %873, %877, %881, %885, %889, %893, %897, %901, %905, %909, %7
  %.0 = phi i64 [ %9, %7 ], [ 50, %909 ], [ 0, %0 ], [ 1, %3 ], [ 2, %49 ], [ 3, %53 ], [ 4, %57 ], [ 5, %61 ], [ 6, %733 ], [ 7, %737 ], [ 8, %741 ], [ 9, %745 ], [ 10, %749 ], [ 11, %753 ], [ 12, %757 ], [ 13, %761 ], [ 14, %765 ], [ 15, %769 ], [ 16, %773 ], [ 17, %777 ], [ 18, %781 ], [ 19, %785 ], [ 20, %789 ], [ 21, %793 ], [ 22, %797 ], [ 23, %801 ], [ 24, %805 ], [ 25, %809 ], [ 26, %813 ], [ 27, %817 ], [ 28, %821 ], [ 29, %825 ], [ 30, %829 ], [ 31, %833 ], [ 32, %837 ], [ 33, %841 ], [ 34, %845 ], [ 35, %849 ], [ 36, %853 ], [ 37, %857 ], [ 38, %861 ], [ 39, %865 ], [ 40, %869 ], [ 41, %873 ], [ 42, %877 ], [ 43, %881 ], [ 44, %885 ], [ 45, %889 ], [ 46, %893 ], [ 47, %897 ], [ 48, %901 ], [ 49, %905 ]
  %10 = trunc i64 %.0 to i32
  %11 = icmp sgt i32 %10, 0
  %12 = load i8, i8* %cs, align 1
  %13 = icmp eq i8 %12, 0
  br i1 %11, label %strlen2.exit.split.us, label %strlen2.exit.split

strlen2.exit.split.us:                            ; preds = %strlen2.exit
  br i1 %13, label %.thread7, label %.preheader.us.preheader

.preheader.us.preheader:                          ; preds = %strlen2.exit.split.us
  br label %.preheader.us

.preheader.us:                                    ; preds = %.preheader.us.preheader, %16
  %14 = phi i8 [ %20, %16 ], [ %1, %.preheader.us.preheader ]
  %j.015.us = phi i32 [ %18, %16 ], [ 0, %.preheader.us.preheader ]
  %p.114.us = phi i8* [ %17, %16 ], [ %ct, %.preheader.us.preheader ]
  %15 = icmp eq i8 %14, %12
  br i1 %15, label %thread-pre-split.us, label %16

; <label>:16                                      ; preds = %.preheader.us
  %17 = getelementptr inbounds i8, i8* %p.114.us, i64 1
  %18 = add nuw nsw i32 %j.015.us, 1
  %19 = icmp slt i32 %18, %10
  %20 = load i8, i8* %17, align 1
  br i1 %19, label %.preheader.us, label %thread-pre-split.us

thread-pre-split.us:                              ; preds = %.preheader.us, %16
  %.lcssa.us = phi i8 [ %20, %16 ], [ %12, %.preheader.us ]
  %p.1.lcssa.us = phi i8* [ %17, %16 ], [ %p.114.us, %.preheader.us ]
  %21 = icmp eq i8 %.lcssa.us, 0
  br i1 %21, label %strlen2.exit.split.us.160, label %.us-lcssa.us

strlen2.exit.split.us.160:                        ; preds = %thread-pre-split.us
  %22 = getelementptr inbounds i8, i8* %cs, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %.thread7, label %.preheader.us.1.preheader

.preheader.us.1.preheader:                        ; preds = %strlen2.exit.split.us.160
  br label %.preheader.us.1

strlen2.exit.split:                               ; preds = %strlen2.exit
  br i1 %13, label %.thread7, label %.preheader

.preheader:                                       ; preds = %strlen2.exit.split
  br i1 %2, label %strlen2.exit.split.161, label %.us-lcssa.us

strlen2.exit.split.161:                           ; preds = %.preheader
  %25 = getelementptr inbounds i8, i8* %cs, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %.thread7, label %strlen2.exit.split.140

.us-lcssa.us:                                     ; preds = %thread-pre-split.us.1.24, %.preheader, %.preheader.1.24, %thread-pre-split.us, %thread-pre-split.us.1, %thread-pre-split.us.17, %thread-pre-split.us.1.1, %thread-pre-split.us.2, %thread-pre-split.us.1.2, %thread-pre-split.us.3, %thread-pre-split.us.1.3, %thread-pre-split.us.4, %thread-pre-split.us.1.4, %thread-pre-split.us.5, %thread-pre-split.us.1.5, %thread-pre-split.us.6, %thread-pre-split.us.1.6, %thread-pre-split.us.7, %thread-pre-split.us.1.7, %thread-pre-split.us.8, %thread-pre-split.us.1.8, %thread-pre-split.us.9, %thread-pre-split.us.1.9, %thread-pre-split.us.10, %thread-pre-split.us.1.10, %thread-pre-split.us.11, %thread-pre-split.us.1.11, %thread-pre-split.us.12, %thread-pre-split.us.1.12, %thread-pre-split.us.13, %thread-pre-split.us.1.13, %thread-pre-split.us.14, %thread-pre-split.us.1.14, %thread-pre-split.us.15, %thread-pre-split.us.1.15, %thread-pre-split.us.16, %thread-pre-split.us.1.16, %thread-pre-split.us.1714, %thread-pre-split.us.1.17, %thread-pre-split.us.18, %thread-pre-split.us.1.18, %thread-pre-split.us.19, %thread-pre-split.us.1.19, %thread-pre-split.us.20, %thread-pre-split.us.1.20, %thread-pre-split.us.21, %thread-pre-split.us.1.21, %thread-pre-split.us.22, %thread-pre-split.us.1.22, %thread-pre-split.us.23, %thread-pre-split.us.1.23, %thread-pre-split.us.24
  %n.0.lcssa = phi i64 [ 0, %thread-pre-split.us ], [ 1, %thread-pre-split.us.1 ], [ 2, %thread-pre-split.us.17 ], [ 3, %thread-pre-split.us.1.1 ], [ 4, %thread-pre-split.us.2 ], [ 5, %thread-pre-split.us.1.2 ], [ 6, %thread-pre-split.us.3 ], [ 7, %thread-pre-split.us.1.3 ], [ 8, %thread-pre-split.us.4 ], [ 9, %thread-pre-split.us.1.4 ], [ 10, %thread-pre-split.us.5 ], [ 11, %thread-pre-split.us.1.5 ], [ 12, %thread-pre-split.us.6 ], [ 13, %thread-pre-split.us.1.6 ], [ 14, %thread-pre-split.us.7 ], [ 15, %thread-pre-split.us.1.7 ], [ 16, %thread-pre-split.us.8 ], [ 17, %thread-pre-split.us.1.8 ], [ 18, %thread-pre-split.us.9 ], [ 19, %thread-pre-split.us.1.9 ], [ 20, %thread-pre-split.us.10 ], [ 21, %thread-pre-split.us.1.10 ], [ 22, %thread-pre-split.us.11 ], [ 23, %thread-pre-split.us.1.11 ], [ 24, %thread-pre-split.us.12 ], [ 25, %thread-pre-split.us.1.12 ], [ 26, %thread-pre-split.us.13 ], [ 27, %thread-pre-split.us.1.13 ], [ 28, %thread-pre-split.us.14 ], [ 29, %thread-pre-split.us.1.14 ], [ 30, %thread-pre-split.us.15 ], [ 31, %thread-pre-split.us.1.15 ], [ 32, %thread-pre-split.us.16 ], [ 33, %thread-pre-split.us.1.16 ], [ 34, %thread-pre-split.us.1714 ], [ 35, %thread-pre-split.us.1.17 ], [ 36, %thread-pre-split.us.18 ], [ 37, %thread-pre-split.us.1.18 ], [ 38, %thread-pre-split.us.19 ], [ 39, %thread-pre-split.us.1.19 ], [ 40, %thread-pre-split.us.20 ], [ 41, %thread-pre-split.us.1.20 ], [ 42, %thread-pre-split.us.21 ], [ 43, %thread-pre-split.us.1.21 ], [ 44, %thread-pre-split.us.22 ], [ 45, %thread-pre-split.us.1.22 ], [ 46, %thread-pre-split.us.23 ], [ 47, %thread-pre-split.us.1.23 ], [ 48, %thread-pre-split.us.24 ], [ 0, %.preheader ], [ 50, %.preheader.1.24 ], [ %., %thread-pre-split.us.1.24 ]
  %.02.lcssa = phi i8* [ %cs, %thread-pre-split.us ], [ %22, %thread-pre-split.us.1 ], [ %43, %thread-pre-split.us.17 ], [ %73, %thread-pre-split.us.1.1 ], [ %84, %thread-pre-split.us.2 ], [ %95, %thread-pre-split.us.1.2 ], [ %106, %thread-pre-split.us.3 ], [ %117, %thread-pre-split.us.1.3 ], [ %128, %thread-pre-split.us.4 ], [ %139, %thread-pre-split.us.1.4 ], [ %150, %thread-pre-split.us.5 ], [ %161, %thread-pre-split.us.1.5 ], [ %172, %thread-pre-split.us.6 ], [ %183, %thread-pre-split.us.1.6 ], [ %194, %thread-pre-split.us.7 ], [ %205, %thread-pre-split.us.1.7 ], [ %216, %thread-pre-split.us.8 ], [ %227, %thread-pre-split.us.1.8 ], [ %238, %thread-pre-split.us.9 ], [ %249, %thread-pre-split.us.1.9 ], [ %260, %thread-pre-split.us.10 ], [ %271, %thread-pre-split.us.1.10 ], [ %282, %thread-pre-split.us.11 ], [ %293, %thread-pre-split.us.1.11 ], [ %304, %thread-pre-split.us.12 ], [ %315, %thread-pre-split.us.1.12 ], [ %326, %thread-pre-split.us.13 ], [ %337, %thread-pre-split.us.1.13 ], [ %348, %thread-pre-split.us.14 ], [ %359, %thread-pre-split.us.1.14 ], [ %370, %thread-pre-split.us.15 ], [ %381, %thread-pre-split.us.1.15 ], [ %392, %thread-pre-split.us.16 ], [ %403, %thread-pre-split.us.1.16 ], [ %414, %thread-pre-split.us.1714 ], [ %425, %thread-pre-split.us.1.17 ], [ %436, %thread-pre-split.us.18 ], [ %447, %thread-pre-split.us.1.18 ], [ %458, %thread-pre-split.us.19 ], [ %469, %thread-pre-split.us.1.19 ], [ %480, %thread-pre-split.us.20 ], [ %491, %thread-pre-split.us.1.20 ], [ %502, %thread-pre-split.us.21 ], [ %513, %thread-pre-split.us.1.21 ], [ %524, %thread-pre-split.us.22 ], [ %535, %thread-pre-split.us.1.22 ], [ %546, %thread-pre-split.us.23 ], [ %557, %thread-pre-split.us.1.23 ], [ %568, %thread-pre-split.us.24 ], [ %cs, %.preheader ], [ %732, %.preheader.1.24 ], [ %.1, %thread-pre-split.us.1.24 ]
  %p.2.ph = phi i8* [ %p.1.lcssa.us, %thread-pre-split.us ], [ %p.1.lcssa.us.1, %thread-pre-split.us.1 ], [ %p.1.lcssa.us.16, %thread-pre-split.us.17 ], [ %p.1.lcssa.us.1.1, %thread-pre-split.us.1.1 ], [ %p.1.lcssa.us.2, %thread-pre-split.us.2 ], [ %p.1.lcssa.us.1.2, %thread-pre-split.us.1.2 ], [ %p.1.lcssa.us.3, %thread-pre-split.us.3 ], [ %p.1.lcssa.us.1.3, %thread-pre-split.us.1.3 ], [ %p.1.lcssa.us.4, %thread-pre-split.us.4 ], [ %p.1.lcssa.us.1.4, %thread-pre-split.us.1.4 ], [ %p.1.lcssa.us.5, %thread-pre-split.us.5 ], [ %p.1.lcssa.us.1.5, %thread-pre-split.us.1.5 ], [ %p.1.lcssa.us.6, %thread-pre-split.us.6 ], [ %p.1.lcssa.us.1.6, %thread-pre-split.us.1.6 ], [ %p.1.lcssa.us.7, %thread-pre-split.us.7 ], [ %p.1.lcssa.us.1.7, %thread-pre-split.us.1.7 ], [ %p.1.lcssa.us.8, %thread-pre-split.us.8 ], [ %p.1.lcssa.us.1.8, %thread-pre-split.us.1.8 ], [ %p.1.lcssa.us.9, %thread-pre-split.us.9 ], [ %p.1.lcssa.us.1.9, %thread-pre-split.us.1.9 ], [ %p.1.lcssa.us.10, %thread-pre-split.us.10 ], [ %p.1.lcssa.us.1.10, %thread-pre-split.us.1.10 ], [ %p.1.lcssa.us.11, %thread-pre-split.us.11 ], [ %p.1.lcssa.us.1.11, %thread-pre-split.us.1.11 ], [ %p.1.lcssa.us.12, %thread-pre-split.us.12 ], [ %p.1.lcssa.us.1.12, %thread-pre-split.us.1.12 ], [ %p.1.lcssa.us.13, %thread-pre-split.us.13 ], [ %p.1.lcssa.us.1.13, %thread-pre-split.us.1.13 ], [ %p.1.lcssa.us.14, %thread-pre-split.us.14 ], [ %p.1.lcssa.us.1.14, %thread-pre-split.us.1.14 ], [ %p.1.lcssa.us.15, %thread-pre-split.us.15 ], [ %p.1.lcssa.us.1.15, %thread-pre-split.us.1.15 ], [ %p.1.lcssa.us.1613, %thread-pre-split.us.16 ], [ %p.1.lcssa.us.1.16, %thread-pre-split.us.1.16 ], [ %p.1.lcssa.us.17, %thread-pre-split.us.1714 ], [ %p.1.lcssa.us.1.17, %thread-pre-split.us.1.17 ], [ %p.1.lcssa.us.18, %thread-pre-split.us.18 ], [ %p.1.lcssa.us.1.18, %thread-pre-split.us.1.18 ], [ %p.1.lcssa.us.19, %thread-pre-split.us.19 ], [ %p.1.lcssa.us.1.19, %thread-pre-split.us.1.19 ], [ %p.1.lcssa.us.20, %thread-pre-split.us.20 ], [ %p.1.lcssa.us.1.20, %thread-pre-split.us.1.20 ], [ %p.1.lcssa.us.21, %thread-pre-split.us.21 ], [ %p.1.lcssa.us.1.21, %thread-pre-split.us.1.21 ], [ %p.1.lcssa.us.22, %thread-pre-split.us.22 ], [ %p.1.lcssa.us.1.22, %thread-pre-split.us.1.22 ], [ %p.1.lcssa.us.23, %thread-pre-split.us.23 ], [ %p.1.lcssa.us.1.23, %thread-pre-split.us.1.23 ], [ %p.1.lcssa.us.24, %thread-pre-split.us.24 ], [ %ct, %.preheader ], [ %ct, %.preheader.1.24 ], [ %p.1.lcssa.us.1.24, %thread-pre-split.us.1.24 ]
  %.pr6 = load i8, i8* %.02.lcssa, align 1
  %28 = icmp eq i8 %.pr6, 0
  br i1 %28, label %.thread7, label %29

; <label>:29                                      ; preds = %.us-lcssa.us
  %30 = load i8, i8* %p.2.ph, align 1
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %.thread7

; <label>:32                                      ; preds = %29
  %33 = tail call i64 @strcspn(i8* nonnull %.02.lcssa, i8* %ct) #13
  %34 = add i64 %33, %n.0.lcssa
  br label %.thread7

.thread7:                                         ; preds = %strlen2.exit.split, %strlen2.exit.split.161, %strlen2.exit.split.140, %strlen2.exit.split.161.1, %strlen2.exit.split.241, %strlen2.exit.split.161.2, %strlen2.exit.split.342, %strlen2.exit.split.161.3, %strlen2.exit.split.443, %strlen2.exit.split.161.4, %strlen2.exit.split.544, %strlen2.exit.split.161.5, %strlen2.exit.split.645, %strlen2.exit.split.161.6, %strlen2.exit.split.746, %strlen2.exit.split.161.7, %strlen2.exit.split.847, %strlen2.exit.split.161.8, %strlen2.exit.split.948, %strlen2.exit.split.161.9, %strlen2.exit.split.1049, %strlen2.exit.split.161.10, %strlen2.exit.split.1150, %strlen2.exit.split.161.11, %strlen2.exit.split.1251, %strlen2.exit.split.161.12, %strlen2.exit.split.1352, %strlen2.exit.split.161.13, %strlen2.exit.split.1453, %strlen2.exit.split.161.14, %strlen2.exit.split.1554, %strlen2.exit.split.161.15, %strlen2.exit.split.1655, %strlen2.exit.split.161.16, %strlen2.exit.split.1756, %strlen2.exit.split.161.17, %strlen2.exit.split.1857, %strlen2.exit.split.161.18, %strlen2.exit.split.1958, %strlen2.exit.split.161.19, %strlen2.exit.split.2059, %strlen2.exit.split.161.20, %strlen2.exit.split.2160, %strlen2.exit.split.161.21, %strlen2.exit.split.2261, %strlen2.exit.split.161.22, %strlen2.exit.split.2362, %strlen2.exit.split.161.23, %strlen2.exit.split.2463, %strlen2.exit.split.161.24, %strlen2.exit.split.us, %strlen2.exit.split.us.160, %strlen2.exit.split.us.115, %strlen2.exit.split.us.160.1, %strlen2.exit.split.us.216, %strlen2.exit.split.us.160.2, %strlen2.exit.split.us.317, %strlen2.exit.split.us.160.3, %strlen2.exit.split.us.418, %strlen2.exit.split.us.160.4, %strlen2.exit.split.us.519, %strlen2.exit.split.us.160.5, %strlen2.exit.split.us.620, %strlen2.exit.split.us.160.6, %strlen2.exit.split.us.721, %strlen2.exit.split.us.160.7, %strlen2.exit.split.us.822, %strlen2.exit.split.us.160.8, %strlen2.exit.split.us.923, %strlen2.exit.split.us.160.9, %strlen2.exit.split.us.1024, %strlen2.exit.split.us.160.10, %strlen2.exit.split.us.1125, %strlen2.exit.split.us.160.11, %strlen2.exit.split.us.1226, %strlen2.exit.split.us.160.12, %strlen2.exit.split.us.1327, %strlen2.exit.split.us.160.13, %strlen2.exit.split.us.1428, %strlen2.exit.split.us.160.14, %strlen2.exit.split.us.1529, %strlen2.exit.split.us.160.15, %strlen2.exit.split.us.1630, %strlen2.exit.split.us.160.16, %strlen2.exit.split.us.1731, %strlen2.exit.split.us.160.17, %strlen2.exit.split.us.1832, %strlen2.exit.split.us.160.18, %strlen2.exit.split.us.1933, %strlen2.exit.split.us.160.19, %strlen2.exit.split.us.2034, %strlen2.exit.split.us.160.20, %strlen2.exit.split.us.2135, %strlen2.exit.split.us.160.21, %strlen2.exit.split.us.2236, %strlen2.exit.split.us.160.22, %strlen2.exit.split.us.2337, %strlen2.exit.split.us.160.23, %strlen2.exit.split.us.2438, %strlen2.exit.split.us.160.24, %29, %.us-lcssa.us, %32
  %.03 = phi i64 [ %34, %32 ], [ %n.0.lcssa, %.us-lcssa.us ], [ %n.0.lcssa, %29 ], [ 0, %strlen2.exit.split.us ], [ 1, %strlen2.exit.split.us.160 ], [ 2, %strlen2.exit.split.us.115 ], [ 3, %strlen2.exit.split.us.160.1 ], [ 4, %strlen2.exit.split.us.216 ], [ 5, %strlen2.exit.split.us.160.2 ], [ 6, %strlen2.exit.split.us.317 ], [ 7, %strlen2.exit.split.us.160.3 ], [ 8, %strlen2.exit.split.us.418 ], [ 9, %strlen2.exit.split.us.160.4 ], [ 10, %strlen2.exit.split.us.519 ], [ 11, %strlen2.exit.split.us.160.5 ], [ 12, %strlen2.exit.split.us.620 ], [ 13, %strlen2.exit.split.us.160.6 ], [ 14, %strlen2.exit.split.us.721 ], [ 15, %strlen2.exit.split.us.160.7 ], [ 16, %strlen2.exit.split.us.822 ], [ 17, %strlen2.exit.split.us.160.8 ], [ 18, %strlen2.exit.split.us.923 ], [ 19, %strlen2.exit.split.us.160.9 ], [ 20, %strlen2.exit.split.us.1024 ], [ 21, %strlen2.exit.split.us.160.10 ], [ 22, %strlen2.exit.split.us.1125 ], [ 23, %strlen2.exit.split.us.160.11 ], [ 24, %strlen2.exit.split.us.1226 ], [ 25, %strlen2.exit.split.us.160.12 ], [ 26, %strlen2.exit.split.us.1327 ], [ 27, %strlen2.exit.split.us.160.13 ], [ 28, %strlen2.exit.split.us.1428 ], [ 29, %strlen2.exit.split.us.160.14 ], [ 30, %strlen2.exit.split.us.1529 ], [ 31, %strlen2.exit.split.us.160.15 ], [ 32, %strlen2.exit.split.us.1630 ], [ 33, %strlen2.exit.split.us.160.16 ], [ 34, %strlen2.exit.split.us.1731 ], [ 35, %strlen2.exit.split.us.160.17 ], [ 36, %strlen2.exit.split.us.1832 ], [ 37, %strlen2.exit.split.us.160.18 ], [ 38, %strlen2.exit.split.us.1933 ], [ 39, %strlen2.exit.split.us.160.19 ], [ 40, %strlen2.exit.split.us.2034 ], [ 41, %strlen2.exit.split.us.160.20 ], [ 42, %strlen2.exit.split.us.2135 ], [ 43, %strlen2.exit.split.us.160.21 ], [ 44, %strlen2.exit.split.us.2236 ], [ 45, %strlen2.exit.split.us.160.22 ], [ 46, %strlen2.exit.split.us.2337 ], [ 47, %strlen2.exit.split.us.160.23 ], [ 48, %strlen2.exit.split.us.2438 ], [ 49, %strlen2.exit.split.us.160.24 ], [ 0, %strlen2.exit.split ], [ 1, %strlen2.exit.split.161 ], [ 2, %strlen2.exit.split.140 ], [ 3, %strlen2.exit.split.161.1 ], [ 4, %strlen2.exit.split.241 ], [ 5, %strlen2.exit.split.161.2 ], [ 6, %strlen2.exit.split.342 ], [ 7, %strlen2.exit.split.161.3 ], [ 8, %strlen2.exit.split.443 ], [ 9, %strlen2.exit.split.161.4 ], [ 10, %strlen2.exit.split.544 ], [ 11, %strlen2.exit.split.161.5 ], [ 12, %strlen2.exit.split.645 ], [ 13, %strlen2.exit.split.161.6 ], [ 14, %strlen2.exit.split.746 ], [ 15, %strlen2.exit.split.161.7 ], [ 16, %strlen2.exit.split.847 ], [ 17, %strlen2.exit.split.161.8 ], [ 18, %strlen2.exit.split.948 ], [ 19, %strlen2.exit.split.161.9 ], [ 20, %strlen2.exit.split.1049 ], [ 21, %strlen2.exit.split.161.10 ], [ 22, %strlen2.exit.split.1150 ], [ 23, %strlen2.exit.split.161.11 ], [ 24, %strlen2.exit.split.1251 ], [ 25, %strlen2.exit.split.161.12 ], [ 26, %strlen2.exit.split.1352 ], [ 27, %strlen2.exit.split.161.13 ], [ 28, %strlen2.exit.split.1453 ], [ 29, %strlen2.exit.split.161.14 ], [ 30, %strlen2.exit.split.1554 ], [ 31, %strlen2.exit.split.161.15 ], [ 32, %strlen2.exit.split.1655 ], [ 33, %strlen2.exit.split.161.16 ], [ 34, %strlen2.exit.split.1756 ], [ 35, %strlen2.exit.split.161.17 ], [ 36, %strlen2.exit.split.1857 ], [ 37, %strlen2.exit.split.161.18 ], [ 38, %strlen2.exit.split.1958 ], [ 39, %strlen2.exit.split.161.19 ], [ 40, %strlen2.exit.split.2059 ], [ 41, %strlen2.exit.split.161.20 ], [ 42, %strlen2.exit.split.2160 ], [ 43, %strlen2.exit.split.161.21 ], [ 44, %strlen2.exit.split.2261 ], [ 45, %strlen2.exit.split.161.22 ], [ 46, %strlen2.exit.split.2362 ], [ 47, %strlen2.exit.split.161.23 ], [ 48, %strlen2.exit.split.2463 ], [ 49, %strlen2.exit.split.161.24 ]
  ret i64 %.03

.preheader.us.1:                                  ; preds = %.preheader.us.1.preheader, %37
  %35 = phi i8 [ %41, %37 ], [ %1, %.preheader.us.1.preheader ]
  %j.015.us.1 = phi i32 [ %39, %37 ], [ 0, %.preheader.us.1.preheader ]
  %p.114.us.1 = phi i8* [ %38, %37 ], [ %ct, %.preheader.us.1.preheader ]
  %36 = icmp eq i8 %35, %23
  br i1 %36, label %thread-pre-split.us.1, label %37

; <label>:37                                      ; preds = %.preheader.us.1
  %38 = getelementptr inbounds i8, i8* %p.114.us.1, i64 1
  %39 = add nuw nsw i32 %j.015.us.1, 1
  %40 = icmp slt i32 %39, %10
  %41 = load i8, i8* %38, align 1
  br i1 %40, label %.preheader.us.1, label %thread-pre-split.us.1

thread-pre-split.us.1:                            ; preds = %37, %.preheader.us.1
  %.lcssa.us.1 = phi i8 [ %41, %37 ], [ %23, %.preheader.us.1 ]
  %p.1.lcssa.us.1 = phi i8* [ %38, %37 ], [ %p.114.us.1, %.preheader.us.1 ]
  %42 = icmp eq i8 %.lcssa.us.1, 0
  br i1 %42, label %strlen2.exit.split.us.115, label %.us-lcssa.us

strlen2.exit.split.us.115:                        ; preds = %thread-pre-split.us.1
  %43 = getelementptr inbounds i8, i8* %cs, i64 2
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %.thread7, label %.preheader.us.14.preheader

.preheader.us.14.preheader:                       ; preds = %strlen2.exit.split.us.115
  br label %.preheader.us.14

strlen2.exit.split.140:                           ; preds = %strlen2.exit.split.161
  %46 = getelementptr inbounds i8, i8* %cs, i64 2
  %47 = load i8, i8* %46, align 1
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %.thread7, label %strlen2.exit.split.161.1

; <label>:49                                      ; preds = %3
  %50 = getelementptr inbounds i8, i8* %ct, i64 2
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %strlen2.exit, label %53

; <label>:53                                      ; preds = %49
  %54 = getelementptr inbounds i8, i8* %ct, i64 3
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %strlen2.exit, label %57

; <label>:57                                      ; preds = %53
  %58 = getelementptr inbounds i8, i8* %ct, i64 4
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %strlen2.exit, label %61

; <label>:61                                      ; preds = %57
  %62 = getelementptr inbounds i8, i8* %ct, i64 5
  %63 = load i8, i8* %62, align 1
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %strlen2.exit, label %733

.preheader.us.14:                                 ; preds = %.preheader.us.14.preheader, %67
  %65 = phi i8 [ %71, %67 ], [ %1, %.preheader.us.14.preheader ]
  %j.015.us.12 = phi i32 [ %69, %67 ], [ 0, %.preheader.us.14.preheader ]
  %p.114.us.13 = phi i8* [ %68, %67 ], [ %ct, %.preheader.us.14.preheader ]
  %66 = icmp eq i8 %65, %44
  br i1 %66, label %thread-pre-split.us.17, label %67

; <label>:67                                      ; preds = %.preheader.us.14
  %68 = getelementptr inbounds i8, i8* %p.114.us.13, i64 1
  %69 = add nuw nsw i32 %j.015.us.12, 1
  %70 = icmp slt i32 %69, %10
  %71 = load i8, i8* %68, align 1
  br i1 %70, label %.preheader.us.14, label %thread-pre-split.us.17

thread-pre-split.us.17:                           ; preds = %67, %.preheader.us.14
  %.lcssa.us.15 = phi i8 [ %71, %67 ], [ %44, %.preheader.us.14 ]
  %p.1.lcssa.us.16 = phi i8* [ %68, %67 ], [ %p.114.us.13, %.preheader.us.14 ]
  %72 = icmp eq i8 %.lcssa.us.15, 0
  br i1 %72, label %strlen2.exit.split.us.160.1, label %.us-lcssa.us

strlen2.exit.split.us.160.1:                      ; preds = %thread-pre-split.us.17
  %73 = getelementptr inbounds i8, i8* %cs, i64 3
  %74 = load i8, i8* %73, align 1
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %.thread7, label %.preheader.us.1.1.preheader

.preheader.us.1.1.preheader:                      ; preds = %strlen2.exit.split.us.160.1
  br label %.preheader.us.1.1

.preheader.us.1.1:                                ; preds = %.preheader.us.1.1.preheader, %78
  %76 = phi i8 [ %82, %78 ], [ %1, %.preheader.us.1.1.preheader ]
  %j.015.us.1.1 = phi i32 [ %80, %78 ], [ 0, %.preheader.us.1.1.preheader ]
  %p.114.us.1.1 = phi i8* [ %79, %78 ], [ %ct, %.preheader.us.1.1.preheader ]
  %77 = icmp eq i8 %76, %74
  br i1 %77, label %thread-pre-split.us.1.1, label %78

; <label>:78                                      ; preds = %.preheader.us.1.1
  %79 = getelementptr inbounds i8, i8* %p.114.us.1.1, i64 1
  %80 = add nuw nsw i32 %j.015.us.1.1, 1
  %81 = icmp slt i32 %80, %10
  %82 = load i8, i8* %79, align 1
  br i1 %81, label %.preheader.us.1.1, label %thread-pre-split.us.1.1

thread-pre-split.us.1.1:                          ; preds = %78, %.preheader.us.1.1
  %.lcssa.us.1.1 = phi i8 [ %82, %78 ], [ %74, %.preheader.us.1.1 ]
  %p.1.lcssa.us.1.1 = phi i8* [ %79, %78 ], [ %p.114.us.1.1, %.preheader.us.1.1 ]
  %83 = icmp eq i8 %.lcssa.us.1.1, 0
  br i1 %83, label %strlen2.exit.split.us.216, label %.us-lcssa.us

strlen2.exit.split.us.216:                        ; preds = %thread-pre-split.us.1.1
  %84 = getelementptr inbounds i8, i8* %cs, i64 4
  %85 = load i8, i8* %84, align 1
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %.thread7, label %.preheader.us.2.preheader

.preheader.us.2.preheader:                        ; preds = %strlen2.exit.split.us.216
  br label %.preheader.us.2

.preheader.us.2:                                  ; preds = %.preheader.us.2.preheader, %89
  %87 = phi i8 [ %93, %89 ], [ %1, %.preheader.us.2.preheader ]
  %j.015.us.2 = phi i32 [ %91, %89 ], [ 0, %.preheader.us.2.preheader ]
  %p.114.us.2 = phi i8* [ %90, %89 ], [ %ct, %.preheader.us.2.preheader ]
  %88 = icmp eq i8 %87, %85
  br i1 %88, label %thread-pre-split.us.2, label %89

; <label>:89                                      ; preds = %.preheader.us.2
  %90 = getelementptr inbounds i8, i8* %p.114.us.2, i64 1
  %91 = add nuw nsw i32 %j.015.us.2, 1
  %92 = icmp slt i32 %91, %10
  %93 = load i8, i8* %90, align 1
  br i1 %92, label %.preheader.us.2, label %thread-pre-split.us.2

thread-pre-split.us.2:                            ; preds = %89, %.preheader.us.2
  %.lcssa.us.2 = phi i8 [ %93, %89 ], [ %85, %.preheader.us.2 ]
  %p.1.lcssa.us.2 = phi i8* [ %90, %89 ], [ %p.114.us.2, %.preheader.us.2 ]
  %94 = icmp eq i8 %.lcssa.us.2, 0
  br i1 %94, label %strlen2.exit.split.us.160.2, label %.us-lcssa.us

strlen2.exit.split.us.160.2:                      ; preds = %thread-pre-split.us.2
  %95 = getelementptr inbounds i8, i8* %cs, i64 5
  %96 = load i8, i8* %95, align 1
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %.thread7, label %.preheader.us.1.2.preheader

.preheader.us.1.2.preheader:                      ; preds = %strlen2.exit.split.us.160.2
  br label %.preheader.us.1.2

.preheader.us.1.2:                                ; preds = %.preheader.us.1.2.preheader, %100
  %98 = phi i8 [ %104, %100 ], [ %1, %.preheader.us.1.2.preheader ]
  %j.015.us.1.2 = phi i32 [ %102, %100 ], [ 0, %.preheader.us.1.2.preheader ]
  %p.114.us.1.2 = phi i8* [ %101, %100 ], [ %ct, %.preheader.us.1.2.preheader ]
  %99 = icmp eq i8 %98, %96
  br i1 %99, label %thread-pre-split.us.1.2, label %100

; <label>:100                                     ; preds = %.preheader.us.1.2
  %101 = getelementptr inbounds i8, i8* %p.114.us.1.2, i64 1
  %102 = add nuw nsw i32 %j.015.us.1.2, 1
  %103 = icmp slt i32 %102, %10
  %104 = load i8, i8* %101, align 1
  br i1 %103, label %.preheader.us.1.2, label %thread-pre-split.us.1.2

thread-pre-split.us.1.2:                          ; preds = %100, %.preheader.us.1.2
  %.lcssa.us.1.2 = phi i8 [ %104, %100 ], [ %96, %.preheader.us.1.2 ]
  %p.1.lcssa.us.1.2 = phi i8* [ %101, %100 ], [ %p.114.us.1.2, %.preheader.us.1.2 ]
  %105 = icmp eq i8 %.lcssa.us.1.2, 0
  br i1 %105, label %strlen2.exit.split.us.317, label %.us-lcssa.us

strlen2.exit.split.us.317:                        ; preds = %thread-pre-split.us.1.2
  %106 = getelementptr inbounds i8, i8* %cs, i64 6
  %107 = load i8, i8* %106, align 1
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %.thread7, label %.preheader.us.3.preheader

.preheader.us.3.preheader:                        ; preds = %strlen2.exit.split.us.317
  br label %.preheader.us.3

.preheader.us.3:                                  ; preds = %.preheader.us.3.preheader, %111
  %109 = phi i8 [ %115, %111 ], [ %1, %.preheader.us.3.preheader ]
  %j.015.us.3 = phi i32 [ %113, %111 ], [ 0, %.preheader.us.3.preheader ]
  %p.114.us.3 = phi i8* [ %112, %111 ], [ %ct, %.preheader.us.3.preheader ]
  %110 = icmp eq i8 %109, %107
  br i1 %110, label %thread-pre-split.us.3, label %111

; <label>:111                                     ; preds = %.preheader.us.3
  %112 = getelementptr inbounds i8, i8* %p.114.us.3, i64 1
  %113 = add nuw nsw i32 %j.015.us.3, 1
  %114 = icmp slt i32 %113, %10
  %115 = load i8, i8* %112, align 1
  br i1 %114, label %.preheader.us.3, label %thread-pre-split.us.3

thread-pre-split.us.3:                            ; preds = %111, %.preheader.us.3
  %.lcssa.us.3 = phi i8 [ %115, %111 ], [ %107, %.preheader.us.3 ]
  %p.1.lcssa.us.3 = phi i8* [ %112, %111 ], [ %p.114.us.3, %.preheader.us.3 ]
  %116 = icmp eq i8 %.lcssa.us.3, 0
  br i1 %116, label %strlen2.exit.split.us.160.3, label %.us-lcssa.us

strlen2.exit.split.us.160.3:                      ; preds = %thread-pre-split.us.3
  %117 = getelementptr inbounds i8, i8* %cs, i64 7
  %118 = load i8, i8* %117, align 1
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %.thread7, label %.preheader.us.1.3.preheader

.preheader.us.1.3.preheader:                      ; preds = %strlen2.exit.split.us.160.3
  br label %.preheader.us.1.3

.preheader.us.1.3:                                ; preds = %.preheader.us.1.3.preheader, %122
  %120 = phi i8 [ %126, %122 ], [ %1, %.preheader.us.1.3.preheader ]
  %j.015.us.1.3 = phi i32 [ %124, %122 ], [ 0, %.preheader.us.1.3.preheader ]
  %p.114.us.1.3 = phi i8* [ %123, %122 ], [ %ct, %.preheader.us.1.3.preheader ]
  %121 = icmp eq i8 %120, %118
  br i1 %121, label %thread-pre-split.us.1.3, label %122

; <label>:122                                     ; preds = %.preheader.us.1.3
  %123 = getelementptr inbounds i8, i8* %p.114.us.1.3, i64 1
  %124 = add nuw nsw i32 %j.015.us.1.3, 1
  %125 = icmp slt i32 %124, %10
  %126 = load i8, i8* %123, align 1
  br i1 %125, label %.preheader.us.1.3, label %thread-pre-split.us.1.3

thread-pre-split.us.1.3:                          ; preds = %122, %.preheader.us.1.3
  %.lcssa.us.1.3 = phi i8 [ %126, %122 ], [ %118, %.preheader.us.1.3 ]
  %p.1.lcssa.us.1.3 = phi i8* [ %123, %122 ], [ %p.114.us.1.3, %.preheader.us.1.3 ]
  %127 = icmp eq i8 %.lcssa.us.1.3, 0
  br i1 %127, label %strlen2.exit.split.us.418, label %.us-lcssa.us

strlen2.exit.split.us.418:                        ; preds = %thread-pre-split.us.1.3
  %128 = getelementptr inbounds i8, i8* %cs, i64 8
  %129 = load i8, i8* %128, align 1
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %.thread7, label %.preheader.us.4.preheader

.preheader.us.4.preheader:                        ; preds = %strlen2.exit.split.us.418
  br label %.preheader.us.4

.preheader.us.4:                                  ; preds = %.preheader.us.4.preheader, %133
  %131 = phi i8 [ %137, %133 ], [ %1, %.preheader.us.4.preheader ]
  %j.015.us.4 = phi i32 [ %135, %133 ], [ 0, %.preheader.us.4.preheader ]
  %p.114.us.4 = phi i8* [ %134, %133 ], [ %ct, %.preheader.us.4.preheader ]
  %132 = icmp eq i8 %131, %129
  br i1 %132, label %thread-pre-split.us.4, label %133

; <label>:133                                     ; preds = %.preheader.us.4
  %134 = getelementptr inbounds i8, i8* %p.114.us.4, i64 1
  %135 = add nuw nsw i32 %j.015.us.4, 1
  %136 = icmp slt i32 %135, %10
  %137 = load i8, i8* %134, align 1
  br i1 %136, label %.preheader.us.4, label %thread-pre-split.us.4

thread-pre-split.us.4:                            ; preds = %133, %.preheader.us.4
  %.lcssa.us.4 = phi i8 [ %137, %133 ], [ %129, %.preheader.us.4 ]
  %p.1.lcssa.us.4 = phi i8* [ %134, %133 ], [ %p.114.us.4, %.preheader.us.4 ]
  %138 = icmp eq i8 %.lcssa.us.4, 0
  br i1 %138, label %strlen2.exit.split.us.160.4, label %.us-lcssa.us

strlen2.exit.split.us.160.4:                      ; preds = %thread-pre-split.us.4
  %139 = getelementptr inbounds i8, i8* %cs, i64 9
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %.thread7, label %.preheader.us.1.4.preheader

.preheader.us.1.4.preheader:                      ; preds = %strlen2.exit.split.us.160.4
  br label %.preheader.us.1.4

.preheader.us.1.4:                                ; preds = %.preheader.us.1.4.preheader, %144
  %142 = phi i8 [ %148, %144 ], [ %1, %.preheader.us.1.4.preheader ]
  %j.015.us.1.4 = phi i32 [ %146, %144 ], [ 0, %.preheader.us.1.4.preheader ]
  %p.114.us.1.4 = phi i8* [ %145, %144 ], [ %ct, %.preheader.us.1.4.preheader ]
  %143 = icmp eq i8 %142, %140
  br i1 %143, label %thread-pre-split.us.1.4, label %144

; <label>:144                                     ; preds = %.preheader.us.1.4
  %145 = getelementptr inbounds i8, i8* %p.114.us.1.4, i64 1
  %146 = add nuw nsw i32 %j.015.us.1.4, 1
  %147 = icmp slt i32 %146, %10
  %148 = load i8, i8* %145, align 1
  br i1 %147, label %.preheader.us.1.4, label %thread-pre-split.us.1.4

thread-pre-split.us.1.4:                          ; preds = %144, %.preheader.us.1.4
  %.lcssa.us.1.4 = phi i8 [ %148, %144 ], [ %140, %.preheader.us.1.4 ]
  %p.1.lcssa.us.1.4 = phi i8* [ %145, %144 ], [ %p.114.us.1.4, %.preheader.us.1.4 ]
  %149 = icmp eq i8 %.lcssa.us.1.4, 0
  br i1 %149, label %strlen2.exit.split.us.519, label %.us-lcssa.us

strlen2.exit.split.us.519:                        ; preds = %thread-pre-split.us.1.4
  %150 = getelementptr inbounds i8, i8* %cs, i64 10
  %151 = load i8, i8* %150, align 1
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %.thread7, label %.preheader.us.5.preheader

.preheader.us.5.preheader:                        ; preds = %strlen2.exit.split.us.519
  br label %.preheader.us.5

.preheader.us.5:                                  ; preds = %.preheader.us.5.preheader, %155
  %153 = phi i8 [ %159, %155 ], [ %1, %.preheader.us.5.preheader ]
  %j.015.us.5 = phi i32 [ %157, %155 ], [ 0, %.preheader.us.5.preheader ]
  %p.114.us.5 = phi i8* [ %156, %155 ], [ %ct, %.preheader.us.5.preheader ]
  %154 = icmp eq i8 %153, %151
  br i1 %154, label %thread-pre-split.us.5, label %155

; <label>:155                                     ; preds = %.preheader.us.5
  %156 = getelementptr inbounds i8, i8* %p.114.us.5, i64 1
  %157 = add nuw nsw i32 %j.015.us.5, 1
  %158 = icmp slt i32 %157, %10
  %159 = load i8, i8* %156, align 1
  br i1 %158, label %.preheader.us.5, label %thread-pre-split.us.5

thread-pre-split.us.5:                            ; preds = %155, %.preheader.us.5
  %.lcssa.us.5 = phi i8 [ %159, %155 ], [ %151, %.preheader.us.5 ]
  %p.1.lcssa.us.5 = phi i8* [ %156, %155 ], [ %p.114.us.5, %.preheader.us.5 ]
  %160 = icmp eq i8 %.lcssa.us.5, 0
  br i1 %160, label %strlen2.exit.split.us.160.5, label %.us-lcssa.us

strlen2.exit.split.us.160.5:                      ; preds = %thread-pre-split.us.5
  %161 = getelementptr inbounds i8, i8* %cs, i64 11
  %162 = load i8, i8* %161, align 1
  %163 = icmp eq i8 %162, 0
  br i1 %163, label %.thread7, label %.preheader.us.1.5.preheader

.preheader.us.1.5.preheader:                      ; preds = %strlen2.exit.split.us.160.5
  br label %.preheader.us.1.5

.preheader.us.1.5:                                ; preds = %.preheader.us.1.5.preheader, %166
  %164 = phi i8 [ %170, %166 ], [ %1, %.preheader.us.1.5.preheader ]
  %j.015.us.1.5 = phi i32 [ %168, %166 ], [ 0, %.preheader.us.1.5.preheader ]
  %p.114.us.1.5 = phi i8* [ %167, %166 ], [ %ct, %.preheader.us.1.5.preheader ]
  %165 = icmp eq i8 %164, %162
  br i1 %165, label %thread-pre-split.us.1.5, label %166

; <label>:166                                     ; preds = %.preheader.us.1.5
  %167 = getelementptr inbounds i8, i8* %p.114.us.1.5, i64 1
  %168 = add nuw nsw i32 %j.015.us.1.5, 1
  %169 = icmp slt i32 %168, %10
  %170 = load i8, i8* %167, align 1
  br i1 %169, label %.preheader.us.1.5, label %thread-pre-split.us.1.5

thread-pre-split.us.1.5:                          ; preds = %166, %.preheader.us.1.5
  %.lcssa.us.1.5 = phi i8 [ %170, %166 ], [ %162, %.preheader.us.1.5 ]
  %p.1.lcssa.us.1.5 = phi i8* [ %167, %166 ], [ %p.114.us.1.5, %.preheader.us.1.5 ]
  %171 = icmp eq i8 %.lcssa.us.1.5, 0
  br i1 %171, label %strlen2.exit.split.us.620, label %.us-lcssa.us

strlen2.exit.split.us.620:                        ; preds = %thread-pre-split.us.1.5
  %172 = getelementptr inbounds i8, i8* %cs, i64 12
  %173 = load i8, i8* %172, align 1
  %174 = icmp eq i8 %173, 0
  br i1 %174, label %.thread7, label %.preheader.us.6.preheader

.preheader.us.6.preheader:                        ; preds = %strlen2.exit.split.us.620
  br label %.preheader.us.6

.preheader.us.6:                                  ; preds = %.preheader.us.6.preheader, %177
  %175 = phi i8 [ %181, %177 ], [ %1, %.preheader.us.6.preheader ]
  %j.015.us.6 = phi i32 [ %179, %177 ], [ 0, %.preheader.us.6.preheader ]
  %p.114.us.6 = phi i8* [ %178, %177 ], [ %ct, %.preheader.us.6.preheader ]
  %176 = icmp eq i8 %175, %173
  br i1 %176, label %thread-pre-split.us.6, label %177

; <label>:177                                     ; preds = %.preheader.us.6
  %178 = getelementptr inbounds i8, i8* %p.114.us.6, i64 1
  %179 = add nuw nsw i32 %j.015.us.6, 1
  %180 = icmp slt i32 %179, %10
  %181 = load i8, i8* %178, align 1
  br i1 %180, label %.preheader.us.6, label %thread-pre-split.us.6

thread-pre-split.us.6:                            ; preds = %177, %.preheader.us.6
  %.lcssa.us.6 = phi i8 [ %181, %177 ], [ %173, %.preheader.us.6 ]
  %p.1.lcssa.us.6 = phi i8* [ %178, %177 ], [ %p.114.us.6, %.preheader.us.6 ]
  %182 = icmp eq i8 %.lcssa.us.6, 0
  br i1 %182, label %strlen2.exit.split.us.160.6, label %.us-lcssa.us

strlen2.exit.split.us.160.6:                      ; preds = %thread-pre-split.us.6
  %183 = getelementptr inbounds i8, i8* %cs, i64 13
  %184 = load i8, i8* %183, align 1
  %185 = icmp eq i8 %184, 0
  br i1 %185, label %.thread7, label %.preheader.us.1.6.preheader

.preheader.us.1.6.preheader:                      ; preds = %strlen2.exit.split.us.160.6
  br label %.preheader.us.1.6

.preheader.us.1.6:                                ; preds = %.preheader.us.1.6.preheader, %188
  %186 = phi i8 [ %192, %188 ], [ %1, %.preheader.us.1.6.preheader ]
  %j.015.us.1.6 = phi i32 [ %190, %188 ], [ 0, %.preheader.us.1.6.preheader ]
  %p.114.us.1.6 = phi i8* [ %189, %188 ], [ %ct, %.preheader.us.1.6.preheader ]
  %187 = icmp eq i8 %186, %184
  br i1 %187, label %thread-pre-split.us.1.6, label %188

; <label>:188                                     ; preds = %.preheader.us.1.6
  %189 = getelementptr inbounds i8, i8* %p.114.us.1.6, i64 1
  %190 = add nuw nsw i32 %j.015.us.1.6, 1
  %191 = icmp slt i32 %190, %10
  %192 = load i8, i8* %189, align 1
  br i1 %191, label %.preheader.us.1.6, label %thread-pre-split.us.1.6

thread-pre-split.us.1.6:                          ; preds = %188, %.preheader.us.1.6
  %.lcssa.us.1.6 = phi i8 [ %192, %188 ], [ %184, %.preheader.us.1.6 ]
  %p.1.lcssa.us.1.6 = phi i8* [ %189, %188 ], [ %p.114.us.1.6, %.preheader.us.1.6 ]
  %193 = icmp eq i8 %.lcssa.us.1.6, 0
  br i1 %193, label %strlen2.exit.split.us.721, label %.us-lcssa.us

strlen2.exit.split.us.721:                        ; preds = %thread-pre-split.us.1.6
  %194 = getelementptr inbounds i8, i8* %cs, i64 14
  %195 = load i8, i8* %194, align 1
  %196 = icmp eq i8 %195, 0
  br i1 %196, label %.thread7, label %.preheader.us.7.preheader

.preheader.us.7.preheader:                        ; preds = %strlen2.exit.split.us.721
  br label %.preheader.us.7

.preheader.us.7:                                  ; preds = %.preheader.us.7.preheader, %199
  %197 = phi i8 [ %203, %199 ], [ %1, %.preheader.us.7.preheader ]
  %j.015.us.7 = phi i32 [ %201, %199 ], [ 0, %.preheader.us.7.preheader ]
  %p.114.us.7 = phi i8* [ %200, %199 ], [ %ct, %.preheader.us.7.preheader ]
  %198 = icmp eq i8 %197, %195
  br i1 %198, label %thread-pre-split.us.7, label %199

; <label>:199                                     ; preds = %.preheader.us.7
  %200 = getelementptr inbounds i8, i8* %p.114.us.7, i64 1
  %201 = add nuw nsw i32 %j.015.us.7, 1
  %202 = icmp slt i32 %201, %10
  %203 = load i8, i8* %200, align 1
  br i1 %202, label %.preheader.us.7, label %thread-pre-split.us.7

thread-pre-split.us.7:                            ; preds = %199, %.preheader.us.7
  %.lcssa.us.7 = phi i8 [ %203, %199 ], [ %195, %.preheader.us.7 ]
  %p.1.lcssa.us.7 = phi i8* [ %200, %199 ], [ %p.114.us.7, %.preheader.us.7 ]
  %204 = icmp eq i8 %.lcssa.us.7, 0
  br i1 %204, label %strlen2.exit.split.us.160.7, label %.us-lcssa.us

strlen2.exit.split.us.160.7:                      ; preds = %thread-pre-split.us.7
  %205 = getelementptr inbounds i8, i8* %cs, i64 15
  %206 = load i8, i8* %205, align 1
  %207 = icmp eq i8 %206, 0
  br i1 %207, label %.thread7, label %.preheader.us.1.7.preheader

.preheader.us.1.7.preheader:                      ; preds = %strlen2.exit.split.us.160.7
  br label %.preheader.us.1.7

.preheader.us.1.7:                                ; preds = %.preheader.us.1.7.preheader, %210
  %208 = phi i8 [ %214, %210 ], [ %1, %.preheader.us.1.7.preheader ]
  %j.015.us.1.7 = phi i32 [ %212, %210 ], [ 0, %.preheader.us.1.7.preheader ]
  %p.114.us.1.7 = phi i8* [ %211, %210 ], [ %ct, %.preheader.us.1.7.preheader ]
  %209 = icmp eq i8 %208, %206
  br i1 %209, label %thread-pre-split.us.1.7, label %210

; <label>:210                                     ; preds = %.preheader.us.1.7
  %211 = getelementptr inbounds i8, i8* %p.114.us.1.7, i64 1
  %212 = add nuw nsw i32 %j.015.us.1.7, 1
  %213 = icmp slt i32 %212, %10
  %214 = load i8, i8* %211, align 1
  br i1 %213, label %.preheader.us.1.7, label %thread-pre-split.us.1.7

thread-pre-split.us.1.7:                          ; preds = %210, %.preheader.us.1.7
  %.lcssa.us.1.7 = phi i8 [ %214, %210 ], [ %206, %.preheader.us.1.7 ]
  %p.1.lcssa.us.1.7 = phi i8* [ %211, %210 ], [ %p.114.us.1.7, %.preheader.us.1.7 ]
  %215 = icmp eq i8 %.lcssa.us.1.7, 0
  br i1 %215, label %strlen2.exit.split.us.822, label %.us-lcssa.us

strlen2.exit.split.us.822:                        ; preds = %thread-pre-split.us.1.7
  %216 = getelementptr inbounds i8, i8* %cs, i64 16
  %217 = load i8, i8* %216, align 1
  %218 = icmp eq i8 %217, 0
  br i1 %218, label %.thread7, label %.preheader.us.8.preheader

.preheader.us.8.preheader:                        ; preds = %strlen2.exit.split.us.822
  br label %.preheader.us.8

.preheader.us.8:                                  ; preds = %.preheader.us.8.preheader, %221
  %219 = phi i8 [ %225, %221 ], [ %1, %.preheader.us.8.preheader ]
  %j.015.us.8 = phi i32 [ %223, %221 ], [ 0, %.preheader.us.8.preheader ]
  %p.114.us.8 = phi i8* [ %222, %221 ], [ %ct, %.preheader.us.8.preheader ]
  %220 = icmp eq i8 %219, %217
  br i1 %220, label %thread-pre-split.us.8, label %221

; <label>:221                                     ; preds = %.preheader.us.8
  %222 = getelementptr inbounds i8, i8* %p.114.us.8, i64 1
  %223 = add nuw nsw i32 %j.015.us.8, 1
  %224 = icmp slt i32 %223, %10
  %225 = load i8, i8* %222, align 1
  br i1 %224, label %.preheader.us.8, label %thread-pre-split.us.8

thread-pre-split.us.8:                            ; preds = %221, %.preheader.us.8
  %.lcssa.us.8 = phi i8 [ %225, %221 ], [ %217, %.preheader.us.8 ]
  %p.1.lcssa.us.8 = phi i8* [ %222, %221 ], [ %p.114.us.8, %.preheader.us.8 ]
  %226 = icmp eq i8 %.lcssa.us.8, 0
  br i1 %226, label %strlen2.exit.split.us.160.8, label %.us-lcssa.us

strlen2.exit.split.us.160.8:                      ; preds = %thread-pre-split.us.8
  %227 = getelementptr inbounds i8, i8* %cs, i64 17
  %228 = load i8, i8* %227, align 1
  %229 = icmp eq i8 %228, 0
  br i1 %229, label %.thread7, label %.preheader.us.1.8.preheader

.preheader.us.1.8.preheader:                      ; preds = %strlen2.exit.split.us.160.8
  br label %.preheader.us.1.8

.preheader.us.1.8:                                ; preds = %.preheader.us.1.8.preheader, %232
  %230 = phi i8 [ %236, %232 ], [ %1, %.preheader.us.1.8.preheader ]
  %j.015.us.1.8 = phi i32 [ %234, %232 ], [ 0, %.preheader.us.1.8.preheader ]
  %p.114.us.1.8 = phi i8* [ %233, %232 ], [ %ct, %.preheader.us.1.8.preheader ]
  %231 = icmp eq i8 %230, %228
  br i1 %231, label %thread-pre-split.us.1.8, label %232

; <label>:232                                     ; preds = %.preheader.us.1.8
  %233 = getelementptr inbounds i8, i8* %p.114.us.1.8, i64 1
  %234 = add nuw nsw i32 %j.015.us.1.8, 1
  %235 = icmp slt i32 %234, %10
  %236 = load i8, i8* %233, align 1
  br i1 %235, label %.preheader.us.1.8, label %thread-pre-split.us.1.8

thread-pre-split.us.1.8:                          ; preds = %232, %.preheader.us.1.8
  %.lcssa.us.1.8 = phi i8 [ %236, %232 ], [ %228, %.preheader.us.1.8 ]
  %p.1.lcssa.us.1.8 = phi i8* [ %233, %232 ], [ %p.114.us.1.8, %.preheader.us.1.8 ]
  %237 = icmp eq i8 %.lcssa.us.1.8, 0
  br i1 %237, label %strlen2.exit.split.us.923, label %.us-lcssa.us

strlen2.exit.split.us.923:                        ; preds = %thread-pre-split.us.1.8
  %238 = getelementptr inbounds i8, i8* %cs, i64 18
  %239 = load i8, i8* %238, align 1
  %240 = icmp eq i8 %239, 0
  br i1 %240, label %.thread7, label %.preheader.us.9.preheader

.preheader.us.9.preheader:                        ; preds = %strlen2.exit.split.us.923
  br label %.preheader.us.9

.preheader.us.9:                                  ; preds = %.preheader.us.9.preheader, %243
  %241 = phi i8 [ %247, %243 ], [ %1, %.preheader.us.9.preheader ]
  %j.015.us.9 = phi i32 [ %245, %243 ], [ 0, %.preheader.us.9.preheader ]
  %p.114.us.9 = phi i8* [ %244, %243 ], [ %ct, %.preheader.us.9.preheader ]
  %242 = icmp eq i8 %241, %239
  br i1 %242, label %thread-pre-split.us.9, label %243

; <label>:243                                     ; preds = %.preheader.us.9
  %244 = getelementptr inbounds i8, i8* %p.114.us.9, i64 1
  %245 = add nuw nsw i32 %j.015.us.9, 1
  %246 = icmp slt i32 %245, %10
  %247 = load i8, i8* %244, align 1
  br i1 %246, label %.preheader.us.9, label %thread-pre-split.us.9

thread-pre-split.us.9:                            ; preds = %243, %.preheader.us.9
  %.lcssa.us.9 = phi i8 [ %247, %243 ], [ %239, %.preheader.us.9 ]
  %p.1.lcssa.us.9 = phi i8* [ %244, %243 ], [ %p.114.us.9, %.preheader.us.9 ]
  %248 = icmp eq i8 %.lcssa.us.9, 0
  br i1 %248, label %strlen2.exit.split.us.160.9, label %.us-lcssa.us

strlen2.exit.split.us.160.9:                      ; preds = %thread-pre-split.us.9
  %249 = getelementptr inbounds i8, i8* %cs, i64 19
  %250 = load i8, i8* %249, align 1
  %251 = icmp eq i8 %250, 0
  br i1 %251, label %.thread7, label %.preheader.us.1.9.preheader

.preheader.us.1.9.preheader:                      ; preds = %strlen2.exit.split.us.160.9
  br label %.preheader.us.1.9

.preheader.us.1.9:                                ; preds = %.preheader.us.1.9.preheader, %254
  %252 = phi i8 [ %258, %254 ], [ %1, %.preheader.us.1.9.preheader ]
  %j.015.us.1.9 = phi i32 [ %256, %254 ], [ 0, %.preheader.us.1.9.preheader ]
  %p.114.us.1.9 = phi i8* [ %255, %254 ], [ %ct, %.preheader.us.1.9.preheader ]
  %253 = icmp eq i8 %252, %250
  br i1 %253, label %thread-pre-split.us.1.9, label %254

; <label>:254                                     ; preds = %.preheader.us.1.9
  %255 = getelementptr inbounds i8, i8* %p.114.us.1.9, i64 1
  %256 = add nuw nsw i32 %j.015.us.1.9, 1
  %257 = icmp slt i32 %256, %10
  %258 = load i8, i8* %255, align 1
  br i1 %257, label %.preheader.us.1.9, label %thread-pre-split.us.1.9

thread-pre-split.us.1.9:                          ; preds = %254, %.preheader.us.1.9
  %.lcssa.us.1.9 = phi i8 [ %258, %254 ], [ %250, %.preheader.us.1.9 ]
  %p.1.lcssa.us.1.9 = phi i8* [ %255, %254 ], [ %p.114.us.1.9, %.preheader.us.1.9 ]
  %259 = icmp eq i8 %.lcssa.us.1.9, 0
  br i1 %259, label %strlen2.exit.split.us.1024, label %.us-lcssa.us

strlen2.exit.split.us.1024:                       ; preds = %thread-pre-split.us.1.9
  %260 = getelementptr inbounds i8, i8* %cs, i64 20
  %261 = load i8, i8* %260, align 1
  %262 = icmp eq i8 %261, 0
  br i1 %262, label %.thread7, label %.preheader.us.10.preheader

.preheader.us.10.preheader:                       ; preds = %strlen2.exit.split.us.1024
  br label %.preheader.us.10

.preheader.us.10:                                 ; preds = %.preheader.us.10.preheader, %265
  %263 = phi i8 [ %269, %265 ], [ %1, %.preheader.us.10.preheader ]
  %j.015.us.10 = phi i32 [ %267, %265 ], [ 0, %.preheader.us.10.preheader ]
  %p.114.us.10 = phi i8* [ %266, %265 ], [ %ct, %.preheader.us.10.preheader ]
  %264 = icmp eq i8 %263, %261
  br i1 %264, label %thread-pre-split.us.10, label %265

; <label>:265                                     ; preds = %.preheader.us.10
  %266 = getelementptr inbounds i8, i8* %p.114.us.10, i64 1
  %267 = add nuw nsw i32 %j.015.us.10, 1
  %268 = icmp slt i32 %267, %10
  %269 = load i8, i8* %266, align 1
  br i1 %268, label %.preheader.us.10, label %thread-pre-split.us.10

thread-pre-split.us.10:                           ; preds = %265, %.preheader.us.10
  %.lcssa.us.10 = phi i8 [ %269, %265 ], [ %261, %.preheader.us.10 ]
  %p.1.lcssa.us.10 = phi i8* [ %266, %265 ], [ %p.114.us.10, %.preheader.us.10 ]
  %270 = icmp eq i8 %.lcssa.us.10, 0
  br i1 %270, label %strlen2.exit.split.us.160.10, label %.us-lcssa.us

strlen2.exit.split.us.160.10:                     ; preds = %thread-pre-split.us.10
  %271 = getelementptr inbounds i8, i8* %cs, i64 21
  %272 = load i8, i8* %271, align 1
  %273 = icmp eq i8 %272, 0
  br i1 %273, label %.thread7, label %.preheader.us.1.10.preheader

.preheader.us.1.10.preheader:                     ; preds = %strlen2.exit.split.us.160.10
  br label %.preheader.us.1.10

.preheader.us.1.10:                               ; preds = %.preheader.us.1.10.preheader, %276
  %274 = phi i8 [ %280, %276 ], [ %1, %.preheader.us.1.10.preheader ]
  %j.015.us.1.10 = phi i32 [ %278, %276 ], [ 0, %.preheader.us.1.10.preheader ]
  %p.114.us.1.10 = phi i8* [ %277, %276 ], [ %ct, %.preheader.us.1.10.preheader ]
  %275 = icmp eq i8 %274, %272
  br i1 %275, label %thread-pre-split.us.1.10, label %276

; <label>:276                                     ; preds = %.preheader.us.1.10
  %277 = getelementptr inbounds i8, i8* %p.114.us.1.10, i64 1
  %278 = add nuw nsw i32 %j.015.us.1.10, 1
  %279 = icmp slt i32 %278, %10
  %280 = load i8, i8* %277, align 1
  br i1 %279, label %.preheader.us.1.10, label %thread-pre-split.us.1.10

thread-pre-split.us.1.10:                         ; preds = %276, %.preheader.us.1.10
  %.lcssa.us.1.10 = phi i8 [ %280, %276 ], [ %272, %.preheader.us.1.10 ]
  %p.1.lcssa.us.1.10 = phi i8* [ %277, %276 ], [ %p.114.us.1.10, %.preheader.us.1.10 ]
  %281 = icmp eq i8 %.lcssa.us.1.10, 0
  br i1 %281, label %strlen2.exit.split.us.1125, label %.us-lcssa.us

strlen2.exit.split.us.1125:                       ; preds = %thread-pre-split.us.1.10
  %282 = getelementptr inbounds i8, i8* %cs, i64 22
  %283 = load i8, i8* %282, align 1
  %284 = icmp eq i8 %283, 0
  br i1 %284, label %.thread7, label %.preheader.us.11.preheader

.preheader.us.11.preheader:                       ; preds = %strlen2.exit.split.us.1125
  br label %.preheader.us.11

.preheader.us.11:                                 ; preds = %.preheader.us.11.preheader, %287
  %285 = phi i8 [ %291, %287 ], [ %1, %.preheader.us.11.preheader ]
  %j.015.us.11 = phi i32 [ %289, %287 ], [ 0, %.preheader.us.11.preheader ]
  %p.114.us.11 = phi i8* [ %288, %287 ], [ %ct, %.preheader.us.11.preheader ]
  %286 = icmp eq i8 %285, %283
  br i1 %286, label %thread-pre-split.us.11, label %287

; <label>:287                                     ; preds = %.preheader.us.11
  %288 = getelementptr inbounds i8, i8* %p.114.us.11, i64 1
  %289 = add nuw nsw i32 %j.015.us.11, 1
  %290 = icmp slt i32 %289, %10
  %291 = load i8, i8* %288, align 1
  br i1 %290, label %.preheader.us.11, label %thread-pre-split.us.11

thread-pre-split.us.11:                           ; preds = %287, %.preheader.us.11
  %.lcssa.us.11 = phi i8 [ %291, %287 ], [ %283, %.preheader.us.11 ]
  %p.1.lcssa.us.11 = phi i8* [ %288, %287 ], [ %p.114.us.11, %.preheader.us.11 ]
  %292 = icmp eq i8 %.lcssa.us.11, 0
  br i1 %292, label %strlen2.exit.split.us.160.11, label %.us-lcssa.us

strlen2.exit.split.us.160.11:                     ; preds = %thread-pre-split.us.11
  %293 = getelementptr inbounds i8, i8* %cs, i64 23
  %294 = load i8, i8* %293, align 1
  %295 = icmp eq i8 %294, 0
  br i1 %295, label %.thread7, label %.preheader.us.1.11.preheader

.preheader.us.1.11.preheader:                     ; preds = %strlen2.exit.split.us.160.11
  br label %.preheader.us.1.11

.preheader.us.1.11:                               ; preds = %.preheader.us.1.11.preheader, %298
  %296 = phi i8 [ %302, %298 ], [ %1, %.preheader.us.1.11.preheader ]
  %j.015.us.1.11 = phi i32 [ %300, %298 ], [ 0, %.preheader.us.1.11.preheader ]
  %p.114.us.1.11 = phi i8* [ %299, %298 ], [ %ct, %.preheader.us.1.11.preheader ]
  %297 = icmp eq i8 %296, %294
  br i1 %297, label %thread-pre-split.us.1.11, label %298

; <label>:298                                     ; preds = %.preheader.us.1.11
  %299 = getelementptr inbounds i8, i8* %p.114.us.1.11, i64 1
  %300 = add nuw nsw i32 %j.015.us.1.11, 1
  %301 = icmp slt i32 %300, %10
  %302 = load i8, i8* %299, align 1
  br i1 %301, label %.preheader.us.1.11, label %thread-pre-split.us.1.11

thread-pre-split.us.1.11:                         ; preds = %298, %.preheader.us.1.11
  %.lcssa.us.1.11 = phi i8 [ %302, %298 ], [ %294, %.preheader.us.1.11 ]
  %p.1.lcssa.us.1.11 = phi i8* [ %299, %298 ], [ %p.114.us.1.11, %.preheader.us.1.11 ]
  %303 = icmp eq i8 %.lcssa.us.1.11, 0
  br i1 %303, label %strlen2.exit.split.us.1226, label %.us-lcssa.us

strlen2.exit.split.us.1226:                       ; preds = %thread-pre-split.us.1.11
  %304 = getelementptr inbounds i8, i8* %cs, i64 24
  %305 = load i8, i8* %304, align 1
  %306 = icmp eq i8 %305, 0
  br i1 %306, label %.thread7, label %.preheader.us.12.preheader

.preheader.us.12.preheader:                       ; preds = %strlen2.exit.split.us.1226
  br label %.preheader.us.12

.preheader.us.12:                                 ; preds = %.preheader.us.12.preheader, %309
  %307 = phi i8 [ %313, %309 ], [ %1, %.preheader.us.12.preheader ]
  %j.015.us.129 = phi i32 [ %311, %309 ], [ 0, %.preheader.us.12.preheader ]
  %p.114.us.12 = phi i8* [ %310, %309 ], [ %ct, %.preheader.us.12.preheader ]
  %308 = icmp eq i8 %307, %305
  br i1 %308, label %thread-pre-split.us.12, label %309

; <label>:309                                     ; preds = %.preheader.us.12
  %310 = getelementptr inbounds i8, i8* %p.114.us.12, i64 1
  %311 = add nuw nsw i32 %j.015.us.129, 1
  %312 = icmp slt i32 %311, %10
  %313 = load i8, i8* %310, align 1
  br i1 %312, label %.preheader.us.12, label %thread-pre-split.us.12

thread-pre-split.us.12:                           ; preds = %309, %.preheader.us.12
  %.lcssa.us.12 = phi i8 [ %313, %309 ], [ %305, %.preheader.us.12 ]
  %p.1.lcssa.us.12 = phi i8* [ %310, %309 ], [ %p.114.us.12, %.preheader.us.12 ]
  %314 = icmp eq i8 %.lcssa.us.12, 0
  br i1 %314, label %strlen2.exit.split.us.160.12, label %.us-lcssa.us

strlen2.exit.split.us.160.12:                     ; preds = %thread-pre-split.us.12
  %315 = getelementptr inbounds i8, i8* %cs, i64 25
  %316 = load i8, i8* %315, align 1
  %317 = icmp eq i8 %316, 0
  br i1 %317, label %.thread7, label %.preheader.us.1.12.preheader

.preheader.us.1.12.preheader:                     ; preds = %strlen2.exit.split.us.160.12
  br label %.preheader.us.1.12

.preheader.us.1.12:                               ; preds = %.preheader.us.1.12.preheader, %320
  %318 = phi i8 [ %324, %320 ], [ %1, %.preheader.us.1.12.preheader ]
  %j.015.us.1.12 = phi i32 [ %322, %320 ], [ 0, %.preheader.us.1.12.preheader ]
  %p.114.us.1.12 = phi i8* [ %321, %320 ], [ %ct, %.preheader.us.1.12.preheader ]
  %319 = icmp eq i8 %318, %316
  br i1 %319, label %thread-pre-split.us.1.12, label %320

; <label>:320                                     ; preds = %.preheader.us.1.12
  %321 = getelementptr inbounds i8, i8* %p.114.us.1.12, i64 1
  %322 = add nuw nsw i32 %j.015.us.1.12, 1
  %323 = icmp slt i32 %322, %10
  %324 = load i8, i8* %321, align 1
  br i1 %323, label %.preheader.us.1.12, label %thread-pre-split.us.1.12

thread-pre-split.us.1.12:                         ; preds = %320, %.preheader.us.1.12
  %.lcssa.us.1.12 = phi i8 [ %324, %320 ], [ %316, %.preheader.us.1.12 ]
  %p.1.lcssa.us.1.12 = phi i8* [ %321, %320 ], [ %p.114.us.1.12, %.preheader.us.1.12 ]
  %325 = icmp eq i8 %.lcssa.us.1.12, 0
  br i1 %325, label %strlen2.exit.split.us.1327, label %.us-lcssa.us

strlen2.exit.split.us.1327:                       ; preds = %thread-pre-split.us.1.12
  %326 = getelementptr inbounds i8, i8* %cs, i64 26
  %327 = load i8, i8* %326, align 1
  %328 = icmp eq i8 %327, 0
  br i1 %328, label %.thread7, label %.preheader.us.13.preheader

.preheader.us.13.preheader:                       ; preds = %strlen2.exit.split.us.1327
  br label %.preheader.us.13

.preheader.us.13:                                 ; preds = %.preheader.us.13.preheader, %331
  %329 = phi i8 [ %335, %331 ], [ %1, %.preheader.us.13.preheader ]
  %j.015.us.13 = phi i32 [ %333, %331 ], [ 0, %.preheader.us.13.preheader ]
  %p.114.us.1310 = phi i8* [ %332, %331 ], [ %ct, %.preheader.us.13.preheader ]
  %330 = icmp eq i8 %329, %327
  br i1 %330, label %thread-pre-split.us.13, label %331

; <label>:331                                     ; preds = %.preheader.us.13
  %332 = getelementptr inbounds i8, i8* %p.114.us.1310, i64 1
  %333 = add nuw nsw i32 %j.015.us.13, 1
  %334 = icmp slt i32 %333, %10
  %335 = load i8, i8* %332, align 1
  br i1 %334, label %.preheader.us.13, label %thread-pre-split.us.13

thread-pre-split.us.13:                           ; preds = %331, %.preheader.us.13
  %.lcssa.us.13 = phi i8 [ %335, %331 ], [ %327, %.preheader.us.13 ]
  %p.1.lcssa.us.13 = phi i8* [ %332, %331 ], [ %p.114.us.1310, %.preheader.us.13 ]
  %336 = icmp eq i8 %.lcssa.us.13, 0
  br i1 %336, label %strlen2.exit.split.us.160.13, label %.us-lcssa.us

strlen2.exit.split.us.160.13:                     ; preds = %thread-pre-split.us.13
  %337 = getelementptr inbounds i8, i8* %cs, i64 27
  %338 = load i8, i8* %337, align 1
  %339 = icmp eq i8 %338, 0
  br i1 %339, label %.thread7, label %.preheader.us.1.13.preheader

.preheader.us.1.13.preheader:                     ; preds = %strlen2.exit.split.us.160.13
  br label %.preheader.us.1.13

.preheader.us.1.13:                               ; preds = %.preheader.us.1.13.preheader, %342
  %340 = phi i8 [ %346, %342 ], [ %1, %.preheader.us.1.13.preheader ]
  %j.015.us.1.13 = phi i32 [ %344, %342 ], [ 0, %.preheader.us.1.13.preheader ]
  %p.114.us.1.13 = phi i8* [ %343, %342 ], [ %ct, %.preheader.us.1.13.preheader ]
  %341 = icmp eq i8 %340, %338
  br i1 %341, label %thread-pre-split.us.1.13, label %342

; <label>:342                                     ; preds = %.preheader.us.1.13
  %343 = getelementptr inbounds i8, i8* %p.114.us.1.13, i64 1
  %344 = add nuw nsw i32 %j.015.us.1.13, 1
  %345 = icmp slt i32 %344, %10
  %346 = load i8, i8* %343, align 1
  br i1 %345, label %.preheader.us.1.13, label %thread-pre-split.us.1.13

thread-pre-split.us.1.13:                         ; preds = %342, %.preheader.us.1.13
  %.lcssa.us.1.13 = phi i8 [ %346, %342 ], [ %338, %.preheader.us.1.13 ]
  %p.1.lcssa.us.1.13 = phi i8* [ %343, %342 ], [ %p.114.us.1.13, %.preheader.us.1.13 ]
  %347 = icmp eq i8 %.lcssa.us.1.13, 0
  br i1 %347, label %strlen2.exit.split.us.1428, label %.us-lcssa.us

strlen2.exit.split.us.1428:                       ; preds = %thread-pre-split.us.1.13
  %348 = getelementptr inbounds i8, i8* %cs, i64 28
  %349 = load i8, i8* %348, align 1
  %350 = icmp eq i8 %349, 0
  br i1 %350, label %.thread7, label %.preheader.us.1411.preheader

.preheader.us.1411.preheader:                     ; preds = %strlen2.exit.split.us.1428
  br label %.preheader.us.1411

.preheader.us.1411:                               ; preds = %.preheader.us.1411.preheader, %353
  %351 = phi i8 [ %357, %353 ], [ %1, %.preheader.us.1411.preheader ]
  %j.015.us.14 = phi i32 [ %355, %353 ], [ 0, %.preheader.us.1411.preheader ]
  %p.114.us.14 = phi i8* [ %354, %353 ], [ %ct, %.preheader.us.1411.preheader ]
  %352 = icmp eq i8 %351, %349
  br i1 %352, label %thread-pre-split.us.14, label %353

; <label>:353                                     ; preds = %.preheader.us.1411
  %354 = getelementptr inbounds i8, i8* %p.114.us.14, i64 1
  %355 = add nuw nsw i32 %j.015.us.14, 1
  %356 = icmp slt i32 %355, %10
  %357 = load i8, i8* %354, align 1
  br i1 %356, label %.preheader.us.1411, label %thread-pre-split.us.14

thread-pre-split.us.14:                           ; preds = %353, %.preheader.us.1411
  %.lcssa.us.14 = phi i8 [ %357, %353 ], [ %349, %.preheader.us.1411 ]
  %p.1.lcssa.us.14 = phi i8* [ %354, %353 ], [ %p.114.us.14, %.preheader.us.1411 ]
  %358 = icmp eq i8 %.lcssa.us.14, 0
  br i1 %358, label %strlen2.exit.split.us.160.14, label %.us-lcssa.us

strlen2.exit.split.us.160.14:                     ; preds = %thread-pre-split.us.14
  %359 = getelementptr inbounds i8, i8* %cs, i64 29
  %360 = load i8, i8* %359, align 1
  %361 = icmp eq i8 %360, 0
  br i1 %361, label %.thread7, label %.preheader.us.1.14.preheader

.preheader.us.1.14.preheader:                     ; preds = %strlen2.exit.split.us.160.14
  br label %.preheader.us.1.14

.preheader.us.1.14:                               ; preds = %.preheader.us.1.14.preheader, %364
  %362 = phi i8 [ %368, %364 ], [ %1, %.preheader.us.1.14.preheader ]
  %j.015.us.1.14 = phi i32 [ %366, %364 ], [ 0, %.preheader.us.1.14.preheader ]
  %p.114.us.1.14 = phi i8* [ %365, %364 ], [ %ct, %.preheader.us.1.14.preheader ]
  %363 = icmp eq i8 %362, %360
  br i1 %363, label %thread-pre-split.us.1.14, label %364

; <label>:364                                     ; preds = %.preheader.us.1.14
  %365 = getelementptr inbounds i8, i8* %p.114.us.1.14, i64 1
  %366 = add nuw nsw i32 %j.015.us.1.14, 1
  %367 = icmp slt i32 %366, %10
  %368 = load i8, i8* %365, align 1
  br i1 %367, label %.preheader.us.1.14, label %thread-pre-split.us.1.14

thread-pre-split.us.1.14:                         ; preds = %364, %.preheader.us.1.14
  %.lcssa.us.1.14 = phi i8 [ %368, %364 ], [ %360, %.preheader.us.1.14 ]
  %p.1.lcssa.us.1.14 = phi i8* [ %365, %364 ], [ %p.114.us.1.14, %.preheader.us.1.14 ]
  %369 = icmp eq i8 %.lcssa.us.1.14, 0
  br i1 %369, label %strlen2.exit.split.us.1529, label %.us-lcssa.us

strlen2.exit.split.us.1529:                       ; preds = %thread-pre-split.us.1.14
  %370 = getelementptr inbounds i8, i8* %cs, i64 30
  %371 = load i8, i8* %370, align 1
  %372 = icmp eq i8 %371, 0
  br i1 %372, label %.thread7, label %.preheader.us.15.preheader

.preheader.us.15.preheader:                       ; preds = %strlen2.exit.split.us.1529
  br label %.preheader.us.15

.preheader.us.15:                                 ; preds = %.preheader.us.15.preheader, %375
  %373 = phi i8 [ %379, %375 ], [ %1, %.preheader.us.15.preheader ]
  %j.015.us.15 = phi i32 [ %377, %375 ], [ 0, %.preheader.us.15.preheader ]
  %p.114.us.15 = phi i8* [ %376, %375 ], [ %ct, %.preheader.us.15.preheader ]
  %374 = icmp eq i8 %373, %371
  br i1 %374, label %thread-pre-split.us.15, label %375

; <label>:375                                     ; preds = %.preheader.us.15
  %376 = getelementptr inbounds i8, i8* %p.114.us.15, i64 1
  %377 = add nuw nsw i32 %j.015.us.15, 1
  %378 = icmp slt i32 %377, %10
  %379 = load i8, i8* %376, align 1
  br i1 %378, label %.preheader.us.15, label %thread-pre-split.us.15

thread-pre-split.us.15:                           ; preds = %375, %.preheader.us.15
  %.lcssa.us.1512 = phi i8 [ %379, %375 ], [ %371, %.preheader.us.15 ]
  %p.1.lcssa.us.15 = phi i8* [ %376, %375 ], [ %p.114.us.15, %.preheader.us.15 ]
  %380 = icmp eq i8 %.lcssa.us.1512, 0
  br i1 %380, label %strlen2.exit.split.us.160.15, label %.us-lcssa.us

strlen2.exit.split.us.160.15:                     ; preds = %thread-pre-split.us.15
  %381 = getelementptr inbounds i8, i8* %cs, i64 31
  %382 = load i8, i8* %381, align 1
  %383 = icmp eq i8 %382, 0
  br i1 %383, label %.thread7, label %.preheader.us.1.15.preheader

.preheader.us.1.15.preheader:                     ; preds = %strlen2.exit.split.us.160.15
  br label %.preheader.us.1.15

.preheader.us.1.15:                               ; preds = %.preheader.us.1.15.preheader, %386
  %384 = phi i8 [ %390, %386 ], [ %1, %.preheader.us.1.15.preheader ]
  %j.015.us.1.15 = phi i32 [ %388, %386 ], [ 0, %.preheader.us.1.15.preheader ]
  %p.114.us.1.15 = phi i8* [ %387, %386 ], [ %ct, %.preheader.us.1.15.preheader ]
  %385 = icmp eq i8 %384, %382
  br i1 %385, label %thread-pre-split.us.1.15, label %386

; <label>:386                                     ; preds = %.preheader.us.1.15
  %387 = getelementptr inbounds i8, i8* %p.114.us.1.15, i64 1
  %388 = add nuw nsw i32 %j.015.us.1.15, 1
  %389 = icmp slt i32 %388, %10
  %390 = load i8, i8* %387, align 1
  br i1 %389, label %.preheader.us.1.15, label %thread-pre-split.us.1.15

thread-pre-split.us.1.15:                         ; preds = %386, %.preheader.us.1.15
  %.lcssa.us.1.15 = phi i8 [ %390, %386 ], [ %382, %.preheader.us.1.15 ]
  %p.1.lcssa.us.1.15 = phi i8* [ %387, %386 ], [ %p.114.us.1.15, %.preheader.us.1.15 ]
  %391 = icmp eq i8 %.lcssa.us.1.15, 0
  br i1 %391, label %strlen2.exit.split.us.1630, label %.us-lcssa.us

strlen2.exit.split.us.1630:                       ; preds = %thread-pre-split.us.1.15
  %392 = getelementptr inbounds i8, i8* %cs, i64 32
  %393 = load i8, i8* %392, align 1
  %394 = icmp eq i8 %393, 0
  br i1 %394, label %.thread7, label %.preheader.us.16.preheader

.preheader.us.16.preheader:                       ; preds = %strlen2.exit.split.us.1630
  br label %.preheader.us.16

.preheader.us.16:                                 ; preds = %.preheader.us.16.preheader, %397
  %395 = phi i8 [ %401, %397 ], [ %1, %.preheader.us.16.preheader ]
  %j.015.us.16 = phi i32 [ %399, %397 ], [ 0, %.preheader.us.16.preheader ]
  %p.114.us.16 = phi i8* [ %398, %397 ], [ %ct, %.preheader.us.16.preheader ]
  %396 = icmp eq i8 %395, %393
  br i1 %396, label %thread-pre-split.us.16, label %397

; <label>:397                                     ; preds = %.preheader.us.16
  %398 = getelementptr inbounds i8, i8* %p.114.us.16, i64 1
  %399 = add nuw nsw i32 %j.015.us.16, 1
  %400 = icmp slt i32 %399, %10
  %401 = load i8, i8* %398, align 1
  br i1 %400, label %.preheader.us.16, label %thread-pre-split.us.16

thread-pre-split.us.16:                           ; preds = %397, %.preheader.us.16
  %.lcssa.us.16 = phi i8 [ %401, %397 ], [ %393, %.preheader.us.16 ]
  %p.1.lcssa.us.1613 = phi i8* [ %398, %397 ], [ %p.114.us.16, %.preheader.us.16 ]
  %402 = icmp eq i8 %.lcssa.us.16, 0
  br i1 %402, label %strlen2.exit.split.us.160.16, label %.us-lcssa.us

strlen2.exit.split.us.160.16:                     ; preds = %thread-pre-split.us.16
  %403 = getelementptr inbounds i8, i8* %cs, i64 33
  %404 = load i8, i8* %403, align 1
  %405 = icmp eq i8 %404, 0
  br i1 %405, label %.thread7, label %.preheader.us.1.16.preheader

.preheader.us.1.16.preheader:                     ; preds = %strlen2.exit.split.us.160.16
  br label %.preheader.us.1.16

.preheader.us.1.16:                               ; preds = %.preheader.us.1.16.preheader, %408
  %406 = phi i8 [ %412, %408 ], [ %1, %.preheader.us.1.16.preheader ]
  %j.015.us.1.16 = phi i32 [ %410, %408 ], [ 0, %.preheader.us.1.16.preheader ]
  %p.114.us.1.16 = phi i8* [ %409, %408 ], [ %ct, %.preheader.us.1.16.preheader ]
  %407 = icmp eq i8 %406, %404
  br i1 %407, label %thread-pre-split.us.1.16, label %408

; <label>:408                                     ; preds = %.preheader.us.1.16
  %409 = getelementptr inbounds i8, i8* %p.114.us.1.16, i64 1
  %410 = add nuw nsw i32 %j.015.us.1.16, 1
  %411 = icmp slt i32 %410, %10
  %412 = load i8, i8* %409, align 1
  br i1 %411, label %.preheader.us.1.16, label %thread-pre-split.us.1.16

thread-pre-split.us.1.16:                         ; preds = %408, %.preheader.us.1.16
  %.lcssa.us.1.16 = phi i8 [ %412, %408 ], [ %404, %.preheader.us.1.16 ]
  %p.1.lcssa.us.1.16 = phi i8* [ %409, %408 ], [ %p.114.us.1.16, %.preheader.us.1.16 ]
  %413 = icmp eq i8 %.lcssa.us.1.16, 0
  br i1 %413, label %strlen2.exit.split.us.1731, label %.us-lcssa.us

strlen2.exit.split.us.1731:                       ; preds = %thread-pre-split.us.1.16
  %414 = getelementptr inbounds i8, i8* %cs, i64 34
  %415 = load i8, i8* %414, align 1
  %416 = icmp eq i8 %415, 0
  br i1 %416, label %.thread7, label %.preheader.us.17.preheader

.preheader.us.17.preheader:                       ; preds = %strlen2.exit.split.us.1731
  br label %.preheader.us.17

.preheader.us.17:                                 ; preds = %.preheader.us.17.preheader, %419
  %417 = phi i8 [ %423, %419 ], [ %1, %.preheader.us.17.preheader ]
  %j.015.us.17 = phi i32 [ %421, %419 ], [ 0, %.preheader.us.17.preheader ]
  %p.114.us.17 = phi i8* [ %420, %419 ], [ %ct, %.preheader.us.17.preheader ]
  %418 = icmp eq i8 %417, %415
  br i1 %418, label %thread-pre-split.us.1714, label %419

; <label>:419                                     ; preds = %.preheader.us.17
  %420 = getelementptr inbounds i8, i8* %p.114.us.17, i64 1
  %421 = add nuw nsw i32 %j.015.us.17, 1
  %422 = icmp slt i32 %421, %10
  %423 = load i8, i8* %420, align 1
  br i1 %422, label %.preheader.us.17, label %thread-pre-split.us.1714

thread-pre-split.us.1714:                         ; preds = %419, %.preheader.us.17
  %.lcssa.us.17 = phi i8 [ %423, %419 ], [ %415, %.preheader.us.17 ]
  %p.1.lcssa.us.17 = phi i8* [ %420, %419 ], [ %p.114.us.17, %.preheader.us.17 ]
  %424 = icmp eq i8 %.lcssa.us.17, 0
  br i1 %424, label %strlen2.exit.split.us.160.17, label %.us-lcssa.us

strlen2.exit.split.us.160.17:                     ; preds = %thread-pre-split.us.1714
  %425 = getelementptr inbounds i8, i8* %cs, i64 35
  %426 = load i8, i8* %425, align 1
  %427 = icmp eq i8 %426, 0
  br i1 %427, label %.thread7, label %.preheader.us.1.17.preheader

.preheader.us.1.17.preheader:                     ; preds = %strlen2.exit.split.us.160.17
  br label %.preheader.us.1.17

.preheader.us.1.17:                               ; preds = %.preheader.us.1.17.preheader, %430
  %428 = phi i8 [ %434, %430 ], [ %1, %.preheader.us.1.17.preheader ]
  %j.015.us.1.17 = phi i32 [ %432, %430 ], [ 0, %.preheader.us.1.17.preheader ]
  %p.114.us.1.17 = phi i8* [ %431, %430 ], [ %ct, %.preheader.us.1.17.preheader ]
  %429 = icmp eq i8 %428, %426
  br i1 %429, label %thread-pre-split.us.1.17, label %430

; <label>:430                                     ; preds = %.preheader.us.1.17
  %431 = getelementptr inbounds i8, i8* %p.114.us.1.17, i64 1
  %432 = add nuw nsw i32 %j.015.us.1.17, 1
  %433 = icmp slt i32 %432, %10
  %434 = load i8, i8* %431, align 1
  br i1 %433, label %.preheader.us.1.17, label %thread-pre-split.us.1.17

thread-pre-split.us.1.17:                         ; preds = %430, %.preheader.us.1.17
  %.lcssa.us.1.17 = phi i8 [ %434, %430 ], [ %426, %.preheader.us.1.17 ]
  %p.1.lcssa.us.1.17 = phi i8* [ %431, %430 ], [ %p.114.us.1.17, %.preheader.us.1.17 ]
  %435 = icmp eq i8 %.lcssa.us.1.17, 0
  br i1 %435, label %strlen2.exit.split.us.1832, label %.us-lcssa.us

strlen2.exit.split.us.1832:                       ; preds = %thread-pre-split.us.1.17
  %436 = getelementptr inbounds i8, i8* %cs, i64 36
  %437 = load i8, i8* %436, align 1
  %438 = icmp eq i8 %437, 0
  br i1 %438, label %.thread7, label %.preheader.us.18.preheader

.preheader.us.18.preheader:                       ; preds = %strlen2.exit.split.us.1832
  br label %.preheader.us.18

.preheader.us.18:                                 ; preds = %.preheader.us.18.preheader, %441
  %439 = phi i8 [ %445, %441 ], [ %1, %.preheader.us.18.preheader ]
  %j.015.us.18 = phi i32 [ %443, %441 ], [ 0, %.preheader.us.18.preheader ]
  %p.114.us.18 = phi i8* [ %442, %441 ], [ %ct, %.preheader.us.18.preheader ]
  %440 = icmp eq i8 %439, %437
  br i1 %440, label %thread-pre-split.us.18, label %441

; <label>:441                                     ; preds = %.preheader.us.18
  %442 = getelementptr inbounds i8, i8* %p.114.us.18, i64 1
  %443 = add nuw nsw i32 %j.015.us.18, 1
  %444 = icmp slt i32 %443, %10
  %445 = load i8, i8* %442, align 1
  br i1 %444, label %.preheader.us.18, label %thread-pre-split.us.18

thread-pre-split.us.18:                           ; preds = %441, %.preheader.us.18
  %.lcssa.us.18 = phi i8 [ %445, %441 ], [ %437, %.preheader.us.18 ]
  %p.1.lcssa.us.18 = phi i8* [ %442, %441 ], [ %p.114.us.18, %.preheader.us.18 ]
  %446 = icmp eq i8 %.lcssa.us.18, 0
  br i1 %446, label %strlen2.exit.split.us.160.18, label %.us-lcssa.us

strlen2.exit.split.us.160.18:                     ; preds = %thread-pre-split.us.18
  %447 = getelementptr inbounds i8, i8* %cs, i64 37
  %448 = load i8, i8* %447, align 1
  %449 = icmp eq i8 %448, 0
  br i1 %449, label %.thread7, label %.preheader.us.1.18.preheader

.preheader.us.1.18.preheader:                     ; preds = %strlen2.exit.split.us.160.18
  br label %.preheader.us.1.18

.preheader.us.1.18:                               ; preds = %.preheader.us.1.18.preheader, %452
  %450 = phi i8 [ %456, %452 ], [ %1, %.preheader.us.1.18.preheader ]
  %j.015.us.1.18 = phi i32 [ %454, %452 ], [ 0, %.preheader.us.1.18.preheader ]
  %p.114.us.1.18 = phi i8* [ %453, %452 ], [ %ct, %.preheader.us.1.18.preheader ]
  %451 = icmp eq i8 %450, %448
  br i1 %451, label %thread-pre-split.us.1.18, label %452

; <label>:452                                     ; preds = %.preheader.us.1.18
  %453 = getelementptr inbounds i8, i8* %p.114.us.1.18, i64 1
  %454 = add nuw nsw i32 %j.015.us.1.18, 1
  %455 = icmp slt i32 %454, %10
  %456 = load i8, i8* %453, align 1
  br i1 %455, label %.preheader.us.1.18, label %thread-pre-split.us.1.18

thread-pre-split.us.1.18:                         ; preds = %452, %.preheader.us.1.18
  %.lcssa.us.1.18 = phi i8 [ %456, %452 ], [ %448, %.preheader.us.1.18 ]
  %p.1.lcssa.us.1.18 = phi i8* [ %453, %452 ], [ %p.114.us.1.18, %.preheader.us.1.18 ]
  %457 = icmp eq i8 %.lcssa.us.1.18, 0
  br i1 %457, label %strlen2.exit.split.us.1933, label %.us-lcssa.us

strlen2.exit.split.us.1933:                       ; preds = %thread-pre-split.us.1.18
  %458 = getelementptr inbounds i8, i8* %cs, i64 38
  %459 = load i8, i8* %458, align 1
  %460 = icmp eq i8 %459, 0
  br i1 %460, label %.thread7, label %.preheader.us.19.preheader

.preheader.us.19.preheader:                       ; preds = %strlen2.exit.split.us.1933
  br label %.preheader.us.19

.preheader.us.19:                                 ; preds = %.preheader.us.19.preheader, %463
  %461 = phi i8 [ %467, %463 ], [ %1, %.preheader.us.19.preheader ]
  %j.015.us.19 = phi i32 [ %465, %463 ], [ 0, %.preheader.us.19.preheader ]
  %p.114.us.19 = phi i8* [ %464, %463 ], [ %ct, %.preheader.us.19.preheader ]
  %462 = icmp eq i8 %461, %459
  br i1 %462, label %thread-pre-split.us.19, label %463

; <label>:463                                     ; preds = %.preheader.us.19
  %464 = getelementptr inbounds i8, i8* %p.114.us.19, i64 1
  %465 = add nuw nsw i32 %j.015.us.19, 1
  %466 = icmp slt i32 %465, %10
  %467 = load i8, i8* %464, align 1
  br i1 %466, label %.preheader.us.19, label %thread-pre-split.us.19

thread-pre-split.us.19:                           ; preds = %463, %.preheader.us.19
  %.lcssa.us.19 = phi i8 [ %467, %463 ], [ %459, %.preheader.us.19 ]
  %p.1.lcssa.us.19 = phi i8* [ %464, %463 ], [ %p.114.us.19, %.preheader.us.19 ]
  %468 = icmp eq i8 %.lcssa.us.19, 0
  br i1 %468, label %strlen2.exit.split.us.160.19, label %.us-lcssa.us

strlen2.exit.split.us.160.19:                     ; preds = %thread-pre-split.us.19
  %469 = getelementptr inbounds i8, i8* %cs, i64 39
  %470 = load i8, i8* %469, align 1
  %471 = icmp eq i8 %470, 0
  br i1 %471, label %.thread7, label %.preheader.us.1.19.preheader

.preheader.us.1.19.preheader:                     ; preds = %strlen2.exit.split.us.160.19
  br label %.preheader.us.1.19

.preheader.us.1.19:                               ; preds = %.preheader.us.1.19.preheader, %474
  %472 = phi i8 [ %478, %474 ], [ %1, %.preheader.us.1.19.preheader ]
  %j.015.us.1.19 = phi i32 [ %476, %474 ], [ 0, %.preheader.us.1.19.preheader ]
  %p.114.us.1.19 = phi i8* [ %475, %474 ], [ %ct, %.preheader.us.1.19.preheader ]
  %473 = icmp eq i8 %472, %470
  br i1 %473, label %thread-pre-split.us.1.19, label %474

; <label>:474                                     ; preds = %.preheader.us.1.19
  %475 = getelementptr inbounds i8, i8* %p.114.us.1.19, i64 1
  %476 = add nuw nsw i32 %j.015.us.1.19, 1
  %477 = icmp slt i32 %476, %10
  %478 = load i8, i8* %475, align 1
  br i1 %477, label %.preheader.us.1.19, label %thread-pre-split.us.1.19

thread-pre-split.us.1.19:                         ; preds = %474, %.preheader.us.1.19
  %.lcssa.us.1.19 = phi i8 [ %478, %474 ], [ %470, %.preheader.us.1.19 ]
  %p.1.lcssa.us.1.19 = phi i8* [ %475, %474 ], [ %p.114.us.1.19, %.preheader.us.1.19 ]
  %479 = icmp eq i8 %.lcssa.us.1.19, 0
  br i1 %479, label %strlen2.exit.split.us.2034, label %.us-lcssa.us

strlen2.exit.split.us.2034:                       ; preds = %thread-pre-split.us.1.19
  %480 = getelementptr inbounds i8, i8* %cs, i64 40
  %481 = load i8, i8* %480, align 1
  %482 = icmp eq i8 %481, 0
  br i1 %482, label %.thread7, label %.preheader.us.20.preheader

.preheader.us.20.preheader:                       ; preds = %strlen2.exit.split.us.2034
  br label %.preheader.us.20

.preheader.us.20:                                 ; preds = %.preheader.us.20.preheader, %485
  %483 = phi i8 [ %489, %485 ], [ %1, %.preheader.us.20.preheader ]
  %j.015.us.20 = phi i32 [ %487, %485 ], [ 0, %.preheader.us.20.preheader ]
  %p.114.us.20 = phi i8* [ %486, %485 ], [ %ct, %.preheader.us.20.preheader ]
  %484 = icmp eq i8 %483, %481
  br i1 %484, label %thread-pre-split.us.20, label %485

; <label>:485                                     ; preds = %.preheader.us.20
  %486 = getelementptr inbounds i8, i8* %p.114.us.20, i64 1
  %487 = add nuw nsw i32 %j.015.us.20, 1
  %488 = icmp slt i32 %487, %10
  %489 = load i8, i8* %486, align 1
  br i1 %488, label %.preheader.us.20, label %thread-pre-split.us.20

thread-pre-split.us.20:                           ; preds = %485, %.preheader.us.20
  %.lcssa.us.20 = phi i8 [ %489, %485 ], [ %481, %.preheader.us.20 ]
  %p.1.lcssa.us.20 = phi i8* [ %486, %485 ], [ %p.114.us.20, %.preheader.us.20 ]
  %490 = icmp eq i8 %.lcssa.us.20, 0
  br i1 %490, label %strlen2.exit.split.us.160.20, label %.us-lcssa.us

strlen2.exit.split.us.160.20:                     ; preds = %thread-pre-split.us.20
  %491 = getelementptr inbounds i8, i8* %cs, i64 41
  %492 = load i8, i8* %491, align 1
  %493 = icmp eq i8 %492, 0
  br i1 %493, label %.thread7, label %.preheader.us.1.20.preheader

.preheader.us.1.20.preheader:                     ; preds = %strlen2.exit.split.us.160.20
  br label %.preheader.us.1.20

.preheader.us.1.20:                               ; preds = %.preheader.us.1.20.preheader, %496
  %494 = phi i8 [ %500, %496 ], [ %1, %.preheader.us.1.20.preheader ]
  %j.015.us.1.20 = phi i32 [ %498, %496 ], [ 0, %.preheader.us.1.20.preheader ]
  %p.114.us.1.20 = phi i8* [ %497, %496 ], [ %ct, %.preheader.us.1.20.preheader ]
  %495 = icmp eq i8 %494, %492
  br i1 %495, label %thread-pre-split.us.1.20, label %496

; <label>:496                                     ; preds = %.preheader.us.1.20
  %497 = getelementptr inbounds i8, i8* %p.114.us.1.20, i64 1
  %498 = add nuw nsw i32 %j.015.us.1.20, 1
  %499 = icmp slt i32 %498, %10
  %500 = load i8, i8* %497, align 1
  br i1 %499, label %.preheader.us.1.20, label %thread-pre-split.us.1.20

thread-pre-split.us.1.20:                         ; preds = %496, %.preheader.us.1.20
  %.lcssa.us.1.20 = phi i8 [ %500, %496 ], [ %492, %.preheader.us.1.20 ]
  %p.1.lcssa.us.1.20 = phi i8* [ %497, %496 ], [ %p.114.us.1.20, %.preheader.us.1.20 ]
  %501 = icmp eq i8 %.lcssa.us.1.20, 0
  br i1 %501, label %strlen2.exit.split.us.2135, label %.us-lcssa.us

strlen2.exit.split.us.2135:                       ; preds = %thread-pre-split.us.1.20
  %502 = getelementptr inbounds i8, i8* %cs, i64 42
  %503 = load i8, i8* %502, align 1
  %504 = icmp eq i8 %503, 0
  br i1 %504, label %.thread7, label %.preheader.us.21.preheader

.preheader.us.21.preheader:                       ; preds = %strlen2.exit.split.us.2135
  br label %.preheader.us.21

.preheader.us.21:                                 ; preds = %.preheader.us.21.preheader, %507
  %505 = phi i8 [ %511, %507 ], [ %1, %.preheader.us.21.preheader ]
  %j.015.us.21 = phi i32 [ %509, %507 ], [ 0, %.preheader.us.21.preheader ]
  %p.114.us.21 = phi i8* [ %508, %507 ], [ %ct, %.preheader.us.21.preheader ]
  %506 = icmp eq i8 %505, %503
  br i1 %506, label %thread-pre-split.us.21, label %507

; <label>:507                                     ; preds = %.preheader.us.21
  %508 = getelementptr inbounds i8, i8* %p.114.us.21, i64 1
  %509 = add nuw nsw i32 %j.015.us.21, 1
  %510 = icmp slt i32 %509, %10
  %511 = load i8, i8* %508, align 1
  br i1 %510, label %.preheader.us.21, label %thread-pre-split.us.21

thread-pre-split.us.21:                           ; preds = %507, %.preheader.us.21
  %.lcssa.us.21 = phi i8 [ %511, %507 ], [ %503, %.preheader.us.21 ]
  %p.1.lcssa.us.21 = phi i8* [ %508, %507 ], [ %p.114.us.21, %.preheader.us.21 ]
  %512 = icmp eq i8 %.lcssa.us.21, 0
  br i1 %512, label %strlen2.exit.split.us.160.21, label %.us-lcssa.us

strlen2.exit.split.us.160.21:                     ; preds = %thread-pre-split.us.21
  %513 = getelementptr inbounds i8, i8* %cs, i64 43
  %514 = load i8, i8* %513, align 1
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %.thread7, label %.preheader.us.1.21.preheader

.preheader.us.1.21.preheader:                     ; preds = %strlen2.exit.split.us.160.21
  br label %.preheader.us.1.21

.preheader.us.1.21:                               ; preds = %.preheader.us.1.21.preheader, %518
  %516 = phi i8 [ %522, %518 ], [ %1, %.preheader.us.1.21.preheader ]
  %j.015.us.1.21 = phi i32 [ %520, %518 ], [ 0, %.preheader.us.1.21.preheader ]
  %p.114.us.1.21 = phi i8* [ %519, %518 ], [ %ct, %.preheader.us.1.21.preheader ]
  %517 = icmp eq i8 %516, %514
  br i1 %517, label %thread-pre-split.us.1.21, label %518

; <label>:518                                     ; preds = %.preheader.us.1.21
  %519 = getelementptr inbounds i8, i8* %p.114.us.1.21, i64 1
  %520 = add nuw nsw i32 %j.015.us.1.21, 1
  %521 = icmp slt i32 %520, %10
  %522 = load i8, i8* %519, align 1
  br i1 %521, label %.preheader.us.1.21, label %thread-pre-split.us.1.21

thread-pre-split.us.1.21:                         ; preds = %518, %.preheader.us.1.21
  %.lcssa.us.1.21 = phi i8 [ %522, %518 ], [ %514, %.preheader.us.1.21 ]
  %p.1.lcssa.us.1.21 = phi i8* [ %519, %518 ], [ %p.114.us.1.21, %.preheader.us.1.21 ]
  %523 = icmp eq i8 %.lcssa.us.1.21, 0
  br i1 %523, label %strlen2.exit.split.us.2236, label %.us-lcssa.us

strlen2.exit.split.us.2236:                       ; preds = %thread-pre-split.us.1.21
  %524 = getelementptr inbounds i8, i8* %cs, i64 44
  %525 = load i8, i8* %524, align 1
  %526 = icmp eq i8 %525, 0
  br i1 %526, label %.thread7, label %.preheader.us.22.preheader

.preheader.us.22.preheader:                       ; preds = %strlen2.exit.split.us.2236
  br label %.preheader.us.22

.preheader.us.22:                                 ; preds = %.preheader.us.22.preheader, %529
  %527 = phi i8 [ %533, %529 ], [ %1, %.preheader.us.22.preheader ]
  %j.015.us.22 = phi i32 [ %531, %529 ], [ 0, %.preheader.us.22.preheader ]
  %p.114.us.22 = phi i8* [ %530, %529 ], [ %ct, %.preheader.us.22.preheader ]
  %528 = icmp eq i8 %527, %525
  br i1 %528, label %thread-pre-split.us.22, label %529

; <label>:529                                     ; preds = %.preheader.us.22
  %530 = getelementptr inbounds i8, i8* %p.114.us.22, i64 1
  %531 = add nuw nsw i32 %j.015.us.22, 1
  %532 = icmp slt i32 %531, %10
  %533 = load i8, i8* %530, align 1
  br i1 %532, label %.preheader.us.22, label %thread-pre-split.us.22

thread-pre-split.us.22:                           ; preds = %529, %.preheader.us.22
  %.lcssa.us.22 = phi i8 [ %533, %529 ], [ %525, %.preheader.us.22 ]
  %p.1.lcssa.us.22 = phi i8* [ %530, %529 ], [ %p.114.us.22, %.preheader.us.22 ]
  %534 = icmp eq i8 %.lcssa.us.22, 0
  br i1 %534, label %strlen2.exit.split.us.160.22, label %.us-lcssa.us

strlen2.exit.split.us.160.22:                     ; preds = %thread-pre-split.us.22
  %535 = getelementptr inbounds i8, i8* %cs, i64 45
  %536 = load i8, i8* %535, align 1
  %537 = icmp eq i8 %536, 0
  br i1 %537, label %.thread7, label %.preheader.us.1.22.preheader

.preheader.us.1.22.preheader:                     ; preds = %strlen2.exit.split.us.160.22
  br label %.preheader.us.1.22

.preheader.us.1.22:                               ; preds = %.preheader.us.1.22.preheader, %540
  %538 = phi i8 [ %544, %540 ], [ %1, %.preheader.us.1.22.preheader ]
  %j.015.us.1.22 = phi i32 [ %542, %540 ], [ 0, %.preheader.us.1.22.preheader ]
  %p.114.us.1.22 = phi i8* [ %541, %540 ], [ %ct, %.preheader.us.1.22.preheader ]
  %539 = icmp eq i8 %538, %536
  br i1 %539, label %thread-pre-split.us.1.22, label %540

; <label>:540                                     ; preds = %.preheader.us.1.22
  %541 = getelementptr inbounds i8, i8* %p.114.us.1.22, i64 1
  %542 = add nuw nsw i32 %j.015.us.1.22, 1
  %543 = icmp slt i32 %542, %10
  %544 = load i8, i8* %541, align 1
  br i1 %543, label %.preheader.us.1.22, label %thread-pre-split.us.1.22

thread-pre-split.us.1.22:                         ; preds = %540, %.preheader.us.1.22
  %.lcssa.us.1.22 = phi i8 [ %544, %540 ], [ %536, %.preheader.us.1.22 ]
  %p.1.lcssa.us.1.22 = phi i8* [ %541, %540 ], [ %p.114.us.1.22, %.preheader.us.1.22 ]
  %545 = icmp eq i8 %.lcssa.us.1.22, 0
  br i1 %545, label %strlen2.exit.split.us.2337, label %.us-lcssa.us

strlen2.exit.split.us.2337:                       ; preds = %thread-pre-split.us.1.22
  %546 = getelementptr inbounds i8, i8* %cs, i64 46
  %547 = load i8, i8* %546, align 1
  %548 = icmp eq i8 %547, 0
  br i1 %548, label %.thread7, label %.preheader.us.23.preheader

.preheader.us.23.preheader:                       ; preds = %strlen2.exit.split.us.2337
  br label %.preheader.us.23

.preheader.us.23:                                 ; preds = %.preheader.us.23.preheader, %551
  %549 = phi i8 [ %555, %551 ], [ %1, %.preheader.us.23.preheader ]
  %j.015.us.23 = phi i32 [ %553, %551 ], [ 0, %.preheader.us.23.preheader ]
  %p.114.us.23 = phi i8* [ %552, %551 ], [ %ct, %.preheader.us.23.preheader ]
  %550 = icmp eq i8 %549, %547
  br i1 %550, label %thread-pre-split.us.23, label %551

; <label>:551                                     ; preds = %.preheader.us.23
  %552 = getelementptr inbounds i8, i8* %p.114.us.23, i64 1
  %553 = add nuw nsw i32 %j.015.us.23, 1
  %554 = icmp slt i32 %553, %10
  %555 = load i8, i8* %552, align 1
  br i1 %554, label %.preheader.us.23, label %thread-pre-split.us.23

thread-pre-split.us.23:                           ; preds = %551, %.preheader.us.23
  %.lcssa.us.23 = phi i8 [ %555, %551 ], [ %547, %.preheader.us.23 ]
  %p.1.lcssa.us.23 = phi i8* [ %552, %551 ], [ %p.114.us.23, %.preheader.us.23 ]
  %556 = icmp eq i8 %.lcssa.us.23, 0
  br i1 %556, label %strlen2.exit.split.us.160.23, label %.us-lcssa.us

strlen2.exit.split.us.160.23:                     ; preds = %thread-pre-split.us.23
  %557 = getelementptr inbounds i8, i8* %cs, i64 47
  %558 = load i8, i8* %557, align 1
  %559 = icmp eq i8 %558, 0
  br i1 %559, label %.thread7, label %.preheader.us.1.23.preheader

.preheader.us.1.23.preheader:                     ; preds = %strlen2.exit.split.us.160.23
  br label %.preheader.us.1.23

.preheader.us.1.23:                               ; preds = %.preheader.us.1.23.preheader, %562
  %560 = phi i8 [ %566, %562 ], [ %1, %.preheader.us.1.23.preheader ]
  %j.015.us.1.23 = phi i32 [ %564, %562 ], [ 0, %.preheader.us.1.23.preheader ]
  %p.114.us.1.23 = phi i8* [ %563, %562 ], [ %ct, %.preheader.us.1.23.preheader ]
  %561 = icmp eq i8 %560, %558
  br i1 %561, label %thread-pre-split.us.1.23, label %562

; <label>:562                                     ; preds = %.preheader.us.1.23
  %563 = getelementptr inbounds i8, i8* %p.114.us.1.23, i64 1
  %564 = add nuw nsw i32 %j.015.us.1.23, 1
  %565 = icmp slt i32 %564, %10
  %566 = load i8, i8* %563, align 1
  br i1 %565, label %.preheader.us.1.23, label %thread-pre-split.us.1.23

thread-pre-split.us.1.23:                         ; preds = %562, %.preheader.us.1.23
  %.lcssa.us.1.23 = phi i8 [ %566, %562 ], [ %558, %.preheader.us.1.23 ]
  %p.1.lcssa.us.1.23 = phi i8* [ %563, %562 ], [ %p.114.us.1.23, %.preheader.us.1.23 ]
  %567 = icmp eq i8 %.lcssa.us.1.23, 0
  br i1 %567, label %strlen2.exit.split.us.2438, label %.us-lcssa.us

strlen2.exit.split.us.2438:                       ; preds = %thread-pre-split.us.1.23
  %568 = getelementptr inbounds i8, i8* %cs, i64 48
  %569 = load i8, i8* %568, align 1
  %570 = icmp eq i8 %569, 0
  br i1 %570, label %.thread7, label %.preheader.us.24.preheader

.preheader.us.24.preheader:                       ; preds = %strlen2.exit.split.us.2438
  br label %.preheader.us.24

.preheader.us.24:                                 ; preds = %.preheader.us.24.preheader, %573
  %571 = phi i8 [ %577, %573 ], [ %1, %.preheader.us.24.preheader ]
  %j.015.us.24 = phi i32 [ %575, %573 ], [ 0, %.preheader.us.24.preheader ]
  %p.114.us.24 = phi i8* [ %574, %573 ], [ %ct, %.preheader.us.24.preheader ]
  %572 = icmp eq i8 %571, %569
  br i1 %572, label %thread-pre-split.us.24, label %573

; <label>:573                                     ; preds = %.preheader.us.24
  %574 = getelementptr inbounds i8, i8* %p.114.us.24, i64 1
  %575 = add nuw nsw i32 %j.015.us.24, 1
  %576 = icmp slt i32 %575, %10
  %577 = load i8, i8* %574, align 1
  br i1 %576, label %.preheader.us.24, label %thread-pre-split.us.24

thread-pre-split.us.24:                           ; preds = %573, %.preheader.us.24
  %.lcssa.us.24 = phi i8 [ %577, %573 ], [ %569, %.preheader.us.24 ]
  %p.1.lcssa.us.24 = phi i8* [ %574, %573 ], [ %p.114.us.24, %.preheader.us.24 ]
  %578 = icmp eq i8 %.lcssa.us.24, 0
  br i1 %578, label %strlen2.exit.split.us.160.24, label %.us-lcssa.us

strlen2.exit.split.us.160.24:                     ; preds = %thread-pre-split.us.24
  %579 = getelementptr inbounds i8, i8* %cs, i64 49
  %580 = load i8, i8* %579, align 1
  %581 = icmp eq i8 %580, 0
  br i1 %581, label %.thread7, label %.preheader.us.1.24.preheader

.preheader.us.1.24.preheader:                     ; preds = %strlen2.exit.split.us.160.24
  br label %.preheader.us.1.24

.preheader.us.1.24:                               ; preds = %.preheader.us.1.24.preheader, %584
  %582 = phi i8 [ %588, %584 ], [ %1, %.preheader.us.1.24.preheader ]
  %j.015.us.1.24 = phi i32 [ %586, %584 ], [ 0, %.preheader.us.1.24.preheader ]
  %p.114.us.1.24 = phi i8* [ %585, %584 ], [ %ct, %.preheader.us.1.24.preheader ]
  %583 = icmp eq i8 %582, %580
  br i1 %583, label %thread-pre-split.us.1.24, label %584

; <label>:584                                     ; preds = %.preheader.us.1.24
  %585 = getelementptr inbounds i8, i8* %p.114.us.1.24, i64 1
  %586 = add nuw nsw i32 %j.015.us.1.24, 1
  %587 = icmp slt i32 %586, %10
  %588 = load i8, i8* %585, align 1
  br i1 %587, label %.preheader.us.1.24, label %thread-pre-split.us.1.24

thread-pre-split.us.1.24:                         ; preds = %584, %.preheader.us.1.24
  %.lcssa.us.1.24 = phi i8 [ %588, %584 ], [ %580, %.preheader.us.1.24 ]
  %p.1.lcssa.us.1.24 = phi i8* [ %585, %584 ], [ %p.114.us.1.24, %.preheader.us.1.24 ]
  %589 = icmp eq i8 %.lcssa.us.1.24, 0
  %590 = getelementptr inbounds i8, i8* %cs, i64 50
  %. = select i1 %589, i64 50, i64 49
  %.1 = select i1 %589, i8* %590, i8* %579
  br label %.us-lcssa.us

strlen2.exit.split.161.1:                         ; preds = %strlen2.exit.split.140
  %591 = getelementptr inbounds i8, i8* %cs, i64 3
  %592 = load i8, i8* %591, align 1
  %593 = icmp eq i8 %592, 0
  br i1 %593, label %.thread7, label %strlen2.exit.split.241

strlen2.exit.split.241:                           ; preds = %strlen2.exit.split.161.1
  %594 = getelementptr inbounds i8, i8* %cs, i64 4
  %595 = load i8, i8* %594, align 1
  %596 = icmp eq i8 %595, 0
  br i1 %596, label %.thread7, label %strlen2.exit.split.161.2

strlen2.exit.split.161.2:                         ; preds = %strlen2.exit.split.241
  %597 = getelementptr inbounds i8, i8* %cs, i64 5
  %598 = load i8, i8* %597, align 1
  %599 = icmp eq i8 %598, 0
  br i1 %599, label %.thread7, label %strlen2.exit.split.342

strlen2.exit.split.342:                           ; preds = %strlen2.exit.split.161.2
  %600 = getelementptr inbounds i8, i8* %cs, i64 6
  %601 = load i8, i8* %600, align 1
  %602 = icmp eq i8 %601, 0
  br i1 %602, label %.thread7, label %strlen2.exit.split.161.3

strlen2.exit.split.161.3:                         ; preds = %strlen2.exit.split.342
  %603 = getelementptr inbounds i8, i8* %cs, i64 7
  %604 = load i8, i8* %603, align 1
  %605 = icmp eq i8 %604, 0
  br i1 %605, label %.thread7, label %strlen2.exit.split.443

strlen2.exit.split.443:                           ; preds = %strlen2.exit.split.161.3
  %606 = getelementptr inbounds i8, i8* %cs, i64 8
  %607 = load i8, i8* %606, align 1
  %608 = icmp eq i8 %607, 0
  br i1 %608, label %.thread7, label %strlen2.exit.split.161.4

strlen2.exit.split.161.4:                         ; preds = %strlen2.exit.split.443
  %609 = getelementptr inbounds i8, i8* %cs, i64 9
  %610 = load i8, i8* %609, align 1
  %611 = icmp eq i8 %610, 0
  br i1 %611, label %.thread7, label %strlen2.exit.split.544

strlen2.exit.split.544:                           ; preds = %strlen2.exit.split.161.4
  %612 = getelementptr inbounds i8, i8* %cs, i64 10
  %613 = load i8, i8* %612, align 1
  %614 = icmp eq i8 %613, 0
  br i1 %614, label %.thread7, label %strlen2.exit.split.161.5

strlen2.exit.split.161.5:                         ; preds = %strlen2.exit.split.544
  %615 = getelementptr inbounds i8, i8* %cs, i64 11
  %616 = load i8, i8* %615, align 1
  %617 = icmp eq i8 %616, 0
  br i1 %617, label %.thread7, label %strlen2.exit.split.645

strlen2.exit.split.645:                           ; preds = %strlen2.exit.split.161.5
  %618 = getelementptr inbounds i8, i8* %cs, i64 12
  %619 = load i8, i8* %618, align 1
  %620 = icmp eq i8 %619, 0
  br i1 %620, label %.thread7, label %strlen2.exit.split.161.6

strlen2.exit.split.161.6:                         ; preds = %strlen2.exit.split.645
  %621 = getelementptr inbounds i8, i8* %cs, i64 13
  %622 = load i8, i8* %621, align 1
  %623 = icmp eq i8 %622, 0
  br i1 %623, label %.thread7, label %strlen2.exit.split.746

strlen2.exit.split.746:                           ; preds = %strlen2.exit.split.161.6
  %624 = getelementptr inbounds i8, i8* %cs, i64 14
  %625 = load i8, i8* %624, align 1
  %626 = icmp eq i8 %625, 0
  br i1 %626, label %.thread7, label %strlen2.exit.split.161.7

strlen2.exit.split.161.7:                         ; preds = %strlen2.exit.split.746
  %627 = getelementptr inbounds i8, i8* %cs, i64 15
  %628 = load i8, i8* %627, align 1
  %629 = icmp eq i8 %628, 0
  br i1 %629, label %.thread7, label %strlen2.exit.split.847

strlen2.exit.split.847:                           ; preds = %strlen2.exit.split.161.7
  %630 = getelementptr inbounds i8, i8* %cs, i64 16
  %631 = load i8, i8* %630, align 1
  %632 = icmp eq i8 %631, 0
  br i1 %632, label %.thread7, label %strlen2.exit.split.161.8

strlen2.exit.split.161.8:                         ; preds = %strlen2.exit.split.847
  %633 = getelementptr inbounds i8, i8* %cs, i64 17
  %634 = load i8, i8* %633, align 1
  %635 = icmp eq i8 %634, 0
  br i1 %635, label %.thread7, label %strlen2.exit.split.948

strlen2.exit.split.948:                           ; preds = %strlen2.exit.split.161.8
  %636 = getelementptr inbounds i8, i8* %cs, i64 18
  %637 = load i8, i8* %636, align 1
  %638 = icmp eq i8 %637, 0
  br i1 %638, label %.thread7, label %strlen2.exit.split.161.9

strlen2.exit.split.161.9:                         ; preds = %strlen2.exit.split.948
  %639 = getelementptr inbounds i8, i8* %cs, i64 19
  %640 = load i8, i8* %639, align 1
  %641 = icmp eq i8 %640, 0
  br i1 %641, label %.thread7, label %strlen2.exit.split.1049

strlen2.exit.split.1049:                          ; preds = %strlen2.exit.split.161.9
  %642 = getelementptr inbounds i8, i8* %cs, i64 20
  %643 = load i8, i8* %642, align 1
  %644 = icmp eq i8 %643, 0
  br i1 %644, label %.thread7, label %strlen2.exit.split.161.10

strlen2.exit.split.161.10:                        ; preds = %strlen2.exit.split.1049
  %645 = getelementptr inbounds i8, i8* %cs, i64 21
  %646 = load i8, i8* %645, align 1
  %647 = icmp eq i8 %646, 0
  br i1 %647, label %.thread7, label %strlen2.exit.split.1150

strlen2.exit.split.1150:                          ; preds = %strlen2.exit.split.161.10
  %648 = getelementptr inbounds i8, i8* %cs, i64 22
  %649 = load i8, i8* %648, align 1
  %650 = icmp eq i8 %649, 0
  br i1 %650, label %.thread7, label %strlen2.exit.split.161.11

strlen2.exit.split.161.11:                        ; preds = %strlen2.exit.split.1150
  %651 = getelementptr inbounds i8, i8* %cs, i64 23
  %652 = load i8, i8* %651, align 1
  %653 = icmp eq i8 %652, 0
  br i1 %653, label %.thread7, label %strlen2.exit.split.1251

strlen2.exit.split.1251:                          ; preds = %strlen2.exit.split.161.11
  %654 = getelementptr inbounds i8, i8* %cs, i64 24
  %655 = load i8, i8* %654, align 1
  %656 = icmp eq i8 %655, 0
  br i1 %656, label %.thread7, label %strlen2.exit.split.161.12

strlen2.exit.split.161.12:                        ; preds = %strlen2.exit.split.1251
  %657 = getelementptr inbounds i8, i8* %cs, i64 25
  %658 = load i8, i8* %657, align 1
  %659 = icmp eq i8 %658, 0
  br i1 %659, label %.thread7, label %strlen2.exit.split.1352

strlen2.exit.split.1352:                          ; preds = %strlen2.exit.split.161.12
  %660 = getelementptr inbounds i8, i8* %cs, i64 26
  %661 = load i8, i8* %660, align 1
  %662 = icmp eq i8 %661, 0
  br i1 %662, label %.thread7, label %strlen2.exit.split.161.13

strlen2.exit.split.161.13:                        ; preds = %strlen2.exit.split.1352
  %663 = getelementptr inbounds i8, i8* %cs, i64 27
  %664 = load i8, i8* %663, align 1
  %665 = icmp eq i8 %664, 0
  br i1 %665, label %.thread7, label %strlen2.exit.split.1453

strlen2.exit.split.1453:                          ; preds = %strlen2.exit.split.161.13
  %666 = getelementptr inbounds i8, i8* %cs, i64 28
  %667 = load i8, i8* %666, align 1
  %668 = icmp eq i8 %667, 0
  br i1 %668, label %.thread7, label %strlen2.exit.split.161.14

strlen2.exit.split.161.14:                        ; preds = %strlen2.exit.split.1453
  %669 = getelementptr inbounds i8, i8* %cs, i64 29
  %670 = load i8, i8* %669, align 1
  %671 = icmp eq i8 %670, 0
  br i1 %671, label %.thread7, label %strlen2.exit.split.1554

strlen2.exit.split.1554:                          ; preds = %strlen2.exit.split.161.14
  %672 = getelementptr inbounds i8, i8* %cs, i64 30
  %673 = load i8, i8* %672, align 1
  %674 = icmp eq i8 %673, 0
  br i1 %674, label %.thread7, label %strlen2.exit.split.161.15

strlen2.exit.split.161.15:                        ; preds = %strlen2.exit.split.1554
  %675 = getelementptr inbounds i8, i8* %cs, i64 31
  %676 = load i8, i8* %675, align 1
  %677 = icmp eq i8 %676, 0
  br i1 %677, label %.thread7, label %strlen2.exit.split.1655

strlen2.exit.split.1655:                          ; preds = %strlen2.exit.split.161.15
  %678 = getelementptr inbounds i8, i8* %cs, i64 32
  %679 = load i8, i8* %678, align 1
  %680 = icmp eq i8 %679, 0
  br i1 %680, label %.thread7, label %strlen2.exit.split.161.16

strlen2.exit.split.161.16:                        ; preds = %strlen2.exit.split.1655
  %681 = getelementptr inbounds i8, i8* %cs, i64 33
  %682 = load i8, i8* %681, align 1
  %683 = icmp eq i8 %682, 0
  br i1 %683, label %.thread7, label %strlen2.exit.split.1756

strlen2.exit.split.1756:                          ; preds = %strlen2.exit.split.161.16
  %684 = getelementptr inbounds i8, i8* %cs, i64 34
  %685 = load i8, i8* %684, align 1
  %686 = icmp eq i8 %685, 0
  br i1 %686, label %.thread7, label %strlen2.exit.split.161.17

strlen2.exit.split.161.17:                        ; preds = %strlen2.exit.split.1756
  %687 = getelementptr inbounds i8, i8* %cs, i64 35
  %688 = load i8, i8* %687, align 1
  %689 = icmp eq i8 %688, 0
  br i1 %689, label %.thread7, label %strlen2.exit.split.1857

strlen2.exit.split.1857:                          ; preds = %strlen2.exit.split.161.17
  %690 = getelementptr inbounds i8, i8* %cs, i64 36
  %691 = load i8, i8* %690, align 1
  %692 = icmp eq i8 %691, 0
  br i1 %692, label %.thread7, label %strlen2.exit.split.161.18

strlen2.exit.split.161.18:                        ; preds = %strlen2.exit.split.1857
  %693 = getelementptr inbounds i8, i8* %cs, i64 37
  %694 = load i8, i8* %693, align 1
  %695 = icmp eq i8 %694, 0
  br i1 %695, label %.thread7, label %strlen2.exit.split.1958

strlen2.exit.split.1958:                          ; preds = %strlen2.exit.split.161.18
  %696 = getelementptr inbounds i8, i8* %cs, i64 38
  %697 = load i8, i8* %696, align 1
  %698 = icmp eq i8 %697, 0
  br i1 %698, label %.thread7, label %strlen2.exit.split.161.19

strlen2.exit.split.161.19:                        ; preds = %strlen2.exit.split.1958
  %699 = getelementptr inbounds i8, i8* %cs, i64 39
  %700 = load i8, i8* %699, align 1
  %701 = icmp eq i8 %700, 0
  br i1 %701, label %.thread7, label %strlen2.exit.split.2059

strlen2.exit.split.2059:                          ; preds = %strlen2.exit.split.161.19
  %702 = getelementptr inbounds i8, i8* %cs, i64 40
  %703 = load i8, i8* %702, align 1
  %704 = icmp eq i8 %703, 0
  br i1 %704, label %.thread7, label %strlen2.exit.split.161.20

strlen2.exit.split.161.20:                        ; preds = %strlen2.exit.split.2059
  %705 = getelementptr inbounds i8, i8* %cs, i64 41
  %706 = load i8, i8* %705, align 1
  %707 = icmp eq i8 %706, 0
  br i1 %707, label %.thread7, label %strlen2.exit.split.2160

strlen2.exit.split.2160:                          ; preds = %strlen2.exit.split.161.20
  %708 = getelementptr inbounds i8, i8* %cs, i64 42
  %709 = load i8, i8* %708, align 1
  %710 = icmp eq i8 %709, 0
  br i1 %710, label %.thread7, label %strlen2.exit.split.161.21

strlen2.exit.split.161.21:                        ; preds = %strlen2.exit.split.2160
  %711 = getelementptr inbounds i8, i8* %cs, i64 43
  %712 = load i8, i8* %711, align 1
  %713 = icmp eq i8 %712, 0
  br i1 %713, label %.thread7, label %strlen2.exit.split.2261

strlen2.exit.split.2261:                          ; preds = %strlen2.exit.split.161.21
  %714 = getelementptr inbounds i8, i8* %cs, i64 44
  %715 = load i8, i8* %714, align 1
  %716 = icmp eq i8 %715, 0
  br i1 %716, label %.thread7, label %strlen2.exit.split.161.22

strlen2.exit.split.161.22:                        ; preds = %strlen2.exit.split.2261
  %717 = getelementptr inbounds i8, i8* %cs, i64 45
  %718 = load i8, i8* %717, align 1
  %719 = icmp eq i8 %718, 0
  br i1 %719, label %.thread7, label %strlen2.exit.split.2362

strlen2.exit.split.2362:                          ; preds = %strlen2.exit.split.161.22
  %720 = getelementptr inbounds i8, i8* %cs, i64 46
  %721 = load i8, i8* %720, align 1
  %722 = icmp eq i8 %721, 0
  br i1 %722, label %.thread7, label %strlen2.exit.split.161.23

strlen2.exit.split.161.23:                        ; preds = %strlen2.exit.split.2362
  %723 = getelementptr inbounds i8, i8* %cs, i64 47
  %724 = load i8, i8* %723, align 1
  %725 = icmp eq i8 %724, 0
  br i1 %725, label %.thread7, label %strlen2.exit.split.2463

strlen2.exit.split.2463:                          ; preds = %strlen2.exit.split.161.23
  %726 = getelementptr inbounds i8, i8* %cs, i64 48
  %727 = load i8, i8* %726, align 1
  %728 = icmp eq i8 %727, 0
  br i1 %728, label %.thread7, label %strlen2.exit.split.161.24

strlen2.exit.split.161.24:                        ; preds = %strlen2.exit.split.2463
  %729 = getelementptr inbounds i8, i8* %cs, i64 49
  %730 = load i8, i8* %729, align 1
  %731 = icmp eq i8 %730, 0
  br i1 %731, label %.thread7, label %.preheader.1.24

.preheader.1.24:                                  ; preds = %strlen2.exit.split.161.24
  %732 = getelementptr inbounds i8, i8* %cs, i64 50
  br label %.us-lcssa.us

; <label>:733                                     ; preds = %61
  %734 = getelementptr inbounds i8, i8* %ct, i64 6
  %735 = load i8, i8* %734, align 1
  %736 = icmp eq i8 %735, 0
  br i1 %736, label %strlen2.exit, label %737

; <label>:737                                     ; preds = %733
  %738 = getelementptr inbounds i8, i8* %ct, i64 7
  %739 = load i8, i8* %738, align 1
  %740 = icmp eq i8 %739, 0
  br i1 %740, label %strlen2.exit, label %741

; <label>:741                                     ; preds = %737
  %742 = getelementptr inbounds i8, i8* %ct, i64 8
  %743 = load i8, i8* %742, align 1
  %744 = icmp eq i8 %743, 0
  br i1 %744, label %strlen2.exit, label %745

; <label>:745                                     ; preds = %741
  %746 = getelementptr inbounds i8, i8* %ct, i64 9
  %747 = load i8, i8* %746, align 1
  %748 = icmp eq i8 %747, 0
  br i1 %748, label %strlen2.exit, label %749

; <label>:749                                     ; preds = %745
  %750 = getelementptr inbounds i8, i8* %ct, i64 10
  %751 = load i8, i8* %750, align 1
  %752 = icmp eq i8 %751, 0
  br i1 %752, label %strlen2.exit, label %753

; <label>:753                                     ; preds = %749
  %754 = getelementptr inbounds i8, i8* %ct, i64 11
  %755 = load i8, i8* %754, align 1
  %756 = icmp eq i8 %755, 0
  br i1 %756, label %strlen2.exit, label %757

; <label>:757                                     ; preds = %753
  %758 = getelementptr inbounds i8, i8* %ct, i64 12
  %759 = load i8, i8* %758, align 1
  %760 = icmp eq i8 %759, 0
  br i1 %760, label %strlen2.exit, label %761

; <label>:761                                     ; preds = %757
  %762 = getelementptr inbounds i8, i8* %ct, i64 13
  %763 = load i8, i8* %762, align 1
  %764 = icmp eq i8 %763, 0
  br i1 %764, label %strlen2.exit, label %765

; <label>:765                                     ; preds = %761
  %766 = getelementptr inbounds i8, i8* %ct, i64 14
  %767 = load i8, i8* %766, align 1
  %768 = icmp eq i8 %767, 0
  br i1 %768, label %strlen2.exit, label %769

; <label>:769                                     ; preds = %765
  %770 = getelementptr inbounds i8, i8* %ct, i64 15
  %771 = load i8, i8* %770, align 1
  %772 = icmp eq i8 %771, 0
  br i1 %772, label %strlen2.exit, label %773

; <label>:773                                     ; preds = %769
  %774 = getelementptr inbounds i8, i8* %ct, i64 16
  %775 = load i8, i8* %774, align 1
  %776 = icmp eq i8 %775, 0
  br i1 %776, label %strlen2.exit, label %777

; <label>:777                                     ; preds = %773
  %778 = getelementptr inbounds i8, i8* %ct, i64 17
  %779 = load i8, i8* %778, align 1
  %780 = icmp eq i8 %779, 0
  br i1 %780, label %strlen2.exit, label %781

; <label>:781                                     ; preds = %777
  %782 = getelementptr inbounds i8, i8* %ct, i64 18
  %783 = load i8, i8* %782, align 1
  %784 = icmp eq i8 %783, 0
  br i1 %784, label %strlen2.exit, label %785

; <label>:785                                     ; preds = %781
  %786 = getelementptr inbounds i8, i8* %ct, i64 19
  %787 = load i8, i8* %786, align 1
  %788 = icmp eq i8 %787, 0
  br i1 %788, label %strlen2.exit, label %789

; <label>:789                                     ; preds = %785
  %790 = getelementptr inbounds i8, i8* %ct, i64 20
  %791 = load i8, i8* %790, align 1
  %792 = icmp eq i8 %791, 0
  br i1 %792, label %strlen2.exit, label %793

; <label>:793                                     ; preds = %789
  %794 = getelementptr inbounds i8, i8* %ct, i64 21
  %795 = load i8, i8* %794, align 1
  %796 = icmp eq i8 %795, 0
  br i1 %796, label %strlen2.exit, label %797

; <label>:797                                     ; preds = %793
  %798 = getelementptr inbounds i8, i8* %ct, i64 22
  %799 = load i8, i8* %798, align 1
  %800 = icmp eq i8 %799, 0
  br i1 %800, label %strlen2.exit, label %801

; <label>:801                                     ; preds = %797
  %802 = getelementptr inbounds i8, i8* %ct, i64 23
  %803 = load i8, i8* %802, align 1
  %804 = icmp eq i8 %803, 0
  br i1 %804, label %strlen2.exit, label %805

; <label>:805                                     ; preds = %801
  %806 = getelementptr inbounds i8, i8* %ct, i64 24
  %807 = load i8, i8* %806, align 1
  %808 = icmp eq i8 %807, 0
  br i1 %808, label %strlen2.exit, label %809

; <label>:809                                     ; preds = %805
  %810 = getelementptr inbounds i8, i8* %ct, i64 25
  %811 = load i8, i8* %810, align 1
  %812 = icmp eq i8 %811, 0
  br i1 %812, label %strlen2.exit, label %813

; <label>:813                                     ; preds = %809
  %814 = getelementptr inbounds i8, i8* %ct, i64 26
  %815 = load i8, i8* %814, align 1
  %816 = icmp eq i8 %815, 0
  br i1 %816, label %strlen2.exit, label %817

; <label>:817                                     ; preds = %813
  %818 = getelementptr inbounds i8, i8* %ct, i64 27
  %819 = load i8, i8* %818, align 1
  %820 = icmp eq i8 %819, 0
  br i1 %820, label %strlen2.exit, label %821

; <label>:821                                     ; preds = %817
  %822 = getelementptr inbounds i8, i8* %ct, i64 28
  %823 = load i8, i8* %822, align 1
  %824 = icmp eq i8 %823, 0
  br i1 %824, label %strlen2.exit, label %825

; <label>:825                                     ; preds = %821
  %826 = getelementptr inbounds i8, i8* %ct, i64 29
  %827 = load i8, i8* %826, align 1
  %828 = icmp eq i8 %827, 0
  br i1 %828, label %strlen2.exit, label %829

; <label>:829                                     ; preds = %825
  %830 = getelementptr inbounds i8, i8* %ct, i64 30
  %831 = load i8, i8* %830, align 1
  %832 = icmp eq i8 %831, 0
  br i1 %832, label %strlen2.exit, label %833

; <label>:833                                     ; preds = %829
  %834 = getelementptr inbounds i8, i8* %ct, i64 31
  %835 = load i8, i8* %834, align 1
  %836 = icmp eq i8 %835, 0
  br i1 %836, label %strlen2.exit, label %837

; <label>:837                                     ; preds = %833
  %838 = getelementptr inbounds i8, i8* %ct, i64 32
  %839 = load i8, i8* %838, align 1
  %840 = icmp eq i8 %839, 0
  br i1 %840, label %strlen2.exit, label %841

; <label>:841                                     ; preds = %837
  %842 = getelementptr inbounds i8, i8* %ct, i64 33
  %843 = load i8, i8* %842, align 1
  %844 = icmp eq i8 %843, 0
  br i1 %844, label %strlen2.exit, label %845

; <label>:845                                     ; preds = %841
  %846 = getelementptr inbounds i8, i8* %ct, i64 34
  %847 = load i8, i8* %846, align 1
  %848 = icmp eq i8 %847, 0
  br i1 %848, label %strlen2.exit, label %849

; <label>:849                                     ; preds = %845
  %850 = getelementptr inbounds i8, i8* %ct, i64 35
  %851 = load i8, i8* %850, align 1
  %852 = icmp eq i8 %851, 0
  br i1 %852, label %strlen2.exit, label %853

; <label>:853                                     ; preds = %849
  %854 = getelementptr inbounds i8, i8* %ct, i64 36
  %855 = load i8, i8* %854, align 1
  %856 = icmp eq i8 %855, 0
  br i1 %856, label %strlen2.exit, label %857

; <label>:857                                     ; preds = %853
  %858 = getelementptr inbounds i8, i8* %ct, i64 37
  %859 = load i8, i8* %858, align 1
  %860 = icmp eq i8 %859, 0
  br i1 %860, label %strlen2.exit, label %861

; <label>:861                                     ; preds = %857
  %862 = getelementptr inbounds i8, i8* %ct, i64 38
  %863 = load i8, i8* %862, align 1
  %864 = icmp eq i8 %863, 0
  br i1 %864, label %strlen2.exit, label %865

; <label>:865                                     ; preds = %861
  %866 = getelementptr inbounds i8, i8* %ct, i64 39
  %867 = load i8, i8* %866, align 1
  %868 = icmp eq i8 %867, 0
  br i1 %868, label %strlen2.exit, label %869

; <label>:869                                     ; preds = %865
  %870 = getelementptr inbounds i8, i8* %ct, i64 40
  %871 = load i8, i8* %870, align 1
  %872 = icmp eq i8 %871, 0
  br i1 %872, label %strlen2.exit, label %873

; <label>:873                                     ; preds = %869
  %874 = getelementptr inbounds i8, i8* %ct, i64 41
  %875 = load i8, i8* %874, align 1
  %876 = icmp eq i8 %875, 0
  br i1 %876, label %strlen2.exit, label %877

; <label>:877                                     ; preds = %873
  %878 = getelementptr inbounds i8, i8* %ct, i64 42
  %879 = load i8, i8* %878, align 1
  %880 = icmp eq i8 %879, 0
  br i1 %880, label %strlen2.exit, label %881

; <label>:881                                     ; preds = %877
  %882 = getelementptr inbounds i8, i8* %ct, i64 43
  %883 = load i8, i8* %882, align 1
  %884 = icmp eq i8 %883, 0
  br i1 %884, label %strlen2.exit, label %885

; <label>:885                                     ; preds = %881
  %886 = getelementptr inbounds i8, i8* %ct, i64 44
  %887 = load i8, i8* %886, align 1
  %888 = icmp eq i8 %887, 0
  br i1 %888, label %strlen2.exit, label %889

; <label>:889                                     ; preds = %885
  %890 = getelementptr inbounds i8, i8* %ct, i64 45
  %891 = load i8, i8* %890, align 1
  %892 = icmp eq i8 %891, 0
  br i1 %892, label %strlen2.exit, label %893

; <label>:893                                     ; preds = %889
  %894 = getelementptr inbounds i8, i8* %ct, i64 46
  %895 = load i8, i8* %894, align 1
  %896 = icmp eq i8 %895, 0
  br i1 %896, label %strlen2.exit, label %897

; <label>:897                                     ; preds = %893
  %898 = getelementptr inbounds i8, i8* %ct, i64 47
  %899 = load i8, i8* %898, align 1
  %900 = icmp eq i8 %899, 0
  br i1 %900, label %strlen2.exit, label %901

; <label>:901                                     ; preds = %897
  %902 = getelementptr inbounds i8, i8* %ct, i64 48
  %903 = load i8, i8* %902, align 1
  %904 = icmp eq i8 %903, 0
  br i1 %904, label %strlen2.exit, label %905

; <label>:905                                     ; preds = %901
  %906 = getelementptr inbounds i8, i8* %ct, i64 49
  %907 = load i8, i8* %906, align 1
  %908 = icmp eq i8 %907, 0
  br i1 %908, label %strlen2.exit, label %909

; <label>:909                                     ; preds = %905
  %910 = getelementptr inbounds i8, i8* %ct, i64 50
  %911 = load i8, i8* %910, align 1
  %912 = icmp eq i8 %911, 0
  br i1 %912, label %strlen2.exit, label %7
}

attributes #0 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noreturn nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { norecurse nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readonly uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { norecurse nounwind readonly uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { norecurse nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { alwaysinline nounwind readonly uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { alwaysinline norecurse nounwind readonly uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn nounwind }
attributes #19 = { cold nounwind }
attributes #20 = { cold }
attributes #21 = { nounwind readnone }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0}

!0 = !{!"clang version 3.8.0-svn262614-1~exp1 (branches/release_38)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"omnipotent char", !3, i64 0}
!3 = !{!"Simple C/C++ TBAA"}
!4 = !{!5, !5, i64 0}
!5 = !{!"any pointer", !2, i64 0}
!6 = !{!7, !7, i64 0}
!7 = !{!"short", !2, i64 0}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !2, i64 0}
!10 = !{!11, !9, i64 0}
!11 = !{!"addrinfo", !9, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !5, i64 24, !5, i64 32, !5, i64 40}
!12 = !{!11, !9, i64 8}
!13 = !{!11, !9, i64 4}
!14 = !{!11, !9, i64 16}
!15 = !{!11, !5, i64 24}
!16 = !{!17, !17, i64 0}
!17 = !{!"long", !2, i64 0}
!18 = !{!19, !5, i64 0}
!19 = !{!"", !5, i64 0, !17, i64 8, !17, i64 16, !17, i64 24, !17, i64 32, !9, i64 40}
!20 = !{!19, !17, i64 8}
!21 = !{!19, !17, i64 16}
!22 = !{!23, !9, i64 0}
!23 = !{!"", !9, i64 0, !9, i64 4, !5, i64 8, !2, i64 16, !9, i64 56, !17, i64 64, !17, i64 72, !17, i64 80, !17, i64 88, !5, i64 96, !5, i64 104, !17, i64 112, !17, i64 120, !17, i64 128, !17, i64 136}
!24 = !{!23, !9, i64 4}
!25 = !{!23, !5, i64 8}
!26 = !{!27, !9, i64 72}
!27 = !{!"", !5, i64 0, !5, i64 8, !7, i64 16, !5, i64 24, !9, i64 32, !9, i64 36, !5, i64 40, !5, i64 48, !9, i64 56, !5, i64 64, !9, i64 72, !9, i64 76, !9, i64 80, !5, i64 88, !9, i64 96, !9, i64 100, !9, i64 104, !5, i64 112, !5, i64 120, !9, i64 128}
!28 = !{!29, !9, i64 0}
!29 = !{!"pollfd", !9, i64 0, !7, i64 4, !7, i64 6}
!30 = !{!29, !7, i64 4}
!31 = !{!27, !9, i64 76}
!32 = !{!27, !5, i64 88}
!33 = !{!34, !17, i64 32}
!34 = !{!"TimerStruct", !5, i64 0, !2, i64 8, !17, i64 16, !9, i64 24, !35, i64 32, !5, i64 48, !5, i64 56, !9, i64 64}
!35 = !{!"timeval", !17, i64 0, !17, i64 8}
!36 = !{!34, !17, i64 40}
!37 = !{!29, !7, i64 6}
!38 = !{!39, !9, i64 704}
!39 = !{!"", !9, i64 0, !5, i64 8, !2, i64 16, !5, i64 144, !17, i64 152, !17, i64 160, !17, i64 168, !9, i64 176, !9, i64 180, !9, i64 184, !17, i64 192, !17, i64 200, !5, i64 208, !5, i64 216, !5, i64 224, !5, i64 232, !5, i64 240, !5, i64 248, !5, i64 256, !5, i64 264, !5, i64 272, !5, i64 280, !5, i64 288, !5, i64 296, !5, i64 304, !5, i64 312, !5, i64 320, !5, i64 328, !5, i64 336, !5, i64 344, !5, i64 352, !5, i64 360, !5, i64 368, !17, i64 376, !17, i64 384, !17, i64 392, !17, i64 400, !17, i64 408, !17, i64 416, !17, i64 424, !17, i64 432, !17, i64 440, !17, i64 448, !17, i64 456, !17, i64 464, !17, i64 472, !17, i64 480, !17, i64 488, !17, i64 496, !5, i64 504, !5, i64 512, !9, i64 520, !9, i64 524, !9, i64 528, !9, i64 532, !17, i64 536, !17, i64 544, !9, i64 552, !9, i64 556, !40, i64 560, !9, i64 704, !5, i64 712}
!40 = !{!"stat", !17, i64 0, !17, i64 8, !17, i64 16, !9, i64 24, !9, i64 28, !9, i64 32, !9, i64 36, !17, i64 40, !17, i64 48, !17, i64 56, !17, i64 64, !41, i64 72, !41, i64 88, !41, i64 104, !2, i64 120}
!41 = !{!"timespec", !17, i64 0, !17, i64 8}
!42 = !{!39, !17, i64 160}
!43 = !{!39, !17, i64 152}
!44 = !{!39, !5, i64 144}
!45 = !{!35, !17, i64 0}
!46 = !{!23, !17, i64 88}
!47 = !{!23, !9, i64 56}
!48 = !{!39, !5, i64 240}
!49 = !{!19, !17, i64 24}
!50 = !{!19, !9, i64 40}
!51 = !{!23, !17, i64 64}
!52 = !{!23, !17, i64 72}
!53 = !{!39, !5, i64 208}
!54 = !{!39, !9, i64 528}
!55 = !{!39, !17, i64 536}
!56 = !{!23, !17, i64 136}
!57 = !{!39, !17, i64 544}
!58 = !{!23, !17, i64 128}
!59 = !{!39, !17, i64 192}
!60 = !{!39, !5, i64 712}
!61 = !{!39, !17, i64 200}
!62 = !{!19, !17, i64 32}
!63 = !{!23, !17, i64 80}
!64 = !{!23, !17, i64 112}
!65 = !{!39, !17, i64 472}
!66 = !{!39, !5, i64 368}
!67 = !{!68, !5, i64 0}
!68 = !{!"iovec", !5, i64 0, !17, i64 8}
!69 = !{!68, !17, i64 8}
!70 = !{!23, !5, i64 96}
!71 = !{!72, !17, i64 0}
!72 = !{!"rlimit", !17, i64 0, !17, i64 8}
!73 = !{!72, !17, i64 8}
!74 = distinct !{!74, !75}
!75 = !{!"llvm.loop.unroll.disable"}
!76 = !{!34, !5, i64 48}
!77 = !{!34, !5, i64 56}
!78 = !{!34, !9, i64 64}
!79 = !{!39, !5, i64 8}
!80 = !{!27, !9, i64 80}
!81 = !{!39, !5, i64 360}
!82 = !{!27, !9, i64 100}
!83 = !{!39, !9, i64 532}
!84 = !{!39, !5, i64 512}
!85 = !{!27, !5, i64 8}
!86 = !{!87, !17, i64 40}
!87 = !{!"tm", !9, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !9, i64 24, !9, i64 28, !9, i64 32, !17, i64 40, !5, i64 48}
!88 = !{!89, !7, i64 0}
!89 = !{!"sockaddr", !7, i64 0, !2, i64 2}
!90 = !{i32 -2146109532}
!91 = !{!39, !9, i64 180}
!92 = !{!39, !5, i64 224}
!93 = !{!39, !9, i64 184}
!94 = !{!39, !5, i64 272}
!95 = !{!39, !5, i64 280}
!96 = !{!40, !17, i64 8}
!97 = !{!40, !17, i64 0}
!98 = !{!40, !17, i64 48}
!99 = !{!40, !17, i64 104}
!100 = !{!101, !9, i64 56}
!101 = !{!"MapStruct", !17, i64 0, !17, i64 8, !17, i64 16, !17, i64 24, !9, i64 32, !17, i64 40, !5, i64 48, !9, i64 56, !9, i64 60, !5, i64 64}
!102 = !{!101, !17, i64 0}
!103 = !{!101, !17, i64 8}
!104 = !{!101, !17, i64 16}
!105 = !{!101, !17, i64 24}
!106 = !{!101, !5, i64 48}
!107 = !{!101, !9, i64 32}
!108 = !{!101, !17, i64 40}
!109 = !{!39, !9, i64 0}
!110 = !{!39, !5, i64 216}
!111 = !{!39, !5, i64 232}
!112 = !{!39, !5, i64 248}
!113 = !{!39, !5, i64 256}
!114 = !{!39, !5, i64 264}
!115 = !{!39, !5, i64 288}
!116 = !{!39, !5, i64 296}
!117 = !{!39, !5, i64 328}
!118 = !{!39, !5, i64 344}
!119 = !{!27, !5, i64 0}
!120 = !{!27, !5, i64 64}
!121 = !{!27, !5, i64 24}
!122 = !{!27, !5, i64 40}
!123 = !{!27, !5, i64 48}
!124 = !{!27, !5, i64 112}
!125 = !{!27, !5, i64 120}
!126 = !{!101, !5, i64 64}
!127 = !{!101, !9, i64 60}
!128 = !{!27, !9, i64 36}
!129 = !{!27, !7, i64 16}
!130 = !{!27, !9, i64 32}
!131 = !{!27, !9, i64 56}
!132 = !{!27, !9, i64 96}
!133 = !{!27, !9, i64 104}
!134 = !{!27, !9, i64 128}
!135 = !{!136, !5, i64 0}
!136 = !{!"mime_entry", !5, i64 0, !17, i64 8, !5, i64 16, !17, i64 24}
!137 = !{!136, !17, i64 8}
!138 = !{!136, !5, i64 16}
!139 = !{!136, !17, i64 24}
!140 = !{!34, !5, i64 0}
!141 = !{!34, !17, i64 16}
!142 = !{!34, !9, i64 24}
!143 = !{i64 0, i64 8, !16, i64 8, i64 8, !16}
!144 = !{!39, !9, i64 520}
!145 = !{!39, !17, i64 488}
!146 = !{!39, !17, i64 648}
!147 = !{!23, !5, i64 104}
!148 = !{!39, !9, i64 556}
!149 = !{!35, !17, i64 8}
!150 = !{!39, !5, i64 320}
!151 = !{!39, !5, i64 336}
!152 = !{!39, !5, i64 352}
!153 = !{!39, !9, i64 552}
!154 = !{!39, !17, i64 168}
!155 = !{!39, !9, i64 176}
!156 = !{!39, !9, i64 524}
!157 = !{!39, !5, i64 304}
!158 = !{!39, !17, i64 480}
!159 = !{!39, !5, i64 312}
!160 = !{!39, !17, i64 496}
!161 = !{!162, !5, i64 0}
!162 = !{!"strlong", !5, i64 0, !17, i64 8}
!163 = !{!162, !17, i64 8}
!164 = !{!39, !9, i64 584}
!165 = distinct !{!165, !75}
!166 = !{!40, !9, i64 24}
!167 = !{!40, !17, i64 88}
!168 = !{!40, !17, i64 16}
!169 = !{!39, !17, i64 608}
!170 = !{!39, !5, i64 504}
!171 = !{i64 0, i64 8, !16, i64 8, i64 8, !16, i64 16, i64 8, !16, i64 24, i64 4, !8, i64 28, i64 4, !8, i64 32, i64 4, !8, i64 36, i64 4, !8, i64 40, i64 8, !16, i64 48, i64 8, !16, i64 56, i64 8, !16, i64 64, i64 8, !16, i64 72, i64 8, !16, i64 80, i64 8, !16, i64 88, i64 8, !16, i64 96, i64 8, !16, i64 104, i64 8, !16, i64 112, i64 8, !16, i64 120, i64 24, !1}
