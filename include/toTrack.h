using namespace std;
using namespace llvm;
void getTrack(vector<string> & globs, vector<string> & funcs) {
  globs.push_back("debug");
  globs.push_back("no_control");
  globs.push_back("address_family");
  globs.push_back("local_address_family");
  globs.push_back("passphrase");
  globs.push_back("program");
  globs.push_back("command_line");
  globs.push_back("local_send_align");
  globs.push_back("local_recv_align");
  globs.push_back("remote_send_align");
  globs.push_back("remote_recv_align");
  globs.push_back("local_cpu_rate");
  globs.push_back("optind");
  globs.push_back("local_cpu_usage");
  globs.push_back("remote_cpu_rate");
  globs.push_back("remote_cpu_usage");
  globs.push_back("libfmt");
  globs.push_back("optarg");
  globs.push_back("iteration_max");
  globs.push_back("iteration_min");
  globs.push_back("confidence_level");
  globs.push_back("interval");
  globs.push_back("keep_histogram");
  globs.push_back("keep_statistics");
  globs.push_back("shell_num_cpus");
  globs.push_back("local_send_offset");
  globs.push_back("local_recv_offset");
  globs.push_back("remote_send_offset");
  globs.push_back("remote_recv_offset");
  globs.push_back("print_headers");
  globs.push_back("result_confidence_only");
  globs.push_back("want_keepalive");
  globs.push_back("wait_time_secs");
  globs.push_back("local_proc_affinity");
  globs.push_back("remote_proc_affinity");
  globs.push_back("cpu_binding_requested");
  globs.push_back("send_width");
  globs.push_back("recv_width");
  globs.push_back("local_socket_prio");
  globs.push_back("remote_socket_prio");
  globs.push_back("local_socket_tos");
  globs.push_back("remote_socket_tos");
  globs.push_back("where");
  globs.push_back("test_time");
  globs.push_back("test_name");
  globs.push_back("test_trans");
  globs.push_back("test_bytes");
  globs.push_back("verbosity");
  globs.push_back("remote_interval_usecs");
  globs.push_back("remote_interval_burst");
  globs.push_back("result_brand");
  globs.push_back("routing_allowed");
  globs.push_back("remote_data_family");
  globs.push_back("local_data_family");
  globs.push_back("first_burst_size");
  globs.push_back("loc_tcpcork");
  globs.push_back("rem_tcpcork");
  globs.push_back("loc_nodelay");
  globs.push_back("rem_nodelay");
  globs.push_back("remote_data_address");
  globs.push_back("local_data_address");
  globs.push_back("lss_size_req");
  globs.push_back("lsr_size_req");
  globs.push_back("rss_size_req");
  globs.push_back("rsr_size_req");
  globs.push_back("req_size");
  globs.push_back("rsp_size");
  globs.push_back("send_size");
  globs.push_back("recv_size");
  globs.push_back("local_connected");
  globs.push_back("remote_connected");
  globs.push_back("client_port_min");
  globs.push_back("client_port_max");
  globs.push_back("loc_sndavoid");
  globs.push_back("loc_rcvavoid");
  globs.push_back("rem_sndavoid");
  globs.push_back("rem_rcvavoid");
  globs.push_back("connection_test");
  globs.push_back("was_legacy");
  globs.push_back("direction");
  globs.push_back("implicit_direction");
  globs.push_back("transport_mss_req");
  globs.push_back("explicit_data_address");
  globs.push_back("remote_mask_len");
  globs.push_back("netperf_output_mode");
  globs.push_back("legacy");
  globs.push_back("output_selection_spec");
  globs.push_back("multicast_ttl");
  globs.push_back("local_mask_len");
  globs.push_back("remote_send_size_req");
  globs.push_back("remote_recv_size_req");
  globs.push_back("client_port_min.437");
  globs.push_back("client_port_max.436");
  globs.push_back("socket_type");
  globs.push_back("protocol");
  globs.push_back("protocol_str");
  globs.push_back("direction_str");
  globs.push_back("thruput_format_str");
  globs.push_back("desired_output_groups");
  funcs.push_back("main");
  funcs.push_back("scan_cmd_line");
  // funcs.push_back("break_args");
  funcs.push_back("break_args_explicit");
  funcs.push_back("break_args_explicit_sep");
  funcs.push_back("convert");
  funcs.push_back("scan_sockets_args");
  funcs.push_back("scan_omni_args");
  funcs.push_back("parse_direction");
  funcs.push_back("parse_socket_type");
  funcs.push_back("parse_protocol");
  funcs.push_back("parse_ipqos");
  funcs.push_back("parse_address_family");
  funcs.push_back("convert_timespec");
  funcs.push_back("resolve_host");
  funcs.push_back("establish_control");
  funcs.push_back("set_output_elt");
  funcs.push_back("send_omni_inner");
  funcs.push_back("send_tcp_cc");
  funcs.push_back("send_tcp_mss");
  funcs.push_back("sendfile_tcp_stream");
  funcs.push_back("calibrate_local_cpu");
  funcs.push_back("cpu_start");
  funcs.push_back("cpu_stop");
  funcs.push_back("send_tcp_rr");
  funcs.push_back("confid");
  funcs.push_back("bind_to_specific_processor");
  funcs.push_back("send_request_n");
  funcs.push_back("create_data_socket");
  funcs.push_back("set_socket_tos");
  funcs.push_back("dump_addrinfo");
  funcs.push_back("dump_netperf_output_source");
  funcs.push_back("start_timer");
  funcs.push_back("complete_addrinfos");
  funcs.push_back("complete_addrinfo");
  funcs.push_back("set_sock_buffer");
  funcs.push_back("set_omni_defaults_by_legacy_testname");
  funcs.push_back("choose_send_size");
  funcs.push_back("recv_data");
  funcs.push_back("direction_to_str");
  funcs.push_back("set_tcp_mss");
  funcs.push_back("random_ip_address");
  funcs.push_back("parse_output_selection");
  funcs.push_back("match_string_to_output_mnenomic");
  funcs.push_back("parse_output_selection_direct");
  funcs.push_back("parse_output_selection_file");
  funcs.push_back("set_multicast_ttl");
  funcs.push_back("join_multicast_addr");
  funcs.push_back("hst_to_str");
  funcs.push_back("hst_to_nst");
  funcs.push_back("protocol_to_str");
  funcs.push_back("set_output_list_all");
  funcs.push_back("parse_output_selection_line");
}

